-- Starry's todo list
-- test spliting out region, understand what is necessary and consider switching away from the table returning everything if it works
-- mineRingShim while allowing nice things with complex defences (see research base) deserves looking at some more to see about simplifcation, at least for the common case, if there is no obvious improvement document it better at least
-- consider looking trying to improve player ship creation, with the new invaraints offered by onNewPlayerShip, at least try to suggest a way that only needs 2 editing points for new ships rather than 3
-- try to merge in a for the rift devices at long last (getting closer with the update system but still a way off)
-- look at how onGMClick has been used and pick one of improve on gm click | improve sandbox code
-- eris at long last

-- ideas:	Fighter launching defense platform, enemy death blossom, tactical hop should factor in engine health level
--			Try not to update custom widgets every frame

-- addCustomButton indexes
-- Relay, Operations			Probes: standard		10
-- Relay, Operations			Patrol Probe Off		10
-- Helm, Tactical				Waypoint distance 		15
-- Helm, Tactical				Dock with name			18
-- Weapons, Tactical			Trigger EPJAM			14
-- Weapons, Tactical			Start Mining			11
-- Weapons, Tactical			Launch (fighter name)	12
-- Weapons, Tactical			Turbo Torpedo			13
-- Weapons, Tactical			Trigger missile			45-48
-- Weapons, Tactical			Balance Shield			49
-- Weapons, Tactical			Focus Front Shield		50
-- Weapons, Tactical			Focus Rear Shield		50
-- Engineering, Engineering+	Pod Prep				sequence (100 - 200)
-- Engineering, Engineering+	Check Additive			41
-- Engineering, Engineering+	Lock on Tractor			13
-- Engineering, Engineering+	Target blah				14
-- Engineering, Engineering+	Other tractor target	15
-- Engineering, Engineering+	Damage Report			20
-- Engineering, Engineering+	Max Health				21
-- Engineering, Engineering+	Boost Sensors			30
-- Engineering, Engineering+	Sensor Boost level		31-33
-- Engineering, Engineering+	Stop Sensor Boost		30
-- Engineering, Engineering+	Disengage Tractor		16
-- Engineering, Engineering+	Charge Launch Sys		17
-- Engineering, Engineering+	Get Coolant				24
-- Engineering, Engineering+	Level Coolant			26
-- Science, Operations			Lock for Mining			20
-- Science, Operations			Target Asteroid			21
-- Science, Operations			Other mining target		22
-- Relay, Operations			Probe type cycle		10
-- Relay, Operations			Pod telemetry			19
-- Relay, Operations			Inventory				23
-- Relay, Operations			Security Report			42
-- All							Notify security			35
-- All							Activate Defenses		36

-- addCustomInfo indexes
-- Relay, Operations			Launch timer			1
-- Relay, Operations			Fast Dock Expired		2
-- Relay, Operations			Expedite timer			2
-- Weapons, Tactical			Mining blah				3
-- Engineering, Engineering+	Auto-cool/repair		4
-- Engineering, Engineering+	Gather coolant status	5
-- Engineering, Engineering+	Shields	banner			7
-- Engineering, Engineering+	Hull banner				8
-- Helm, Tactical				fighter dock banner		5
-- Helm, Tactical				jump overcharge			6
-- Helm, Tactical				Sensor lock				8
-- Helm, Tactical				Weapons lock			9
-- Helm, Tactical				Missile lock			10

require("utils.lua")
require("sandbox/errorHandling.lua")
require("sandbox/science_database.lua")
require("utils_customElements.lua")
require("sandbox/extraMath.lua")
require("sandbox/library.lua")
--	scenario also needs border_defend_station.lua
function init()
	print("Empty Epsilon version: ",getEEVersion())
	scenario_version = "8.1.1"
	ee_version = "2024.12.08"
	print(string.format("   ---   Scenario: Sandbox   ---   Version %s   ---   Tested with EE version %s   ---",scenario_version,ee_version))
	if _VERSION ~= nil then
		print("Lua version",_VERSION)	--Lua version
	end
	ECS = false
	if createEntity then
		ECS = true
	end
	updateDiagnostic = false
	healthDiagnostic = false
	specialty_probe_diagnostic = false
	change_enemy_order_diagnostic = false
	magnasol_nebula_diagnostic = false
	distance_diagnostic = false
	commerce_diagnostic = false
	mine_probe_diagnostic = true
	med_point_diagnostic = false
	mirrorUniverse = false
	addFactions()
	setConstants()
	onNewPlayerShip(assignPlayerShipScore)
	initialGMFunctions()
	createSkeletonUniverse()
	applySettings()
	runAllTests()
end
function isObjectType(obj,typ,qualifier)
	if obj ~= nil and obj:isValid() then
		if typ ~= nil then
			if ECS then
				if typ == "SpaceStation" then
					return obj.components.docking_bay and obj.components.physics and obj.components.physics.type == "static"
				elseif typ == "PlayerSpaceship" then
					return obj.components.player_control
				elseif typ == "ScanProbe" then
					return obj.components.allow_radar_link
				elseif typ == "CpuShip" then
					return obj.ai_controller
				elseif typ == "Asteroid" then
					return obj.components.mesh_render and string.sub(obj.components.mesh_render.mesh, 7) == "Astroid"
				elseif typ == "Nebula" then
					return obj.components.nebula_renderer
				elseif typ == "Planet" then
					return obj.components.planet_render
				elseif typ == "SupplyDrop" then
					return obj.components.pickup and obj.components.radar_trace.icon == "radar/blip.png" and obj.components.radar_trace.color_by_faction
				elseif typ == "BlackHole" then
					return obj.components.gravity and obj.components.billboard_render.texture == "blackHole3d.png"
				elseif typ == "WarpJammer" then
					return obj.components.warp_jammer
				elseif typ == "Mine" then
					return obj.components.delayed_explode_on_touch and obj.components.constant_particle_emitter
				elseif typ == "EMPMissile" then
					return obj.components.radar_trace.icon == "radar/missile.png" and obj.components.explode_on_touch.damage_type == "emp"
				elseif typ == "Nuke" then
					return obj.components.radar_trace.icon == "radar/missile.png" and obj.components.explosion_sfx == "sfx/nuke_explosion.wav"
				elseif typ == "Zone" then
					return obj.components.zone
				else
					if qualifier == "MovingMissile" then
						if typ == "HomingMissile" or typ == "HVLI" or typ == "Nuke" or typ == "EMPMissile" then
							return obj.components.radar_trace.icon == "radar/missile.png"
						else
							return false
						end
					elseif qualifier == "SplashMissile" then
						if typ == "Nuke" or typ == "EMPMissile" then
							if obj.components.radar_trace.icon == "radar/missile.png" then
								if typ == "Nuke" then
									return obj.components.explosion_sfx == "sfx/nuke_explosion.wav"
								else	--EMP
									return obj.components.explode_on_touch.damage_type == "emp"
								end
							else
								return false
							end
						else
							return false
						end
					else
						return false
					end
				end
			else
				return obj.typeName == typ
			end
		else
			return false
		end
	else
		return false
	end
end

function applySettings()
	if getScenarioSetting("Mirror") == "Yes" then
		convertToMirror()
	end
	local start_region = getScenarioSetting("Start Region")
	for i=1,#universe.available_regions do
		local region=universe.available_regions[i]
		if string.find(region.name,start_region) then
			playerSpawnX=region.spawn_x
			playerSpawnY=region.spawn_y
			universe:spawnRegion(region)
			startRegion=region.name
			break
		end
	end
	if getScenarioSetting("Warning") == "Off" then
		automated_station_danger_warning = false
		warning_includes_ship_type = false
	else
		automated_station_danger_warning = true
		if getScenarioSetting("Warning") == "On With Ship Type" then
			warning_includes_ship_type = true
		else
			warning_includes_ship_type = false
		end
	end	
	station_sensor_range = getScenarioSetting("Warn Proximity") * 1000
	if getScenarioSetting("Jump Corridor") == "On" then
		jump_corridor = true
	else
		jump_corridor = false
	end
	ship_enhancement_factor = getScenarioSetting("Special Factor")
end
function setConstants()
	comms_fudge = .2
	difficulty = 1
	customElements:modifyOperatorPositions("name_tag_positions",{"Relay","Operations","ShipLog","Helms","Tactical","Engineering","Engineering+"})
	universe=universe()
	update_system=updateSystem:create()
	playerFleet=fleetCustom:create()
	update_edit_object=nil
	universe:addAvailableRegion("Icarus (F5)",icarusSector,0,0)
	universe:addAvailableRegion("Riptide Binary (G-35)", riptideBinarySector,-780000, 20000)
	universe:addAvailableRegion("Kentar (R17)",kentarSector,250000,250000)
	universe:addAvailableRegion("Eris (WIP)",function() return erisSector(390000,210000) end,-390000, 210000)
	--Original in the midst of the ghosts near Astron spawn point: 586367, 296408
	universe:addAvailableRegion("Astron (U33)",function() return ghostNebulaSector() end, 460500, 320500) -- there was an alternate spawn location of 545336,292452, inital spawn location seems to not work eh I will look at it later - starry
	universe:addAvailableRegion("Lafrina (T-8)",lafrinaSector,-237666,296975)
	universe:addAvailableRegion("Teresh (K44)",tereshSector,800001,120001)
	universe:addAvailableRegion("Bask (R56)",baskSector,1027800,251000)
	universe:addAvailableRegion("Staunch (AR12)",staunchSector,153668,775877)
	universe:addAvailableRegion("Glikton (zf25)",gliktonSector,407073,-502604)
	universe:addAvailableRegion("Santa Containment(J41)",santaContainment,754554, 64620)-- probably worth considering as temporary
	universe:addAvailableRegion("FilkRoad (zj-12).", filkRoadSector, -323500, -431000)
	initialSandboxDatabaseUpdate()
	playerSpawnX = 0
	playerSpawnY = 0
	prefix_length = 0
	suffix_index = 0
	startRegion = "Icarus (F5)"
	icarus_color = false
	kentar_color = false
	individual_ship = "Gnat"
	fleetSpawnFaction = "Exuari"
	fleetStrengthFixed = false
	fleetStrengthFixedValue = 250
	fleetStrengthByPlayerStrength = 1
	fleetComposition = "Random"
	fleetOrders = "Stand Ground"
	fleetSpawnLocation = "At Click"
	fleetSpawnRelativeDirection = "Random Direction"
	fleetSpawnAwayDirection = "90"
	fleetSpawnAwayDistance = 60
	fleet_spawn_type = "relative"
	createDirection = 90
	createDistance = 30
	fleetAmbushDistance = 5
	fleetChange = "unmodified"
	fleetChangeChance = 20
	fleet_list = {}
	existing_fleet_order = "Roaming"
	enemy_reverts = {}
	revert_timer_interval = 15
	revert_timer = revert_timer_interval
	plotRevert = revertWait
	cleanUpDropPoints = cleanUpMarinePoints
	tractor_sound = "sfx/emp_explosion.wav"
	tractor_sound_power = .25
	sensor_impact = 1	--normal
	ship_enhancement_factor = 1		--1 is normal (rare)
	enhancement_warning_message = true
	spiky_spin_ships = {}
	impulse_boost_degree_factors = {1.5,1.75,2,2.5,3}
	impulse_boost_time_factors = {3,5,8,13,21,34}
	impulse_boost_ships = {}
	beam_factors = {1,2,3,5,8,13,21}
	pdc_factors = {20,30,50,75,90}
	pdc_ships = {}
	cyber_attack_factors = {30, 50, 75, 90, 100}
	cyber_attack_intervals = {20, 40, 60, 80, 100}
	cyber_attack_ships = {}
	anomalous_nebulae = {}
	immobile_stations = {}
	missile_types = {'Homing', 'Nuke', 'Mine', 'EMP', 'HVLI'}
	system_list = {
		"reactor",
		"beamweapons",
		"missilesystem",
		"maneuver",
		"impulse",
		"warp",
		"jumpdrive",
		"frontshield",
		"rearshield",
	}
	coolant_losses = {
		["Lo"] = {val = .99999,	desc = "May cause low level coolant leakage"},			--easy
		["Md"] = {val = .99995,	desc = "May cause coolant leakage"},					--normal
		["Hi"] = {val = .9999,	desc = "May cause high rates of coolant leakage"},		--hard
		["Sv"] = {val = .999,	desc = "May cause severe rates of coolant leakage"},	--quixotic
	}
	coolant_loss_name = "Md"
	coolant_loss = coolant_losses[coolant_loss_name].val
	coolant_gains = {
		["Lo"] = {val = .0001,	desc = "May gain low amounts of coolant"},		--hard
		["Md"] = {val = .001,	desc = "May gain coolant"},						--normal
		["Hi"] = {val = .01,	desc = "May gain high amounts of coolant"},		--easy
	}
	coolant_gain_name = "Md"
	coolant_gain = coolant_gains[coolant_gain_name].val
	beam_range_losses = {
		["Lo"] = {val = .8,	desc = "May slightly reduce beam range"},			
		["Md"] = {val = .7,	desc = "May reduce beam range"},					
		["Hi"] = {val = .6,	desc = "May significantly reduce beam range"},		
		["Sv"] = {val = .5,	desc = "May severely reduce beam range"},			
	}
	beam_range_loss_name = "Md"
	beam_range_loss = beam_range_losses[beam_range_loss_name].val
	beam_range_gains = {
		["Lo"] = {val = 1.1,	desc = "May slightly increase beam range"},				
		["Md"] = {val = 1.25,	desc = "May increase beam range"},						
		["Hi"] = {val = 1.4,	desc = "May significantly increase beam range"},		
	}
	beam_range_gain_name = "Md"
	beam_range_gain = beam_range_gains[beam_range_gain_name].val
	shield_losses = {
		["Lo"] = {val = .99999,	desc = "May cause low rates of shield charge loss"},	
		["Md"] = {val = .99995,	desc = "May cause shield charge loss"},					
		["Hi"] = {val = .9999,	desc = "May cause high rates of shield charge loss"},	
		["Sv"] = {val = .999,	desc = "May cause severe rates of shield charge loss"},	
	}
	shield_loss_name = "Md"
	shield_loss = shield_losses[shield_loss_name].val
	shield_gains = {
		["Lo"] = {val = 1.000005,	desc = "May slightly increase shield charge"},		
		["Md"] = {val = 1.00005,	desc = "May increase shield charge"},				
		["Hi"] = {val = 1.0005,		desc = "May significantly increase shield charge"},	
	}
	shield_gain_name = "Md"
	shield_gain = shield_gains[shield_gain_name].val


	ship_template = {	--ordered by relative strength
		-- unarmed
		["Courier"] =			{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1000,	create = courier},
		["Laden Lorry"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 4000,	hop_angle = 0,	hop_range = 1000,	create = ladenLorry},
		["Omnibus"] =			{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1000,	create = omnibus},
		["Physics Research"] =	{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 1000,	create = physicsResearch},
		["Service Jonque"] =	{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 4500,	hop_angle = 0,	hop_range = 1000,	create = serviceJonque},
		["Space Sedan"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = spaceSedan},
		["Work Wagon"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1000,	create = workWagon},
		-- unusual
		["OClock Beam"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = beamOverclocker},
		["OClock Engine"] = 	{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = engineOverclocker},
		["OClock Shield"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = shieldOverclocker},
--		["OClock Orbit"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = orbiterOverclocker},
		["OClock Boss"] =		{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = overclockOptimizer},
--		["Orbit Rock"] =		{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = asteroidOrbiter},
--		["Orbit Mine"] = 		{strength = 30,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = mineOrbiter},
		["Leech Sat"] =		 	{strength = 80,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = leech},
		["Command Base"] =		{strength = 50,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = true,	short_range_radar = 10000,	hop_angle = 0,	hop_range = 1000,	create = commandBase},
		["Military Outpost"] =	{strength = 50,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = true,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1000,	create = militaryOutpost},
		["Sniper Tower"] =		{strength = 50,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = true,	short_range_radar = 7000,	hop_angle = 0,	hop_range = 1000,	create = sniperTower},
		["Missile Pod D1"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = missilePodD1},
		["Missile Pod D2"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = missilePodD2},
		["Missile Pod D4"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = missilePodD4},
		["Missile Pod T1"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1000,	create = missilePodT1},
		["Missile Pod T2"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1000,	create = missilePodT2},
		["Missile Pod TI2"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1000,	create = missilePodTI2},
		["Missile Pod TI4"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1000,	create = missilePodTI4},
		["Missile Pod TI8"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 4500,	hop_angle = 0,	hop_range = 1000,	create = missilePodTI8},
		["Missile Pod TX4"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1000,	create = missilePodTX4},
		["Missile Pod TX8"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1000,	create = missilePodTX8},
		["Missile Pod TX16"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 4500,	hop_angle = 0,	hop_range = 1000,	create = missilePodTX16},
		["Missile Pod S1"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 1000,	create = missilePodS1},
		["Missile Pod S4"] =	{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 1000,	create = missilePodS4},
		["Transport"] =			{strength = 1,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 1000,	create = auxiliaryCruiser},
		["Equipment Freighter 3"] =	{strength = 1, adder = false, missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = true,		base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1000,	create = stockTemplate},
		-- normal ships that are part of the fleet spawn process
		["Gnat"] =				{strength = 2,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true,		drone = true,	unusual = false,	base = false,	short_range_radar = 4500,	hop_angle = 0,	hop_range = 580,	create = gnat},
		["Lite Drone"] =		{strength = 3,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = true,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = droneLite},
		["Jacket Drone"] =		{strength = 4,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = true,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = droneJacket},
		["Ktlitan Drone"] =		{strength = 4,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = true,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Heavy Drone"] =		{strength = 5,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = true,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 580,	create = droneHeavy},
		["Adder MK3"] =			{strength = 5,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["MT52 Hornet"] =		{strength = 5,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 680,	create = stockTemplate},
		["MU52 Hornet"] =		{strength = 5,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 880,	create = stockTemplate},
		["Dagger"] =			{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["MV52 Hornet"] =		{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = hornetMV52},
		["MT55 Hornet"] =		{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 680,	create = hornetMT55},
		["Adder MK4"] =			{strength = 6,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Fighter"] =			{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Shepherd"] =			{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 2880,	create = shepherd},
		["Ktlitan Fighter"] =	{strength = 6,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Touchy"] =			{strength = 7,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 2000,	create = touchy},
		["MU55 Hornet"] =		{strength = 7,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 880,	create = hornetMU55},
		["Blade"] =				{strength = 7,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Gunner"] =			{strength = 7,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["K2 Fighter"] =		{strength = 7,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = k2fighter},
		["Adder MK5"] =			{strength = 7,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["WX-Lindworm"] =		{strength = 7,	adder = false,	missiler = true,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["K3 Fighter"] =		{strength = 8,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = k3fighter},
		["Shooter"] =			{strength = 8,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Jagger"] =			{strength = 8,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Adder MK6"] =			{strength = 8,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Ktlitan Scout"] =		{strength = 8,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 7000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["WZ-Lindworm"] =		{strength = 9,	adder = false,	missiler = true,	beamer = false,	frigate = false,	chaser = false,	fighter = true, 	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 2500,	create = wzLindworm},
		["Adder MK7"] =			{strength = 9,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Brush"] =				{strength = 10,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = brush},
		["Adder MK8"] =			{strength = 10,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Adder MK9"] =			{strength = 11,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Nirvana R3"] =		{strength = 12,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Broom"] =				{strength = 13,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = broom},
		["Phobos R2"] =			{strength = 13,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = phobosR2},
		["Missile Cruiser"] =	{strength = 14,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 7000,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["Waddle 5"] =			{strength = 15,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = waddle5},
		["Jade 5"] =			{strength = 15,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = jade5},
		["Phobos T3"] =			{strength = 15,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Guard"] =				{strength = 15,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Piranha F8"] =		{strength = 15,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = stockTemplate},
		["Piranha F12"] =		{strength = 15,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = stockTemplate},
		["Piranha F12.M"] =		{strength = 16,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = stockTemplate},
		["Phobos M3"] =			{strength = 16,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Farco 3"] =			{strength = 16,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1480,	create = farco3},
		["Farco 5"] =			{strength = 16,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1180,	create = farco5},
		["Karnack"] =			{strength = 17,	adder = false,	missiler = false,	beamer = true,	frigate = true,		chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Gunship"] =			{strength = 17,	adder = false,	missiler = false,	beamer = false,	frigate = true,		chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Sweeper"] =			{strength = 17,	adder = true,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = sweeper},
		["Phobos T4"] =			{strength = 18,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1480,	create = phobosT4},
		["Cruiser"] =			{strength = 18,	adder = true,	missiler = false,	beamer = true,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Nirvana R5"] =		{strength = 19,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Farco 8"] =			{strength = 19,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1480,	create = farco8},
		["Nirvana R5A"] =		{strength = 20,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Adv. Gunship"] =		{strength = 20,	adder = false,	missiler = false,	beamer = false,	frigate = true,		chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 7000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Ktlitan Worker"] =	{strength = 20,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 90,	hop_range = 580,	create = stockTemplate},
		["Piranha F10"] =		{strength = 21,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = piranhaF10},
		["Farco 11"] =			{strength = 21,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1480,	create = farco11},
		["Storm"] =				{strength = 22,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Warden"] =			{strength = 22,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Racer"] =				{strength = 22,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Stalker R5"] =		{strength = 22,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stalkerR5},
		["Stalker Q5"] =		{strength = 22,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stalkerQ5},
		["Strike"] =			{strength = 23,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Dash"] =				{strength = 23,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Farco 13"] =			{strength = 24,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1480,	create = farco13},
		["Sentinel"] =			{strength = 24,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1180,	create = stockTemplate},
		["Ranus U"] =			{strength = 25,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["Flash"] =				{strength = 25,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["Ranger"] =			{strength = 25,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["Buster"] =			{strength = 25,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 2500,	create = stockTemplate},
		["Stalker Q7"] =		{strength = 25,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Stalker R7"] =		{strength = 25,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Whirlwind"] =			{strength = 26,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = whirlwind},
		["Hunter"] =			{strength = 26,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Adv. Striker"] =		{strength = 27,	adder = false,	missiler = false,	beamer = true,	frigate = true,		chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Nirvana R8"] =		{strength = 27,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1480,	create = nirvanaR8},
		["Elara P2"] =			{strength = 28,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 0,	hop_range = 1480,	create = elaraP2},
		["Tempest"] =			{strength = 30,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 90,	hop_range = 2500,	create = tempest},
		["Strikeship"] =		{strength = 30,	adder = false,	missiler = false,	beamer = true,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Munemi"] =			{strength = 32,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 2500,	create = munemi},
		["Fiend G3"] =			{strength = 33,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 980,	create = fiendG3},
		["Maniapak"] =			{strength = 34,	adder = true,	missiler = false,	beamer = false,	frigate = false, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 580,	create = maniapak},
		["Fiend G4"] =			{strength = 35,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 980,	create = fiendG4},
		["Cucaracha"] =			{strength = 36,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 1480,	create = cucaracha},
		["Fiend G5"] =			{strength = 37,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 980,	create = fiendG5},
		["Mikado"] =			{strength = 38,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 0,	hop_range = 1180,	create = mikado},
		["Fiend G6"] =			{strength = 39,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6500,	hop_angle = 0,	hop_range = 980,	create = fiendG6},
		["Barracuda"] =			{strength = 40,	adder = false,	missiler = false,	beamer = false,	frigate = true,		chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1180,	create = barracuda},
		["Ryder"] =				{strength = 41, adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8000,	hop_angle = 90,	hop_range = 1180,	create = stockTemplate},
		["Predator"] =			{strength = 42,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 7500,	hop_angle = 0,	hop_range = 980,	create = predator},
		["Predator V2"] =		{strength = 43,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 8500,	hop_angle = 0,	hop_range = 980,	create = predatorV2},
		
		["Diva"] =				{strength = 44,	adder = false,	missiler = true,	beamer = false,	frigate = false, 	chaser = false,	fighter = false,	drone = false,	unusual = true,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 2500,	create = diva},
		["Tsarina"] =			{strength = 44,	adder = false,	missiler = true,	beamer = false,	frigate = false, 	chaser = false,	fighter = false,	drone = false,	unusual = true,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 2500,	create = tsarina},
		["Brood Mother"] =		{strength = 44,	adder = false,	missiler = true,	beamer = false,	frigate = false, 	chaser = false,	fighter = false,	drone = false,	unusual = true,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 2500,	create = broodMother},
		
		["Ktlitan Breaker"] =	{strength = 45,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 780,	create = stockTemplate},
		["Hurricane"] =			{strength = 46,	adder = false,	missiler = true,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 6000,	hop_angle = 15,	hop_range = 2500,	create = hurricane},
		["Beast Breaker"] =		{strength = 47,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 780,	create = beastBreaker},
		["Ktlitan Feeder"] =	{strength = 48,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = stockTemplate},
		["Atlantis X23"] =		{strength = 50,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 10000,	hop_angle = 0,	hop_range = 1480,	create = stockTemplate},
		["Ktlitan Destroyer"] =	{strength = 50,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Foul Feeder"] =		{strength = 52,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 580,	create = foulFeeder},
		["K2 Breaker"] =		{strength = 55,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5000,	hop_angle = 0,	hop_range = 780,	create = k2breaker},
		["Atlantis Y42"] =		{strength = 60,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 10000,	hop_angle = 0,	hop_range = 1480,	create = atlantisY42},
		["Blockade Runner"] =	{strength = 63,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Supervisor"] =		{strength = 68,	adder = false,	missiler = false,	beamer = true,	frigate = true,		chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 980,	create = supervisor},
		["Starhammer II"] =		{strength = 70,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 10000,	hop_angle = 0,	hop_range = 1480,	create = stockTemplate},
		["Enforcer"] =			{strength = 75,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 1480,	create = enforcer},
		["Gulper"] =			{strength = 77,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 12000,	hop_angle = 0,	hop_range = 1480,	create = gulper},
		["Dreadnought"] =		{strength = 80,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9000,	hop_angle = 0,	hop_range = 980,	create = stockTemplate},
		["Enforcer V2"] =		{strength = 83,	adder = false,	missiler = false,	beamer = false,	frigate = true, 	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9500,	hop_angle = 0,	hop_range = 1280,	create = enforcerV2},
		["Starhammer III"] =	{strength = 85,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 12000,	hop_angle = 0,	hop_range = 1480,	create = starhammerIII},
		["Dread No More"] =		{strength = 87,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9500,	hop_angle = 0,	hop_range = 980,	create = dreadNoMore},
		["Starhammer V"] =		{strength = 90,	adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 15000,	hop_angle = 0,	hop_range = 1480,	create = starhammerV},
		["Strongarm"] =			{strength = 95,	adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = false,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 5500,	hop_angle = 0,	hop_range = 1480,	create = strongarm},
		["Battlestation"] =		{strength = 100,adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9000,	hop_angle = 90,	hop_range = 2480,	create = stockTemplate},
		["Fortress"] =			{strength = 130,adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9000,	hop_angle = 90,	hop_range = 2380,	create = stockTemplate},
		["Tyr"] =				{strength = 150,adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9500,	hop_angle = 90,	hop_range = 2480,	create = tyr},
		["Prador"] =			{strength = 160,adder = false,	missiler = false,	beamer = true,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 9500,	hop_angle = 0,	hop_range = 2480,	create = prador},
		["Odin"] =				{strength = 250,adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 20000,	hop_angle = 0,	hop_range = 3180,	create = stockTemplate},
		["Loki"] =				{strength = 260,adder = false,	missiler = false,	beamer = false,	frigate = false,	chaser = true,	fighter = false,	drone = false,	unusual = false,	base = false,	short_range_radar = 20000,	hop_angle = 0,	hop_range = 3180,	create = loki},
	}
	fleet_group = {
		["adder"] = "Adders",
		["Adders"] = "adder",
		["missiler"] = "Missilers",
		["Missilers"] = "missiler",
		["beamer"] = "Beamers",
		["Beamers"] = "beamer",
		["frigate"] = "Frigates",
		["Frigates"] = "frigate",
		["chaser"] = "Chasers",
		["Chasers"] = "chaser",
		["fighter"] = "Fighters",
		["Fighters"] = "fighter",
		["drone"] = "Drones",
		["Drones"] = "drone",
	}
	pool_selectivity = "full"
	template_pool_size = 5
	formation_delta = {
		["square"] = {
			x = {0,1,0,-1, 0,1,-1, 1,-1,2,0,-2, 0,2,-2, 2,-2,2, 2,-2,-2,1,-1, 1,-1,0, 0,3,-3,1, 1,3,-3,-1,-1, 3,-3,2, 2,3,-3,-2,-2, 3,-3,3, 3,-3,-3,4,0,-4, 0,4,-4, 4,-4,-4,-4,-4,-4,-4,-4,4, 4,4, 4,4, 4, 1,-1, 2,-2, 3,-3,1,-1,2,-2,3,-3,5,-5,0, 0,5, 5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,5, 5,5, 5,5, 5,5, 5, 1,-1, 2,-2, 3,-3, 4,-4,1,-1,2,-2,3,-3,4,-4},
			y = {0,0,1, 0,-1,1,-1,-1, 1,0,2, 0,-2,2,-2,-2, 2,1,-1, 1,-1,2, 2,-2,-2,3,-3,0, 0,3,-3,1, 1, 3,-3,-1,-1,3,-3,2, 2, 3,-3,-2,-2,3,-3, 3,-3,0,4, 0,-4,4,-4,-4, 4, 1,-1, 2,-2, 3,-3,1,-1,2,-2,3,-3,-4,-4,-4,-4,-4,-4,4, 4,4, 4,4, 4,0, 0,5,-5,5,-5, 5,-5, 1,-1, 2,-2, 3,-3, 4,-4,1,-1,2,-2,3,-3,4,-4,-5,-5,-5,-5,-5,-5,-5,-5,5, 5,5, 5,5, 5,5, 5},
		},
		["hexagonal"] = {
			x = {0,2,-2,1,-1, 1,-1,4,-4,0, 0,2,-2,-2, 2,3,-3, 3,-3,6,-6,1,-1, 1,-1,3,-3, 3,-3,4,-4, 4,-4,5,-5, 5,-5,8,-8,4,-4, 4,-4,5,5 ,-5,-5,2, 2,-2,-2,0, 0,6, 6,-6,-6,7, 7,-7,-7,10,-10,5, 5,-5,-5,6, 6,-6,-6,7, 7,-7,-7,8, 8,-8,-8,9, 9,-9,-9,3, 3,-3,-3,1, 1,-1,-1,12,-12,6,-6, 6,-6,7,-7, 7,-7,8,-8, 8,-8,9,-9, 9,-9,10,-10,10,-10,11,-11,11,-11,4,-4, 4,-4,2,-2, 2,-2,0, 0},
			y = {0,0, 0,1, 1,-1,-1,0, 0,2,-2,2,-2, 2,-2,1,-1,-1, 1,0, 0,3, 3,-3,-3,3,-3,-3, 3,2,-2,-2, 2,1,-1,-1, 1,0, 0,4,-4,-4, 4,3,-3, 3,-3,4,-4, 4,-4,4,-4,2,-2, 2,-2,1,-1, 1,-1, 0,  0,5,-5, 5,-5,4,-4, 4,-4,3,-3, 3,-7,2,-2, 2,-2,1,-1, 1,-1,5,-5, 5,-5,5,-5, 5,-5, 0,  0,6, 6,-6,-6,5, 5,-5,-5,4, 4,-4,-4,3, 3,-3,-3, 2,  2,-2, -2, 1,  1,-1, -1,6, 6,-6,-6,6, 6,-6,-6,6,-6},
		},
		["pyramid"] = {
			[1] = {
				{angle =  0, distance = 0},
			},
			[2] = {
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
			},
			[3] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},				
			},
			[4] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle =  0, distance = 2},	
			},
			[5] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
			},
			[6] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
			},
			[7] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
			},
			[8] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
			},
			[9] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle = -4, distance = 4},
				{angle =  4, distance = 4},
			},
			[10] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle = -2, distance = 3},
				{angle =  2, distance = 3},
			},
			[11] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle = -4, distance = 4},
				{angle =  4, distance = 4},
				{angle = -3, distance = 4},
				{angle =  3, distance = 4},
			},
			[12] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle = -2, distance = 3},
				{angle =  2, distance = 3},
				{angle = -1, distance = 3},
				{angle =  1, distance = 3},
			},
			[13] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle =  0, distance = 3},
				{angle = -2, distance = 4},
				{angle =  2, distance = 4},
				{angle = -1, distance = 5},
				{angle =  1, distance = 5},
				{angle =  0, distance = 6},
			},
			[14] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle =  0, distance = 4},
				{angle = -2, distance = 4},
				{angle =  2, distance = 4},
				{angle = -1, distance = 5},
				{angle =  1, distance = 5},
				{angle =  0, distance = 6},
			},
			[15] = {
				{angle =  0, distance = 0},
				{angle = -1, distance = 1},
				{angle =  1, distance = 1},
				{angle = -2, distance = 2},
				{angle =  2, distance = 2},
				{angle =  0, distance = 2},	
				{angle = -3, distance = 3},
				{angle =  3, distance = 3},
				{angle =  0, distance = 3},
				{angle =  0, distance = 4},
				{angle = -2, distance = 4},
				{angle =  2, distance = 4},
				{angle = -1, distance = 5},
				{angle =  1, distance = 5},
				{angle =  0, distance = 6},
			},
		},
	}		
	max_pyramid_tier = 15	
	-- square grid deployment	
	fleetPosDelta1x = {0,1,0,-1, 0,1,-1, 1,-1,2,0,-2, 0,2,-2, 2,-2,2, 2,-2,-2,1,-1, 1,-1,0, 0,3,-3,1, 1,3,-3,-1,-1, 3,-3,2, 2,3,-3,-2,-2, 3,-3,3, 3,-3,-3,4,0,-4, 0,4,-4, 4,-4,-4,-4,-4,-4,-4,-4,4, 4,4, 4,4, 4, 1,-1, 2,-2, 3,-3,1,-1,2,-2,3,-3,5,-5,0, 0,5, 5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,5, 5,5, 5,5, 5,5, 5, 1,-1, 2,-2, 3,-3, 4,-4,1,-1,2,-2,3,-3,4,-4}
	fleetPosDelta1y = {0,0,1, 0,-1,1,-1,-1, 1,0,2, 0,-2,2,-2,-2, 2,1,-1, 1,-1,2, 2,-2,-2,3,-3,0, 0,3,-3,1, 1, 3,-3,-1,-1,3,-3,2, 2, 3,-3,-2,-2,3,-3, 3,-3,0,4, 0,-4,4,-4,-4, 4, 1,-1, 2,-2, 3,-3,1,-1,2,-2,3,-3,-4,-4,-4,-4,-4,-4,4, 4,4, 4,4, 4,0, 0,5,-5,5,-5, 5,-5, 1,-1, 2,-2, 3,-3, 4,-4,1,-1,2,-2,3,-3,4,-4,-5,-5,-5,-5,-5,-5,-5,-5,5, 5,5, 5,5, 5,5, 5}
	-- rough hexagonal deployment
	fleetPosDelta2x = {0,2,-2,1,-1, 1,-1,4,-4,0, 0,2,-2,-2, 2,3,-3, 3,-3,6,-6,1,-1, 1,-1,3,-3, 3,-3,4,-4, 4,-4,5,-5, 5,-5,8,-8,4,-4, 4,-4,5,5 ,-5,-5,2, 2,-2,-2,0, 0,6, 6,-6,-6,7, 7,-7,-7,10,-10,5, 5,-5,-5,6, 6,-6,-6,7, 7,-7,-7,8, 8,-8,-8,9, 9,-9,-9,3, 3,-3,-3,1, 1,-1,-1,12,-12,6,-6, 6,-6,7,-7, 7,-7,8,-8, 8,-8,9,-9, 9,-9,10,-10,10,-10,11,-11,11,-11,4,-4, 4,-4,2,-2, 2,-2,0, 0}
	fleetPosDelta2y = {0,0, 0,1, 1,-1,-1,0, 0,2,-2,2,-2, 2,-2,1,-1,-1, 1,0, 0,3, 3,-3,-3,3,-3,-3, 3,2,-2,-2, 2,1,-1,-1, 1,0, 0,4,-4,-4, 4,3,-3, 3,-3,4,-4, 4,-4,4,-4,2,-2, 2,-2,1,-1, 1,-1, 0,  0,5,-5, 5,-5,4,-4, 4,-4,3,-3, 3,-7,2,-2, 2,-2,1,-1, 1,-1,5,-5, 5,-5,5,-5, 5,-5, 0,  0,6, 6,-6,-6,5, 5,-5,-5,4, 4,-4,-4,3, 3,-3,-3, 2,  2,-2, -2, 1,  1,-1, -1,6, 6,-6,-6,6, 6,-6,-6,6,-6}
	formation_spacing = 1000
	fly_formation = {
		["V"] =		{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
					},
		["Vac"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
					},
		["V4"] =	{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 60	, dist = 2	},
						{angle = 300, dist = 2	},
					},
		["Vac4"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 330, dist = 2	},
					},
		["A"] =		{
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
					},
		["Aac"] =	{
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
					},
		["A4"] =	{
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 120, dist = 2	},
						{angle = 240, dist = 2	},
					},
		["Aac4"] =	{
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
					},
		["H"] =		{
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 45 , dist = math.sqrt(2) },
						{angle = 135, dist = math.sqrt(2) },
						{angle = 225, dist = math.sqrt(2) },
						{angle = 315, dist = math.sqrt(2) },
					},
		["/"] =		{
						{angle = 60	, dist = 1	},
						{angle = 240, dist = 1	},
					},
		["-"] =		{
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["-4"] =		{
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 90	, dist = 2	},
						{angle = 270, dist = 2	},
					},
		["\\"] =	{
						{angle = 300, dist = 1	},
						{angle = 120, dist = 1	},
					},
		["|"] =		{
						{angle = 0	, dist = 1	},
						{angle = 180, dist = 1	},
					},
		["|4"] =	{
						{angle = 0	, dist = 1	},
						{angle = 180, dist = 1	},
						{angle = 0	, dist = 2	},
						{angle = 180, dist = 2	},
					},
		["/ac"] =	{
						{angle = 30	, dist = 1	},
						{angle = 210, dist = 1	},
					},
		["\\ac"] =	{
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
					},
		["M"] =		{
						{angle = 60	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["Mac"] =	{
						{angle = 30	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["M6"] =	{
						{angle = 60	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 120, dist = 1.3},
						{angle = 240, dist = 1.3},
					},
		["Mac6"] =	{
						{angle = 30	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 125, dist = 1.7},
						{angle = 235, dist = 1.7},
					},
		["W"] =		{
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["Wac"] =	{
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["W6"] =	{
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 60	, dist = 1.3},
						{angle = 300, dist = 1.3},
					},
		["Wac6"] =	{
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 55	, dist = 1.7},
						{angle = 305, dist = 1.7},
					},
		["X"] =		{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
					},
		["Xac"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
					},
		["X8"] =	{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 60	, dist = 2	},
						{angle = 300, dist = 2	},
						{angle = 120, dist = 2	},
						{angle = 240, dist = 2	},
					},
		["Xac8"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 330, dist = 2	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
					},
		["X12"] =	{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 60	, dist = 2	},
						{angle = 300, dist = 2	},
						{angle = 120, dist = 2	},
						{angle = 240, dist = 2	},
						{angle = 60	, dist = 3	},
						{angle = 300, dist = 3	},
						{angle = 120, dist = 3	},
						{angle = 240, dist = 3	},
					},
		["Xac12"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 330, dist = 2	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
						{angle = 30	, dist = 3	},
						{angle = 330, dist = 3	},
						{angle = 150, dist = 3	},
						{angle = 210, dist = 3	},
					},
		["X16"] =	{
						{angle = 60	, dist = 1	},
						{angle = 300, dist = 1	},
						{angle = 120, dist = 1	},
						{angle = 240, dist = 1	},
						{angle = 60	, dist = 2	},
						{angle = 300, dist = 2	},
						{angle = 120, dist = 2	},
						{angle = 240, dist = 2	},
						{angle = 60	, dist = 3	},
						{angle = 300, dist = 3	},
						{angle = 120, dist = 3	},
						{angle = 240, dist = 3	},
						{angle = 60	, dist = 4	},
						{angle = 300, dist = 4	},
						{angle = 120, dist = 4	},
						{angle = 240, dist = 4	},
					},
		["Xac16"] =	{
						{angle = 30	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 330, dist = 2	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
						{angle = 30	, dist = 3	},
						{angle = 330, dist = 3	},
						{angle = 150, dist = 3	},
						{angle = 210, dist = 3	},
						{angle = 30	, dist = 4	},
						{angle = 330, dist = 4	},
						{angle = 150, dist = 4	},
						{angle = 210, dist = 4	},
					},
		["*"] =		{
						{angle = 30	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 270, dist = 1	},
					},
		["*12"] =	{
						{angle = 30	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 90	, dist = 2	},
						{angle = 330, dist = 2	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
						{angle = 270, dist = 2	},
					},
		["*18"] =	{
						{angle = 30	, dist = 1	},
						{angle = 90	, dist = 1	},
						{angle = 330, dist = 1	},
						{angle = 150, dist = 1	},
						{angle = 210, dist = 1	},
						{angle = 270, dist = 1	},
						{angle = 30	, dist = 2	},
						{angle = 90	, dist = 2	},
						{angle = 330, dist = 2	},
						{angle = 150, dist = 2	},
						{angle = 210, dist = 2	},
						{angle = 270, dist = 2	},
						{angle = 30	, dist = 3	},
						{angle = 90	, dist = 3	},
						{angle = 330, dist = 3	},
						{angle = 150, dist = 3	},
						{angle = 210, dist = 3	},
						{angle = 270, dist = 3	},
					},
		["O"] =		{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
					},
		["O2R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
					},
		["O3R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
						{angle = 0,		dist = 3},					--19
						{angle = 120,	dist = 3},					--20
						{angle = 240,	dist = 3},					--21
						{angle = 60,	dist = 3},					--22
						{angle = 180,	dist = 3},					--23
						{angle = 300,	dist = 3},					--24
						{angle = 20,	dist = 2.645751310646},		--25
						{angle = 140,	dist = 2.645751310646},		--26
						{angle = 260,	dist = 2.645751310646},		--27
						{angle = 80,	dist = 2.645751310646},		--28
						{angle = 200,	dist = 2.645751310646},		--29
						{angle = 320,	dist = 2.645751310646},		--30
						{angle = 40,	dist = 2.645751310646},		--31
						{angle = 160,	dist = 2.645751310646},		--32
						{angle = 280,	dist = 2.645751310646},		--33
						{angle = 100,	dist = 2.645751310646},		--34
						{angle = 220,	dist = 2.645751310646},		--35
						{angle = 340,	dist = 2.645751310646},		--36
					},
		["O4R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
						{angle = 0,		dist = 3},					--19
						{angle = 120,	dist = 3},					--20
						{angle = 240,	dist = 3},					--21
						{angle = 60,	dist = 3},					--22
						{angle = 180,	dist = 3},					--23
						{angle = 300,	dist = 3},					--24
						{angle = 20,	dist = 2.645751310646},		--25
						{angle = 140,	dist = 2.645751310646},		--26
						{angle = 260,	dist = 2.645751310646},		--27
						{angle = 80,	dist = 2.645751310646},		--28
						{angle = 200,	dist = 2.645751310646},		--29
						{angle = 320,	dist = 2.645751310646},		--30
						{angle = 40,	dist = 2.645751310646},		--31
						{angle = 160,	dist = 2.645751310646},		--32
						{angle = 280,	dist = 2.645751310646},		--33
						{angle = 100,	dist = 2.645751310646},		--34
						{angle = 220,	dist = 2.645751310646},		--35
						{angle = 340,	dist = 2.645751310646},		--36
						{angle = 0,		dist = 4},					--37
						{angle = 120,	dist = 4},					--37
						{angle = 240,	dist = 4},					--37
						{angle = 60,	dist = 4},					--38
						{angle = 180,	dist = 4},					--39
						{angle = 300,	dist = 4},					--40
						{angle = 30,	dist = 3.4641016151378},	--41
						{angle = 150,	dist = 3.4641016151378},	--42
						{angle = 270,	dist = 3.4641016151378},	--43
						{angle = 90,	dist = 3.4641016151378},	--44
						{angle = 210,	dist = 3.4641016151378},	--45
						{angle = 330,	dist = 3.4641016151378},	--46
						{angle = 15,	dist = 3.605551275464},		--47
						{angle = 135,	dist = 3.605551275464},		--48
						{angle = 255,	dist = 3.605551275464},		--49
						{angle = 75,	dist = 3.605551275464},		--50
						{angle = 195,	dist = 3.605551275464},		--51
						{angle = 315,	dist = 3.605551275464},		--52
						{angle = 45,	dist = 3.605551275464},		--53
						{angle = 165,	dist = 3.605551275464},		--54
						{angle = 285,	dist = 3.605551275464},		--55
						{angle = 105,	dist = 3.605551275464},		--56
						{angle = 225,	dist = 3.605551275464},		--57
						{angle = 345,	dist = 3.605551275464},		--58
					},
		["O5R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
						{angle = 0,		dist = 3},					--19
						{angle = 120,	dist = 3},					--20
						{angle = 240,	dist = 3},					--21
						{angle = 60,	dist = 3},					--22
						{angle = 180,	dist = 3},					--23
						{angle = 300,	dist = 3},					--24
						{angle = 20,	dist = 2.645751310646},		--25
						{angle = 140,	dist = 2.645751310646},		--26
						{angle = 260,	dist = 2.645751310646},		--27
						{angle = 80,	dist = 2.645751310646},		--28
						{angle = 200,	dist = 2.645751310646},		--29
						{angle = 320,	dist = 2.645751310646},		--30
						{angle = 40,	dist = 2.645751310646},		--31
						{angle = 160,	dist = 2.645751310646},		--32
						{angle = 280,	dist = 2.645751310646},		--33
						{angle = 100,	dist = 2.645751310646},		--34
						{angle = 220,	dist = 2.645751310646},		--35
						{angle = 340,	dist = 2.645751310646},		--36
						{angle = 0,		dist = 4},					--37
						{angle = 120,	dist = 4},					--37
						{angle = 240,	dist = 4},					--37
						{angle = 60,	dist = 4},					--38
						{angle = 180,	dist = 4},					--39
						{angle = 300,	dist = 4},					--40
						{angle = 30,	dist = 3.4641016151378},	--41
						{angle = 150,	dist = 3.4641016151378},	--42
						{angle = 270,	dist = 3.4641016151378},	--43
						{angle = 90,	dist = 3.4641016151378},	--44
						{angle = 210,	dist = 3.4641016151378},	--45
						{angle = 330,	dist = 3.4641016151378},	--46
						{angle = 15,	dist = 3.605551275464},		--47
						{angle = 135,	dist = 3.605551275464},		--48
						{angle = 255,	dist = 3.605551275464},		--49
						{angle = 75,	dist = 3.605551275464},		--50
						{angle = 195,	dist = 3.605551275464},		--51
						{angle = 315,	dist = 3.605551275464},		--52
						{angle = 45,	dist = 3.605551275464},		--53
						{angle = 165,	dist = 3.605551275464},		--54
						{angle = 285,	dist = 3.605551275464},		--55
						{angle = 105,	dist = 3.605551275464},		--56
						{angle = 225,	dist = 3.605551275464},		--57
						{angle = 345,	dist = 3.605551275464},		--58
						{angle = 0,		dist = 5},					--59
						{angle = 120,	dist = 5},					--60
						{angle = 240,	dist = 5},					--61
						{angle = 60,	dist = 5},					--62
						{angle = 180,	dist = 5},					--63
						{angle = 300,	dist = 5},					--64
						{angle = 12,	dist = 4.5825756949558},	--65
						{angle = 132,	dist = 4.5825756949558},	--66
						{angle = 252,	dist = 4.5825756949558},	--67
						{angle = 72,	dist = 4.5825756949558},	--68
						{angle = 192,	dist = 4.5825756949558},	--69
						{angle = 312,	dist = 4.5825756949558},	--70
						{angle = 48,	dist = 4.5825756949558},	--71
						{angle = 168,	dist = 4.5825756949558},	--72
						{angle = 288,	dist = 4.5825756949558},	--73
						{angle = 108,	dist = 4.5825756949558},	--74
						{angle = 228,	dist = 4.5825756949558},	--75
						{angle = 348,	dist = 4.5825756949558},	--76
						{angle = 24,	dist = 4.3588989435407},	--77
						{angle = 144,	dist = 4.3588989435407},	--78
						{angle = 264,	dist = 4.3588989435407},	--79
						{angle = 84,	dist = 4.3588989435407},	--80
						{angle = 204,	dist = 4.3588989435407},	--81
						{angle = 324,	dist = 4.3588989435407},	--82
						{angle = 36,	dist = 4.3588989435407},	--83
						{angle = 156,	dist = 4.3588989435407},	--84
						{angle = 276,	dist = 4.3588989435407},	--85
						{angle = 96,	dist = 4.3588989435407},	--86
						{angle = 216,	dist = 4.3588989435407},	--87
						{angle = 336,	dist = 4.3588989435407},	--88
					},
		["O6R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
						{angle = 0,		dist = 3},					--19
						{angle = 120,	dist = 3},					--20
						{angle = 240,	dist = 3},					--21
						{angle = 60,	dist = 3},					--22
						{angle = 180,	dist = 3},					--23
						{angle = 300,	dist = 3},					--24
						{angle = 20,	dist = 2.645751310646},		--25
						{angle = 140,	dist = 2.645751310646},		--26
						{angle = 260,	dist = 2.645751310646},		--27
						{angle = 80,	dist = 2.645751310646},		--28
						{angle = 200,	dist = 2.645751310646},		--29
						{angle = 320,	dist = 2.645751310646},		--30
						{angle = 40,	dist = 2.645751310646},		--31
						{angle = 160,	dist = 2.645751310646},		--32
						{angle = 280,	dist = 2.645751310646},		--33
						{angle = 100,	dist = 2.645751310646},		--34
						{angle = 220,	dist = 2.645751310646},		--35
						{angle = 340,	dist = 2.645751310646},		--36
						{angle = 0,		dist = 4},					--37
						{angle = 120,	dist = 4},					--37
						{angle = 240,	dist = 4},					--37
						{angle = 60,	dist = 4},					--38
						{angle = 180,	dist = 4},					--39
						{angle = 300,	dist = 4},					--40
						{angle = 30,	dist = 3.4641016151378},	--41
						{angle = 150,	dist = 3.4641016151378},	--42
						{angle = 270,	dist = 3.4641016151378},	--43
						{angle = 90,	dist = 3.4641016151378},	--44
						{angle = 210,	dist = 3.4641016151378},	--45
						{angle = 330,	dist = 3.4641016151378},	--46
						{angle = 15,	dist = 3.605551275464},		--47
						{angle = 135,	dist = 3.605551275464},		--48
						{angle = 255,	dist = 3.605551275464},		--49
						{angle = 75,	dist = 3.605551275464},		--50
						{angle = 195,	dist = 3.605551275464},		--51
						{angle = 315,	dist = 3.605551275464},		--52
						{angle = 45,	dist = 3.605551275464},		--53
						{angle = 165,	dist = 3.605551275464},		--54
						{angle = 285,	dist = 3.605551275464},		--55
						{angle = 105,	dist = 3.605551275464},		--56
						{angle = 225,	dist = 3.605551275464},		--57
						{angle = 345,	dist = 3.605551275464},		--58
						{angle = 0,		dist = 5},					--59
						{angle = 120,	dist = 5},					--60
						{angle = 240,	dist = 5},					--61
						{angle = 60,	dist = 5},					--62
						{angle = 180,	dist = 5},					--63
						{angle = 300,	dist = 5},					--64
						{angle = 12,	dist = 4.5825756949558},	--65
						{angle = 132,	dist = 4.5825756949558},	--66
						{angle = 252,	dist = 4.5825756949558},	--67
						{angle = 72,	dist = 4.5825756949558},	--68
						{angle = 192,	dist = 4.5825756949558},	--69
						{angle = 312,	dist = 4.5825756949558},	--70
						{angle = 48,	dist = 4.5825756949558},	--71
						{angle = 168,	dist = 4.5825756949558},	--72
						{angle = 288,	dist = 4.5825756949558},	--73
						{angle = 108,	dist = 4.5825756949558},	--74
						{angle = 228,	dist = 4.5825756949558},	--75
						{angle = 348,	dist = 4.5825756949558},	--76
						{angle = 24,	dist = 4.3588989435407},	--77
						{angle = 144,	dist = 4.3588989435407},	--78
						{angle = 264,	dist = 4.3588989435407},	--79
						{angle = 84,	dist = 4.3588989435407},	--80
						{angle = 204,	dist = 4.3588989435407},	--81
						{angle = 324,	dist = 4.3588989435407},	--82
						{angle = 36,	dist = 4.3588989435407},	--83
						{angle = 156,	dist = 4.3588989435407},	--84
						{angle = 276,	dist = 4.3588989435407},	--85
						{angle = 96,	dist = 4.3588989435407},	--86
						{angle = 216,	dist = 4.3588989435407},	--87
						{angle = 336,	dist = 4.3588989435407},	--88
						{angle = 0,		dist = 6},					--89
						{angle = 120,	dist = 6},					--90
						{angle = 240,	dist = 6},					--91
						{angle = 60,	dist = 6},					--92
						{angle = 180,	dist = 6},					--93
						{angle = 300,	dist = 6},					--94
						{angle = 10,	dist = 5.56776436283},		--95
						{angle = 130,	dist = 5.56776436283},		--96
						{angle = 250,	dist = 5.56776436283},		--97
						{angle = 70,	dist = 5.56776436283},		--98
						{angle = 190,	dist = 5.56776436283},		--99
						{angle = 310,	dist = 5.56776436283},		--100
						{angle = 50,	dist = 5.56776436283},		--101
						{angle = 170,	dist = 5.56776436283},		--102
						{angle = 290,	dist = 5.56776436283},		--103
						{angle = 110,	dist = 5.56776436283},		--104
						{angle = 230,	dist = 5.56776436283},		--105
						{angle = 350,	dist = 5.56776436283},		--106
						{angle = 20,	dist = 5.2915026221292},	--107
						{angle = 140,	dist = 5.2915026221292},	--108
						{angle = 260,	dist = 5.2915026221292},	--109
						{angle = 80,	dist = 5.2915026221292},	--110
						{angle = 200,	dist = 5.2915026221292},	--111
						{angle = 320,	dist = 5.2915026221292},	--112
						{angle = 40,	dist = 5.2915026221292},	--113
						{angle = 160,	dist = 5.2915026221292},	--114
						{angle = 280,	dist = 5.2915026221292},	--115
						{angle = 100,	dist = 5.2915026221292},	--116
						{angle = 220,	dist = 5.2915026221292},	--117
						{angle = 340,	dist = 5.2915026221292},	--118
						{angle = 30,	dist = 5.1961524227066},	--119
						{angle = 150,	dist = 5.1961524227066},	--120
						{angle = 270,	dist = 5.1961524227066},	--121
						{angle = 90,	dist = 5.1961524227066},	--122
						{angle = 210,	dist = 5.1961524227066},	--123
						{angle = 330,	dist = 5.1961524227066},	--124
					},
		["O7R"] =	{
						{angle = 0,		dist = 1},					--1
						{angle = 120,	dist = 1},					--2
						{angle = 240,	dist = 1},					--3
						{angle = 60,	dist = 1},					--4
						{angle = 180,	dist = 1},					--5
						{angle = 300,	dist = 1},					--6
						{angle = 0,		dist = 2},					--7
						{angle = 120,	dist = 2},					--8
						{angle = 240,	dist = 2},					--9
						{angle = 60,	dist = 2},					--10
						{angle = 180,	dist = 2},					--11
						{angle = 300,	dist = 2},					--12
						{angle = 30,	dist = 1.7320508075689},	--13
						{angle = 150,	dist = 1.7320508075689},	--14
						{angle = 270,	dist = 1.7320508075689},	--15
						{angle = 90,	dist = 1.7320508075689},	--16
						{angle = 210,	dist = 1.7320508075689},	--17
						{angle = 330,	dist = 1.7320508075689},	--18
						{angle = 0,		dist = 3},					--19
						{angle = 120,	dist = 3},					--20
						{angle = 240,	dist = 3},					--21
						{angle = 60,	dist = 3},					--22
						{angle = 180,	dist = 3},					--23
						{angle = 300,	dist = 3},					--24
						{angle = 20,	dist = 2.645751310646},		--25
						{angle = 140,	dist = 2.645751310646},		--26
						{angle = 260,	dist = 2.645751310646},		--27
						{angle = 80,	dist = 2.645751310646},		--28
						{angle = 200,	dist = 2.645751310646},		--29
						{angle = 320,	dist = 2.645751310646},		--30
						{angle = 40,	dist = 2.645751310646},		--31
						{angle = 160,	dist = 2.645751310646},		--32
						{angle = 280,	dist = 2.645751310646},		--33
						{angle = 100,	dist = 2.645751310646},		--34
						{angle = 220,	dist = 2.645751310646},		--35
						{angle = 340,	dist = 2.645751310646},		--36
						{angle = 0,		dist = 4},					--37
						{angle = 120,	dist = 4},					--37
						{angle = 240,	dist = 4},					--37
						{angle = 60,	dist = 4},					--38
						{angle = 180,	dist = 4},					--39
						{angle = 300,	dist = 4},					--40
						{angle = 30,	dist = 3.4641016151378},	--41
						{angle = 150,	dist = 3.4641016151378},	--42
						{angle = 270,	dist = 3.4641016151378},	--43
						{angle = 90,	dist = 3.4641016151378},	--44
						{angle = 210,	dist = 3.4641016151378},	--45
						{angle = 330,	dist = 3.4641016151378},	--46
						{angle = 15,	dist = 3.605551275464},		--47
						{angle = 135,	dist = 3.605551275464},		--48
						{angle = 255,	dist = 3.605551275464},		--49
						{angle = 75,	dist = 3.605551275464},		--50
						{angle = 195,	dist = 3.605551275464},		--51
						{angle = 315,	dist = 3.605551275464},		--52
						{angle = 45,	dist = 3.605551275464},		--53
						{angle = 165,	dist = 3.605551275464},		--54
						{angle = 285,	dist = 3.605551275464},		--55
						{angle = 105,	dist = 3.605551275464},		--56
						{angle = 225,	dist = 3.605551275464},		--57
						{angle = 345,	dist = 3.605551275464},		--58
						{angle = 0,		dist = 5},					--59
						{angle = 120,	dist = 5},					--60
						{angle = 240,	dist = 5},					--61
						{angle = 60,	dist = 5},					--62
						{angle = 180,	dist = 5},					--63
						{angle = 300,	dist = 5},					--64
						{angle = 12,	dist = 4.5825756949558},	--65
						{angle = 132,	dist = 4.5825756949558},	--66
						{angle = 252,	dist = 4.5825756949558},	--67
						{angle = 72,	dist = 4.5825756949558},	--68
						{angle = 192,	dist = 4.5825756949558},	--69
						{angle = 312,	dist = 4.5825756949558},	--70
						{angle = 48,	dist = 4.5825756949558},	--71
						{angle = 168,	dist = 4.5825756949558},	--72
						{angle = 288,	dist = 4.5825756949558},	--73
						{angle = 108,	dist = 4.5825756949558},	--74
						{angle = 228,	dist = 4.5825756949558},	--75
						{angle = 348,	dist = 4.5825756949558},	--76
						{angle = 24,	dist = 4.3588989435407},	--77
						{angle = 144,	dist = 4.3588989435407},	--78
						{angle = 264,	dist = 4.3588989435407},	--79
						{angle = 84,	dist = 4.3588989435407},	--80
						{angle = 204,	dist = 4.3588989435407},	--81
						{angle = 324,	dist = 4.3588989435407},	--82
						{angle = 36,	dist = 4.3588989435407},	--83
						{angle = 156,	dist = 4.3588989435407},	--84
						{angle = 276,	dist = 4.3588989435407},	--85
						{angle = 96,	dist = 4.3588989435407},	--86
						{angle = 216,	dist = 4.3588989435407},	--87
						{angle = 336,	dist = 4.3588989435407},	--88
						{angle = 0,		dist = 6},					--89
						{angle = 120,	dist = 6},					--90
						{angle = 240,	dist = 6},					--91
						{angle = 60,	dist = 6},					--92
						{angle = 180,	dist = 6},					--93
						{angle = 300,	dist = 6},					--94
						{angle = 10,	dist = 5.56776436283},		--95
						{angle = 130,	dist = 5.56776436283},		--96
						{angle = 250,	dist = 5.56776436283},		--97
						{angle = 70,	dist = 5.56776436283},		--98
						{angle = 190,	dist = 5.56776436283},		--99
						{angle = 310,	dist = 5.56776436283},		--100
						{angle = 50,	dist = 5.56776436283},		--101
						{angle = 170,	dist = 5.56776436283},		--102
						{angle = 290,	dist = 5.56776436283},		--103
						{angle = 110,	dist = 5.56776436283},		--104
						{angle = 230,	dist = 5.56776436283},		--105
						{angle = 350,	dist = 5.56776436283},		--106
						{angle = 20,	dist = 5.2915026221292},	--107
						{angle = 140,	dist = 5.2915026221292},	--108
						{angle = 260,	dist = 5.2915026221292},	--109
						{angle = 80,	dist = 5.2915026221292},	--110
						{angle = 200,	dist = 5.2915026221292},	--111
						{angle = 320,	dist = 5.2915026221292},	--112
						{angle = 40,	dist = 5.2915026221292},	--113
						{angle = 160,	dist = 5.2915026221292},	--114
						{angle = 280,	dist = 5.2915026221292},	--115
						{angle = 100,	dist = 5.2915026221292},	--116
						{angle = 220,	dist = 5.2915026221292},	--117
						{angle = 340,	dist = 5.2915026221292},	--118
						{angle = 30,	dist = 5.1961524227066},	--119
						{angle = 150,	dist = 5.1961524227066},	--120
						{angle = 270,	dist = 5.1961524227066},	--121
						{angle = 90,	dist = 5.1961524227066},	--122
						{angle = 210,	dist = 5.1961524227066},	--123
						{angle = 330,	dist = 5.1961524227066},	--124
						{angle = 0,			dist = 7},				--125
						{angle = 120,		dist = 7},				--126
						{angle = 240,		dist = 7},				--127
						{angle = 60,		dist = 7},				--128
						{angle = 180,		dist = 7},				--129
						{angle = 300,		dist = 7},				--130
						{angle = 60/7,		dist = 6.557438524302},	--131
						{angle = 60/7+120,	dist = 6.557438524302},	--132
						{angle = 60/7+240,	dist = 6.557438524302},	--133
						{angle = 60/7+60,	dist = 6.557438524302},	--134
						{angle = 60/7+180,	dist = 6.557438524302},	--135
						{angle = 60/7+300,	dist = 6.557438524302},	--136
						{angle = 60/7*6,	dist = 6.557438524302},	--137
						{angle = 60/7*6+120,dist = 6.557438524302},	--138
						{angle = 60/7*6+240,dist = 6.557438524302},	--139
						{angle = 60/7*6+60,	dist = 6.557438524302},	--140
						{angle = 60/7*6+180,dist = 6.557438524302},	--141
						{angle = 60/7*6+300,dist = 6.557438524302},	--142
						{angle = 60/7*2,	dist = 6.2449979983984},--143
						{angle = 60/7*2+120,dist = 6.2449979983984},--144
						{angle = 60/7*2+240,dist = 6.2449979983984},--145
						{angle = 60/7*2+60,	dist = 6.2449979983984},--146
						{angle = 60/7*2+180,dist = 6.2449979983984},--147
						{angle = 60/7*2+300,dist = 6.2449979983984},--148
						{angle = 60/7*5,	dist = 6.2449979983984},--149
						{angle = 60/7*5+120,dist = 6.2449979983984},--150
						{angle = 60/7*5+240,dist = 6.2449979983984},--151
						{angle = 60/7*5+60,	dist = 6.2449979983984},--152
						{angle = 60/7*5+180,dist = 6.2449979983984},--153
						{angle = 60/7*5+300,dist = 6.2449979983984},--154
						{angle = 60/7*3,	dist = 6.0827625302982},--155
						{angle = 60/7*3+120,dist = 6.0827625302982},--156
						{angle = 60/7*3+240,dist = 6.0827625302982},--157
						{angle = 60/7*3+60,	dist = 6.0827625302982},--158
						{angle = 60/7*3+180,dist = 6.0827625302982},--159
						{angle = 60/7*3+300,dist = 6.0827625302982},--160
						{angle = 60/7*4,	dist = 6.0827625302982},--161
						{angle = 60/7*4+120,dist = 6.0827625302982},--162
						{angle = 60/7*4+240,dist = 6.0827625302982},--163
						{angle = 60/7*4+60,	dist = 6.0827625302982},--164
						{angle = 60/7*4+180,dist = 6.0827625302982},--165
						{angle = 60/7*4+300,dist = 6.0827625302982},--166
					},
	}
	prebuilt_leaders = {		--130			140		120			125				120		120			140					140			140			150				100			76		73		70			70			70				45
		["Cucaracha"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout"},
		["Dreadnought"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A","Equipment Freighter 3"},
		["Atlantis X23"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Dread No More"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["MT52 Hornet"] =		{"Lite Drone","Gnat","MU52 Hornet",																			      "Ktlitan Scout"},
		["Heavy Drone"] =		{"Lite Drone","Gnat","MU52 Hornet",																			      "Ktlitan Scout"},
		["Nirvana R3"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper"},
		["Nirvana R5"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Nirvana R5A"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Blockade Runner"] =	{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Supervisor"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Sentinel"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Strongarm"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Phobos T3"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Phobos T4"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Phobos R2"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Farco 3"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Farco 5"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Farco 8"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Farco 11"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Farco 13"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Gunship"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Adv. Gunship"] =		{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha","Brush","Broom","Sweeper","Nirvana R5","Nirvana R5A"},
		["Adder MK4"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha",							 "Nirvana R5","Nirvana R5A"},
		["Adder MK5"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Adder MK6"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Adder MK7"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
		["Barracuda"] =			{"Lite Drone","Gnat","MT52 Hornet","MU52 Hornet","Fighter","Shepherd","Ktlitan Fighter","K2 Fighter","K3 Fighter","Ktlitan Scout","Cucaracha"},
	}
	prebuilt_leader = "Nirvana R5"	--default
	prebuilt_followers = {		--100			30				30				65			60					60				70			70			50				75			70				60			60		60			60			60			60			60				55			60			60				60			80			80			80				120				110				95
		["Brush"] =				{			  "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", 						  "Dread No More", 							   "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship"},
		["Broom"] =				{			  "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", 						  "Dread No More", 							   "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship"},
		["Sweeper"] =			{			  "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", 						  "Dread No More", 							   "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship"},		
		["MT52 Hornet"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",				 "Heavy Drone", "Barracuda"},
		["MU52 Hornet"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7", "MT52 Hornet",				"Barracuda"},
		["Fighter"] =			{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["Shepherd"] =			{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["Ktlitan Fighter"] =	{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["K2 Fighter"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["K3 Fighter"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["Ktlitan Scout"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7", "MT52 Hornet", "Heavy Drone",	"Barracuda"},
		["Cucaracha"] =			{			  "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7",								"Barracuda"},
		["Gnat"] =				{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7", "MT52 Hornet", "Heavy Drone", "Barracuda"},
		["Lite Drone"] =		{"Cucaracha", "Dreadnought", "Atlantis X23", "Nirvana R3", "Blockade Runner", "Supervisor", "Sentinel", "Nirvana R5", "Dread No More", "Strongarm", "Nirvana R5A", "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4", "Adder MK5", "Adder MK6", "Adder MK7", "MT52 Hornet", "Heavy Drone", "Barracuda"},
		["Nirvana R5"] =		{			  "Dreadnought", "Atlantis X23", 			   "Blockade Runner", "Supervisor", 						  "Dread No More", 							   "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4"},
		["Nirvana R5A"] =		{			  "Dreadnought", "Atlantis X23", 			   "Blockade Runner", "Supervisor", 						  "Dread No More", 							   "Farco 3", "Farco 5", "Farco 8", "Farco 11", "Farco 13", "Phobos T3", "Phobos T4", "Phobos R2", "Gunship", "Adv. Gunship", "Adder MK4"},
		["Equipment Freighter 3"] = {		  "Dreadnought"},
	}
	prebuilt_follower = "MT52 Hornet"	--default
	prebuilt_relative = {
		{strength = 9,	leader = "MT52 Hornet",		follower = "Gnat",				shape = "V"},	--5,	2
		{strength = 10,	leader = "Adder MK4",		follower = "Gnat",				shape = "V"},	--6,	2
		{strength = 11,	leader = "MT52 Hornet",		follower = "Light Drone",		shape = "V"},	--5,	3
		{strength = 12,	leader = "Adder MK4",		follower = "Light Drone",		shape = "V4"},	--6,	3
		{strength = 13,	leader = "MT52 Hornet",		follower = "Gnat",				shape = "V4"},	--5,	2
		{strength = 14,	leader = "Adder MK4",		follower = "Gnat",				shape = "V4"},	--6,	2
		{strength = 15,	leader = "MT52 Hornet",		follower = "MU52 Hornet",		shape = "V"},	--5,	5
		{strength = 16,	leader = "Nirvana R3",		follower = "Gnat",				shape = "V"},	--12,	2
		{strength = 17,	leader = "Phobos R2",		follower = "Gnat",				shape = "V"},	--13,	2
		{strength = 18,	leader = "Nirvana R3",		follower = "Lite Drone",		shape = "V"},	--12,	3
		{strength = 19,	leader = "Phobos T3",		follower = "Gnat",				shape = "V"},	--15,	2
		{strength = 20,	leader = "Farco 3",			follower = "Gnat",				shape = "V"},	--16,	2
		{strength = 21,	leader = "MT52 Hornet",		follower = "Ktlitan Scout",		shape = "V"},	--5,	8
		{strength = 22,	leader = "Nirvana R3",		follower = "MT52 Hornet",		shape = "V"},	--12,	5
		{strength = 23,	leader = "Phobos R2",		follower = "MU52 Hornet",		shape = "V"},	--13,	5
		{strength = 24,	leader = "Nirvana R3",		follower = "Fighter",			shape = "V"},	--12,	6
		{strength = 25,	leader = "Phobos T3",		follower = "MU52 Hornet",		shape = "V"},	--15,	5
		{strength = 26,	leader = "Farco 3",			follower = "MU52 Hornet",		shape = "V"},	--16,	5
		{strength = 27,	leader = "Gunship",			follower = "MU52 Hornet",		shape = "V"},	--17,	5
		{strength = 28,	leader = "Phobos T4",		follower = "MU52 Hornet",		shape = "V"},	--18,	5
		{strength = 29,	leader = "Phobos T3",		follower = "K2 Fighter",		shape = "V"},	--15,	7
		{strength = 30,	leader = "Farco 3",			follower = "K2 Fighter",		shape = "V"},	--16,	7
		{strength = 31,	leader = "Gunship",			follower = "K2 Fighter",		shape = "V"},	--17,	7
		{strength = 32,	leader = "Nirvana R3",		follower = "MT52 Hornet",		shape = "V4"},	--12,	5
		{strength = 33,	leader = "Phobos R2",		follower = "MT52 Hornet",		shape = "V4"},	--13,	5
		{strength = 34,	leader = "Adv. Gunship",	follower = "K2 Fighter",		shape = "V"},	--20,	7
		{strength = 35,	leader = "Phobos T3",		follower = "MU52 Hornet",		shape = "V4"},	--15,	5
		{strength = 36,	leader = "Nirvana R3",		follower = "Fighter",			shape = "V4"},	--12,	6
		{strength = 37,	leader = "Phobos R2",		follower = "Fighter",			shape = "V4"},	--13,	6
		{strength = 38,	leader = "Phobos T4",		follower = "MU52 Hornet",		shape = "V4"},	--18,	5
		{strength = 39,	leader = "Phobos T3",		follower = "Ktlitan Fighter",	shape = "V4"},	--15,	6
		{strength = 40,	leader = "Sentinel",		follower = "K3 Fighter",		shape = "V"},	--24,	8
		{strength = 41,	leader = "Farco 11",		follower = "MT52 Hornet",		shape = "V4"},	--21,	5
		{strength = 42,	leader = "Phobos T4",		follower = "Fighter",			shape = "V4"},	--18,	6
		{strength = 43,	leader = "Phobos T3",		follower = "K2 Fighter",		shape = "V4"},	--15,	7
		{strength = 44,	leader = "Nirvana R3",		follower = "K3 Fighter",		shape = "V4"},	--12,	8
		{strength = 45,	leader = "Phobos R2",		follower = "Ktlitan Scout",		shape = "V4"},	--13,	8
		{strength = 46,	leader = "Cucaracha",		follower = "MT52 Hornet",		shape = "V"},	--36,	5
		{strength = 47,	leader = "Gunship",			follower = "MU52 Hornet",		shape = "M6"},	--17,	5
		{strength = 48,	leader = "Sentinel",		follower = "Fighter",			shape = "V4"},	--24,	6
		{strength = 49,	leader = "Phobos R2",		follower = "Fighter",			shape = "M6"},	--13,	6
		{strength = 50,	leader = "Adv. Gunship",	follower = "MU52 Hornet",		shape = "M6"},	--20,	5
		{strength = 51,	leader = "Phobos T3",		follower = "Fighter",			shape = "M6"},	--15,	6
		{strength = 52,	leader = "Adv. Gunship",	follower = "K3 Fighter",		shape = "V4"},	--20,	8
		{strength = 53,	leader = "MT52 Hornet",		follower = "Ktlitan Scout",		shape = "M6"},	--5,	8
		{strength = 54,	leader = "Nirvana R3",		follower = "K2 Fighter",		shape = "M6"},	--12,	7
		{strength = 55,	leader = "Phobos R2",		follower = "K2 Fighter",		shape = "M6"},	--13,	7
		{strength = 56,	leader = "Nirvana R5A",		follower = "Fighter",			shape = "M6"},	--20,	6
		{strength = 57,	leader = "Farco 11",		follower = "Ktlitan Fighter",	shape = "M6"},	--21,	6
		{strength = 58,	leader = "Farco 3",			follower = "K2 Fighter",		shape = "M6"},	--16,	7
		{strength = 59,	leader = "Nirvana R5",		follower = "MU52 Hornet",		shape = "X8"},	--19,	5
		{strength = 60,	leader = "Cucaracha",		follower = "Fighter",			shape = "V4"},	--36,	6
		{strength = 61,	leader = "Farco 8",			follower = "K2 Fighter",		shape = "M6"},	--19,	7
		{strength = 62,	leader = "Adv. Gunship",	follower = "K2 Fighter",		shape = "M6"},	--20,	7
		{strength = 63,	leader = "Phobos T3",		follower = "Ktlitan Fighter",	shape = "X8"},	--15,	6
		{strength = 64,	leader = "Sentinel",		follower = "MU52 Hornet",		shape = "X8"},	--24,	5
		{strength = 65,	leader = "Gunship",			follower = "K3 Fighter",		shape = "M6"},	--17,	8
		{strength = 66,	leader = "Cucaracha",		follower = "MT52 Hornet",		shape = "M6"},	--36,	5
		{strength = 67,	leader = "Blockade Runner",	follower = "Gnat",				shape = "V"},	--63,	2
		{strength = 68,	leader = "Cucaracha",		follower = "Ktlitan Scout",		shape = "V4"},	--36,	8
		{strength = 69,	leader = "Blockade Runner",	follower = "Light Drone",		shape = "V"},	--63,	3
		{strength = 70,	leader = "Adder MK4",		follower = "K3 Fighter",		shape = "X8"},	--6,	8
		{strength = 71,	leader = "Blockade Runner",	follower = "Gnat",				shape = "V4"},	--63,	2
		{strength = 72,	leader = "Supervisor",		follower = "Gnat",				shape = "V"},	--68,	2
		{strength = 73,	leader = "Gunship",			follower = "K2 Fighter",		shape = "X8"},	--17,	7
		{strength = 74,	leader = "Supervisor",		follower = "Light Drone",		shape = "V"},	--68,	3
		{strength = 75,	leader = "Nirvana R5",		follower = "K2 Fighter",		shape = "X8"},	--19,	7
		{strength = 76,	leader = "Supervisor",		follower = "Gnat",				shape = "V4"},	--68,	2
		{strength = 77,	leader = "Farco 11",		follower = "K2 Fighter",		shape = "X8"},	--21,	7
		{strength = 78,	leader = "Adder MK4",		follower = "Cucaracha",			shape = "V"},	--6,	36
		{strength = 79,	leader = "Phobos T3",		follower = "K3 Fighter",		shape = "X8"},	--15,	8
		{strength = 80,	leader = "Farco 3",			follower = "Ktlitan Scout",		shape = "X8"},	--16,	8
		{strength = 81,	leader = "Gunship",			follower = "K3 Fighter",		shape = "X8"},	--17,	8
		{strength = 82,	leader = "Phobos T4",		follower = "Ktlitan Scout",		shape = "X8"},	--18,	8
		{strength = 83,	leader = "Farco 8",			follower = "K3 Fighter",		shape = "X8"},	--19,	8
		{strength = 84,	leader = "Dreadnought",		follower = "Gnat",				shape = "V"},	--80,	2
		{strength = 85,	leader = "Phobos R2",		follower = "Cucaracha",			shape = "V"},	--13,	36
		{strength = 86,	leader = "Dreadnought",		follower = "Light Drone",		shape = "V"},	--80,	3
		{strength = 87,	leader = "Phobos T3",		follower = "Cucaracha",			shape = "V"},	--15,	36
		{strength = 88,	leader = "Dreadnought",		follower = "Gnat",				shape = "V4"},	--80,	2
		{strength = 89,	leader = "Gunship",			follower = "Cucaracha",			shape = "V"},	--17,	36
		{strength = 90,	leader = "Dreadnought",		follower = "MU52 Hornet",		shape = "V"},	--80,	5
		{strength = 91,	leader = "Nirvana R5",		follower = "Cucaracha",			shape = "V"},	--19,	36
		{strength = 92,	leader = "Supervisor",		follower = "Fighter",			shape = "V4"},	--68,	6
		{strength = 93,	leader = "Blockade Runner",	follower = "MU52 Hornet",		shape = "M6"},	--63,	5
		{strength = 94,	leader = "Dreadnought",		follower = "K2 Fighter",		shape = "V"},	--80,	7
		{strength = 95,	leader = "Blockade Runner",	follower = "K3 Fighter",		shape = "V4"},	--63,	8
		{strength = 96,	leader = "Supervisor",		follower = "K2 Fighter",		shape = "V4"},	--68,	7
		{strength = 97,	leader = "Dread No More",	follower = "MT52 Hornet",		shape = "V"},	--87,	5
		{strength = 98,	leader = "Supervisor",		follower = "MT52 Hornet",		shape = "M6"},	--68,	5
		{strength = 99,	leader = "Dread No More",	follower = "Ktlitan Fighter",	shape = "V"},	--87,	6
		{strength = 100,leader = "Supervisor",		follower = "K3 Fighter",		shape = "V4"},	--68,	8
		{strength = 101,leader = "Dread No More",	follower = "K2 Fighter",		shape = "V"},	--87,	7
		{strength = 102,leader = "Atlantis X23",	follower = "Broom",				shape = "V4"},	--50,	13
		{strength = 103,leader = "Dread No More",	follower = "K3 Fighter",		shape = "V"},	--87,	8
		{strength = 104,leader = "Dreadnought",		follower = "Fighter",			shape = "V4"},	--80,	6
		{strength = 105,leader = "Blockade Runner",	follower = "K2 Fighter",		shape = "M6"},	--63,	7
		{strength = 106,leader = "Dreadnought",		follower = "Broom",				shape = "V"},	--80,	13
		{strength = 107,leader = "Strongarm",		follower = "Fighter",			shape = "V"},	--95,	6
		{strength = 108,leader = "Dreadnought",		follower = "K2 Fighter",		shape = "V4"},	--80,	7
		{strength = 109,leader = "Strongarm",		follower = "K2 Fighter",		shape = "V"},	--95,	7
		{strength = 110,leader = "Atlantis X23",	follower = "Brush",				shape = "W6"},	--50,	10
		{strength = 111,leader = "Strongarm",		follower = "Ktlitan Scout",		shape = "V"},	--95,	8
		{strength = 112,leader = "Dreadnought",		follower = "K3 Fighter",		shape = "V4"},	--80,	8
		{strength = 113,leader = "Dread No More",	follower = "Broom",				shape = "V"},	--87,	13
		{strength = 114,leader = "Atlantis X23",	follower = "Ktlitan Scout",		shape = "X8"},	--50,	8
		{strength = 115,leader = "Dread No More",	follower = "K2 Fighter",		shape = "V4"},	--87,	7
		{strength = 116,leader = "Dreadnought",		follower = "Fighter",			shape = "M6"},	--80,	6
		{strength = 117,leader = "Dread No More",	follower = "MT52 Hornet",		shape = "M6"},	--87,	5
		{strength = 118,leader = "Farco 3",			follower = "Sweeper",			shape = "W6"},	--16,	17
		{strength = 119,leader = "Dread No More",	follower = "K3 Fighter",		shape = "V4"},	--87,	8
		{strength = 120,leader = "Dreadnought",		follower = "MT52 Hornet",		shape = "X8"},	--80,	5
		{strength = 121,leader = "Strongarm",		follower = "Broom",				shape = "V"},	--95,	13
		{strength = 122,leader = "Dreadnought",		follower = "K2 Fighter",		shape = "M6"},	--80,	7
		{strength = 123,leader = "Strongarm",		follower = "K2 Fighter",		shape = "V4"},	--95,	7
		{strength = 124,leader = "Nirvana R5A",		follower = "Broom",				shape = "X8"},	--20,	13
		{strength = 125,leader = "Strongarm",		follower = "MU52 Hornet",		shape = "M6"},	--95,	5
		{strength = 126,leader = "Atlantis X23",	follower = "Nirvana R5",		shape = "V4"},	--50,	19
		{strength = 127,leader = "Strongarm",		follower = "Ktlitan Scout",		shape = "V4"},	--95,	8
		{strength = 128,leader = "Dreadnought",		follower = "K3 Fighter",		shape = "M6"},	--80,	8
		{strength = 129,leader = "Strongarm",		follower = "Sweeper",			shape = "V"},	--95,	17
		{strength = 130,leader = "Atlantis X23",	follower = "Nirvana R5A",		shape = "V4"},	--50,	20
		{strength = 131,leader = "Gunship",			follower = "Nirvana R5",		shape = "M6"},	--17,	19
	}
	fleet_exclusions = {
		["Nuke"]	= {letter = "N", exclude = false},
		["Warp"]	= {letter = "W", exclude = false},
		["Jump"]	= {letter = "J", exclude = false},
		["Unusual"]	= {letter = "U", exclude = true},
	}
--	patrol_probe value should be between 0 and 5 not inclusive (0 = no patrol probes). The higher the value, the faster the patrol probe and the fewer patrol probes available 
	playerShipStats = {	
		["Atlantis"]			= { strength = 52,	cargo = 6,	distance = 400,	long_range_radar = 30000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Benedict"]			= { strength = 10,	cargo = 9,	distance = 400,	long_range_radar = 30000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 10,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Crucible"]			= { strength = 45,	cargo = 5,	distance = 200,	long_range_radar = 20000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 9,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Ender"]				= { strength = 100,	cargo = 20,	distance = 2000,long_range_radar = 45000, short_range_radar = 7000, tractor = true,		mining = false,	probes = 12,	pods = 6,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 2,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Flavia P.Falcon"]		= { strength = 13,	cargo = 15,	distance = 200,	long_range_radar = 40000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 8,		pods = 4,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Hathcock"]			= { strength = 30,	cargo = 6,	distance = 200,	long_range_radar = 35000, short_range_radar = 6000, tractor = false,	mining = true,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Kiriya"]				= { strength = 10,	cargo = 9,	distance = 400,	long_range_radar = 35000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 10,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Maverick"]			= { strength = 45,	cargo = 5,	distance = 200,	long_range_radar = 20000, short_range_radar = 4000, tractor = false,	mining = true,	probes = 9,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["MP52 Hornet"] 		= { strength = 7, 	cargo = 3,	distance = 100,	long_range_radar = 18000, short_range_radar = 4000, tractor = false,	mining = false,	probes = 5,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Nautilus"]			= { strength = 12,	cargo = 7,	distance = 200,	long_range_radar = 22000, short_range_radar = 4000, tractor = false,	mining = false,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Phobos M3P"]			= { strength = 19,	cargo = 10,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 6,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Piranha"]				= { strength = 16,	cargo = 8,	distance = 200,	long_range_radar = 25000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 6,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Player Cruiser"]		= { strength = 40,	cargo = 6,	distance = 400,	long_range_radar = 30000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Player Missile Cr."]	= { strength = 45,	cargo = 8,	distance = 200,	long_range_radar = 35000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 9,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Player Fighter"]		= { strength = 7,	cargo = 3,	distance = 100,	long_range_radar = 15000, short_range_radar = 4500, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Repulse"]				= { strength = 14,	cargo = 12,	distance = 200,	long_range_radar = 38000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 8,		pods = 5,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Striker"]				= { strength = 8,	cargo = 4,	distance = 200,	long_range_radar = 35000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 6,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["ZX-Lindworm"]			= { strength = 8,	cargo = 3,	distance = 100,	long_range_radar = 18000, short_range_radar = 5500, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
	--	Custom player ships	
		["Amalgam"]				= { strength = 42,	cargo = 7,	distance = 400,	long_range_radar = 36000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 11,	pods = 3,	turbo_torp = true,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 5,	beam_damage_switch = true,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Atlantis II"]			= { strength = 60,	cargo = 6,	distance = 400,	long_range_radar = 30000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 11,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Barrow"]				= { strength = 9,	cargo = 9,	distance = 400,	long_range_radar = 35000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 12,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 2,	power_sensor_interval = 5,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Bermuda"]				= { strength = 30,	cargo = 4,	distance = 400,	long_range_radar = 30000, short_range_radar = 4500, tractor = true,		mining = false,	probes = 14,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = {"E3","N3"},				balance_shield = false,	},
		["Butler"]				= { strength = 20,	cargo = 6,	distance = 200,	long_range_radar = 30000, short_range_radar = 5500, tractor = true,		mining = false,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Caretaker"]			= { strength = 23,	cargo = 6,	distance = 200,	long_range_radar = 35000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 9,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Chavez"]				= { strength = 21,	cargo = 6,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 2.5,	prox_scan = 0,	epjam = 1,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Crab"]				= { strength = 20,	cargo = 6,	distance = 200,	long_range_radar = 30000, short_range_radar = 5500, tractor = false,	mining = true,	probes = 13,	pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Deimos"]				= { strength = 28,	cargo = 8,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 11,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 3,	epjam = 1,	power_sensor_interval = 7.5,beam_damage_switch = false,	way_dist = true,	trigger_missile = {"E4","N4"},				balance_shield = false,	},
		["Destroyer III"]		= { strength = 25,	cargo = 7,	distance = 200,	long_range_radar = 32000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Destroyer IV"]		= { strength = 27,	cargo = 5,	distance = 400,	long_range_radar = 30000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 8,		pods = 1,	turbo_torp = true,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Eldridge"]			= { strength = 25,	cargo = 7,	distance = 200,	long_range_radar = 24000, short_range_radar = 8000, tractor = false,	mining = true,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 3,	prox_scan = 3,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Era"]					= { strength = 14,	cargo = 14,	distance = 200,	long_range_radar = 50000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 8,		pods = 4,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 9,	epjam = 3,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = {"N3","N4"},				balance_shield = false,	},
		["Flavia 2C"]			= { strength = 25,	cargo = 12,	distance = 200,	long_range_radar = 30000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 9,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Focus"]				= { strength = 35,	cargo = 4,	distance = 200,	long_range_radar = 32000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 8,		pods = 1,	turbo_torp = true,	patrol_probe = 1.25,prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Fowl"]				= { strength = 8,	cargo = 3,	distance = 100,	long_range_radar = 15000, short_range_radar = 4500, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 3,	power_sensor_interval = 7.5,beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Fray"]				= { strength = 22,	cargo = 5,	distance = 200,	long_range_radar = 23000, short_range_radar = 4500, tractor = true,		mining = false,	probes = 7,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Fresnel"]				= { strength = 8,	cargo = 3,	distance = 100,	long_range_radar = 15000, short_range_radar = 4500, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = true,	patrol_probe = 0,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 6,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Gadfly"]				= { strength = 9,	cargo = 3,	distance = 100,	long_range_radar = 15000, short_range_radar = 4500, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 3.6,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 6,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Glass Cannon"]		= { strength = 15,	cargo = 3,	distance = 100,	long_range_radar = 30000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 8,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Gull"]				= { strength = 14,	cargo = 14,	distance = 200,	long_range_radar = 40000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 8,		pods = 4,	turbo_torp = false,	patrol_probe = 4,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Holmes"]				= { strength = 35,	cargo = 6,	distance = 200,	long_range_radar = 35000, short_range_radar = 4000, tractor = true,		mining = false,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Interlock"]			= { strength = 19,	cargo = 12,	distance = 200,	long_range_radar = 35000, short_range_radar = 5500, tractor = false,	mining = true,	probes = 13,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Kludge"]				= { strength = 22,	cargo = 9,	distance = 200,	long_range_radar = 35000, short_range_radar = 3500, tractor = false,	mining = true,	probes = 20,	pods = 5,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = {"E3"},					balance_shield = false,	},
		["Lurker"]				= { strength = 18,	cargo = 3,	distance = 100,	long_range_radar = 21000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = {"E4"},					balance_shield = false,	},
		["Mantis"]				= { strength = 30,	cargo = 8,	distance = 200,	long_range_radar = 25000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 9,		pods = 2,	turbo_torp = true,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = {"E3","E4","N3","N4"},	balance_shield = false,	},
		["Maverick XP"]			= { strength = 23,	cargo = 5,	distance = 200,	long_range_radar = 25000, short_range_radar = 7000, tractor = true,		mining = false,	probes = 10,	pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 2,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Midian"]				= { strength = 30,	cargo = 9,	distance = 200,	long_range_radar = 25000, short_range_radar = 5500, tractor = false,	mining = false,	probes = 9,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = {"E3","E4"},				balance_shield = false,	},
		["Mortar"]				= { strength = 45,	cargo = 5,	distance = 200,	long_range_radar = 25000, short_range_radar = 4500, tractor = false,	mining = true,	probes = 9,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["MX-Lindworm"]			= { strength = 10,	cargo = 3,	distance = 100,	long_range_radar = 30000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 5,		pods = 1,	turbo_torp = false,	patrol_probe = 3,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Noble"]				= { strength = 37,	cargo = 6,	distance = 400,	long_range_radar = 27000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Nusret"]				= { strength = 16,	cargo = 7,	distance = 200,	long_range_radar = 25000, short_range_radar = 4000, tractor = false,	mining = true,	probes = 10,	pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 3,	power_sensor_interval = 5,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Orca"]				= { strength = 19,	cargo = 6,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 6,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 1,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Pacu"]				= { strength = 18,	cargo = 7,	distance = 200,	long_range_radar = 20000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 6,		pods = 2,	turbo_torp = false,	patrol_probe = 2.5,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Peacock"]				= { strength = 30,	cargo = 9,	distance = 400,	long_range_radar = 25000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 10,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Phargus"]				= { strength = 15,	cargo = 6,	distance = 200,	long_range_radar = 20000, short_range_radar = 5500, tractor = false,	mining = false,	probes = 6,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Phobos T2"]			= { strength = 19,	cargo = 9,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 5,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Phobos T2.2"]			= { strength = 19,	cargo = 9,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 5,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Phoenix"]				= { strength = 40,	cargo = 6,	distance = 400,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 6,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Porcupine"]			= { strength = 30,	cargo = 6,	distance = 400,	long_range_radar = 25000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Proto-Atlantis"]		= { strength = 42,	cargo = 4,	distance = 400,	long_range_radar = 30000, short_range_radar = 4500, tractor = false,	mining = true,	probes = 8,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Proto-Atlantis 2"]	= { strength = 40,	cargo = 4,	distance = 400,	long_range_radar = 30000, short_range_radar = 4500, tractor = false,	mining = true,	probes = 8,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Raven"]				= { strength = 33,	cargo = 5,	distance = 400,	long_range_radar = 25000, short_range_radar = 6000, tractor = true,		mining = false,	probes = 7,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Redhook"]				= { strength = 14,	cargo = 8,	distance = 200,	long_range_radar = 20000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 6,		pods = 2,	turbo_torp = false,	patrol_probe = 2.5,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 5,	beam_damage_switch = false,	way_dist = false,	trigger_missile = {"E3","E4"},				balance_shield = false,	},
		["Roc"]					= { strength = 25,	cargo = 6,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = true,		mining = false,	probes = 6,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 1,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Rodent"]				= { strength = 23,	cargo = 8,	distance = 200,	long_range_radar = 40000, short_range_radar = 5500, tractor = false,	mining = false,	probes = 9,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Ronco"]				= { strength = 25,	cargo = 12,	distance = 200,	long_range_radar = 30000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 9,		pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = true,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Rook"]				= { strength = 15,	cargo = 12,	distance = 200,	long_range_radar = 41000, short_range_radar = 5500, tractor = false,	mining = true,	probes = 13,	pods = 3,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Rotor"]				= { strength = 35,	cargo = 5,	distance = 200,	long_range_radar = 25000, short_range_radar = 4000, tractor = true,		mining = false,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Safari"]				= { strength = 15,	cargo = 10,	distance = 200,	long_range_radar = 33000, short_range_radar = 4500, tractor = true,		mining = false,	probes = 9,		pods = 3,	turbo_torp = false,	patrol_probe = 3.5,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 5,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Scatter"]				= { strength = 30,	cargo = 6,	distance = 200,	long_range_radar = 28000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 8,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Skray"]				= { strength = 15,	cargo = 3,	distance = 200, long_range_radar = 30000, short_range_radar = 7500, tractor = false,	mining = false,	probes = 25,	pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 3,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Sloop"]				= { strength = 20,	cargo = 8,	distance = 200,	long_range_radar = 35000, short_range_radar = 4500, tractor = true,		mining = true,	probes = 9,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 2,	epjam = 2,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Squid"]				= { strength = 15,	cargo = 8,	distance = 200,	long_range_radar = 25000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 7,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 8,	beam_damage_switch = false,	way_dist = true,	trigger_missile = {"N3","N4"},				balance_shield = false,	},
		["Striker LX"]			= { strength = 16,	cargo = 4,	distance = 200,	long_range_radar = 20000, short_range_radar = 4000, tractor = false,	mining = false,	probes = 7,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Surkov"]				= { strength = 35,	cargo = 6,	distance = 200,	long_range_radar = 35000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 8,		pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Twister"]				= { strength = 32,	cargo = 6,	distance = 200,	long_range_radar = 23000, short_range_radar = 5500, tractor = false,	mining = true,	probes = 15,	pods = 2,	turbo_torp = false,	patrol_probe = 3,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = {"E3","E4","N3","N4"},	balance_shield = false,	},
		["Torch"]				= { strength = 9,	cargo = 3,	distance = 100,	long_range_radar = 15000, short_range_radar = 4000, tractor = false,	mining = false,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Triumph"]				= { strength = 55,	cargo = 6,	distance = 400,	long_range_radar = 35000, short_range_radar = 5000, tractor = true,		mining = true,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Vermin"]				= { strength = 13,	cargo = 3,	distance = 100,	long_range_radar = 22000, short_range_radar = 4000, tractor = false,	mining = true,	probes = 4,		pods = 1,	turbo_torp = false,	patrol_probe = 3.6,	prox_scan = 0,	epjam = 1,	power_sensor_interval = 10,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Windmill"]			= { strength = 24,	cargo = 11,	distance = 200,	long_range_radar = 33000, short_range_radar = 5000, tractor = false,	mining = true,	probes = 8,		pods = 4,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 0,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["Wombat"]				= { strength = 18,	cargo = 3,	distance = 100,	long_range_radar = 18000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 5,		pods = 1,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 2,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Wrocket"]				= { strength = 19,	cargo = 8,	distance = 200,	long_range_radar = 32000, short_range_radar = 5500, tractor = false,	mining = false,	probes = 10,	pods = 2,	turbo_torp = false,	patrol_probe = 0,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = false,	trigger_missile = nil,						balance_shield = false,	},
		["XR-Lindworm"]			= { strength = 13,	cargo = 3,	distance = 100,	long_range_radar = 20000, short_range_radar = 6000, tractor = false,	mining = false,	probes = 5,		pods = 1,	turbo_torp = false,	patrol_probe = 3.9,	prox_scan = 9,	epjam = 0,	power_sensor_interval = 7.5,beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},

		-- not sure the strenghts of Ktlitan Breaker and Ktlitan Feeder... they seem too high
		["Ktlitan Breaker"]		= { strength = 15,	cargo = 2,	distance = 100,	long_range_radar = 10000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 0,		pods = 0,	turbo_torp = false,	patrol_probe = 3.9,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Ktlitan Feeder"]		= { strength = 18,	cargo = 2,	distance = 100,	long_range_radar = 10000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 0,		pods = 0,	turbo_torp = false,	patrol_probe = 3.9,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		
		-- TODO: decide on values here as well.
		-- Not sure why Queen entry has to be here...
		["Ktlitan Queen"]		= { strength = 28,	cargo = 2,	distance = 100,	long_range_radar = 10000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 0,		pods = 0,	turbo_torp = false,	patrol_probe = 3.9,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
		["Ktlitan Brood Mother"]= { strength = 28,	cargo = 2,	distance = 100,	long_range_radar = 10000, short_range_radar = 5000, tractor = false,	mining = false,	probes = 0,		pods = 0,	turbo_torp = false,	patrol_probe = 3.9,	prox_scan = 1,	epjam = 0,	power_sensor_interval = 0,	beam_damage_switch = false,	way_dist = true,	trigger_missile = nil,						balance_shield = false,	},
	}	
	-- this table has ended up not in alphabetical order
	-- likewise the creation functions are no longer in alphabetical order
	-- this probably wants to be fixed after the upcomming merge conflict has been dealt with
	playerShipInfo = {}
	addPlayerShip("Ambition",	"Phobos T2",	createPlayerShipAmbition	,"J")
	addPlayerShip("Anvil",		"Deimos",		createPlayerShipAnvil		,"W")
	addPlayerShip("Argonaut",	"Nusret",		createPlayerShipArgonaut	,"J")
	addPlayerShip("Arwine",		"Pacu",			createPlayerShipArwine		,"J")
	addPlayerShip("Barracuda",	"Redhook",		createPlayerShipBarracuda	,"J")
	addPlayerShip("Beowulf",	"Nusret",		createPlayerShipHrothgar	,"J")
	addPlayerShip("Blaire",		"Kludge",		createPlayerShipBlaire		,"B")
--	addPlayerShip("Blazon"		,createPlayerShipBlazon
	addPlayerShip("Bling",		"Gadfly",		createPlayerShipBling		,"J")
	addPlayerShip("Claw",		"Raven",		createPlayerShipClaw		,"W")
	addPlayerShip("Cobra",		"Striker LX",	createPlayerShipCobra		,"J")
	addPlayerShip("Crux",		"Mantis",		createPlayerShipCrux		,"W")
	addPlayerShip("Darkstar",	"Destroyer IV",	createPlayerShipDarkstar	,"J")
	addPlayerShip("Devon",		"Wombat",		createPlayerShipDevon		,"W")
	addPlayerShip("Dial",		"Ronco",		createPlayerShipDial		,"W")
	addPlayerShip("Dominant",	"Triumph",		createPlayerShipDominant	,"J")
	addPlayerShip("Eagle",		"Era",			createPlayerShipEagle		,"W")
	addPlayerShip("Endeavor",	"Bermuda",		createPlayerShipEndeavor	,"J")
	addPlayerShip("Enola",		"Fray",			createPlayerShipEnola		,"J")
--	addPlayerShip("Espadon",	"Orca",			createPlayerShipEspadon		,"W")
	addPlayerShip("Falcon",		"Eldridge",		createPlayerShipFalcon		,"W")
	addPlayerShip("Farrah",		"Wombat",		createPlayerShipDevon		,"W")	--set ship name in routine
	addPlayerShip("Fist",		"Interlock",	createPlayerShipFist		,"J")
	addPlayerShip("Flaire",		"Peacock",		createPlayerShipFlaire		,"J")
	addPlayerShip("Flipper",	"Midian",		createPlayerShipFlipper		,"W")
	addPlayerShip("Florentine",	"Safari",		createPlayerShipFlorentine	,"W")
	addPlayerShip("Gabble",		"Squid",		createPlayerShipGabble		,"J")
	addPlayerShip("George",		"Rodent",		createPlayerShipGeorge		,"J")
	addPlayerShip("Gorn",		"Proto-Atlantis",createPlayerShipGorn		,"J")
	addPlayerShip("Grad",		"Mortar",		createPlayerShipMortar		,"W")
	addPlayerShip("Guinevere",	"Caretaker",	createPlayerShipGuinevere	,"J")
	addPlayerShip("Halberd",	"Proto-Atlantis",createPlayerShipHalberd	,"J")	--proto-atlantis
	addPlayerShip("Headhunter",	"Redhook",		createPlayerShipHeadhunter	,"J")
	addPlayerShip("Hearken",	"Redhook",		createPlayerShipHearken		,"J")
	addPlayerShip("Hrothgar",	"Nusret",		createPlayerShipHrothgar	,"J")
	addPlayerShip("Hummer",		"XR-Lindworm",	createPlayerShipHummer		,"W")
	addPlayerShip("Ignite",		"Torch",		createPlayerShipTorch		,"W")
	addPlayerShip("Ink",		"Squid",		createPlayerShipInk			,"J")
	addPlayerShip("Jarvis",		"Butler",		createPlayerShipJarvis		,"W")
	addPlayerShip("Jeeves",		"Butler",		createPlayerShipJeeves		,"W")
	addPlayerShip("Kindling",	"Phoenix",		createPlayerShipKindling	,"J")
--	addPlayerShip("Knick",		"Glass Cannon",	createPlayerShipKnick		,"J"},"Experimental - not ready for use"
	addPlayerShip("Knuckle Drag","Destroyer III",createPlayerShipSimian		,"J")
	addPlayerShip("Lancelot",	"Noble",		createPlayerShipLancelot	,"J")
	addPlayerShip("Levant",		"Sloop",		createPlayerShipSloop		,"J")
	addPlayerShip("Magnum",		"Focus",		createPlayerShipMagnum		,"J")
	addPlayerShip("Manxman",	"Nusret",		createPlayerShipManxman		,"J")
	addPlayerShip("Mixer",		"Amalgam",		createPlayerShipMixer		,"J")
	addPlayerShip("Narsil",		"Proto-Atlantis",createPlayerShipNarsil		,"W")
	addPlayerShip("Nimbus",		"Phobos T2.2",	createPlayerShipNimbus		,"J")
	addPlayerShip("Osprey",		"Flavia 2C",	createPlayerShipOsprey		,"W")
	addPlayerShip("Outcast",	"Scatter",		createPlayerShipOutcast		,"J")
	addPlayerShip("Pinwheel",	"Rotor"	,		createPlayerShipPinwheel	,"W")
	addPlayerShip("Quarter",	"Barrow",		createPlayerShipQuarter		,"J")
	addPlayerShip("Quicksilver","XR-Lindworm",	createPlayerShipQuick		,"W")
	addPlayerShip("Quill",		"Porcupine",	createPlayerShipQuill		,"W")
	addPlayerShip("Raptor",		"Destroyer IV",	createPlayerShipRaptor		,"J")
	addPlayerShip("Rattler",	"MX-Lindworm",	createPlayerShipRattler		,"J")
	addPlayerShip("Rip",		"Lurker",		createPlayerShipRip			,"W")
	addPlayerShip("Rocinante",	"Windmill",		createPlayerShipRocinante	,"W")
	addPlayerShip("Rogue",		"Maverick XP",	createPlayerShipRogue		,"J")
	addPlayerShip("Skray",		"Skray",		createplayerShipSneak		,"J")
	addPlayerShip("Sparrow",	"Vermin",		createPlayerShipSparrow		,"W")
	addPlayerShip("Shannon",	"Wombat",		createPlayerShipDevon		,"W")	--set ship name in routine
	addPlayerShip("Slingshot",	"Wrocket",		createPlayerShipSlingshot	,"J")
	addPlayerShip("Splinter",	"Fresnel",		createPlayerShipSplinter	,"J")
	addPlayerShip("Spike",		"Surkov",		createPlayerShipStick		,"W")
	addPlayerShip("Spyder",		"Atlantis II",	createPlayerShipSpyder		,"J")
	addPlayerShip("Stick",		"Surkov",		createPlayerShipStick		,"W")
	addPlayerShip("Sting",		"Surkov",		createPlayerShipSting		,"W")
	addPlayerShip("Swoop",		"Roc",			createPlayerShipRoc			,"W")
	addPlayerShip("Szpieg",		"Ktlitan Breaker",	createPlayerShipSzpieg	,"W")
	addPlayerShip("Sztylet",	"Ktlitan Feeder",	createPlayerShipSztylet	,"W")
	addPlayerShip("Katarzyna",	"Ktlitan Brood Mother",	createPlayerShipKatarzyna	,"W")
	addPlayerShip("Tango",		"Twister",		createPlayerShipTango		,"W")
	addPlayerShip("Terror",		"Phobos T2.2",	createPlayerShipTerror		,"J")
	addPlayerShip("Thelonius",	"Crab",			createPlayerShipThelonius	,"W")
	addPlayerShip("Thunderbird","Destroyer IV",	createPlayerShipThunderbird	,"J")
	addPlayerShip("Vision",		"Era",			createPlayerShipVision		,"W")
	addPlayerShip("Watson",		"Holmes",		createPlayerShipWatson		,"W")
	addPlayerShip("Wesson",		"Chavez",		createPlayerShipWesson		,"J")
	addPlayerShip("Wiggy",		"Gull",			createPlayerShipWiggy		,"J")
	addPlayerShip("Yorik",		"Rook",			createPlayerShipYorik		,"J")
	makePlayerShipActive("Wiggy")			--J
	makePlayerShipActive("Endeavor")		--J
	makePlayerShipActive("Guinevere") 		--J 
	makePlayerShipActive("Flipper")			--W
	makePlayerShipActive("Thelonius")		--W
	makePlayerShipActive("Osprey") 			--W 
	carrier_class_launch_time = {
		["Starfighter"] = 5,
		["Frigate"] = 10,
		["Corvette"] = 15,
		["Dreadnought"] = 20,
	}
	carrier_ship_types = {
		["Atlantis"] =				{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Benedict"] =				{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Crucible"] =				{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Ender"] =					{carry = false,	class = "Dreadnought",	create = stockPlayer,	},
		["Flavia P.Falcon"] =		{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Hathcock"] =				{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Kiriya"] =				{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Maverick"] =				{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["MP52 Hornet"] = 			{carry = false,	class = "Starfighter",	create = stockPlayer,	},
		["Nautilus"] =				{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Phobos M3P"] =			{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Piranha"] =				{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Player Cruiser"] =		{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Player Missile Cr."] =	{carry = false,	class = "Corvette",		create = stockPlayer,	},
		["Player Fighter"] =		{carry = false,	class = "Starfighter",	create = stockPlayer,	},
		["Repulse"] =				{carry = false,	class = "Frigate",		create = stockPlayer,	},
		["Striker"] =				{carry = false,	class = "Starfighter",	create = stockPlayer,	},
		["ZX-Lindworm"] =			{carry = false,	class = "Starfighter",	create = stockPlayer,	},
		["Amalgam"] =				{carry = false,	class = "Corvette",		create = createPlayerShipMixer,	},
		["Atlantis II"] =			{carry = false,	class = "Corvette",		create = createPlayerShipSpyder,	},
		["Barrow"] =				{carry = false,	class = "Corvette",		create = createPlayerShipQuarter,	},
		["Bermuda"] =				{carry = false,	class = "Corvette",		create = createPlayerShipEndeavor,	},
		["Butler"] =				{carry = false,	class = "Corvette",		create = createPlayerShipJeeves,	},	--or Jarvis
		["Caretaker"] =				{carry = false,	class = "Corvette",		create = createPlayerShipGuinevere,	},
		["Chavez"] =				{carry = false,	class = "Frigate",		create = createPlayerShipWesson,	},
		["Crab"] =					{carry = false,	class = "Corvette",		create = createPlayerShipThelonius,	},
		["Deimos"] =				{carry = false,	class = "Frigate",		create = createPlayerShipAnvil,	},
		["Destroyer III"] =			{carry = false,	class = "Corvette",		create = createPlayerShipSimian,	},
		["Destroyer IV"] =			{carry = false,	class = "Corvette",		create = createPlayerShipDarkstar,	},	--or Raptor or Thunderbird
		["Eldridge"] =				{carry = false,	class = "Frigate",		create = createPlayerShipFalcon,	},
		["Era"] =					{carry = false,	class = "Frigate",		create = createPlayerShipEagle,	},		--or Vision
		["Flavia 2C"] =				{carry = false,	class = "Frigate",		create = createPlayerShipOsprey,	},
		["Focus"] =					{carry = false,	class = "Corvette",		create = createPlayerShipMagnum,	},
		["Fowl"] =					{carry = false,	class = "Starfighter",	create = createPlayerShipFowl,	},
		["Fray"] =					{carry = false,	class = "Corvette",		create = createPlayerShipEnola,	},
		["Fresnel"] =				{carry = false,	class = "Starfighter",	create = createPlayerShipSplinter,	},
		["Gadfly"] =				{carry = false,	class = "Starfighter",	create = createPlayerShipBling,	},
		["Glass Cannon"] =			{carry = false,	class = "Starfighter",	create = createPlayerShipKnick,	},
		["Gull"] =					{carry = false,	class = "Frigate",		create = createPlayerShipWiggy,	},
		["Holmes"] =				{carry = false,	class = "Corvette",		create = createPlayerShipWatson,	},
		["Interlock"] =				{carry = false,	class = "Frigate",		create = createPlayerShipFist,	},
		["Kludge"] =				{carry = false,	class = "Corvette",		create = createPlayerShipBlaire,	},
		["Lurker"] =				{carry = false,	class = "Starfighter",	create = createPlayerShipRip,	},
		["Mantis"] =				{carry = false,	class = "Corvette",		create = createPlayerShipCrux,	},
		["Maverick XP"] =			{carry = false,	class = "Corvette",		create = createPlayerShipRogue,	},
		["Midian"] =				{carry = false,	class = "Corvette",		create = createPlayerShipFlipper,	},
		["Mortar"] =				{carry = false,	class = "Corvette",		create = createPlayerShipMortar,	},
		["MX-Lindworm"] =			{carry = false,	class = "Starfighter",	create = createPlayerShipRattler,	},
		["Noble"] =					{carry = false,	class = "Corvette",		create = createPlayerShipLancelot,	},
		["Nusret"] =				{carry = false,	class = "Frigate",		create = createPlayerShipManxman,	},	--or Argonaut or Hrothgar
		["Orca"] =					{carry = false,	class = "Frigate",		create = createPlayerShipEspadon,	},
		["Pacu"] =					{carry = false,	class = "Frigate",		create = createPlayerShipArwine,	},
		["Peacock"] =				{carry = false,	class = "Corvette",		create = createPlayerShipFlaire,	},
		["Phargus"] =				{carry = false,	class = "Frigate",		create = createPlayerShipPhargus,	},
		["Phobos T2"] =				{carry = false,	class = "Frigate",		create = createPlayerShipAmbition,	},
		["Phobos T2.2"] =			{carry = false,	class = "Frigate",		create = createPlayerShipNimbus,	},	--or Terror
		["Phoenix"] =				{carry = false,	class = "Corvette",		create = createPlayerShipKindling,	},
		["Porcupine"] =				{carry = false,	class = "Frigate",		create = createPlayerShipQuill,	},
		["Proto-Atlantis"] =		{carry = false,	class = "Corvette",		create = createPlayerShipHalberd,	},	--or Gorn
		["Proto-Atlantis 2"] =		{carry = false,	class = "Corvette",		create = createPlayerShipNarsil,	},
		["Raven"] =					{carry = false,	class = "Corvette",		create = createPlayerShipClaw,	},
		["Redhook"] =				{carry = false,	class = "Frigate",		create = createPlayerShipHeadhunter,	},	--or Barracuda or Hearken
		["Roc"] =					{carry = false,	class = "Frigate",		create = createPlayerShipRoc,	},
		["Rodent"] =				{carry = false,	class = "Frigate",		create = createPlayerShipGeorge,	},
		["Ronco"] =					{carry = false,	class = "Frigate",		create = createPlayerShipDial,	},
		["Rook"] =					{carry = false,	class = "Frigate",		create = createPlayerShipYorik,	},
		["Rotor"] =					{carry = false,	class = "Corvette",		create = createPlayerShipPinwheel,	},
		["Safari"] =				{carry = false,	class = "Frigate",		create = createPlayerShipFlorentine,	},
		["Scatter"] =				{carry = false,	class = "Frigate",		create = createPlayerShipOutcast,	},
		["Skray"] =					{carry = false,	class = "Frigate",		create = createplayerShipSneak,	},
		["Sloop"] =					{carry = false,	class = "Frigate",		create = createPlayerShipSloop,	},
		["Squid"] =					{carry = false,	class = "Frigate",		create = createPlayerShipInk,	},	--or Gabble
		["Striker LX"] =			{carry = false,	class = "Starfighter",	create = createPlayerShipCobra,	},
		["Surkov"] =				{carry = false,	class = "Frigate",		create = createPlayerShipSting,	},	--or Stick or Spike
		["Twister"] =				{carry = false,	class = "Frigate",		create = createPlayerShipTango,	},
		["Torch"] =					{carry = false,	class = "Starfighter",	create = createPlayerShipTorch,	},
		["Triumph"] =				{carry = false,	class = "Corvette",		create = createPlayerShipDominant,	},
		["Vermin"] =				{carry = false,	class = "Starfighter",	create = createPlayerShipSparrow,	},
		["Windmill"] =				{carry = false,	class = "Frigate",		create = createPlayerShipRocinante,	},
		["Wombat"] =				{carry = false,	class = "Starfighter",	create = createPlayerShipDevon,	},
		["Wrocket"] =				{carry = false,	class = "Frigate",		create = createPlayerShipSlingshot,	},
		["XR-Lindworm"] =			{carry = false,	class = "Starfighter",	create = createPlayerShipQuick,	},	--or Hummer	
	}
	carrier_ship_names = {
		["Atlantis"] =				{"Golga","Gorgon","Outsize"},
		["Benedict"] =				{"Circular","Mobius","Nepotist"},
		["Crucible"] =				{"Cannon","Artillery","Catapult"},
		["Ender"] =					{"Galactic","Waamba","Gargantua"},
		["Flavia P.Falcon"] =		{"Heron","Boxer","Independence"},
		["Hathcock"] =				{"Prickly","Catcus","Needle Nose"},
		["Kiriya"] =				{"Dissociate","Avuncular","Mirror"},
		["Maverick"] =				{"Herald","Distilled","Surprise"},
		["MP52 Hornet"] = 			{"Carpenter","Stinger","Nitro"},
		["Nautilus"] =				{"Wherewithal","Puppeteer","Pidgeon"},
		["Phobos M3P"] =			{"Elastic","Entropy","Inchoate"},
		["Piranha"] =				{"Nibbler","Tubular","Rabid"},
		["Player Cruiser"] =		{"Starburst","Nova","Escape"},
		["Player Missile Cr."] =	{"Gatling","Endurance","Wary"},
		["Player Fighter"] =		{"Pin","Torque","Flip"},
		["Repulse"] =				{"Muscle","Spinner","Chopper"},
		["Striker"] =				{"Rough","Shard","Angle"},
		["ZX-Lindworm"] =			{"Pony","Trickster","Bang"},
		["Amalgam"] =				{"Everyman","Politico","Comforter"},
		["Atlantis II"] =			{"Borgo","Ego","Kraken"},
		["Barrow"] =				{"Doppleganger","Twin","Clone"},
		["Bermuda"] =				{"Persistent","Insistent","Tyrant"},
		["Butler"] =				{"Merciless","Inperturbable","Aloof"},
		["Caretaker"] =				{"Confidence","Inquisitorial","Response"},
		["Chavez"] =				{"Chameleon","Blend","Camoflage"},
		["Crab"] =					{"Pincer","Dodge","Salty"},
		["Deimos"] =				{"Gander","Trip","Gondala"},
		["Destroyer III"] =			{"Portent","Strand","Isometric"},
		["Destroyer IV"] =			{"Bent","Inpenetrable","Impervious"},
		["Eldridge"] =				{"Fortune","Sprightly","Constable"},
		["Era"] =					{"Mindful","Peer","Star Flow"},
		["Flavia 2C"] =				{"Trickle","Retuned","Insatiable"},
		["Focus"] =					{"Growth","Scalar","Justice"},
		["Fowl"] =					{"Robin","Penguin","Harrier"},
		["Fray"] =					{"Harry","Skunk","Cappuccino"},
		["Fresnel"] =				{"Magnified","Starlight","Techno"},
		["Gadfly"] =				{"Zippy","Mosquito","Dart"},
		["Glass Cannon"] =			{"Once","Mastadon","Sabretooth"},
		["Gull"] =					{"Wingspan","Discover","Recon"},
		["Holmes"] =				{"Yardstick","Deer Hat","Induction"},
		["Interlock"] =				{"Traverse","Jasper","Intransigent"},
		["Kludge"] =				{"Bullwinkle","Clouseau","Quasimodo"},
		["Lurker"] =				{"Spark","Twinge","Scratch"},
		["Mantis"] =				{"Ray","Nemo","Skelter"},
		["Maverick XP"] =			{"Condensed","Impact","Compound"},
		["Midian"] =				{"Ethereal","Torn","Zapper"},
		["Mortar"] =				{"Galadriel","Belinda","Slippery"},
		["MX-Lindworm"] =			{"Tickler","Lickety","Vex"},
		["Noble"] =					{"Word","Stature","Knight"},
		["Nusret"] =				{"Trembler","Bright","Terse"},
		["Orca"] =					{"Pursuer","Gnarly","Unblemished"},
		["Pacu"] =					{"Energetic","Ardent","Frugal"},
		["Peacock"] =				{"Kaleidoscopic","Redolent","Extravagant"},
		["Phargus"] =				{"Defender","Dramatic","Intent"},
		["Phobos T2"] =				{"Thorough","Portentious","Precocious"},
		["Phobos T2.2"] =			{"Flagon","Thirsty","Trust"},
		["Phoenix"] =				{"Firebrand","Resilient","Chaste"},
		["Porcupine"] =				{"Bias","Mercenary","Frightful"},
		["Proto-Atlantis"] =		{"Temporal","Literal","Spruce"},
		["Proto-Atlantis 2"] =		{"Gertrude","Mildred","Jax"},
		["Raven"] =					{"Nevermore","Blackened","Reflective"},
		["Redhook"] =				{"Gatherer","Trifecta","Blender"},
		["Roc"] =					{"Bulk","Roast","Grimwald"},
		["Rodent"] =				{"Chirp","Muskrat","Ferret"},
		["Ronco"] =					{"Slicer","Dicer","Grinder"},
		["Rook"] =					{"Moors","Estuary","Fractal"},
		["Rotor"] =					{"Prismatic","Hirsute","Fate"},
		["Safari"] =				{"Scavenger","Guide","Traveler"},
		["Scatter"] =				{"Frisky","Fraught","Nimble"},
		["Skray"] =					{"Clipper","Symbolic","Provoker"},
		["Sloop"] =					{"Effervescent","Artisan","Vaulted"},
		["Squid"] =					{"Insidious","Trampler","Livid"},
		["Striker LX"] =			{"Bluejay","Fencer","Basilisk"},
		["Surkov"] =				{"Inveterate","Vertiginous","Advent"},
		["Twister"] =				{"Bowl","Force","Leverage"},
		["Torch"] =					{"Simmer","Boil","Blinder"},
		["Triumph"] =				{"Veil","Crown","Dreadful"},
		["Vermin"] =				{"Plague","Spreader","Gray Death"},
		["Windmill"] =				{"Cervantes","Willful","Indomitable"},
		["Wombat"] =				{"Aggravator","Fiendish","Fearless"},
		["Wrocket"] =				{"Revisitor","Retrograde","Cycler"},
		["XR-Lindworm"] =			{"Pointed","Poniard","Rapier"},
	}
	active_player_ship = true
	--goodsList = {	{"food",0}, {"medicine",0},	{"nickel",0}, {"platinum",0}, {"gold",0}, {"dilithium",0}, {"tritanium",0}, {"luxury",0}, {"cobalt",0}, {"impulse",0}, {"warp",0}, {"shield",0}, {"tractor",0}, {"repulsor",0}, {"beam",0}, {"optic",0}, {"robotic",0}, {"filament",0}, {"transporter",0}, {"sensor",0}, {"communication",0}, {"autodoc",0}, {"lifter",0}, {"android",0}, {"nanites",0}, {"software",0}, {"circuit",0}, {"battery",0}	}
	attackFleetFunction = {orderFleetAttack1,orderFleetAttack2,orderFleetAttack3,orderFleetAttack4,orderFleetAttack5,orderFleetAttack6,orderFleetAttack7,orderFleetAttack8}
	defendFleetFunction = {orderFleetDefend1,orderFleetDefend2,orderFleetDefend3,orderFleetDefend4,orderFleetDefend5,orderFleetDefend6,orderFleetDefend7,orderFleetDefend8}
	flyFleetFunction = {orderFleetFly1,orderFleetFly2,orderFleetFly3,orderFleetFly4,orderFleetFly5,orderFleetFly6,orderFleetFly7,orderFleetFly8}
	flyBlindFleetFunction = {orderFleetFlyBlind1,orderFleetFlyBlind2,orderFleetFlyBlind3,orderFleetFlyBlind4,orderFleetFlyBlind5,orderFleetFlyBlind6,orderFleetFlyBlind7,orderFleetFlyBlind8}
	dockFleetFunction = {orderFleetDock1,orderFleetDock2,orderFleetDock3,orderFleetDock4,orderFleetDock5,orderFleetDock6,orderFleetDock7,orderFleetDock8}
	associatedTypeDistance = {	["PlayerSpaceship"] = 2000,
								["SpaceStation"] = 2000,
								["SupplyDrop"] = 50,
								["WarpJammer"] = 200,
								["Mine"] = 200,
								["Asteroid"] = 200,
								["BlackHole"] = 5200,
								["Nebula"] = 200, 
								["Artifact"] = 200, 
								["ScanProbe"] = 200, 
								["VisualAsteroid"] = 200, 
								["WormHole"] = 2625,
								["CpuShip"] = 2000}
	spaceStationDistance = {["Small Station"] = 400, ["Medium Station"] = 1200, ["Large Station"] = 1400, ["Huge Station"] = 2000}
	commonGoods = {"food","medicine","nickel","platinum","gold","dilithium","tritanium","luxury","cobalt","impulse","warp","shield","tractor","repulsor","beam","optic","robotic","filament","transporter","sensor","communication","autodoc","lifter","android","nanites","software","circuit","battery"}
	componentGoods = {"impulse","warp","shield","tractor","repulsor","beam","optic","robotic","filament","transporter","sensor","communication","autodoc","lifter","android","nanites","software","circuit","battery"}
	mineralGoods = {"nickel","platinum","gold","dilithium","tritanium","cobalt"}
	good_desc = {
		["food"] =			_("trade-comms","food"),
		["medicine"] =		_("trade-comms","medicine"),
		["luxury"] =		_("trade-comms","luxury"),
		["cobalt"] =		_("trade-comms","cobalt"),
		["dilithium"] =		_("trade-comms","dilithium"),
		["gold"] =			_("trade-comms","gold"),
		["nickel"] =		_("trade-comms","nickel"),
		["platinum"] =		_("trade-comms","platinum"),
		["tritanium"] =		_("trade-comms","tritanium"),
		["autodoc"] =		_("trade-comms","autodoc"),
		["android"] =		_("trade-comms","android"),
		["battery"] =		_("trade-comms","battery"),
		["beam"] =			_("trade-comms","beam"),
		["circuit"] =		_("trade-comms","circuit"),
		["communication"] =	_("trade-comms","communication"),
		["filament"] =		_("trade-comms","filament"),
		["impulse"] =		_("trade-comms","impulse"),
		["lifter"] =		_("trade-comms","lifter"),
		["nanites"] =		_("trade-comms","nanites"),
		["optic"] =			_("trade-comms","optic"),
		["repulsor"] =		_("trade-comms","repulsor"),
		["robotic"] =		_("trade-comms","robotic"),
		["sensor"] =		_("trade-comms","sensor"),
		["shield"] =		_("trade-comms","shield"),
		["software"] =		_("trade-comms","software"),
		["tractor"] =		_("trade-comms","tractor"),
		["transporter"] =	_("trade-comms","transporter"),
		["warp"] =			_("trade-comms","warp"),
	}
	goods = {}					--overall tracking of goods
	tradeFood = {}				--stations that will trade food for other goods
	tradeLuxury = {}			--stations that will trade luxury for other goods
	tradeMedicine = {}			--stations that will trade medicine for other goods
	mineralPriceMin=70
	mineralPriceMax=100
	healthCheckTimerInterval = 10
	healthCheckTimer = getScenarioTime() + healthCheckTimerInterval
	pretty_system = {
		["reactor"] = "reactor",
		["beamweapons"] = "beam weapons",
		["missilesystem"] = "missile system",
		["maneuver"] = "maneuver",
		["impulse"] = "impulse engines",
		["warp"] = "warp drive",
		["jumpdrive"] = "jump drive",
		["frontshield"] = "front shield",
		["rearshield"] = "rear shield",
	}
	rendezvousPoints = {}
	rv_sequence = 100
	escapePodList = {}
	mine_labor_probe_list = {}
	boost_probe_list = {}
	sensor_jammer_list = {}
	sensor_jammer_range = 60000
	sensor_jammer_impact = 60000
	sensor_jammer_scan_complexity = 3
	sensor_jammer_scan_depth = 3
	sensor_jammer_power_units = false	--false means percentage, true is units
	drop_point_location = "At Click"
	scan_clue_location = "At Click"
	artifactCounter = 0
	artifactNumber = 0
	dropOrExtractAction = "Drop"
	marinePointList = {}
	engineerPointList = {}
	medicPointList = {}
	scanComplexity = 1
	scanDepth = 1
	--Default GM supply drop gives:
	--500 energy
	--4 Homing
	--1 Nuke
	--2 Mines
	--1 EMP
	supply_energy_range_min = 500
	supply_energy_range_max = 500
	supply_jump_charge_energy_range_min = 5000
	supply_jump_charge_energy_range_max = 50000
	supply_homing_range_min = 4
	supply_homing_range_max = 4
	supply_nuke_range_min = 1
	supply_nuke_range_max = 1
	supply_mine_range_min = 2
	supply_mine_range_max = 2
	supply_emp_range_min = 1
	supply_emp_range_max = 1
	supply_hvli_range_min = 0
	supply_hvli_range_max = 0
	supply_repair_crew_range_min = 0
	supply_repair_crew_range_max = 0
	supply_coolant_range_min = 0
	supply_coolant_range_max = 0
	supply_probes_range_min = 0
	supply_probes_range_max = 0
	supply_armor_range_min = 0
	supply_armor_range_max = 0
	shipTemplateDistance = {
		["Adder MK3"] =						100,
		["Adder MK4"] =						100,
		["Adder MK5"] =						100,
		["Adder MK6"] =						100,
		["Adder MK7"] =						100,
		["Adder MK8"] =						100,
		["Adder MK9"] =						100,
		["Adv. Gunship"] =					400,
		["Adv. Striker"] = 					300,
		["Atlantis X23"] =					400,
		["Atlantis Y42"] =					400,
		["Barracuda"] =						200,
		["Battlestation"] =					2000,
		["Beast Breaker"] =					300,
		["Blockade Runner"] =				400,
		["Blade"] =							300,
		["Broom"] =							100,
		["Brush"] =							100,
		["Buster"] =						100,
		["Command Base"] =					800,		
		["Courier"] =						600,
		["Cruiser"] =						200,
		["Cucaracha"] =						200,
		["Dagger"] =						100,
		["Dash"] =							200,
		["Defense platform"] =				800,
		["Diva"] =							350,
		["Tsarina"] =						350,
		["Brood Mother"] =					350,
		["Dread No More"] =					400,
		["Dreadnought"] =					400,
		["Elara P2"] =						200,
		["Enforcer"] =						400,
		["Enforcer V2"] =					400,
		["Equipment Freighter 1"] =			600,
		["Equipment Freighter 2"] =			600,
		["Equipment Freighter 3"] =			600,
		["Equipment Freighter 4"] =			800,
		["Equipment Freighter 5"] =			800,
		["Equipment Jump Freighter 3"] =	600,
		["Equipment Jump Freighter 4"] =	800,
		["Equipment Jump Freighter 5"] =	800,
		["Farco 3"] =						200,
		["Farco 5"] =						200,
		["Farco 8"] =						200,
		["Farco 11"] =						200,
		["Farco 13"] =						200,
		["Fiend G3"] =						400,
		["Fiend G4"] =						400,
		["Fiend G5"] =						400,
		["Fiend G6"] =						400,
		["Fighter"] =						100,
		["Touchy"] =						100,
		["Flash"] =							100,
		["Flavia"] =						200,
		["Flavia Falcon"] =					200,
		["Fortress"] =						2000,
		["Foul Feeder"] =					300,
		["Fray"] =							200,
		["Fuel Freighter 1"] =				600,
		["Fuel Freighter 2"] =				600,
		["Fuel Freighter 3"] =				600,
		["Fuel Freighter 4"] =				800,
		["Fuel Freighter 5"] =				800,
		["Fuel Jump Freighter 3"] =			600,
		["Fuel Jump Freighter 4"] =			800,
		["Fuel Jump Freighter 5"] =			800,
		["Garbage Freighter 1"] =			600,
		["Garbage Freighter 2"] =			600,
		["Garbage Freighter 3"] =			600,
		["Garbage Freighter 4"] =			800,
		["Garbage Freighter 5"] =			800,
		["Garbage Jump Freighter 3"] =		600,
		["Garbage Jump Freighter 4"] =		800,
		["Garbage Jump Freighter 5"] =		800,
		["Gnat"] =							300,
		["Goods Freighter 1"] =				600,
		["Goods Freighter 2"] =				600,
		["Goods Freighter 3"] =				600,
		["Goods Freighter 4"] =				800,
		["Goods Freighter 5"] =				800,
		["Goods Jump Freighter 3"] =		600,
		["Goods Jump Freighter 4"] =		800,
		["Goods Jump Freighter 5"] =		800,
		["Guard"] =							600,	--transport_1_1
		["Gulper"] =						400,
		["Gunner"] =						100,
		["Gunship"] =						400,
		["Heavy Drone"] = 					300,
		["Hunter"] =						200,
		["Hurricane"] =						200,
		["Jacket Drone"] =					300,
		["Jade 5"] =						100,
		["Jagger"] =						100,
		["Jump Carrier"] =					800,		
		["Karnack"] =						200,
		["K2 Fighter"] =					300,
		["K3 Fighter"] =					300,
		["Ktlitan Breaker"] =				300,
		["Ktlitan Destroyer"] = 			500,
		["Ktlitan Drone"] =					300,
		["Ktlitan Feeder"] =				300,
		["Ktlitan Fighter"] =				300,
		["Ktlitan Queen"] =					500,
		["Ktlitan Scout"] =					300,
		["Ktlitan Worker"] =				300,
		["Laden Lorry"] =					600,
		["Lite Drone"] = 					300,
		["Loki"] =							1500,
		["Maniapak"] =						100,
		["Mikado"] =						200,
		["Military Outpost"] =				800,
		["Missile Pod D1"] =				800,
		["Missile Pod D2"] =				800,
		["Missile Pod D4"] =				800,
		["Missile Pod T1"] =				800,
		["Missile Pod T2"] =				800,
		["Missile Pod TI2"] =				800,
		["Missile Pod TI4"] =				800,
		["Missile Pod TI8"] =				800,
		["Missile Pod TX4"] =				800,
		["Missile Pod TX8"] =				800,
		["Missile Pod TX16"] =				800,
		["Missile Pod S1"] =				800,
		["Missile Pod S4"] =				800,
		["Missile Cruiser"] =				200,
		["MT52 Hornet"] =					100,
		["MT55 Hornet"] =					100,
		["MU52 Hornet"] =					100,
		["MU55 Hornet"] =					100,
		["Munemi"] =						100,
		["MV52 Hornet"] =					100,
		["MX-Lindworm"] =					100,
		["Nirvana R3"] =					200,
		["Nirvana R5"] =					200,
		["Nirvana R5A"] =					200,
		["Nirvana R8"] =					200,
		["Odin"] = 							1500,
		["Omnibus"] = 						800,
		["overclocker"] =					600,
		["Peacock"] =						400,
		["Personnel Freighter 1"] =			600,
		["Personnel Freighter 2"] =			600,
		["Personnel Freighter 3"] =			600,
		["Personnel Freighter 4"] =			800,
		["Personnel Freighter 5"] =			800,
		["Personnel Jump Freighter 3"] =	600,
		["Personnel Jump Freighter 4"] =	800,
		["Personnel Jump Freighter 5"] =	800,
		["Phobos M3"] =						200,
		["Phobos R2"] =						200,
		["Phobos T3"] =						200,
		["Phobos T4"] =						200,
		["Physics Research"] =				600,
		["Piranha F10"] =					200,
		["Piranha F12"] =					200,
		["Piranha F12.M"] =					200,
		["Piranha F8"] =					200,
		["Porcupine"] =						400,
		["Prador"] =						2000,
		["Predator"] =						200,
		["Predator V2"] =					200,
		["Proto-Atlantis"] =				400,
		["Racer"] =							200,
		["Ranger"] =						100,
		["Ranus U"] =						200,
		["Roc"] =							200,
		["Rook"] =							200,
		["Ryder"] =							2000,
		["Sentinel"] =						600,
		["Service Jonque"] =				800,
		["Shepherd"] =						100,
		["Shooter"] =						100,
		["Sloop"] =							200,
		["Sniper Tower"] =					800,
		["Space Sedan"] =					600,
		["Stalker Q5"] =					200,
		["Stalker Q7"] =					200,
		["Stalker R5"] =					200,
		["Stalker R7"] =					200,
		["Starhammer II"] =					400,
		["Starhammer III"] =				400,
		["Starhammer V"] =					400,
		["Storm"] =							200,
		["Strike"] =						200,
		["Strikeship"] = 					200,
		["Strongarm"] =						400,
		["Supervisor"] =					400,
		["Sweeper"] =						100,
		["Tempest"] =						200,
		["Torch"] =							100,
		["Transport1x1"] =					600,
		["Transport1x2"] =					600,
		["Transport1x3"] =					600,
		["Transport1x4"] =					800,
		["Transport1x5"] =					800,
		["Transport2x1"] =					600,
		["Transport2x2"] =					600,
		["Transport2x3"] =					600,
		["Transport2x4"] =					800,
		["Transport2x5"] =					800,
		["Transport3x1"] =					600,
		["Transport3x2"] =					600,
		["Transport3x3"] =					600,
		["Transport3x4"] =					800,
		["Transport3x5"] =					800,
		["Transport4x1"] =					600,
		["Transport4x2"] =					600,
		["Transport4x3"] =					600,
		["Transport4x4"] =					800,
		["Transport4x5"] =					800,
		["Transport5x1"] =					600,
		["Transport5x2"] =					600,
		["Transport5x3"] =					600,
		["Transport5x4"] =					800,
		["Transport5x5"] =					800,
		["Tug"] =							200,
		["Twister"] =						200,
		["Tyr"] =							2000,
		["Waddle 5"] =						100,
		["Warden"] =						600,
		["Weapons platform"] =				200,
		["Whirlwind"] =						200,
		["Wombat"] =						100,
		["Work Wagon"] =					600,
		["WX-Lindworm"] =					100,
		["WZ-Lindworm"] =					100,
	}
	unscannedClues = {	["Energy Signature"] = "Energy signature",
						["Trace Elements"] = "Trace elements",
						["Warp Residue"] = "Warp residue",
						["STC Distortion"] = "Space time continuum distortion",
						["Jump Drive Ind"] = "Jump drive usage indicators",
						["Gas Anomaly"] = "Gaseous anomaly",
						["Chroniton Parts"] = "Chroniton particles",
						["Impulse Trail"] = "Impulse drive trail",
						["Ion Particles"] = "Ion particle trail",
						["Space Debris"] = "Space debris",
						["Energy Source"] = "Energy source",
						["Shielded Object"] = "Shielded object",
						["Unidentifiable Obj"] = "Unidentifiable object",
						["Container"] = "Container",
						["Sensor Reflect"] = "Sensor reflection" }
	unscannedClueKey = "Energy Signature"
	unscannedClueValue = unscannedClues[unscannedClueKey]
	scannedClues1 = {	["None"] = "None",
						["Kraylor"] = "Kraylor",
						["Independent"] = "Independent",
						["Ghosts"] = "Ghosts in the machine",
						["Arlenian"] = "Arlenian",
						["Human"] = "Human Navy",
						["Exuari"] = "Exuari",
						["Ktlitan"] = "Ktlitan",
						["Unknown"] = "Unknown",
						["Unusual"] = "Unusual",
						["Irregular"] = "Irregular",
						["Contains"] = "Contains",
						["Significant"] = "Significant" }
	scannedClueKey1 = "None"
	scannedClueValue1 = scannedClues1[scannedClueKey1]
	scannedClues2 = {	["None"] = "None",
						["Vessel"] = "Vessel",
						["Space Debris"] = "Space debris",
						["Ambassador"] = "Ambassador",
						["Pirate"] = "Pirate",
						["Delegate"] = "Delegate",
						["Officer"] = "Officer",
						["Spy"] = "Spy",
						["Agent"] = "Agent",
						["Scientist"] = "Scientist",
						["Miner"] = "Miner",
						["Adjunct"] = "Adjunct",
						["Minerals"] = "Minerals",
						["Components"] = "Components",
						["Contraband"] = "Contraband",
						["Food"] = "food",
						["medicine"] = "medicine",
						["luxury"] = "luxury",
						["gold"] = "gold",
						["platinum"] = "platinum",
						["dilithium"] = "dilithium",
						["tritanium"] = "tritanium",
						["nickel"] = "nickel",
						["cobalt"] = "cobalt",
						["impulse"] = "impulse",
						["warp"] = "warp",
						["shield"] = "shield",
						["tractor"] = "tractor",
						["repulsor"] = "repulsor",
						["beam"] = "beam",
						["optic"] = "optic",
						["robotic"] = "robotic",
						["filament"] = "filament",
						["transporter"] = "transporter",
						["sensor"] = "sensor",
						["communication"] = "communication",
						["autodoc"] = "autodoc",
						["lifter"] = "lifter",
						["android"] = "android",
						["nanites"] = "nanites",
						["software"] = "software",
						["circuit"] = "circuit",
						["battery"] = "battery",
						["amounts of"] = "amounts of" }
	scannedClueKey2 = "None"
	scannedClueValue2 = scannedClues2[scannedClueKey2]
	scannedClues3 = {	["None"] = "None",
						["Frigate"] = "Class Frigate",
						["Fighter"] = "Class Fighter",
						["Freighter"] = "Type Freighter",
						["Starhammer II"] = "Type Starhammer II",
						["Atlantis X23"] = "Type Atlantis X23",
						["Blockade Runner"] = "Type Blockade Runner",
						["Battlestation"] = "Type Battlestation",
						["Dreadnought"] = "Type Dreadnought",
						["Adv. Striker"] = "Type Advanced Striker",
						["Strikeship"] = "Type Strikeship",
						["Adv. Gunship"] = "Type Advanced Gunship",
						["Gunship"] = "Type Gunship",
						["Missile Cruiser"] = "Type Missile Cruiser",
						["Cruiser"] = "Type Cruiser",
						["Karnack"] = "Type Karnack",
						["Tug"] = "Type Tug",
						["Flavia Falcon"] = "Type Flavia Falcon",
						["Flavia"] = "Type Flavia",
						["Ranus U"] = "Type Ranus U",
						["Stalker R7"] = "Type Stalker R7",
						["Stalker Q7"] = "Type Stalker Q7",
						["Piranha"] = "Type Piranha",
						["Storm"] = "Type Storm",
						["Nirvana"] = "Type Nirvana",
						["Phobos"] = "Type Phobos",
						["Lindworm"] = "Type Lindworm",
						["Adder"] = "Type Adder",
						["Hornet"] = "Type Hornet",
						["Obsidian"] = "Of the Obsidian Order",
						["Council"] = "Of the High Council",
						["Kentar"] = "From Kentar",
						["Gold"] = "gold",
						["Platinum"] = "platinum",
						["Nickel"] = "nickel",
						["Dilithium"] = "dilithium",
						["Tritanium"] = "tritanium",
						["Cobalt"] = "cobalt"	}
	scannedClueKey3 = "None"
	scannedClueValue3 = scannedClues3[scannedClueKey3]
	scannedClues4 = {	["None"] = "None",
						["Was Here"] = "was here",
						["Destroyed"] = "was destroyed here",
						["Flew Thru"] = "flew through here",
						["Hid"] = "Hid here",
						["Chg course"] = "changed course here",
						["Disappeared"] = "disappeared here",
						["Lingered"] = "Lingered here",
						["Abducted"] = "was abducted here",
						["Detected"] = "detected",
						["Discovered"] = "discovered",
						["Observed"] = "observed"	}
	scannedClueKey4 = "None"
	scannedClueValue4 = scannedClues4[scannedClueKey4]
	scannedClues5 = {	["None"] = "None",
						["0"] = "Now heading ~0",
						["45"] = "Now heading ~45",
						["90"] = "Now heading ~90",
						["135"] = "Now heading ~135",
						["180"] = "Now heading ~180",
						["225"] = "Now heading ~225",
						["270"] = "Now heading ~270",
						["315"] = "Now heading ~315"	}
	scannedClueKey5 = "None"
	scannedClueValue5 = scannedClues5[scannedClueKey5]
	scan_clue_retrievable = false
	scan_clue_expire = true
	timer_display_helm = false
	timer_display_weapons = false
	timer_display_engineer = false
	timer_display_science = false
	timer_display_relay = true
	timer_start_length = 5
	timer_started = false
	timer_purpose = "Timer"
	timer_scale = 1
	timer_type = "time"
	coolant_amount = 1
	jammer_range = 10000
	automated_station_danger_warning = true
	server_sensor = true
	station_sensor_range = 20000
	warning_includes_ship_type = true
	observatory_probe_ranges = {
		["Short"] = 5,
		["Medium"] = 10,
		["Long"] = 20,
		["Huge"] = 30,
	}
	observatory_probe_shields = {
		["Huge"] = 300,
		["Strong"] = 150,
		["Medium"] = 100,
		["Weak"] = 50,
	}
	observatory_probe_hull_list = {
		["Huge"] = 150,
		["Strong"] = 100,
		["Medium"] = 50,
		["Weak"] = 25,
	}
	player_ship_log_message_color = "Magenta"
	color_list = {
		["Magenta"]		= "Magenta",
		["Yellow"]		= "Yellow",
		["Red"]			= "Red",
		["Blue"]		= "Blue",
		["Cyan"]		= "Cyan",
		["White"]		= "White",
		["Black"]		= "Black",
		["Green"]		= "Green",
		["186,85,211"]	= "Medium Orchid",
		["95,158,160"]	= "Cadet Blue",
		["55,55,55"]	= "Dark Gray",
		["255,69,0"]	= "Orange Red",
		["255,127,80"]	= "Coral",
		["65,105,225"]	= "Royal Blue",
		["160,82,45"]	= "Sienna",
		["85,107,47"]	= "Dark Olive Green",
		["34,139,34"]	= "Forest Green",
		["178,34,34"]	= "Firebrick Red",
	}
	jump_corridor = false
	station_defensive_fleet_speed_average = false
	inner_defense_platform_count = 3
	inner_defense_platform_orbit = "No"
	outer_defense_platform_count = 3
	outer_defense_platform_orbit = "No"
	orbit_increment = {
		["Orbit > Fast"] 	= 60,
		["Orbit > Normal"] 	= 120,
		["Orbit > Slow"]	= 600,
		["Orbit < Fast"]	= -60,
		["Orbit < Normal"]	= -120,
		["Orbit < Slow"]	= -600,
	} 
	outer_mines = "No"
	inline_mines = 0
	inside_mines = 0
	outside_mines = 0
	inline_mine_gap_count = 3
	inside_mine_gap_count = 3
	outside_mine_gap_count = 3
	inside_mine_orbit = "No"
	outside_mine_orbit = "No"
	mine_shape = "Arc"
	mine_width = 1
	mine_radius = 8
	zone_rectangle_width = 5
	zone_rectangle_height = 5
	zone_click_type = "rectangle"
	zone_point_count = 0
	zone_point_max = 3
	zone_color = "Red"
	zone_color_list = {
		["Red"]					= {r = 255, g =   0, b =   0},
		["Green"]				= {r =   0, g = 255, b =   0},
		["Blue"]				= {r =   0, g =   0, b = 255},
		["Medium Orchid"]		= {r = 186, g =  85, b = 211},
		["Cadet Blue"]			= {r =  95, g = 158, b = 160},
		["Dark Gray"]			= {r =  55, g =  55, b =  55},
		["Orange Red"]			= {r = 255, g =  69, b =   0},
		["Coral"]				= {r = 255, g = 127, b =  80},
		["Royal Blue"]			= {r =  65, g = 105, b = 255},
		["Sienna"]				= {r = 160, g =  82, b =  45},
		["Dark Olive Greeen"]	= {r =  85, g = 107, b =  47},
		["Forest Green"]		= {r =  34, g = 139, b =  34},
		["Firebrick Red"]		= {r = 178, g =  34, b =  34},
	}
	friendlyDefensiveFleetList = {}
	friendly_defensive_fleet_val = 65
	tractor_beam_string = {
		"beam_blue.png",
		"shield_hit_effect.png",
		"electric_sphere_texture.png"
	}
	tractor_drain = .000005
	mining_beam_string = {
		"beam_orange.png",
		"beam_yellow.png",
		"fire_sphere_texture.png"
	}
	mining_drain = .00025
	gm_ship_names = {
		"Ship Liaison",
		"Communication Officer",
		"Relay Runt",
	}
	gm_names = {
		"Administrative Assistant",
		"General Manager",
		"Finnicky Flunky",
		"Varicose Veined VIP",
		"Operator",
		"Tempermental Technician",
	}
	gm_verbs = {
		"Contact",
		"Talk to",
		"Direct Message",
	}
	carrier_deployed_fighter = {}
	console_list = {
		"Helms","Weapons","Engineering","Science","Relay","Tactical","Operations","Engineering+","SinglePilot","DamageControl","PowerManagement","Database","altrelay","shiplog"
	}
	commerce_timer_interval = 90
	skeletal_commerce = false
	skeletal_commerce_assets = {}
	skeletal_commerce_timer = commerce_timer_interval
	icarus_commerce = false
	icarus_commerce_assets = {}
	icarus_commerce_timer = commerce_timer_interval
	kentar_commerce = false
	kentar_commerce_assets = {}
	kentar_commerce_timer = commerce_timer_interval
	teresh_commerce = false
	teresh_commerce_assets = {}
	teresh_commerce_timer = commerce_timer_interval
	lafrina_commerce = false
	lafrina_commerce_assets = {}
	lafrina_commerce_timer = commerce_timer_interval
	bask_commerce = false
	bask_commerce_assets = {}
	bask_commerce_timer = commerce_timer_interval
	staunch_commerce = false
	staunch_commerce_assets = {}
	staunch_commerce_timer = commerce_timer_interval
	glikton_commerce = false
	glikton_commerce_assets = {}
	glikton_commerce_timer = getScenarioTime() + commerce_timer_interval
	explosion_type = "Normal"
	explosion_damage = 50
	explosion_size = 1000
	explosion_range = 1000
	explosion_damage_degredation = "Linear"
	linked_beam = false
	benign_successes_source = {
		"The boarders left milk and cookies in the galley. They are being analyzed by medical personnel.",
		"The boarders hung some attractive abstract art pieces on the walls of the recreation center. We're still trying to determine their purpose.",
		"After the boarders left, the environmental controls function with greater efficiency. The air quality has greatly improved. Maintenance personnel are running diagnostics.",
		"One of the crew member's quarters was found in slight disarray - a colorful mural now adorns one wall. We checked it for adverse environmental impact, but it was benign. That crew member now has more frequent visitors from other vrew members.",
		"The boarders left the lighting on deck 3, corridor 5 is slightly brighter. We can't determine how this was accomplished. Replacing the lighting sources seems to make no difference. No adverse impacts from the lighting.",
		"The walls in the small recreation area on deck 5 are now completely reflective as if mirrors were installed. Analysis reveals a coating of some reflective material approximately two microns thick. Testing shows nothing dangerous.",
		"The boarders set some kind of trigger on the entry into the captain's quarters. A female voice now says something like 'Nyah nyah' everytime someone enters. Engineering has not yet been able to determine the source of the sound.",
	}
	security_morale_boosters = {
		"Target practice",
		"Situational awareness",
		"Advanced combat training",
		"Target identification simulation",
		"Self defense",
		"Tactical analysis",
		"Knowing your opponent's mind",
		"Advanced weapons training",
		"Competetive shooting training",
		"Advanced martial arts",
	}
	characters = {
		{name = "Frank Brown", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Joyce Miller", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Harry Jones", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Emma Davis", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Zhang Wei Chen", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Yu Yan Li", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Li Wei Wang", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Li Na Zhao", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Sai Laghari", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Anaya Khatri", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Vihaan Reddy", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Trisha Varma", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Henry Gunawan", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Putri Febrian", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Stanley Hartono", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Citra Mulyadi", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Bashir Pitafi", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Hania Kohli", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Gohar Lehri", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Sohelia Lau", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Gabriel Santos", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Ana Melo", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Lucas Barbosa", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Juliana Rocha", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Habib Oni", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Chinara Adebayo", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Tanimu Ali", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Naija Bello", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Shamim Khan", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Barsha Tripura", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Sumon Das", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Farah Munsi", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Denis Popov", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Pasha Sokolov", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Burian Ivanov", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Radka Vasiliev", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Jose Hernandez", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Victoria Garcia", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
		{name = "Miguel Lopez", subject_pronoun = "he", object_pronoun = "him", possessive_adjective = "his"},
		{name = "Renata Rodriguez", subject_pronoun = "she", object_pronoun = "her", possessive_adjective = "her"},
	}
	pretty_system = {
		["reactor"] = _("stationServices-comms","reactor"),
		["beamweapons"] = _("stationServices-comms","beam weapons"),
		["missilesystem"] = _("stationServices-comms","missile system"),
		["maneuver"] = _("stationServices-comms","maneuver"),
		["impulse"] = _("stationServices-comms","impulse engines"),
		["warp"] = _("stationServices-comms","warp drive"),
		["jumpdrive"] = _("stationServices-comms","jump drive"),
		["frontshield"] = _("stationServices-comms","front shield"),
		["rearshield"] = _("stationServices-comms","rear shield"),
	}
	pretty_short_system = {
		["reactor"] = _("stationServices-comms","reactor"),
		["beamweapons"] = _("stationServices-comms","beams"),
		["missilesystem"] = _("stationServices-comms","missiles"),
		["maneuver"] = _("stationServices-comms","maneuver"),
		["impulse"] = _("stationServices-comms","impulse"),
		["warp"] = _("stationServices-comms","warp"),
		["jumpdrive"] = _("stationServices-comms","jump"),
		["frontshield"] = _("stationServices-comms","front shield"),
		["rearshield"] = _("stationServices-comms","rear shield"),
	}
	faction_beam_color_pool = {
		{name = "Red",					r = 255/255, g =   0/255, b =   0/255,	ir = 255,	ig =   0,	ib =   0},
		{name = "Yellow",				r = 255/255, g = 255/255, b =   0/255,	ir = 255,	ig = 255,	ib =   0},
		{name = "Green",				r =   0/255, g = 255/255, b =   0/255,	ir =   0,	ig = 255,	ib =   0},
		{name = "Blue",					r =   0/255, g =   0/255, b = 255/255,	ir =   0,	ig =   0,	ib = 255},
		{name = "Cyan",					r =   0/255, g = 255/255, b = 255/255,	ir =   0,	ig = 255,	ib = 255},
		{name = "Magenta",				r = 255/255, g =   0/255, b = 255/255,	ir = 255,	ig =   0,	ib = 255},
		{name = "Medium Orchid",		r = 186/255, g =  85/255, b = 211/255,	ir = 186,	ig =  85,	ib = 211},
		{name = "Cadet Blue",			r =  95/255, g = 158/255, b = 160/255,	ir =  95,	ig = 158,	ib = 160},
		{name = "Dark Gray",			r =  55/255, g =  55/255, b =  55/255,	ir =  55,	ig =  55,	ib =  55},
		{name = "Orange Red",			r = 255/255, g =  69/255, b =   0/255,	ir = 255,	ig =  69,	ib =   0},
		{name = "Coral",				r = 255/255, g = 127/255, b =  80/255,	ir = 255,	ig = 127,	ib =  80},
		{name = "Royal Blue",			r =  65/255, g = 105/255, b = 255/255,	ir =  65,	ig = 105,	ib = 255},
		{name = "Sienna",				r = 160/255, g =  82/255, b =  45/255,	ir = 160,	ig =  82,	ib =  45},
		{name = "Dark Olive Greeen",	r =  85/255, g = 107/255, b =  47/255,	ir =  85,	ig = 107,	ib =  47},
		{name = "Forest Green",			r =  34/255, g = 139/255, b =  34/255,	ir =  34,	ig = 139,	ib =  34},
	}
	faction_beam_color = {}
end
function addFactions()
-- extra factions
-- mirror universe factions - brief notes my (starry) idea for each
-- at some point that should be embedded into the game database somehow
-- mostly it is at best weakly defined at the moment - feel free to edit til that changes
-- setDescription would be good, but no database entries are being made anyway so it doesnt really matter

-- antagonist, implied theocratic, possibly imperialistic / expansionistic
-- mirror universe protagonist faction
	FactionInfo()
		:setName("Cindy's Remnants")
		:setGMColor(200,200,255)
		:setFriendly(getFactionInfo("Human Navy"))
		:setEnemy(getFactionInfo("Kraylor"))
		:setEnemy(getFactionInfo("Exuari"))
		:setEnemy(getFactionInfo("Ghosts"))
		:setEnemy(getFactionInfo("Ktlitans"))
		:setFriendly(getFactionInfo("TSN"))
		:setFriendly(getFactionInfo("USN"))
		:setFriendly(getFactionInfo("CUF"))

	FactionInfo()
		:setName("Holy Terra")
		:setGMColor(255,128,128)
		-- this is probably hostile to too many factions
		:setEnemy(getFactionInfo("Independent"))
		:setEnemy(getFactionInfo("Human Navy"))
		:setEnemy(getFactionInfo("Kraylor"))
		:setEnemy(getFactionInfo("Arlenians"))
		:setEnemy(getFactionInfo("Exuari"))
		:setEnemy(getFactionInfo("Ghosts"))
		:setEnemy(getFactionInfo("Ktlitans"))
		:setEnemy(getFactionInfo("TSN"))
		:setEnemy(getFactionInfo("USN"))
		:setEnemy(getFactionInfo("CUF"))
		-- mirror factions
		:setEnemy(getFactionInfo("Cindy's Remnants"))

-- independent equivalent, I presume below holy terra, or alternatively the civilian population?
	FactionInfo()
		:setName("Spacer")
		:setGMColor(192,192,192)
		:setEnemy(getFactionInfo("Exuari"))
		:setEnemy(getFactionInfo("Ktlitans"))
		-- mirror factions
		:setFriendly(getFactionInfo("Holy Terra"))

-- mirror universe christmas
	FactionInfo()
		:setName("Snow Slayers")
		:setGMColor(0,0,255)
		-- mirror factions
		:setFriendly(getFactionInfo("Cindy's Remnants"))
		:setEnemy(getFactionInfo("Holy Terra"))
		:setEnemy(getFactionInfo("Spacer"))
end
function createSkeletonUniverse()
--Human navy stations that may always be reached by long range communication
--Fixed stellar features (black holes, worm holes, nebulae)
	local icx = 11756
	local icy = 1254
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	CubicMineUpdateObject = CubicMineObject
	CubicMineObject:addToUpdate()
	skeleton_stations = {}
	station_names = {}
	--Icarus
	stationIcarus = SpaceStation():setTemplate("Large Station"):setFaction("Human Navy"):setPosition(icx,icy):setCallSign("Icarus 4"):setDescription("Shipyard, Naval Regional Headquarters"):setCommsScript(""):setCommsFunction(commsStation)
    stationIcarus:setShortRangeRadarRange(20000)
    stationIcarus.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 15,					EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<60},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<60},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<60},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
		mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
		sensor_boost_probes = {name = "Spectacle", cost = math.random(15,38), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Shipyard for human navy ships. Regional headquarters. Development site for the Atlantis model ship",
    	history = "As humans ran up against more and more unfriendly races, this station became the nexus for research and development of new space ship building technologies. After a few experimental accidents involving militarily driven scientists and fabrication specialists, the station was renamed from Research-37 to Icarus referencing the mythical figure that flew too close to the sun",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK5",
			DF7 = "Adder MK5",
			DF8 = "Adder MK5",
    	},
	}
	station_names[stationIcarus:getCallSign()] = {stationIcarus:getSectorName(), stationIcarus}
	stationIcarus.skeleton_station = true
	table.insert(skeleton_stations,stationIcarus)
	--Kentar
	kentar_x = 246000
	kentar_y = 247000
	--local kentarZone = squareZone(kentar_x,kentar_y, "Kentar 2")
	--kentarZone:setColor(0,128,0)
	stationKentar = SpaceStation():setTemplate("Large Station"):setFaction("Human Navy"):setPosition(kentar_x,kentar_y):setCallSign("Kentar 2"):setDescription("Naval Regional Headquarters"):setCommsScript(""):setCommsFunction(commsStation)
    stationKentar:setShortRangeRadarRange(25000)
    stationKentar.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(3,7),Nuke = 13,					EMP = 9 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<70},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5},
        			luxury =	{quantity = 10,		cost = math.random(80,120)}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Regional headquarters. Jumping off point for actions against Kraylor activity",
    	history = "This used to be a scientific observation and research station. As the Kraylors have grown more agressive, it's been built up and serves as a strategic cornerstone for actions against the Kraylors. The name Kentar derives from Kentauros or Centaurus, after the nearby star's prominent position in the constellation Centaurus",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK5",
			DF7 = "Adder MK5",
			DF8 = "Adder MK5",
    	},
	}
	table.insert(skeleton_stations,stationKentar)
	stationKentar.skeleton_station = true
	station_names[stationKentar:getCallSign()] = {stationKentar:getSectorName(), stationKentar}
	createFleurNebula()
	BlackHole():setPosition(-12443,-23245)
    BlackHole():setPosition(87747, -3384)
    BlackHole():setPosition(80429, -10486)
    BlackHole():setPosition(75695, 2427)
    wormholeIcarus = WormHole():setPosition(-46716, 17958):setTargetPosition(19080, -19780):setCallSign("Domina Gunilda")
    wormholeIcarus.exit = "Macassa"
    wormholeIcarus.exits = {
    	{name = "Astron",		x = 460500,		y = 320500,		tax = wormholeTax1,	region_name = "Astron",		},
    	{name = "Bask",			x = 1027800,	y = 251000,		tax = wormholeTax1,	region_name = "Bask",		},
    	{name = "Micro Sol.",	x = -331836,	y = -443517,	tax = wormholeTax1,	region_name = "FilkRoad",	},
    	{name = "Kentar",		x = 251000,		y = 250000,		tax = wormholeTax1,	region_name = "Kentar",		},
    	{name = "Lafrina",		x = -237666,	y = 296975,		tax = wormholeTax1,	region_name = "Lafrina",	},
    	{name = "Macassa",		x = 19080,		y = -19780,		tax = wormholeTax1,	region_name = "Icarus",		},
    	{name = "Staunch",		x = 153668,		y = 775877,		tax = wormholeTax1,	region_name = "Staunch",	},
    	{name = "Teresh",		x = 800001,		y = 120001,		tax = wormholeTax1,	region_name = "Teresh",		},
    }
	stationWormholeWrangler = SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("Wormhole Wrangler"):setPosition(-41977, 18955):setDescription("Wormhole control and trading post"):setCommsScript(""):setCommsFunction(commsStation)
    stationWormholeWrangler.wormhole = wormholeIcarus
    stationWormholeWrangler.comms_data = {
    	friendlyness = 85,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(3,7),Nuke = 13,					EMP = 9 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<70},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	dilithium = {quantity = 10,		cost = math.random(80,120)},
        			lifter =	{quantity = 10,		cost = math.random(80,120)},
        			luxury =	{quantity = 10,		cost = math.random(80,120)}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Main purpose is to reprogram the wormhole and provide trading and other commerce options",
    	history = "This started off as simply a wormhole reprogramming station station. As space ship traffic became heavier, other business opportunists put more shopping options in.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
    	},
	}
	stationWormholeWrangler.long_range_sensor_upgrade = true
	stationWormholeWrangler.long_range_sensor_upgrade_recipients = {}
	stationWormholeWrangler.patrol_probe = math.random(1,4)
	stationWormholeWrangler.trigger_missile = {}
	local trigger_flavors = {"E3","E4","N3","N4"}
	local trigger_flavor = tableRemoveRandom(trigger_flavors)
	table.insert(stationWormholeWrangler.trigger_missile,trigger_flavor)
	if random(1,100) < 50 then
		trigger_flavor = tableRemoveRandom(trigger_flavors)
		table.insert(stationWormholeWrangler.trigger_missile,trigger_flavor)
		if random(1,100) < 40 then
			trigger_flavor = tableRemoveRandom(trigger_flavors)
			table.insert(stationWormholeWrangler.trigger_missile,trigger_flavor)
			if random(1,100) < 30 then
				table.insert(stationWormholeWrangler.trigger_missile,trigger_flavors[1])
			end
		end
	end
	stationWormholeWrangler.balance_shield = true
	stationWormholeWrangler.proximity_scanner = true
	stationWormholeWrangler.proximity_scanner_range = math.random(1,5)
	stationWormholeWrangler.max_health_widgets = true
	stationWormholeWrangler.shield_banner = true
	stationWormholeWrangler.hull_banner = true
	stationWormholeWrangler.way_dist = true
	stationWormholeWrangler.installable_sensor_boost = true
	stationWormholeWrangler.installable_sensor_boost_ranges = {}
	local sensor_boost_ranges_pool = {}
	for i=5,9,.5 do
		table.insert(sensor_boost_ranges_pool,{interval = i,cost=math.random(3,6)*2*i})
	end
	for i=1,3 do
		table.insert(stationWormholeWrangler.installable_sensor_boost_ranges,tableRemoveRandom(sensor_boost_ranges_pool))
	end
	table.insert(skeleton_stations,stationWormholeWrangler)
	stationWormholeWrangler.skeleton_station = true
	station_names[stationWormholeWrangler:getCallSign()] = {stationWormholeWrangler:getSectorName(), stationWormholeWrangler}
    wormhole_cindy = WormHole():setPosition(150513, -44624)
    wormhole_exuari_pirate = WormHole():setPosition(216461,-376269)
    local wep_x, wep_y = wormhole_exuari_pirate:getPosition()
    local wc_exit_x, wc_exit_y = vectorFromAngle(random(0,360),random(2000,2500))
    wormhole_cindy:setTargetPosition(wep_x + wc_exit_x, wep_y + wc_exit_y)
    local wc_x, wc_y = wormhole_cindy:getPosition()
    local wep_exit_x, wep_exit_y = vectorFromAngle(random(0,300),random(2000,2500))
    wormhole_exuari_pirate:setTargetPosition(wc_x + wep_exit_x, wc_y + wep_exit_y)
    wormhole_cindy:onTeleportation(function(self, teleportee)
		local wep_x, wep_y = wormhole_exuari_pirate:getPosition()
		local wc_exit_x, wc_exit_y = vectorFromAngle(random(0,360),random(2000,2500))
		if self ~= nil then
		    self:setTargetPosition(wep_x + wc_exit_x, wep_y + wc_exit_y)
		end
		if teleportee ~= nil then
		    if isObjectType(teleportee,"PlayerSpaceship") then
		    	teleportee:setEnergyLevel(teleportee:getEnergyLevel()*.7)
			end
		end
    end)
    wormhole_exuari_pirate:onTeleportation(function(self, teleportee)
		local wc_x, wc_y = wormhole_cindy:getPosition()
		local wep_exit_x, wep_exit_y = vectorFromAngle(random(0,300),random(2000,2500))
		if self ~= nil then
			self:setTargetPosition(wc_x + wep_exit_x, wc_y + wep_exit_y)
		end
		if teleportee ~= nil then
		    if isObjectType(teleportee,"PlayerSpaceship") then
		    	teleportee:setEnergyLevel(teleportee:getEnergyLevel()*.7)
			end
		end
    end)
    --Astron
    astron_x = 462523
    astron_y = 317769
--	local astronZone = squareZone(astron_x,astron_y, "Astron Mark 2")
--	astronZone:setColor(0,128,0)
    stationAstron = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(astron_x, astron_y):setCallSign("Astron"):setDescription("Military Observation Post"):setCommsScript(""):setCommsFunction(commsStation)
    stationAstron:setShortRangeRadarRange(4500)
    stationAstron.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(3,7),Nuke = 13,					EMP = 9 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(100,140), 
        	reinforcements = math.random(140,180),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<70},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<75},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<75},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
--		sensor_boost = {value = 5000, cost = 0},
--		mine_probes = {name = "LDSM 3.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        sensor_boost_probes = {name = "Spectacle", cost = math.random(15,38), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5},
        			luxury =	{quantity = 10,		cost = math.random(80,120)}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Military observation post established to observe any hostile Ghost activity",
    	history = "Civilian scientists and military personnel share observation facilities on this station. The scientists are interested in the nebulae, the military, the Ghosts. Other civilian personnel are evaluating the mining possibilities of the asteroids. The station is named after the astrophysical observatory that circled Earth in the mid 1980's",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
    	},
	}
	table.insert(skeleton_stations,stationAstron)
	stationAstron.skeleton_station = true
	station_names[stationAstron:getCallSign()] = {stationAstron:getSectorName(), stationAstron}
	--Lafrina
	lafrina_x = -250369
	lafrina_y = 293390
	stationLafrina = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(lafrina_x,lafrina_y):setCallSign("Lafrina"):setDescription("Black hole observation and research"):setCommsScript(""):setCommsFunction(commsStation)
    stationLafrina:setShortRangeRadarRange(14500)
    stationLafrina.comms_data = {
    	friendlyness = 86,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(3,7),Nuke = math.random(13,20),	EMP = 9 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 5000, cost = 0},
		sensor_boost_probes = {name = "Spectacle", cost = math.random(15,38), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
--        mine_probes = {name = "LDSM 1.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5},
        			luxury =	{quantity = 10,		cost = math.random(80,120)}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Black hole research conducted in conjunction with Arlenian scientists",
    	history = "The Arlenians built this station to observe the black hole. When Arlenian government funding started running short, they entered into a mutual research sharing agreement with the Human Navy and turned over primary administration of the station to the Human Navy. The CUF has taken over that protection and support contract to facilitate the scientific research and to have a convenient contact point for Arlenain/Human correspondence",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK5",
			DF7 = "Adder MK5",
			DF8 = "Adder MK5",
    	},
	}
	table.insert(skeleton_stations,stationLafrina)
	stationLafrina.skeleton_station = true
	station_names[stationLafrina:getCallSign()] = {stationLafrina:getSectorName(), stationLafrina}
	--Teresh
	teresh_x = 791712
	teresh_y = 110775
    stationTeresh = SpaceStation():setTemplate("Large Station"):setFaction("Human Navy"):setCallSign("Teresh 2"):setPosition(teresh_x, teresh_y):setCommsScript(""):setDescription("Regional CUF HQ"):setCommsFunction(commsStation)
	stationTeresh:setShortRangeRadarRange(25000)
    stationTeresh.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 12,					EMP = math.random(9,11) },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<70},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<80},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        sensor_boost_probes = {name = "Spectacle", cost = math.random(15,38), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
--        mine_probes = {name = "LDSM 1.3", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 3, mines_required = 5},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Regional headquarters. Commercial and educational hub.",
    	history = "Teresh is a diminuative for Valentina Tereshkova, the first female astronaut in space in the late 20th century. Several station founders were historical enthusiasts and chose the name. The university also takes the name Teresh",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK8",
			DF7 = "Adder MK8",
			DF8 = "Elara P2",
    	},
	}
	station_names[stationTeresh:getCallSign()] = {stationTeresh:getSectorName(), stationTeresh}
	stationTeresh.skeleton_station = true
	table.insert(skeleton_stations,stationTeresh)
	--Bask
	bask_x = 1026873
	bask_y = 250662
--	local baskZone = squareZone(bask_x,bask_y, "Bask 2")
--	baskZone:setColor(0,128,0):setLabel("B")
	stationBask = SpaceStation():setTemplate("Medium Station"):setFaction("Human Navy"):setCallSign("Bask"):setPosition(bask_x, bask_y):setCommsScript(""):setDescription("Magnasol Research and Regional Diplomatic Coordination"):setCommsFunction(commsStation)
	stationBask:setShortRangeRadarRange(23000)
    stationBask.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 12,					EMP = math.random(9,11) },
        weapon_available = 	{Homing = true,		HVLI = true,			Mine = true,			Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<80},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Research center for Magnasol. Diplomatic coordination for the various ambassadors to factions in the region.",
    	history = "The researchers of Magnasol initially established the base. They were so enthusiastic about getting a chance to study the high energy output of Magnasol that they named the station as if they were basking in the sunlight.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5",
			DF7 = "Adder MK8",
			DF8 = "Elara P2",
    	},
	}
	station_names[stationBask:getCallSign()] = {stationBask:getSectorName(), stationBask}
	stationBask.skeleton_station = true
	--	Glikton
	glikton_x = 407073
	glikton_y = -502604
    stationGlikton = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Glikton"):setPosition(408073, -502604)
	stationGlikton:setShortRangeRadarRange(13000)
    stationGlikton.comms_data = {
    	friendlyness = 77,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,11) },
        weapon_available = 	{Homing = true,		HVLI = true,			Mine = true,			Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,110), 
        	reinforcements = math.random(120,160),
   			hornet_reinforcements =	math.random(65,125),
			phobos_reinforcements =	math.random(155,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<80},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Resource gathering hub for the area. We generally get along with our neighbors as long as they don't attack.",
    	history = "We heard about the resources here and joined the flock of factions wanting in on the feeding trough.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5",
			DF7 = "Adder MK8",
			DF8 = "Elara P2",
    	},
	}
	station_names[stationGlikton:getCallSign()] = {stationGlikton:getSectorName(), stationGlikton}
	stationGlikton.skeleton_station = true
	--	Staunch
	staunch_x = 142731
	staunch_y = 775509
	stationStaunch = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Staunch"):setPosition(staunch_x, staunch_y):setDescription("Mining and liaison"):setCommsScript(""):setCommsFunction(commsStation)
	stationStaunch:setShortRangeRadarRange(7000)
    stationStaunch.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 12,					EMP = math.random(9,11) },
        weapon_available = 	{Homing = true,		HVLI = true,			Mine = true,			Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<80},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<80},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<85},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
        public_relations = true,
        general_information = "We mine the asteroids nearby. We also interact with the other stations in the region.",
    	history = "This region looked like a good place to set up our operation. We have a friendly reciprocal helpful relationship with the stations around here.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5",
			DF7 = "Adder MK8",
			DF8 = "Elara P2",
    	},
	}
	--	Staunch defense platforms
	local sdp_1 = CpuShip():setFaction("Human Navy"):setTemplate("Defense platform"):setCallSign("SDP_1"):setPosition(144252, 774451):orderRoaming()
	setBeamColor(sdp_1)
	station_names[sdp_1:getCallSign()] = {sdp_1:getSectorName(), sdp_1}
	local sdp_2 = CpuShip():setFaction("Human Navy"):setTemplate("Defense platform"):setCallSign("SDP_2"):setPosition(141426, 776608):orderRoaming()
	setBeamColor(sdp_2)
	station_names[sdp_2:getCallSign()] = {sdp_2:getSectorName(), sdp_2}
	station_names[stationStaunch:getCallSign()] = {stationStaunch:getSectorName(), stationStaunch}
	stationStaunch.skeleton_station = true

	-- name regions
	Zone():setColor(40, 40, 60):setLabel("Twin Pits Reserve"):setPoints(-329513, -356716, -426268, -419647, -379858, -512076, -252817, -514436, -239445, -450720, -253211, -411389)
	Zone():setColor(50, 50, 40):setLabel("Stone Ocean Asteroid Field"):setPoints(-253211, -411389, -239445, -450720, -222616, -500787, -131760, -492920, -71190, -413471, -122714, -341495, -162832, -274631, -239135, -248672, -303638, -210914, -369715, -336775, -329513, -356716)
	Zone():setColor(60, 50, 60):setLabel("The Great Ignis Fatuus Nebula"):setPoints(-71190, -413471, -32535, -330702, -69319, -274300, -140785, -213693, -221009, -133819, -328559, -142577, -303638, -210914, -239135, -248672, -162832, -274631, -122714, -341495)
	Zone():setColor(40, 55, 40):setLabel("Palisade Asteroid Field"):setPoints(-221009, -133819, -140785, -213693, -69319, -274300, -32535, -330702, 5299, -300558, -22232, -227795, -100109, -171158, -184278, -79516, -268840, -77943)
	Zone():setColor(50, 50, 100):setLabel("Filk Road"):setPoints(-334784, -450387, -279709, -393735, -237259, -315305, -182342, -240031, -121587, -170438, -64145, -96743, -4652, -17208, -5367, -12204, -12700, -11527, -71562, -89957, -130582, -162548, -190695, -234225, -245590, -309146, -289638, -387543, -338072, -442428, -340439, -448267)

	table.insert(skeleton_stations,stationBask)
end
function createFleurNebula()
    Nebula():setPosition(22028, 25793):setCallSign("Fleur")
    Nebula():setPosition(13381, 37572)
    Nebula():setPosition(20835, 35783)
    Nebula():setPosition(15319, 24601)
    Nebula():setPosition(16363, 30415)
    Nebula():setPosition(22923, 17295)
    Nebula():setPosition(27843, 19680)
    Nebula():setPosition(31123, 16997)
    --Borlan area nebula
    Nebula():setPosition(88464, 45469)
    Nebula():setPosition(77847, 35928)
    Nebula():setPosition(79353, 42959)
    Nebula():setPosition(75264, 47622)
    Nebula():setPosition(86671, 36861)
    Nebula():setPosition(96857, 44322)
end
function addPlayerShip(name,typeName,func,ftl)
	assert(type(name)=="string",string.format("function addPlayerShip expected a string for the first argument, 'name,' but got a %s instead",type(name)))
	assert(type(typeName)=="string",string.format("function addPlayerShip expected a string for the second argument, 'typeName,' but got a %s instead",type(typeName)))
	assert(type(playerShipStats[typeName])=="table",string.format("function addPlayerShip used %s as a lookup value in playerShipStats and expected to get a table but did not",typeName))
	assert(type(func)=="function",string.format("function addPlayerShip expected a function for the third argument, 'func,' but got a %s instead",type(func)))
	assert(type(ftl)=="string",string.format("function addPlayerShip expected a string for the fourth argument, 'ftl,' but got a %s instead",type(ftl)))
	playerShipInfo[name]={active = "inactive",spawn = func, typeName = typeName, ftl = ftl}
end

--	*										   *  --
--	**										  **  --
--	********************************************  --
--	****			GM Buttons				****  --
--	********************************************  --
--	**										  **  --
--	*										   *  --
----------------------------
--  Main Menu of Buttons  --
----------------------------
-- 2nd column: F = Fixed text, D = Dynamic text, * = Fixed with asterisk indicating selection
-- Button Text		   FD*	Related Function(s)
-- +INITIAL SET UP		F	initialSetUp
-- +SPAWN SHIP(S)		F	spawnGMShips
-- +ORDER FLEET			F	orderFleet
-- +ORDER SHIP			F	orderShip
-- +ARTIFACTS			F	fiddleWithArtifacts
-- +TWEAK TERRAIN		F	tweakTerrain
-- +COUNTDOWN TIMER		F	countdownTimer
-- +CUSTOM				F	customButtons
-- +END SESSION			F	endSession
function initialGMFunctions()
	clearGMFunctions()
	addGMFunction(string.format("+Initial Set Up %s",scenario_version),initialSetUp)
	addGMFunction("+Spawn Ship(s)",spawnGMShips)
	addGMFunction("+Order Fleet",orderFleet)
	addGMFunction("+Order Ship",orderShip)
	addGMFunction("+Artifacts",fiddleWithArtifacts)
	addGMFunction("+Tweak Terrain",tweakTerrain)
	addGMFunction("+Countdown Timer",countdownTimer)
	addGMFunction("+Custom",customButtons)
	addGMFunction("+End Session",endSession)
end
----------------------
--  Initial set up  --
----------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM INITIAL		F	initialGMFunctions
-- +START REGION			F	setStartRegion
-- +PLAYER SHIPS 0/0		D	playerShip (inline calculation of values "current ships"/"total ships")
-- +WORMHOLES				F	setWormholes
-- +ZONES					F	changeZones
-- +WARN Y SHIP 30U S		D	autoStationWarn
function initialSetUp()
	clearGMFunctions()
	addGMFunction("-Main from Initial",initialGMFunctions)
	addGMFunction("+Start Region",setStartRegion)
	addGMFunction(string.format("+Player ships %i",#getActivePlayerShips()),playerShip)
	addGMFunction("+Wormholes",setWormholes)
	addGMFunction("+Zones",changeZones)
	local button_label = "+Warn"
	if automated_station_danger_warning then
		button_label = button_label .. " Y"
	else
		button_label = button_label .. " N"
	end
	if warning_includes_ship_type then
		button_label = button_label .. " Ship"
	else
		button_label = button_label .. " NoShip"
	end
	if server_sensor then
		button_label = string.format("%s %iU D",button_label,station_sensor_range/1000)
	else
		button_label = string.format("%s %iU",button_label,station_sensor_range/1000)
	end
	addGMFunction(button_label,autoStationWarn)
end
---------------------
--	Spawn Ship(s)  --
---------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM SPAWN SHIPS	F	initialGMFunctions
-- +SPAWN FLEET				F	spawnGMFleet
-- +SPAWN A SHIP			F	spawnGMShip
function spawnGMShips()
	clearGMFunctions()
	addGMFunction("-Main From Spawn Ships",initialGMFunctions)
	addGMFunction("+Spawn Fleet",spawnGMFleet)
	addGMFunction("+Spawn a ship",spawnGMShip)
	local object_list = getGMSelection()
	if #object_list == 1 then
		temp_carrier = object_list[1]
		if isObjectType(temp_carrier,"CpuShip") then
			addGMFunction("+Spawn Fighter Wing",setFighterWing)
		end
	end
end
function setFighterWing()
	clearGMFunctions()
	addGMFunction("-Main From Ftr Wing",initialGMFunctions)
	addGMFunction("-Spawn Ships",spawnGMShips)
	if wing_type == nil then
		wing_type = "MT52 Hornet"
	end
	addGMFunction(string.format("+Type %s",wing_type),function()
		local wing_types = {
			"MT52 Hornet",
			"MU52 Hornet",
			"MV52 Hornet",
			"MT55 Hornet",
			"Dagger",
			"Fighter",
			"K3 Fighter",
			"K2 Fighter",
		}
		clearGMFunctions()
		for _,fighter in ipairs(wing_types) do
			local button_label = fighter
			if fighter == wing_type then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				wing_type = fighter
				setFighterWing()
			end)
		end
	end)
	if wing_count == nil then
		wing_count = 3
	end
	addGMFunction(string.format("+Count %s",wing_count),function()
		clearGMFunctions()
		for i=2,9 do
			local button_label = "Wing Count " .. i
			if i == wing_count then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label, function()
				wing_count = i
				setFighterWing()
			end)
		end
	end)
	if temp_carrier ~= nil and temp_carrier:isValid() then
		addGMFunction(string.format("Spawn Wing:%s",temp_carrier:getCallSign()),function()
			local start_angle = random(0,360)
			local spawn_dist = nil
			if temp_carrier ~= nil and temp_carrier:isValid() then
				local template_name = temp_carrier:getTypeName()
				if template_name ~= nil then
					spawn_dist = shipTemplateDistance[template_name]
					if spawn_dist ~= nil then
					else
						addGMMessage(string.format("The shipTemplateDistance table does not have an entry for %s. Defaulting to 400 distance",template_name))
						spawn_dist = 400
					end
				else
					addGMMessage(string.format("No template for %s. Defaulting to 400 distance",temp_carrier:getCallSign()))
					spawn_dist = 400
				end
				local fleet_prefix = generateCallSignPrefix()
				for i=1,wing_count do
					local fwc_x, fwc_y = temp_carrier:getPosition()
					local spawn_angle = start_angle + 360/wing_count*i
					local dc_x, dc_y = vectorFromAngleNorth(spawn_angle,spawn_dist)
					local ship = ship_template[wing_type].create(temp_carrier:getFaction(),wing_type)
					ship:setPosition(fwc_x + dc_x, fwc_y + dc_y):setHeading(spawn_angle):orderDefendTarget(temp_carrier)
					ship:setCallSign(generateCallSign(fleet_prefix))
				end
			else
				addGMMessage("Selected carrier object is no longer valid. Select another. No action taken")
			end
			spawnGMShips()
		end)
	else
	end
end
-------------------
--	Order fleet  --
-------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM ORDER FLT		F	initialGMFunctions
-- +SELECT FLEET			D	selectOrderFleet
-- +REORGANIZE FLEET		F	orderFleetChange
-- +AVERAGE IMPULSE			F	averageImpulse
-- SET PLAYER FLEET			F	inline
--
-- after fleet selected
--
-- -MAIN FROM ORDER FLT		F	initialGMFunctions
-- +1 ship-in-fleet			D	selectOrderFleet
-- +ROAMING					D	changeFleetOrder
-- GIVE ORDER TO FLEET		F	inline
-- +REORGANIZE FLEET		F	orderFleetChange
-- +AVERAGE IMPULSE			F	averageImpulse
function orderFleet()
	clearGMFunctions()
	addGMFunction("-Main from Order Flt",initialGMFunctions)
	local select_fleet_label = "Select Fleet"
	if selected_fleet_representative ~= nil and selected_fleet_representative:isValid() then
		if selected_fleet_index ~= nil and fleet_list[selected_fleet_index] ~= nil then
			local selected_fleet = fleet_list[selected_fleet_index]
			if selected_fleet ~= nil then
				if selected_fleet_representative_index ~= nil then
					if selected_fleet_representative == selected_fleet[selected_fleet_representative_index] then
						select_fleet_label = string.format("%i %s",selected_fleet_index,selected_fleet_representative:getCallSign())
					end
				end
			end
		end
	end
	addGMFunction(string.format("+%s",select_fleet_label),selectOrderFleet)
	if select_fleet_label ~= "Select Fleet" then
		addGMFunction(string.format("+%s",existing_fleet_order),changeFleetOrder)
		addGMFunction("Give Order To Fleet",function()
			local objectList = getGMSelection()
			if existing_fleet_order == "Idle" then
				for _, ship in ipairs(fleet_list[selected_fleet_index]) do
					if ship ~= nil and ship:isValid() then
						ship:orderIdle()
					end
				end
				addGMMessage(string.format("Fleet %i which includes %s has been ordered to go idle",selected_fleet_index,selected_fleet_representative:getCallSign()))
			end
			if existing_fleet_order == "Roaming" then
				for _, ship in ipairs(fleet_list[selected_fleet_index]) do
					if ship ~= nil and ship:isValid() then
						ship:orderRoaming()
					end
				end	
				addGMMessage(string.format("Fleet %i which includes %s has been ordered to roam",selected_fleet_index,selected_fleet_representative:getCallSign()))
			end			
			if existing_fleet_order == "Stand Ground" then
				for _, ship in ipairs(fleet_list[selected_fleet_index]) do
					if ship ~= nil and ship:isValid() then
						ship:orderStandGround()
					end
				end	
			end			
			if existing_fleet_order == "Attack" then
				if #objectList ~= 1 then
					addGMMessage("Need to select a target for fleet to attack")
				else
					for _, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							ship:orderAttack(objectList[1])
						end
					end
					addGMMessage(string.format("Fleet %i which includes %s has been ordered to attack",selected_fleet_index,selected_fleet_representative:getCallSign()))		
				end
			end			
			if existing_fleet_order == "Defend" then
				if #objectList ~= 1 then
					addGMMessage("Need to select a target for fleet to defend")
				else
					for _, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							ship:orderDefendTarget(objectList[1])
						end
					end
					addGMMessage(string.format("Fleet %i which includes %s has been ordered to defend",selected_fleet_index,selected_fleet_representative:getCallSign()))
				end
			end			
			if existing_fleet_order == "Fly To" then
				local flyx = 0
				local flyy = 0
				if #objectList < 1 then
					addGMMessage("Need to select a target for fleet to fly to")
				else
					if #objectList == 1 then
						flyx, flyy = objectList[1]:getPosition()
					else
						flyx, flyy = centerOfSelected(objectList)
					end
					for _, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							ship:orderFlyTowards(flyx,flyy)
						end
					end
					addGMMessage(string.format("Fleet %i which includes %s has been ordered to fly towards %.1f, %.1f",selected_fleet_index,selected_fleet_representative:getCallSign(),flyx,flyy))
				end
			end			
			if existing_fleet_order == "Fly Blindly To" then
				local flyx = 0
				local flyy = 0
				if #objectList < 1 then
					addGMMessage("Need to select a target for fleet to fly blindly to")
				else
					if #objectList == 1 then
						flyx, flyy = objectList[1]:getPosition()
					else
						flyx, flyy = centerOfSelected(objectList)
					end
					for _, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							ship:orderFlyTowardsBlind(flyx,flyy)
						end
					end
					addGMMessage(string.format("Fleet %i which includes %s has been ordered to fly blindly towards %.1f, %.1f",selected_fleet_index,selected_fleet_representative:getCallSign(),flyx,flyy))
				end
			end
			if existing_fleet_order == "Dock" then
				if #objectList ~= 1 then
					addGMMessage("Need to select a target for fleet to dock")
				else
					for _, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							ship:orderDock(objectList[1])
						end
					end
					addGMMessage(string.format("Fleet %i which includes %s has been ordered to dock",selected_fleet_index,selected_fleet_representative:getCallSign()))
				end
			end
			if existing_fleet_order == "Fly Formation" then
				if formation_lead == nil then
					local slowest_speed = 500
					local slowest_ship = nil
					local slowest_ship_index = 0
					for ship_index, ship in ipairs(fleet_list[selected_fleet_index]) do
						if ship ~= nil and ship:isValid() then
							if ship:getImpulseMaxSpeed() < slowest_speed then
								slowest_speed = ship:getImpulseMaxSpeed()
								slowest_ship = ship
								slowest_ship_index = ship_index
							end
						end
					end
					local swap_ship = fleet_list[selected_fleet_index][1]
					fleet_list[selected_fleet_index][1] = slowest_ship
					fleet_list[selected_fleet_index][slowest_ship_index] = swap_ship
					formation_lead = slowest_ship
				end
				local found_formation_lead = false
				for _, ship in ipairs(fleet_list[selected_fleet_index]) do
					if ship ~= nil and ship:isValid() then
						if ship == formation_lead then
							found_formation_lead = true
						end
					end
				end
				if found_formation_lead then
					local fleet_center_x, fleet_center_y = centerOfSelected(fleet_list[selected_fleet_index])
					local target_x = 0
					local target_y = 0
					if #objectList < 1 then
						local target_player = getPlayerShip(-1)
						if target_player ~= nil then
							target_x, target_y = target_player:getPosition()
						end
					elseif #objectList == 1 then
						target_x, target_y = objectList[1]:getPosition()
					else
						target_x, target_y = centerOfSelected(objectList)
					end
					local attack_angle = angleFromVectorNorth(fleet_center_x, fleet_center_y, target_x, target_y)
					local formation_heading = (attack_angle + 180) % 360
					formation_lead:setHeading(formation_heading)
					local lead_x, lead_y = formation_lead:getPosition()
					if distance_diagnostic then
						print("distance_diagnostic 1 target_x:",target_x,"target_y:",target_y,"fleet_center_x:",fleet_center_x,"fleet_center_y:",fleet_center_y)
					end
					local radius = distance(target_x, target_y, fleet_center_x, fleet_center_y)
					local pyramid_tier = math.min(#fleet_list[selected_fleet_index],max_pyramid_tier)
					for index, ship in ipairs(fleet_list[selected_fleet_index]) do
						if index <= max_pyramid_tier then
							local pyramid_angle = attack_angle + formation_delta.pyramid[pyramid_tier][index].angle
							if pyramid_angle < 0 then 
								pyramid_angle = pyramid_angle + 360
							end
							pyramid_angle = pyramid_angle % 360
							radius_x, radius_y = vectorFromAngleNorth(pyramid_angle,radius + formation_delta.pyramid[pyramid_tier][index].distance * 800)
							ship:setPosition(target_x + radius_x, target_y + radius_y)
						end
						ship:setHeading(formation_heading)
						if index == 1 then
							ship:orderFlyTowards(target_x, target_y)
						else
							local follow_x, follow_y = ship:getPosition()
							local base_angle = angleFromVectorNorth(follow_x, follow_y, lead_x, lead_y)
							local adjusted_angle = (base_angle + 270) % 360
							if distance_diagnostic then
								print("distance_diagnostic 2 lead_x:",lead_x,"lead_y:",lead_y,"follow_x:",follow_x,"follow_y:",follow_y)
							end
							local placement_spacing = distance(lead_x, lead_y, follow_x, follow_y)
							local form_x, form_y = vectorFromAngleNorth(adjusted_angle,placement_spacing)
							ship:orderFlyFormation(formation_lead,form_x, form_y)
						end
					end
--[[		old code - may be converted for reuse later			
--					local formation_rotation = -90
--					formation_lead:setRotation(formation_rotation)
					local fx, fy = formation_lead:getPosition()
					local formation_spacing_increment = 1000
					local formation_spacing = 0
					local position_index = 1
					if formation_type == "V" then
						local first_v_leg_place = formation_rotation + 120
						local first_v_leg_fly = formation_heading + 120
						if first_v_leg_place > 360 then
							first_v_leg_place = first_v_leg_place - 360
						end
						if first_v_leg_fly > 360 then
							first_v_leg_fly = first_v_leg_fly - 360
						end
						local second_v_leg_place = formation_rotation + 240
						local second_v_leg_fly = formation_heading + 240
						if second_v_leg_place > 360 then
							second_v_leg_place = second_v_leg_place - 360
						end
						if second_v_leg_fly > 360 then
							second_v_leg_fly = second_v_leg_fly - 360
						end
						--print("formation_heading: " .. formation_heading)
						--print("formation_rotation: " .. formation_rotation)
						--print("first_v_leg_place: " .. first_v_leg_place)
						--print("second_v_leg_place: " .. second_v_leg_place)
						--print(string.format("fx: %.1f, fy: %.1f",fx,fy))
						for _, fm in pairs(fto) do
							if fm ~= nil and fm:isValid() and fm ~= formation_lead then
								fm:setHeading(formation_heading)
								fm:setRotation(formation_rotation)
								local rpx = nil
								local rpy = nil
								local fpx = nil
								local fpy = nil
								if position_index % 2 ~= 0 then
									formation_spacing = formation_spacing + formation_spacing_increment
									rpx, rpy = vectorFromAngle(first_v_leg_place,formation_spacing)
									fpx, fpy = vectorFromAngle(first_v_leg_fly,formation_spacing)
								else
									rpx, rpy = vectorFromAngle(second_v_leg_place,formation_spacing)
									fpx, fpy = vectorFromAngle(second_v_leg_fly,formation_spacing)
								end--
								--print(string.format("rpx: %.1f, rpy: %.1f",rpx,rpy))
								--print(string.format("fx+rpx: %.1f, fy+rpy: %.1f",fx+rpx,fy+rpy))
								fm:setPosition(fx+rpx,fy+rpy)
								fm:orderFlyFormation(formation_lead,fpx,fpy)
								position_index = position_index + 1
							end
						end
					elseif formation_type == "A" then
						local first_A_leg_place = formation_rotation + 60
						local first_A_leg_fly = formation_heading + 60
						if first_A_leg_place > 360 then
							first_A_leg_place = first_A_leg_place - 360
						end
						if first_A_leg_fly > 360 then
							first_A_leg_fly = first_A_leg_fly - 360
						end
						local second_A_leg_place = formation_rotation + 300
						local second_A_leg_fly = formation_heading + 300
						if second_A_leg_place > 360 then
							second_A_leg_place = second_A_leg_place - 360
						end
						if second_A_leg_fly > 360 then
							second_A_leg_fly = second_A_leg_fly - 360
						end
						for _, fm in pairs(fto) do
							if fm ~= nil and fm:isValid() and fm ~= formation_lead then
								fm:setHeading(formation_heading)
								fm:setRotation(formation_rotation)
								local rpx = nil
								local rpy = nil
								local fpx = nil
								local fpy = nil
								if position_index % 2 ~= 0 then
									formation_spacing = formation_spacing + formation_spacing_increment
									rpx, rpy = vectorFromAngle(first_A_leg_place,formation_spacing)
									fpx, fpy = vectorFromAngle(first_A_leg_fly,formation_spacing)
								else
									rpx, rpy = vectorFromAngle(second_A_leg_place,formation_spacing)
									fpx, fpy = vectorFromAngle(second_A_leg_fly,formation_spacing)
								end--
								fm:setPosition(fx+rpx,fy+rpy)
								fm:orderFlyFormation(formation_lead,fpx,fpy)
								position_index = position_index + 1
							end
						end
					elseif formation_type == "circle" then
						local placement_angle = 30
						local circle_top_place = formation_rotation + placement_angle
						local circle_top_fly = formation_heading + placement_angle
						if circle_top_place > 360 then
							circle_top_place = circle_top_place - 360
						end
						if circle_top_fly > 360 then
							circle_top_fly = circle_top_fly - 360
						end
						local circle_count = 0
						for _, fm in pairs(fto) do
							if fm ~= nil and fm:isValid() and fm ~= formation_lead then
								circle_count = circle_count + 1
							end
						end
						local circle_radius = 1500
						if circle_count > 0 then
							local angle_increment = 360/circle_count
							for _, fm in pairs(fto) do
								if fm ~= nil and fm:isValid() and fm ~= formation_lead then
									fm:setHeading(formation_heading)
									fm:setRotation(formation_rotation)
									rpx, rpy = vectorFromAngle(circle_top_place,circle_radius)
									fpx, fpy = vectorFromAngle(circle_top_fly,circle_radius)
									fm:setPosition(fx+rpx,fy+rpy)
									fm:orderFlyFormation(formation_lead,fpx,fpy)
									circle_top_place = circle_top_place + angle_increment
									if circle_top_place > 360 then
										circle_top_place = circle_top_place - 360
									end
									circle_top_fly = circle_top_fly + angle_increment
									if circle_top_fly > 360 then
										circle_top_fly = circle_top_fly - 360
									end
								end
							end
						end
					elseif formation_type == "square" then
						local corner_spot = 1
						local edge_spot = 1
						local layer_count = 1
						local square_spacing = 1000
						local corner_x = {1,-1,1,-1}
						local corner_y = {1,-1,-1,1}
						local edge_x = {0,0,1,-1}
						local edge_y = {1,-1,0,0}
						local fly_corner_x = {-1,1,1,-1}
						local fly_corner_y = {1,-1,1,-1}
						local fly_edge_x = {-1,1,0,0}
						local fly_edge_y = {0,0,-1,1}
						for _, fm in pairs(fto) do
							if fm ~= nil and fm:isValid() and fm ~= formation_lead then
								fm:setHeading(formation_heading)
								fm:setRotation(formation_rotation)
								if corner_spot <= 4 then
									fm:setPosition(fx+layer_count*square_spacing*corner_x[corner_spot],fy+layer_count*square_spacing*corner_y[corner_spot])
									fm:orderFlyFormation(formation_lead,layer_count*square_spacing*fly_corner_x[corner_spot],layer_count*square_spacing*fly_corner_y[corner_spot])
									corner_spot = corner_spot + 1
								elseif edge_spot <= 4 then
									fm:setPosition(fx+layer_count*square_spacing*edge_x[edge_spot],fy+layer_count*square_spacing*edge_y[edge_spot])
									fm:orderFlyFormation(formation_lead,layer_count*square_spacing*fly_edge_x[edge_spot],layer_count*square_spacing*fly_edge_y[edge_spot])
									edge_spot = edge_spot + 1
								else
									corner_spot = 1
									edge_spot = 1
									layer_count = layer_count + 1
								end
							end
						end
					else
						addGMMessage("formation type unrecognized. no action taken")
					end
--]]					
				else
					addGMMessage("Formation lead not in fleet. Formation lead set to nil. No other action taken")
					formation_lead = nil
				end
			end
		end)
	end
	addGMFunction("+Reorganize Fleet",orderFleetChange)
	addGMFunction("+Average Impulse",averageImpulse)
	addGMFunction("Set Player Fleet",function()
		local object_list = getGMSelection()
		local fleet = {}
		for _, temp_object in pairs(object_list) do
			if isObjectType(temp_object,"CpuShip") then
				if temp_object:getFaction() == "Human Navy" then
					table.insert(fleet,temp_object)
				end
			end
		end
		if #fleet > 0 then
			friendlyDefensiveFleetList[string.char(friendly_defensive_fleet_val)] = fleet
			local ship_names = ""
			for _, ship in ipairs(fleet) do
				ship.fleet = string.char(friendly_defensive_fleet_val)
				ship_names = ship_names .. ship:getCallSign() .. " "
			end
			addGMMessage(string.format("Squadron %s created with these ships:\n   %s\nDon't forget to add sandbox comms:\n   Select ship(s), Tweak Terrain > Sandbox Comms",string.char(friendly_defensive_fleet_val),ship_names))
			friendly_defensive_fleet_val = friendly_defensive_fleet_val + 1
			--no boundary check for more than 26 fleets		
		else
			addGMMessage("No Human Navy ships selected. No action taken")
		end
	end)
	--Replaces !single scan and !full scan buttons
	addGMFunction("Set Singly Scanned",function()
		local object_list = getGMSelection()
		local fleet = {}
		for _, temp_object in pairs(object_list) do
			if isObjectType(temp_object,"CpuShip") then
				table.insert(fleet,temp_object)
			end
		end
		if #fleet > 0 then
			local ship_names = ""
			for _, ship in ipairs(fleet) do
				ship:setScanState("simplescan")
				ship_names = ship_names .. ship:getCallSign() .. " "
			end
			addGMMessage(string.format("Ships set as singly scanned:\n   %s",ship_names))
		else
			addGMMessage("No CPU ships selected. No action taken")
		end
	end)
	addGMFunction("Set Fully Scanned",function()
		local object_list = getGMSelection()
		local fleet = {}
		for _, temp_object in pairs(object_list) do
			if isObjectType(temp_object,"CpuShip") then
				table.insert(fleet,temp_object)
			end
		end
		if #fleet > 0 then
			local ship_names = ""
			for _, ship in ipairs(fleet) do
				ship:setScanned(true)
				ship_names = ship_names .. ship:getCallSign() .. " "
			end
			addGMMessage(string.format("Ships set as fully scanned:\n   %s",ship_names))
		else
			addGMMessage("No CPU ships selected. No action taken")
		end
	end)
end
------------------
--	Order Ship  --
------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN FROM ORDER SHIP	F	initialGMFunctions
-- +WARP/JUMP JAMMER		F	warpJumpJammer
-- +ATTACH/DETACH			F	attachDetach
-- +ATTACH TO SHIP			F	attachAnythingToNPS
-- +DETACH					F	detachAnythingFromNPS
-- +PATROL					F	setPatrolPoints
-- +AI						D	setShipAI
-- +FORMATION				F	setFormation
-- +REVERT					F	revertShip
-- DOCKED?					F	inline
function orderShip()
	clearGMFunctions()
	addGMFunction("-Main from order ship",initialGMFunctions)
	addGMFunction("+Warp/Jump Jammer",warpJumpJammer)
	addGMFunction("+Specials",setSpecialsOnNPS)
	addGMFunction("+Attach/Detach",attachDetach)
	addGMFunction("+Patrol",setPatrolPoints)	--currently broken
	local button_label = "+AI"
	local object_list = getGMSelection()
	if #object_list == 1 then
		local obj = object_list[1]
		if isObjectType(obj,"CpuShip") then
			if obj.AI ~= nil then
				button_label = string.format("+AI %s",obj.AI)
			end
		end
	end
	addGMFunction(button_label,setShipAI)
	addGMFunction("+Formation",setFormation)
	addGMFunction("+Revert",revertShip)
	addGMFunction("Docked?",function()
		local object_list = getGMSelection()
		if #object_list == 1 then
		local obj = object_list[1]
			if isObjectType(obj,"CpuShip") then
				local docked_with = obj:getDockedWith()
				if docked_with ~= nil then
					addGMMessage(string.format("Docked with %s",docked_with:getCallSign()))
				else
					addGMMessage("Not docked")
				end
			end
		end
	end)
	if #object_list > 0 then
		button_label = "Jam Sensors"
		local ships_only = true
		local non_enemies_only = true
		local obj = object_list[1]
		if #object_list == 1 then
			if isObjectType(obj,"CpuShip") then
				if obj ~= nil and obj:isValid() then
					if obj.jam_range ~= nil then
						button_label = string.format("%s On",button_label)
					else
						button_label = string.format("%s Off",button_label)
					end
				else
					ships_only = false
				end
				for i,p in ipairs(getActivePlayerShips()) do
					if p:isEnemy(obj) then
						non_enemies_only = false
						break
					end
				end
			else
				ships_only = false
			end
		else
			for _, obj in ipairs(object_list) do
				if obj == nil or not obj:isValid() or isObjectType(obj,"CpuShip") then
					ships_only = false
					break
				end
			end
		end
		if ships_only then
			addGMFunction(button_label,toggleShipSensorJammer)
			if non_enemies_only then
				addGMFunction("Destroy=Escape Pod",function()
					local object_list = getGMSelection()
					if #object_list > 0 then
						local ships_only = true
						local non_enemies_only = true
						local action_list = {}
						for i,obj in ipairs(object_list) do
							if obj == nil or not obj:isValid() or isObjectType(obj,"CpuShip") then
								ships_only = false
							else
								for i,p in ipairs(getActivePlayerShips()) do
									if p:isEnemy(obj) then
										non_enemies_only = false
										break
									end
								end
							end
							if ships_only and non_enemies_only then
								table.insert(action_list,obj)
							end
						end
						if ships_only then
							if non_enemies_only then
								local out = "Automatic escape pod creation upon destruction added to these ships:"
								if #action_list < 2 then
									out = "Automatic escape pod creation upon destruction added to this ship:"
								end
								for i,ship in ipairs(action_list) do
									ship:onDestruction(escapePodWhenDestroyed)
									out = string.format("%s\n%s",out,ship:getCallSign())
								end
								addGMMessage(out)
							else
								addGMMessage("You need to select friendly or neutral ship(s) only. No action taken.")
							end
						else
							addGMMessage("You need to select ship(s) only. No action taken.")
						end
					else
						addGMMessage("You need to select ship(s). No action taken.")
					end
				end)
			end
		end
		if #object_list == 1 and ships_only then
			if obj:getTypeName() == "Service Jonque" then
				addGMFunction("+Jonque",function()
					setServiceJonque(obj)
				end)
			end
		end
	end
end
function setServiceJonque(service_jonque)
	string.format("")
	clearGMFunctions()
	addGMFunction("-Main from Jonque",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("Report",function()
		local out = "Weapons availability, cost, inventory, max_inventory:"
		if service_jonque ~= nil and service_jonque:isValid() then
			for _, weapon in ipairs(missile_types) do
				out = string.format("%s\n    %s: %s, %i, %i, %i",out,weapon,service_jonque.comms_data.weapons[weapon],math.floor(service_jonque.comms_data.weapon_cost[weapon]),service_jonque.comms_data.weapon_inventory[weapon],service_jonque.comms_data.weapon_inventory_max[weapon])
			end
		else
			out = "Invalid Service Jonque. No action taken"
		end
		addGMMessage(out)
	end)
	addGMFunction("Replenish",function()
		local out = "Invalid Service Jonque. No action taken."
		if service_jonque ~= nil and service_jonque:isValid() then
			out = string.format("Service Jonque %s has been replenished.\nWeapons availability, cost, inventory, max_inventory:",service_jonque:getCallSign())
			for _, weapon in ipairs(missile_types) do
				service_jonque.comms_data.weapon_inventory[weapon] = service_jonque.comms_data.weapon_inventory_max[weapon]
			end
			for _, weapon in ipairs(missile_types) do
				out = string.format("%s\n    %s: %s, %i, %i, %i",out,weapon,service_jonque.comms_data.weapons[weapon],math.floor(service_jonque.comms_data.weapon_cost[weapon]),service_jonque.comms_data.weapon_inventory[weapon],service_jonque.comms_data.weapon_inventory_max[weapon])
			end
		end
		addGMMessage(out)
	end)
end
function toggleShipSensorJammer()
	local object_list = getGMSelection()
	if #object_list > 0 then
		local modified_ships_message = ""
		for _, obj in ipairs(object_list) do
			if obj ~= nil and obj:isValid() and isObjectType(obj,"CpuShip") then
				if obj.jam_range == nil then
					obj.jam_range = sensor_jammer_range
					obj.jam_impact = sensor_jammer_impact
					obj.jam_impact_units = sensor_jammer_power_units
					sensor_jammer_list[obj:getCallSign()] = obj
					modified_ships_message = string.format("%s Range:%su Power:%iu\n%s",obj:getCallSign(),obj.jam_range/1000,obj.jam_impact/1000,modified_ships_message)
				else
					obj.jam_range = nil
					obj.jam_impact = nil
					sensor_jammer_list[obj:getCallSign()] = nil
					modified_ships_message = string.format("%s Off\n%s",obj:getCallSign(),modified_ships_message)
				end
			end
		end
		if modified_ships_message ~= "" then
			addGMMessage(string.format("The following CPU Ships have had the following sensor jammer changes made:\n%sChange default jammer range and power under Artifacts",modified_ships_message))
		else
			addGMMessage("No CPUShip selected. No action taken")
		end
	else
		addGMMessage("No CPUShip selected. No action taken")
	end
	orderShip()
end
-----------------
--	Artifacts  --
-----------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM ARTIFACTS	F	initialGMFunctions
-- +DROP POINT			F	dropPoint
-- +SCAN CLUE			F	scanClue
-- +SENSOR JAMMER		F	sensorJammer
-- +SELECT ARTIFACT		D	fiddleWithArtifacts
--    or
-- +SET MODEL			D	setArtifactModel
-- +SET SPIN			D	setArtifactSpin
-- +SET SIGNATURE		D	setArtifactSignature
-- EXPLODE SEL ART		D	explodeSelectedArtifact
function fiddleWithArtifacts()
	clearGMFunctions()
	addGMFunction("-Main from Artifacts",initialGMFunctions)
	addGMFunction("+Drop Point",dropPoint)
	addGMFunction("+Scan Clue",scanClue)
	addGMFunction("+Sensor Jammer",sensorJammer)
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		addGMFunction("+Select Artifact",fiddleWithArtifacts)
	else
		if not isObjectType(object_list[1],"Artifact") then
			addGMFunction("+Select Artifact",fiddleWithArtifacts)
		else
			addGMFunction("+Set Model",setArtifactModel)
			addGMFunction("+Set Spin",setArtifactSpin)
			addGMFunction("+Set Signature",setArtifactSignature)
			addGMFunction("Make retrievable",function()
				local object_list = getGMSelection()
				if object_list == nil or #object_list ~= 1 then
					addGMMessage("No artifact selected. no action taken")
					fiddleWithArtifacts()
					return
				else
					if not isObjectType(object_list[1],"Artifact") then
						addGMMessage("No artifact selected. no action taken")
						fiddleWithArtifacts()
						return
					end
				end
				object_list[1]:allowPickup(true)
				addGMMessage("The selected artifact has been made retrievable")
			end)
			addGMFunction("Make unretrievable",function()
				local object_list = getGMSelection()
				if object_list == nil or #object_list ~= 1 then
					addGMMessage("No artifact selected. no action taken")
					fiddleWithArtifacts()
					return
				else
					if not isObjectType(object_list[1],"Artifact") then
						addGMMessage("No artifact selected. no action taken")
						fiddleWithArtifacts()
						return
					end
				end
				object_list[1]:allowPickup(false)
				addGMMessage("The selected artifact has been made unretrievable")
			end)
			addGMFunction("Explode Sel Artifact",explodeSelectedArtifact)
		end
	end
end
---------------------
--	Tweak Terrain  --
---------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- +UPDATE EDITOR			F	updateEditor
-- PULSE ASTEROID			F	pulseAsteroid
-- JUMP CORRIDOR OFF		F	inline (toggles between ON and OFF)
-- SANDBOX COMMS			F	inline
-- +STATION MANIPULATION	F	stationManipulation
-- +MINEFIELD				F	mineField
-- +MOVE SELECTED			D	moveSelectedObjects
-- +COMMERCE				F	freighterCommerce
function tweakTerrain()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("+Update Editor",updateEditor)
	addGMFunction("+Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("+Faction Relations",function()
		addGMMessage("Select two factions. Selected faction will have an asterisk. Unselect a faction by clicking a faction with an asterisk")
		relation_faction_1 = nil
		relation_faction_2 = nil
		setFactionRelations()
	end)
	local objectList = getGMSelection()
	if #objectList == 1 then
		local tempObject = objectList[1]
		if isObjectType(tempObject,"SpaceStation") or isObjectType(tempObject,"CpuShip") then
			addGMFunction("Sandbox Comms",function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local tempObject = objectList[1]
					if isObjectType(tempObject,"SpaceStation") then
						tempObject:setCommsScript(""):setCommsFunction(commsStation)
						tempObject.comms_data = {
							friendlyness = random(50,100),
							weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
					        weapon_cost =		{Homing = math.random(2,5),	HVLI = math.random(1,4),Mine = math.random(3,8),Nuke = math.random(12,18),	EMP = math.random(12,18) },
							weapon_available = 	{Homing = random(1,10)<=9,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=6,	Nuke = random(1,10)<=4,	EMP = random(1,10)<=5},
							service_cost = 		{
								supplydrop = math.random(80,120), 
								reinforcements = math.random(125,175),
								probe_launch_repair = math.random(1,4) + math.random(1,5),
								hack_repair = math.random(1,4) + math.random(1,5),
								scan_repair = math.random(1,4) + math.random(1,5),
								combat_maneuver_repair = math.random(1,4) + math.random(1,5),
								self_destruct_repair = math.random(1,4) + math.random(1,5),
								tube_slow_down_repair = math.random(1,4) + math.random(1,5),
							},
							system_repair = {
								["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
								["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
								["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
								["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
								["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
								["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
								["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
								["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
								["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
							},
							reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
							max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
							goods = {	[componentGoods[math.random(1,#componentGoods)]]	=	{quantity = math.random(1,5),	cost = math.random(60,95)},
										[mineralGoods[math.random(1,#mineralGoods)]]		=	{quantity = math.random(1,5),	cost = math.random(30,60)} },
							trade = {	food = false, medicine = false, luxury = true },
							public_relations = false
						}
						addGMMessage(string.format("Station %s now has sandbox communications",tempObject:getCallSign()))
					elseif isObjectType(tempObject,"CpuShip") then
						local type_name = tempObject:getTypeName()
						if type_name == "Command Base" or type_name == "Military Outpost" then
							tempObject:setCommsScript(""):setCommsFunction(commsStation)
							tempObject.comms_data = {
								friendlyness = random(50,100),
								weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
								weapon_cost =		{Homing = math.random(2,5),	HVLI = math.random(1,4),Mine = math.random(3,8),Nuke = math.random(12,18),	EMP = math.random(12,18) },
								weapon_available = 	{Homing = random(1,10)<=9,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=6,	Nuke = random(1,10)<=4,	EMP = random(1,10)<=5},
								service_cost = 		{
									supplydrop = math.random(80,120), 
									reinforcements = math.random(125,175),
									probe_launch_repair = math.random(1,4) + math.random(1,5),
									hack_repair = math.random(1,4) + math.random(1,5),
									scan_repair = math.random(1,4) + math.random(1,5),
									combat_maneuver_repair = math.random(1,4) + math.random(1,5),
									self_destruct_repair = math.random(1,4) + math.random(1,5),
									tube_slow_down_repair = math.random(1,4) + math.random(1,5),
								},
								system_repair = {
									["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
									["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
									["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
									["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
									["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
									["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
									["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
									["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
									["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
								},
								reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
								max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
								goods = {	[componentGoods[math.random(1,#componentGoods)]]	=	{quantity = math.random(1,5),	cost = math.random(60,95)},
											[mineralGoods[math.random(1,#mineralGoods)]]		=	{quantity = math.random(1,5),	cost = math.random(30,60)} },
								trade = {	food = false, medicine = false, luxury = true },
								public_relations = false
							}
							addGMMessage(string.format("Faux Station %s now has sandbox communications",tempObject:getCallSign()))
						else
							tempObject:setCommsScript(""):setCommsFunction(commsShip)
							local p = getPlayerShip(-1)
							if p ~= nil and not p:isEnemy(tempObject) then
								if region_ships == nil then
									region_ships = {}
								end
								table.insert(region_ships,tempObject)
							end
							addGMMessage(string.format("Ship %s now has sandbox communications",tempObject:getCallSign()))
						end
					else
						addGMMessage("You can only add sandbox comms to stations or ships. No action taken")
					end
				else
					addGMMessage("Selecet a station or ship. No action taken")
				end
			end)
		end
	else
		if #objectList > 1 then
			addGMFunction("Sandbox Comms",function()
				local object_list = getGMSelection()
				if #object_list > 0 then
					local ship_names = ""
					for _, temp_object in ipairs(object_list) do
						if isObjectType(temp_object,"CpuShip") then
							local type_name = temp_object:getTypeName()
							if type_name == "Command Base" or type_name == "Military Outpost" then
								temp_object:setCommsScript(""):setCommsFunction(commsStation)
								temp_object.comms_data = {
									friendlyness = random(50,100),
									weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
									weapon_cost =		{Homing = math.random(2,5),	HVLI = math.random(1,4),Mine = math.random(3,8),Nuke = math.random(12,18),	EMP = math.random(12,18) },
									weapon_available = 	{Homing = random(1,10)<=9,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=6,	Nuke = random(1,10)<=4,	EMP = random(1,10)<=5},
									service_cost = 		{
										supplydrop = math.random(80,120), 
										reinforcements = math.random(125,175),
										probe_launch_repair = math.random(1,4) + math.random(1,5),
										hack_repair = math.random(1,4) + math.random(1,5),
										scan_repair = math.random(1,4) + math.random(1,5),
										combat_maneuver_repair = math.random(1,4) + math.random(1,5),
										self_destruct_repair = math.random(1,4) + math.random(1,5),
										tube_slow_down_repair = math.random(1,4) + math.random(1,5),
									},
									system_repair = {
										["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
										["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
										["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
										["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
										["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
										["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
										["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
										["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
										["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
									},
									reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
									max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
									goods = {	[componentGoods[math.random(1,#componentGoods)]]	=	{quantity = math.random(1,5),	cost = math.random(60,95)},
												[mineralGoods[math.random(1,#mineralGoods)]]		=	{quantity = math.random(1,5),	cost = math.random(30,60)} },
									trade = {	food = false, medicine = false, luxury = true },
									public_relations = false
								}
								addGMMessage(string.format("Faux Station %s now has sandbox communications",temp_object:getCallSign()))
							else
								temp_object:setCommsScript(""):setCommsFunction(commsShip)
								local p = getPlayerShip(-1)
								if p ~= nil and not p:isEnemy(temp_object) then
									if region_ships == nil then
										region_ships = {}
									end
									table.insert(region_ships,temp_object)
								end
								ship_names = ship_names .. temp_object:getCallSign() .. " "
							end
						end
					end
					if ship_names ~= "" then
						addGMMessage(string.format("These ships now have sandbox communications:\n%s",ship_names))
					else
						addGMMessage("You can only add sandbox comms to stations or ships. No action taken")
					end
				else
					addGMMessage("Select at least one object. No action taken")
				end
			end)
		end
	end
	addGMFunction("+Station Manipulation",stationManipulation)
	addGMFunction("+Minefield",mineField)
	if #objectList > 0 then
		if gm_click_mode ~= nil then
			if gm_click_mode == "move selected" then
				addGMFunction(">Click Move Pos<",moveSelectedObjects)
			else
				addGMFunction("+Move selected",moveSelectedObjects)
			end
		else
			addGMFunction("+Move Selected",moveSelectedObjects)
		end
	end
	addGMFunction("+Probes",tweakProbes)
	addGMFunction("+Commerce",freighterCommerce)
	addGMFunction("+Explosion",setExplosion)
end
function asteroidsNebulae()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("+Planet",function()
		selected_planet = nil
		tweakPlanet()
	end)
	addGMFunction("+Asteroid contents",function()
		clearGMFunctions()
		addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
		addGMFunction("Clear minerals", function()
			local objs = getGMSelection()
			for i=1,#objs do
				objs[i].trace_minerals = {}
			end
		end)
		addGMFunction("Add random", function()
			local objs = getGMSelection()
			for i=1,#objs do
				for i=1,#mineralGoods do
					if random(1,100) < 26 then
						if objs[i].trace_minerals == nil then
							objs[i].trace_minerals = {}
						end
						table.insert(objs[i].trace_minerals,mineralGoods[i])
					end
				end	
			end
		end)
		for goodId=1,#mineralGoods do
			addGMFunction("Add " .. mineralGoods[goodId], function()
				local objs = getGMSelection()
				for i=1,#objs do
					if objs[i].trace_minerals == nil then
						objs[i].trace_minerals = {}
					end
					table.insert(objs[i].trace_minerals, mineralGoods[goodId])
				end
			end)
		end
		addGMFunction("Show info", function()
			local objs = getGMSelection()
			mineralCounts = {}
			for goodId=1,#mineralGoods do
				mineralCounts[mineralGoods[goodId]] = 0
			end
			for i=1,#objs do
				if objs[i].trace_minerals == nil then
					objs[i].trace_minerals = {}
				end
				for mineralIdx=1,#objs[i].trace_minerals do
					mineralCounts[objs[i].trace_minerals[mineralIdx]] = mineralCounts[objs[i].trace_minerals[mineralIdx]] + 1
				end
			end
			avgPrice = (mineralPriceMin + mineralPriceMax) / 2.0

			msg = ""
			totalMinerals = 0
			totalEstRep = 0
			for goodId=1,#mineralGoods do
				msg = msg .. mineralGoods[goodId] .. "   Num=" .. mineralCounts[mineralGoods[goodId]] .. "   Est.rep.=" .. mineralCounts[mineralGoods[goodId]]*avgPrice .. "\n"
				totalMinerals = totalMinerals + mineralCounts[mineralGoods[goodId]]
				totalEstRep = totalEstRep + mineralCounts[mineralGoods[goodId]]*avgPrice
			end
			addGMMessage("Num objs: " .. #objs .. "\nTotal num minerals: " .. totalMinerals .. "\nTotal est. rep: " .. totalEstRep ..  "\n---\n" .. msg)
		end)
	end)
	local objectList = getGMSelection()
	if #objectList == 1 then
		local tempObject = objectList[1]
		if isObjectType(tempObject,"Asteroid") then
			addGMFunction("Pulse Asteroid",pulseAsteroid)
		elseif isObjectType(tempObject,"Nebula") then
			local selected_nebula_index = nil
			for ani, neb in ipairs(anomalous_nebulae) do
				if tempObject == neb.neb then
					selected_nebula_index = ani
					break
				end
			end
			local button_label = "Tweak Neb"
			if selected_nebula_index ~= nil then
				button_label = string.format("%s %i%s",button_label,selected_nebula_index,anomalous_nebulae[selected_nebula_index].name)
			end
			addGMFunction(button_label,setSelectedNebula)
		end
	else
		if #objectList < 1 then
			addGMFunction("+Select Asteroid/Nebula",asteroidsNebulae)
		else
			local asteroids = {}
			local nebulae = {}
			for i,obj in ipairs(objectList) do
				if isObjectType(obj,"Asteroid") then
					table.insert(asteroids,obj)
				elseif isObjectType(obj,"Nebula") then
					table.insert(nebulae,obj)
				end
			end
			if #asteroids < 1 and #nebulae < 1 then
				addGMFunction("+Select Asteroid/Nebula",asteroidsNebulae)
			else
				if #asteroids == 1 then
					addGMFunction("Pulse Asteroid",pulseAsteroid)
				end
				if #nebulae == 1 then
					local selected_nebula_index = nil
					for ani, neb in ipairs(anomalous_nebulae) do
						if tempObject == neb.neb then
							selected_nebula_index = ani
							break
						end
					end
					local button_label = "Tweak Neb"
					if selected_nebula_index ~= nil then
						button_label = string.format("%s %i%s",button_label,selected_nebula_index,anomalous_nebulae[selected_nebula_index].name)
					end
					addGMFunction(button_label,setSelectedNebula)
				else
					addGMFunction("Tweak Nebulae",setSelectedNebula)
				end
			end
		end
	end	
end
--	planet addition and configuration
function tweakPlanet()
	clearGMFunctions()
--	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	local button_label = "Change Planet"
	if selected_planet == nil then
		button_label = "Select Planet"
	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		if #object_list > 1 then
			addGMMessage("Select only one object. No action taken.")
			tweakPlanet()
		elseif #object_list < 1 then
			addGMMessage("Select a planet. No action taken.")
			tweakPlanet()
		else
			if isObjectType(object_list[1],"Planet") then
				selected_planet = object_list[1]
			else
				if ECS then
					addGMMessage("Select a planet. No action taken.")
				else
					addGMMessage(string.format("Select a planet, not a %s. No action taken.",object_list[1].typeName))
				end
			end
			tweakPlanet()
		end
	end)
	addGMFunction("+Add Planet",planetAdd)
	if selected_planet ~= nil then
		addGMFunction("+Surface",planetSurface)
		addGMFunction("+Size",planetSize)
		addGMFunction("+Plane",planetPlane)
		addGMFunction("+Axial Rotation",planetAxialRotation)
		addGMFunction("+Atmosphere",planetAtmosphere)
		addGMFunction("+Orbiter",function()
			selected_orbiter = nil
			planetOrbiter()
		end)
	end
end
function planetOrbiter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet from Orbiter",tweakPlanet)
	local button_label = "Change Orbiter"
	if selected_orbiter == nil then
		button_label = "Select Orbiter"
	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		if #object_list > 1 then
			addGMMessage("Select only one object. No action taken.")
			planetOrbiter()
		elseif #object_list < 1 then
			addGMMessage("Select a planet. No action taken.")
			planetOrbiter()
		else
			if isObjectType(object_list[1],"Planet") then
				selected_orbiter = object_list[1]
			else
				if ECS then
					addGMMessage("Select a planet. No action taken.")
				else
					addGMMessage(string.format("Select a planet, not a %s. No action taken.",object_list[1].typeName))
				end
			end
			planetOrbiter()
		end
	end)
	addGMFunction("+Add Orbiter",planetOrbiterAdd)
	if selected_orbiter ~= nil then
		button_label = "+Time"
		if selected_orbiter.orbit_speed ~= nil then
			button_label = string.format("+Time %s",selected_orbiter.orbit_speed)
		elseif orbiter_speed ~= nil then
			button_label = string.format("+Default Time %s",orbiter_speed)
		end
		addGMFunction(button_label,planetOrbiterSpeed)
		addGMFunction(string.format("+Distance %.3fU",distance(selected_orbiter,selected_planet)/1000),planetOrbiterDistance)
		if selected_orbiter.orbit_speed == nil and orbiter_speed ~= nil then
			addGMFunction("Start Orbiting",function()
				selected_orbiter.orbit_speed = orbiter_speed
				selected_orbiter:setOrbit(selected_planet,selected_orbiter.orbit_speed)
				planetOrbiter()
			end)
		end
	end
end
function planetOrbiterDistance()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter from Distance",planetOrbiter)
	local orbiter_distance = distance(selected_planet,selected_orbiter)/1000
	addGMFunction(string.format("^.1U from %.3fU",orbiter_distance),function()
		local ox, oy = selected_orbiter:getPosition()
		local px, py = selected_planet:getPosition()
		local move_angle = angleFromVectorNorth(ox, oy, px, py)
		local current_orbiter_distance = distance(ox, oy, px, py)
		local new_x, new_y = vectorFromAngleNorth(move_angle,current_orbiter_distance + 100)
		selected_orbiter:setPosition(px + new_x, py + new_y)
		planetOrbiterDistance()
	end)
	addGMFunction(string.format("^1U from %.3fU",orbiter_distance),function()
		local ox, oy = selected_orbiter:getPosition()
		local px, py = selected_planet:getPosition()
		local move_angle = angleFromVectorNorth(ox, oy, px, py)
		local current_orbiter_distance = distance(ox, oy, px, py)
		local new_x, new_y = vectorFromAngleNorth(move_angle,current_orbiter_distance + 1000)
		selected_orbiter:setPosition(px + new_x, py + new_y)
		planetOrbiterDistance()
	end)
	addGMFunction(string.format("v1U from %.3fU",orbiter_distance),function()
		local ox, oy = selected_orbiter:getPosition()
		local px, py = selected_planet:getPosition()
		local move_angle = angleFromVectorNorth(ox, oy, px, py)
		local current_orbiter_distance = distance(ox, oy, px, py)
		local new_distance = current_orbiter_distance - 1000
		local minimum_distance = selected_planet:getPlanetRadius() + selected_orbiter:getPlanetRadius()
		if new_distance < minimum_distance then
			addGMMessage(string.format("Proposed distance of %.3fU is smaller than the minimum distance of %.3fU. No action taken.",new_distance/1000,minimum_distance/1000))
		else
			local new_x, new_y = vectorFromAngleNorth(move_angle,new_distance)
			selected_orbiter:setPosition(px + new_x, py + new_y)
		end
		planetOrbiterDistance()
	end)
	addGMFunction(string.format("v.1U from %.3fU",orbiter_distance),function()
		local ox, oy = selected_orbiter:getPosition()
		local px, py = selected_planet:getPosition()
		local move_angle = angleFromVectorNorth(ox, oy, px, py)
		local current_orbiter_distance = distance(ox, oy, px, py)
		local new_distance = current_orbiter_distance - 100
		local minimum_distance = selected_planet:getPlanetRadius() + selected_orbiter:getPlanetRadius()
		if new_distance < minimum_distance then
			addGMMessage(string.format("Proposed distance of %.3fU is smaller than the minimum distance of %.3fU. No action taken.",new_distance/1000,minimum_distance/1000))
		else
			local new_x, new_y = vectorFromAngleNorth(move_angle,new_distance)
			selected_orbiter:setPosition(px + new_x, py + new_y)
		end
		planetOrbiterDistance()
	end)
end
function planetOrbiterSpeed()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter from Time",planetOrbiter)
	if orbiter_speed == nil then
		orbiter_speed = 0
	end
	if selected_orbiter.orbit_speed == nil then
		addGMFunction(string.format("^10 from %i",orbiter_speed),function()
			orbiter_speed = orbiter_speed + 10
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("^100 from %i",orbiter_speed),function()
			orbiter_speed = orbiter_speed + 100
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("v100 from %i",orbiter_speed),function()
			if orbiter_speed - 100 < 0 then
				addGMMessage("Negative orbit time not allowed. No action taken")
			else
				orbiter_speed = orbiter_speed - 100
			end
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("v10 from %i",orbiter_speed),function()
			if orbiter_speed - 10 < 0 then
				addGMMessage("Negative orbit time not allowed. No action taken")
			else
				orbiter_speed = orbiter_speed - 10
			end
			planetOrbiterSpeed()
		end)
	else
		addGMFunction(string.format("^10 from %i",selected_orbiter.orbit_speed),function()
			selected_orbiter.orbit_speed = selected_orbiter.orbit_speed + 10
			selected_orbiter:setOrbit(selected_planet,selected_orbiter.orbit_speed)
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("^100 from %i",selected_orbiter.orbit_speed),function()
			selected_orbiter.orbit_speed = selected_orbiter.orbit_speed + 100
			selected_orbiter:setOrbit(selected_planet,selected_orbiter.orbit_speed)
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("v100 from %i",selected_orbiter.orbit_speed),function()
			if selected_orbiter.orbit_speed - 100 < 0 then
				addGMMessage("Negative orbit time not allowed. No action taken")
			else
				selected_orbiter.orbit_speed = selected_orbiter.orbit_speed - 100
				selected_orbiter:setOrbit(selected_planet,selected_orbiter.orbit_speed)
			end
			planetOrbiterSpeed()
		end)
		addGMFunction(string.format("v10 from %i",selected_orbiter.orbit_speed),function()
			if selected_orbiter.orbit_speed - 10 < 0 then
				addGMMessage("Negative orbit time not allowed. No action taken")
			else
				selected_orbiter.orbit_speed = selected_orbiter.orbit_speed - 10
				selected_orbiter:setOrbit(selected_planet,selected_orbiter.orbit_speed)
			end
			planetOrbiterSpeed()
		end)
	end
end
function planetOrbiterAdd()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter from Add",planetOrbiter)
	if add_orbiter_size == nil then
		add_orbiter_size = 1000
	end
	addGMFunction(string.format("+Size %.1fU",add_orbiter_size/1000),planetOrbiterAddSize)
	if add_orbiter_plane == nil then
		add_orbiter_plane = 0
	end
	addGMFunction(string.format("+Plane %.1fU",add_orbiter_plane/1000),planetOrbiterAddPlane)
	if add_orbiter_surface == nil then
		orbiter_surfaces = {
			{name = "planets/moon-1.png",		desc = "M1 Standard"},
			{name = "planets/moon-2.png",		desc = "M2 Ganymede"},
			{name = "planets/moon-3.png",		desc = "M3 Antique"},
			{name = "planets/planet-1.png",		desc = "P1 Lush"},
			{name = "planets/planet-2.png",		desc = "P2 Mercury"},
			{name = "planets/planet-3.png",		desc = "P3 Mars"},
			{name = "planets/planet-4.png",		desc = "P4 Dagobah"},
			{name = "planets/planet-5.png",		desc = "P5 Venus"},
			{name = "planets/planet-earth.png",	desc = "P Earth"},
			{name = "planets/gas-1.png",		desc = "G1 Jupiter"},	
			{name = "planets/gas-2.png",		desc = "G2 Saturn"},
			{name = "planets/gas-3.png",		desc = "G3 Uranus"},
			{name = "planets/star-1.png",		desc = "S1 Star"},
		}
		add_orbiter_surface = orbiter_surfaces[1]	--default to the first one in the list
	end
	addGMFunction(string.format("+Surface %s",add_orbiter_surface.desc),planetOrbiterAddSurface)
	if gm_click_mode == "add orbiter" then
		addGMFunction(">Add Orbiter<",planetOrbiterAddMode)
	else
		addGMFunction("Add Orbiter",planetOrbiterAddMode)
	end
end
function planetOrbiterAddMode()
	if gm_click_mode == "add orbiter" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "add orbiter"
		onGMClick(addPlanetOrbiterOnClick)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   add orbiter\nGM click mode.",prev_mode))
		end
	end
	planetOrbiterAdd()
end
function addPlanetOrbiterOnClick(x, y)
	local planet = Planet():setPosition(x, y):setPlanetRadius(add_orbiter_size):setDistanceFromMovementPlane(add_orbiter_plane):setPlanetSurfaceTexture(add_orbiter_surface.name)
	planet.plane = add_orbiter_plane
end
function planetOrbiterAddSize()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter",planetOrbiter)
	addGMFunction("-Add",planetOrbiterAdd)
	addGMFunction(string.format("^.5U from %.1fU",add_orbiter_size/1000),function()
		add_orbiter_size = add_orbiter_size + 500
		planetOrbiterAddSize()
	end)
	addGMFunction(string.format("^5U from %.1fU",add_orbiter_size/1000),function()
		add_orbiter_size = add_orbiter_size + 5000
		planetOrbiterAddSize()
	end)
	addGMFunction(string.format("v5U from %.1fU",add_orbiter_size/1000),function()
		if add_orbiter_size - 5000 < 500 then
			addGMMessage("Minimum size: .5U. No action taken")
		else
			add_orbiter_size = add_orbiter_size - 5000
		end
		planetOrbiterAddSize()
	end)
	addGMFunction(string.format("v.5U from %.1fU",add_orbiter_size/1000),function()
		if add_orbiter_size - 500 < 500 then
			addGMMessage("Minimum size: .5U. No action taken")
		else
			add_orbiter_size = add_orbiter_size - 500
		end
		planetOrbiterAddSize()
	end)
end
function planetOrbiterAddPlane()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter",planetOrbiter)
	addGMFunction("-Add",planetOrbiterAdd)
	addGMFunction(string.format("^1U from %sU",add_orbiter_plane/1000),function()
		add_orbiter_plane = add_orbiter_plane + 1000
		planetOrbiterAddPlane()
	end)
	addGMFunction(string.format("^5U from %sU",add_orbiter_plane/1000),function()
		add_orbiter_plane = add_orbiter_plane + 5000
		planetOrbiterAddPlane()
	end)
	addGMFunction(string.format("v5U from %sU",add_orbiter_plane/1000),function()
		add_orbiter_plane = add_orbiter_plane - 5000
		planetOrbiterAddPlane()
	end)
	addGMFunction(string.format("v1U from %sU",add_orbiter_plane/1000),function()
		add_orbiter_plane = add_orbiter_plane - 1000
		planetOrbiterAddPlane()
	end)
end
function planetOrbiterAddSurface()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Orbiter",planetOrbiter)
	addGMFunction("-Add",planetOrbiterAdd)
	for _, surface in ipairs(orbiter_surfaces) do
		local button_label = surface.desc
		if surface == add_orbiter_surface then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			add_orbiter_surface = surface
			planetOrbiterAddSurface()
		end)
	end
end
function planetAdd()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet from Add",tweakPlanet)
	if add_planet_size == nil then
		add_planet_size = 5000
	end
	addGMFunction(string.format("+Size %sU",add_planet_size/1000),planetAddSize)
	if add_planet_plane == nil then
		add_planet_plane = 0
	end
	addGMFunction(string.format("+Plane %sU",add_planet_plane/1000),planetAddPlane)
	if add_planet_surface == nil then
		planet_surfaces = {
			{name = "planets/planet-1.png",		desc = "P1 Lush"},
			{name = "planets/planet-2.png",		desc = "P2 Mercury"},
			{name = "planets/planet-3.png",		desc = "P3 Mars"},
			{name = "planets/planet-4.png",		desc = "P4 Dagobah"},
			{name = "planets/planet-5.png",		desc = "P5 Venus"},
			{name = "planets/planet-earth.png",	desc = "P Earth"},
			{name = "planets/gas-1.png",		desc = "G1 Jupiter"},	
			{name = "planets/gas-2.png",		desc = "G2 Saturn"},
			{name = "planets/gas-3.png",		desc = "G3 Uranus"},
			{name = "planets/moon-1.png",		desc = "M1 Standard"},
			{name = "planets/moon-2.png",		desc = "M2 Ganymede"},
			{name = "planets/moon-3.png",		desc = "M3 Antique"},
			{name = "planets/star-1.png",		desc = "S1 Star"},
		}
		add_planet_surface = planet_surfaces[1]
	end
	addGMFunction(string.format("+Surface %s",add_planet_surface.desc),planetAddSurface)
	if gm_click_mode == "add planet" then
		addGMFunction(">Add Planet<",planetAddMode)
	else
		addGMFunction("Add Planet",planetAddMode)
	end
end
function planetAddSurface()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Add",planetAdd)
	for _, surface in ipairs(planet_surfaces) do
		local button_label = surface.desc
		if surface == add_planet_surface then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			add_planet_surface = surface
			planetAddSurface()
		end)
	end
end
function planetAddMode()
	if gm_click_mode == "add planet" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "add planet"
		onGMClick(addPlanetOnClick)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   add planet\nGM click mode.",prev_mode))
		end
	end
	planetAdd()
end
function addPlanetOnClick(x, y)
	local planet = Planet():setPosition(x, y):setPlanetRadius(add_planet_size):setDistanceFromMovementPlane(add_planet_plane):setPlanetSurfaceTexture(add_planet_surface.name)
	planet.plane = add_planet_plane
end
function planetAddSize()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Add",planetAdd)
	addGMFunction(string.format("^1U from %sU",add_planet_size/1000),function()
		add_planet_size = add_planet_size + 1000
		planetAddSize()
	end)
	addGMFunction(string.format("^5U from %sU",add_planet_size/1000),function()
		add_planet_size = add_planet_size + 5000
		planetAddSize()
	end)
	addGMFunction(string.format("v5U from %sU",add_planet_size/1000),function()
		if add_planet_size - 5000 < 1000 then
			addGMMessage("Minimum size: 1U. No action taken")
		else
			add_planet_size = add_planet_size - 5000
		end
		planetAddSize()
	end)
	addGMFunction(string.format("v1U from %sU",add_planet_size/1000),function()
		if add_planet_size - 1000 < 1000 then
			addGMMessage("Minimum size: 1U. No action taken")
		else
			add_planet_size = add_planet_size - 1000
		end
		planetAddSize()
	end)
end
function planetAddPlane()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Add",planetAdd)
	addGMFunction(string.format("^1U from %sU",add_planet_plane/1000),function()
		add_planet_plane = add_planet_plane + 1000
		planetAddPlane()
	end)
	addGMFunction(string.format("^5U from %sU",add_planet_plane/1000),function()
		add_planet_plane = add_planet_plane + 5000
		planetAddPlane()
	end)
	addGMFunction(string.format("v5U from %sU",add_planet_plane/1000),function()
		add_planet_plane = add_planet_plane - 5000
		planetAddPlane()
	end)
	addGMFunction(string.format("v1U from %sU",add_planet_plane/1000),function()
		add_planet_plane = add_planet_plane - 1000
		planetAddPlane()
	end)
end
function planetAtmosphere()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	if selected_planet.atmosphere_texture == nil then
		selected_planet.atmosphere_texture = "No"
	end
	addGMFunction(string.format("Atmos-texture %s",selected_planet.atmosphere_texture),function()
		if selected_planet.atmosphere_texture == "No" then
			selected_planet:setPlanetAtmosphereTexture("planets/atmosphere.png")
			selected_planet.atmosphere_texture = "Yes"
		else
			selected_planet:setPlanetAtmosphereTexture("")
			selected_planet.atmosphere_texture = "No"
		end
		planetAtmosphere()
	end)
	addGMFunction("+Atmos-color",planetAtmosphereColor)
	addGMFunction("+Cloud Texture",planetCloudTexture)
	addGMFunction("+Cloud Radius",planetCloudRadius)
end
function planetCloudRadius()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	if selected_planet.cloud_radius == nil then
		selected_planet.cloud_radius = selected_planet:getPlanetRadius() + 100
	end
	addGMFunction(string.format("^10 from %s",selected_planet.cloud_radius),function()
		selected_planet.cloud_radius = selected_planet.cloud_radius + 10
		if selected_planet.cloud_radius < selected_planet:getPlanetRadius() then
			selected_planet.cloud_radius = selected_planet:getPlanetRadius()
		end
		selected_planet:setPlanetCloudRadius(selected_planet.cloud_radius)
		planetCloudRadius()
	end)
	addGMFunction(string.format("^100 from %s",selected_planet.cloud_radius),function()
		selected_planet.cloud_radius = selected_planet.cloud_radius + 100
		if selected_planet.cloud_radius < selected_planet:getPlanetRadius() then
			selected_planet.cloud_radius = selected_planet:getPlanetRadius()
		end
		selected_planet:setPlanetCloudRadius(selected_planet.cloud_radius)
		planetCloudRadius()
	end)
	addGMFunction(string.format("v100 from %s",selected_planet.cloud_radius),function()
		selected_planet.cloud_radius = selected_planet.cloud_radius - 100
		if selected_planet.cloud_radius < selected_planet:getPlanetRadius() then
			selected_planet.cloud_radius = selected_planet:getPlanetRadius()
		end
		selected_planet:setPlanetCloudRadius(selected_planet.cloud_radius)
		planetCloudRadius()
	end)	
	addGMFunction(string.format("v10 from %s",selected_planet.cloud_radius),function()
		selected_planet.cloud_radius = selected_planet.cloud_radius - 10
		if selected_planet.cloud_radius < selected_planet:getPlanetRadius() then
			selected_planet.cloud_radius = selected_planet:getPlanetRadius()
		end
		selected_planet:setPlanetCloudRadius(selected_planet.cloud_radius)
		planetCloudRadius()
	end)	
end
function planetCloudTexture()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	if selected_planet.cloud_texture == nil then
		selected_planet.cloud_texture = "None"
	end
	local cloud_textures = {
		{name = "planets/clouds-1.png", desc = "C1 Standard"},
		{name = "planets/clouds-2.png", desc = "C2 Light"},
		{name = "planets/clouds-3.png", desc = "C3 Heavy"},
		{name = "", desc = "None"},
	}
	for _, cloud_texture in ipairs(cloud_textures) do
		local button_label = cloud_texture.desc
		if selected_planet.cloud_texture == cloud_texture.name then
			button_label = button_label .. "*"
		elseif selected_planet.cloud_texture == "None" and cloud_texture.desc == "None" then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			selected_planet.cloud_texture = cloud_texture.name
			selected_planet:setPlanetCloudTexture(selected_planet.cloud_texture)
			if selected_planet.cloud_texture == "" then
				selected_planet.cloud_texture = "None"
			end
			planetCloudTexture()
		end)
	end
end
function planetAtmosphereColor()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	if selected_planet.atmosphere_color_red == nil then
		selected_planet.atmosphere_color_red = 0
		selected_planet.atmosphere_color_green = 0
		selected_planet.atmosphere_color_blue = 0
	end
	addGMFunction("+Red",planetAtmosphereColorRed)
	addGMFunction("+Green",planetAtmosphereColorGreen)
	addGMFunction("+Blue",planetAtmosphereColorBlue)
end
function planetAtmosphereColorRed()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	addGMFunction("-Color",planetAtmosphereColor)
	addGMFunction(string.format("^.01 from %.2f",selected_planet.atmosphere_color_red),function()
		local new_color = selected_planet.atmosphere_color_red + .01
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_red = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorRed()
	end)
	addGMFunction(string.format("^.1 from %.2f",selected_planet.atmosphere_color_red),function()
		local new_color = selected_planet.atmosphere_color_red + .1
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_red = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorRed()
	end)
	addGMFunction(string.format("v.1 from %.2f",selected_planet.atmosphere_color_red),function()
		local new_color = selected_planet.atmosphere_color_red - .1
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_red = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorRed()
	end)
	addGMFunction(string.format("v.01 from %.2f",selected_planet.atmosphere_color_red),function()
		local new_color = selected_planet.atmosphere_color_red - .01
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_red = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorRed()
	end)
end
function planetAtmosphereColorGreen()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	addGMFunction("-Color",planetAtmosphereColor)
	addGMFunction(string.format("^.01 from %.2f",selected_planet.atmosphere_color_green),function()
		local new_color = selected_planet.atmosphere_color_green + .01
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_green = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorGreen()
	end)
	addGMFunction(string.format("^.1 from %.2f",selected_planet.atmosphere_color_green),function()
		local new_color = selected_planet.atmosphere_color_green + .1
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_green = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorGreen()
	end)
	addGMFunction(string.format("v.1 from %.2f",selected_planet.atmosphere_color_green),function()
		local new_color = selected_planet.atmosphere_color_green - .1
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_green = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorGreen()
	end)
	addGMFunction(string.format("v.01 from %.2f",selected_planet.atmosphere_color_green),function()
		local new_color = selected_planet.atmosphere_color_green - .01
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_green = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorGreen()
	end)
end
function planetAtmosphereColorBlue()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	addGMFunction("-Atmosphere",planetAtmosphere)
	addGMFunction("-Color",planetAtmosphereColor)
	addGMFunction(string.format("^.01 from %.2f",selected_planet.atmosphere_color_blue),function()
		local new_color = selected_planet.atmosphere_color_blue + .01
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_blue = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorBlue()
	end)
	addGMFunction(string.format("^.1 from %.2f",selected_planet.atmosphere_color_blue),function()
		local new_color = selected_planet.atmosphere_color_blue + .1
		if new_color > 255 then
			addGMMessage(string.format("Max color value: 255. Proposed value %.2f is too high. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_blue = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorBlue()
	end)
	addGMFunction(string.format("v.1 from %.2f",selected_planet.atmosphere_color_blue),function()
		local new_color = selected_planet.atmosphere_color_blue - .1
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_blue = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorBlue()
	end)
	addGMFunction(string.format("v.01 from %.2f",selected_planet.atmosphere_color_blue),function()
		local new_color = selected_planet.atmosphere_color_blue - .01
		if new_color < 0 then
			addGMMessage(string.format("Min color value: 0. Proposed value %.2f is too low. No action taken.",new_color))
		else
			selected_planet.atmosphere_color_blue = new_color
			selected_planet:setPlanetAtmosphereColor(selected_planet.atmosphere_color_red,selected_planet.atmosphere_color_green,selected_planet.atmosphere_color_blue)
		end
		planetAtmosphereColorBlue()
	end)
end
function planetAxialRotation()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet Axial Spin",tweakPlanet)
	if selected_planet.axial_rotation == nil then
		selected_planet.axial_rotation = 0
	end
	addGMFunction(string.format("^10 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation + 10
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
	addGMFunction(string.format("^100 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation + 100
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
	addGMFunction(string.format("^500 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation + 500
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
	addGMFunction(string.format("v500 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation - 500
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
	addGMFunction(string.format("v100 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation - 100
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
	addGMFunction(string.format("v10 from %s",selected_planet.axial_rotation),function()
		selected_planet.axial_rotation = selected_planet.axial_rotation - 10
		selected_planet:setAxialRotationTime(selected_planet.axial_rotation)
		planetAxialRotation()
	end)
end
function planetPlane()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet from Plane",tweakPlanet)
	if selected_planet.plane == nil then
		selected_planet.plane = 0
	end
	addGMFunction(string.format("^100 from %s",selected_planet.plane),function()
		selected_planet.plane = selected_planet.plane + 100
		selected_planet:setDistanceFromMovementPlane(selected_planet.plane)
		planetPlane()
	end)
	addGMFunction(string.format("^500 from %s",selected_planet.plane),function()
		selected_planet.plane = selected_planet.plane + 500
		selected_planet:setDistanceFromMovementPlane(selected_planet.plane)
		planetPlane()
	end)
	addGMFunction(string.format("v500 from %s",selected_planet.plane),function()
		selected_planet.plane = selected_planet.plane - 500
		selected_planet:setDistanceFromMovementPlane(selected_planet.plane)
		planetPlane()
	end)
	addGMFunction(string.format("v100 from %s",selected_planet.plane),function()
		selected_planet.plane = selected_planet.plane - 100
		selected_planet:setDistanceFromMovementPlane(selected_planet.plane)
		planetPlane()
	end)
end
function planetSize()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet from Size",tweakPlanet)
	local current_planet_size = selected_planet:getPlanetRadius()
	addGMFunction(string.format("^100 from %s",current_planet_size),function()
		local new_size = selected_planet:getPlanetRadius() + 100
		--insert sanity check here
		selected_planet:setPlanetRadius(new_size)
		planetSize()
	end)
	addGMFunction(string.format("^500 from %s",current_planet_size),function()
		local new_size = selected_planet:getPlanetRadius() + 500
		--insert sanity check here
		selected_planet:setPlanetRadius(new_size)
		planetSize()
	end)
	addGMFunction(string.format("v500 from %s",current_planet_size),function()
		local new_size = selected_planet:getPlanetRadius() - 500
		if new_size >= 100 then
			selected_planet:setPlanetRadius(new_size)
		else
			addGMMessage("Please don't try to make planets smaller than 100. Those are asteroids. No action taken")
		end
		planetSize()
	end)
	addGMFunction(string.format("v100 from %s",current_planet_size),function()
		local new_size = selected_planet:getPlanetRadius() - 100
		if new_size >= 100 then
			selected_planet:setPlanetRadius(new_size)
		else
			addGMMessage("Please don't try to make planets smaller than 100. Those are asteroids. No action taken")
		end
		planetSize()
	end)
end
function planetSurface()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Bodies/Nebulae",asteroidsNebulae)
	addGMFunction("-Planet",tweakPlanet)
	local surfaces = {
		{name = "planets/gas-1.png",		desc = "G1 Jupiter"},
		{name = "planets/gas-2.png",		desc = "G2 Saturn"},
		{name = "planets/gas-3.png",		desc = "G3 Uranus"},
		{name = "planets/moon-1.png",		desc = "M1 Standard"},
		{name = "planets/moon-2.png",		desc = "M2 Ganymede"},
		{name = "planets/moon-3.png",		desc = "M3 Antique"},
		{name = "planets/planet-1.png",		desc = "P1 Lush"},
		{name = "planets/planet-2.png",		desc = "P2 Mercury"},
		{name = "planets/planet-3.png",		desc = "P3 Mars"},
		{name = "planets/planet-4.png",		desc = "P4 Dagobah"},
		{name = "planets/planet-5.png",		desc = "P5 Venus"},
		{name = "planets/planet-earth.png",	desc = "P Earth"},
		{name = "planets/star-1.png",		desc = "S1 Star"},
	}
	for _,surface in ipairs(surfaces) do
		local button_label = surface.desc
		if selected_planet.surface ~= nil and selected_planet.surface == surface.name then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			selected_planet:setPlanetSurfaceTexture(surface.name)
			selected_planet.surface = surface.name
			planetSurface()
		end)
	end
end
--	nebula effects on players
function nebulaEffectDegree()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction(string.format("+Coolant Loss %s",coolant_loss_name),setCoolantLossDegree)
	addGMFunction(string.format("+Coolant Gain %s",coolant_gain_name),setCoolantGainDegree)
	addGMFunction(string.format("+Beam Range Loss %s",beam_range_loss_name),setBeamRangeLossDegree)
	addGMFunction(string.format("+Beam Range Gain %s",beam_range_gain_name),setBeamRangeGainDegree)
	addGMFunction(string.format("+Shield Loss %s",shield_loss_name),setShieldChargeLossDegree)
	addGMFunction(string.format("+Shield Gain %s",shield_gain_name),setShieldChargeGainDegree)	
end
function setShieldChargeLossDegree()
	clearGMFunctions()
	addGMFunction("-Main from -Shield Chg",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if shield_loss_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_loss_name = "Lo"
		shield_loss = shield_losses[shield_loss_name].val
		setShieldChargeLossDegree()
	end)
	button_label = "Medium"
	if shield_loss_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_loss_name = "Md"
		shield_loss = shield_losses[shield_loss_name].val
		setShieldChargeLossDegree()
	end)
	button_label = "High"
	if shield_loss_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_loss_name = "Hi"
		shield_loss = shield_losses[shield_loss_name].val
		setShieldChargeLossDegree()
	end)
	button_label = "Severe"
	if shield_loss_name == "Sv" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_loss_name = "Sv"
		shield_loss = shield_losses[shield_loss_name].val
		setShieldChargeLossDegree()
	end)
end
function setShieldChargeGainDegree()
	clearGMFunctions()
	addGMFunction("-Main from +Shield Chg",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if shield_gain_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_gain_name = "Lo"
		shield_gain = shield_gains[shield_gain_name].val
		setShieldChargeGainDegree()
	end)
	button_label = "Medium"
	if shield_gain_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_gain_name = "Md"
		shield_gain = shield_gains[shield_gain_name].val
		setShieldChargeGainDegree()
	end)
	button_label = "High"
	if shield_gain_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		shield_gain_name = "Hi"
		shield_gain = shield_gains[shield_gain_name].val
		setShieldChargeGainDegree()
	end)
end
function setBeamRangeGainDegree()
	clearGMFunctions()
	addGMFunction("-Main from +Beam Range",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if beam_range_gain_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_gain_name = "Lo"
		beam_range_gain = beam_range_gains[beam_range_gain_name].val
		setBeamRangeGainDegree()
	end)
	button_label = "Medium"
	if beam_range_gain_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_gain_name = "Md"
		beam_range_gain = beam_range_gains[beam_range_gain_name].val
		setBeamRangeGainDegree()
	end)
	button_label = "High"
	if beam_range_gain_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_gain_name = "Hi"
		beam_range_gain = beam_range_gains[beam_range_gain_name].val
		setBeamRangeGainDegree()
	end)
end
function setBeamRangeLossDegree()
	clearGMFunctions()
	addGMFunction("-Main from -Beam Range",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if beam_range_loss_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_loss_name = "Lo"
		beam_range_loss = beam_range_losses[beam_range_loss_name].val
		setBeamRangeLossDegree()
	end)
	button_label = "Medium"
	if beam_range_loss_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_loss_name = "Md"
		beam_range_loss = beam_range_losses[beam_range_loss_name].val
		setBeamRangeLossDegree()
	end)
	button_label = "High"
	if beam_range_loss_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_loss_name = "Hi"
		beam_range_loss = beam_range_losses[beam_range_loss_name].val
		setBeamRangeLossDegree()
	end)
	button_label = "Severe"
	if beam_range_loss_name == "Sv" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		beam_range_loss_name = "Sv"
		beam_range_loss = beam_range_losses[beam_range_loss_name].val
		setBeamRangeLossDegree()
	end)
end
function setCoolantLossDegree()
	clearGMFunctions()
	addGMFunction("-Main from -Coolant",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if coolant_loss_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_loss_name = "Lo"
		coolant_loss = coolant_losses[coolant_loss_name].val
		setCoolantLossDegree()
	end)
	button_label = "Medium"
	if coolant_loss_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_loss_name = "Md"
		coolant_loss = coolant_losses[coolant_loss_name].val
		setCoolantLossDegree()
	end)
	button_label = "High"
	if coolant_loss_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_loss_name = "Hi"
		coolant_loss = coolant_losses[coolant_loss_name].val
		setCoolantLossDegree()
	end)
	button_label = "Severe"
	if coolant_loss_name == "Sv" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_loss_name = "Sv"
		coolant_loss = coolant_losses[coolant_loss_name].val
		setCoolantLossDegree()
	end)
end
function setCoolantGainDegree()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("-Nebulae",setSelectedNebula)
	addGMFunction("-Degree",nebulaEffectDegree)
	local button_label = "Low"
	if coolant_gain_name == "Lo" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_gain_name = "Lo"
		coolant_gain = coolant_gains[coolant_gain_name].val
		setCoolantGainDegree()
	end)
	button_label = "Medium"
	if coolant_gain_name == "Md" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_gain_name = "Md"
		coolant_gain = coolant_gains[coolant_gain_name].val
		setCoolantGainDegree()
	end)
	button_label = "High"
	if coolant_gain_name == "Hi" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		coolant_gain_name = "Hi"
		coolant_gain = coolant_gains[coolant_gain_name].val
		setCoolantGainDegree()
	end)
end
function setSelectedNebula()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Asteroids/Nebulae",asteroidsNebulae)
	addGMFunction("+Effect Degree",nebulaEffectDegree)
	local objectList = getGMSelection()
	if #objectList == 1 then
		local tempObject = objectList[1]
		if isObjectType(tempObject,"Nebula") then
			setSingleNebula(tempObject)
		else
			addGMMessage("Select a nebula. No action taken")
			asteroidsNebulae()
		end
	else
		if #objectList < 1 then
			addGMMessage("Select a nebula. No action taken")
			asteroidsNebulae()
		else
			local nebulae = {}
			for i,obj in ipairs(objectList) do
				if isObjectType(obj,"Nebula") then
					table.insert(nebulae,obj)
				end
			end
			if #nebulae < 1 then
				addGMMessage("Select a nebula. No action taken")
				asteroidsNebulae()
			else
				if #nebulae == 1 then
					setSingleNebula(nebulae[1])
				else
					local can_scan_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.scannable then
							can_scan_count = can_scan_count + 1
						end
					end
					local button_label = "Can Scan"
					if can_scan_count == #nebulae then
						button_label = button_label .. "*"
					end
					addGMFunction(button_label,function()
						local can_scan_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.scannable then
								can_scan_count = can_scan_count + 1
							end
						end
						if can_scan_count == #nebulae then
							for i,neb in ipairs(nebulae) do
								neb.scannable = false
								neb:setScanningParameters(0,0)
								neb:setDescriptions("","")
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.scannable = true
								neb:setScanningParameters(math.random(1,2),math.random(1,3))
								if neb.scanned_desc == nil then
									neb.scanned_desc = "Potential hazard"
								end
								neb:setDescriptions("Anomalous nebula",neb.scanned_desc)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Lose Coolant"
					local lose_coolant_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "-C" then
							lose_coolant_count = lose_coolant_count + 1
						end
					end
					if lose_coolant_count == #nebulae then
						button_label = button_label .. "*"
					elseif lose_coolant_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local lose_coolant_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "-C" then
								lose_coolant_count = lose_coolant_count + 1
							end
						end
						if lose_coolant_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "-C"
								neb.coolant_loss = coolant_loss
								neb.scanned_desc = coolant_losses[coolant_loss_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Gain Coolant"
					local gain_coolant_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "+C" then
							gain_coolant_count = gain_coolant_count + 1
						end
					end
					if gain_coolant_count == #nebulae then
						button_label = button_label .. "*"
					elseif gain_coolant_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local gain_coolant_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "+C" then
								gain_coolant_count = gain_coolant_count + 1
							end
						end
						if gain_coolant_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "+C"
								neb.coolant_gain = coolant_gain
								neb.scanned_desc = coolant_gains[coolant_gain_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Lose Beam Range"
					local lose_beam_range_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "-BR" then
							lose_beam_range_count = lose_beam_range_count + 1
						end
					end
					if lose_beam_range_count == #nebulae then
						button_label = button_label .. "*"
					elseif lose_beam_range_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local lose_beam_range_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "-BR" then
								lose_beam_range_count = lose_beam_range_count + 1
							end
						end
						if lose_beam_range_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "-BR"
								neb.beam_range_loss = beam_range_loss
								neb.scanned_desc = beam_range_losses[beam_range_loss_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Gain Beam Range"
					local gain_beam_range_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "+BR" then
							gain_beam_range_count = gain_beam_range_count + 1
						end
					end
					if gain_beam_range_count == #nebulae then
						button_label = button_label .. "*"
					elseif gain_beam_range_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local gain_beam_range_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "+BR" then
								gain_beam_range_count = gain_beam_range_count + 1
							end
						end
						if gain_beam_range_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "+BR"
								neb.beam_range_gain = beam_range_gain
								neb.scanned_desc = beam_range_gains[beam_range_gain_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Lose Shield Charge"
					local lose_shield_charge_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "-SC" then
							lose_shield_charge_count = lose_shield_charge_count + 1
						end
					end
					if lose_shield_charge_count == #nebulae then
						button_label = button_label .. "*"
					elseif lose_shield_charge_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local lose_shield_charge_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "-SC" then
								lose_shield_charge_count = lose_shield_charge_count + 1
							end
						end
						if lose_shield_charge_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "-SC"
								neb.shield_loss = shield_loss
								neb.scanned_desc = shield_losses[shield_loss_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
					button_label = "Gain Shield Charge"
					local gain_shield_charge_count = 0
					for i,neb in ipairs(nebulae) do
						if neb.name == "+SC" then
							gain_shield_charge_count = gain_shield_charge_count + 1
						end
					end
					if gain_shield_charge_count == #nebulae then
						button_label = button_label .. "*"
					elseif gain_shield_charge_count > 0 then
						button_label = button_label .. "#"
					end
					addGMFunction(button_label,function()
						local gain_shield_charge_count = 0
						for i,neb in ipairs(nebulae) do
							if neb.name == "+SC" then
								gain_shield_charge_count = gain_shield_charge_count + 1
							end
						end
						if gain_shield_charge_count > 0 then
							for i,neb in ipairs(nebulae) do
								for j=#anomalous_nebulae,1,-1 do
									if neb == anomalous_nebulae[j] then
										anomalous_nebulae[j] = anomalous_nebulae[#anomalous_nebulae]
										anomalous_nebulae[#anomalous_nebulae] = nil
									end
								end
							end
						else
							for i,neb in ipairs(nebulae) do
								neb.name = "+SC"
								neb.shield_gain = shield_gain
								neb.scanned_desc = shield_gains[shield_gain_name].desc
								table.insert(anomalous_nebulae,neb)
							end
						end
						setSelectedNebula()
					end)
				end
			end
		end
	end
end
function setSingleNebula(tempObject)
	local selected_nebula = nil
	local selected_nebula_index = nil
	for ani, neb in ipairs(anomalous_nebulae) do
		if tempObject == neb then
			selected_nebula_index = ani
			selected_nebula = neb
			break
		end
	end
	local button_label = "Can Scan"
	if selected_nebula ~= nil then
		if selected_nebula.scannable then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		string.format("")
		if selected_nebula.scannable then
			selected_nebula.scannable = false
			selected_nebula:setScanningParameters(0,0)
			selected_nebula:setDescriptions("","")
		else
			selected_nebula.scannable = true
			selected_nebula:setScanningParameters(math.random(1,2),math.random(1,3))
			if selected_nebula.scanned_desc == nil then
				selected_nebula.scanned_desc = "Potential hazard"
			end
			selected_nebula:setDescriptions("Anomalous nebula",selected_nebula.scanned_desc)
		end
		setSelectedNebula()
	end)
	button_label = "Lose Coolant"
	if selected_nebula ~= nil then
		if selected_nebula.name == "-C" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "-C" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "-C"
			end
		else
			tempObject.name = "-C"
			tempObject.coolant_loss = coolant_loss
			tempObject.scanned_desc = coolant_losses[coolant_loss_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
	button_label = "Gain Coolant"
	if selected_nebula ~= nil then
		if selected_nebula.name == "+C" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "+C" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "+C"
			end
		else
			tempObject.name = "+C"
			tempObject.coolant_gain = coolant_gain
			tempObject.scanned_desc = coolant_gains[coolant_gain_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
	button_label = "Lose Beam Range"
	if selected_nebula ~= nil then
		if selected_nebula.name == "-BR" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "-BR" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "-BR"
			end
		else
			tempObject.name = "-BR"
			tempObject.beam_range_loss = beam_range_loss
			tempObject.scanned_desc = beam_range_losses[beam_range_loss_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
	button_label = "Gain Beam Range"
	if selected_nebula ~= nil then
		if selected_nebula.name == "+BR" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "+BR" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "+BR"
			end
		else
			tempObject.name = "+BR"
			tempObject.beam_range_gain = beam_range_gain
			tempObject.scanned_desc = beam_range_gains[beam_range_gain_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
	button_label = "Lose Shield Charge"
	if selected_nebula ~= nil then
		if selected_nebula.name == "-SC" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "-SC" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "-SC"
			end
		else
			tempObject.name = "-SC"
			tempObject.shield_loss = shield_loss
			tempObject.scanned_desc = shield_losses[shield_loss_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
	button_label = "Gain Shield Charge"
	if selected_nebula ~= nil then
		if selected_nebula.name == "+SC" then
			button_label = button_label .. "*"
		end
	end
	addGMFunction(button_label,function()
		if selected_nebula ~= nil then
			if selected_nebula.name == "+SC" then
				anomalous_nebulae[selected_nebula_index] = anomalous_nebulae[#anomalous_nebulae]
				anomalous_nebulae[#anomalous_nebulae] = nil
			else
				selected_nebula.name = "+SC"
			end
		else
			tempObject.name = "+SC"
			tempObject.shield_gain = shield_gain
			tempObject.scanned_desc = shield_gains[shield_gain_name].desc
			table.insert(anomalous_nebulae,tempObject)
		end
		setSelectedNebula()
	end)
end
function setFactionRelations()
	clearGMFunctions()
	local faction_list = {"Independent","Human Navy","Kraylor","Arlenians","Exuari","Ghosts","Ktlitans","TSN","USN","CUF","Holy Terra","Spacer","Snow Slayers","Cindy's Remnants"}
	for _, faction in ipairs(faction_list) do
		local button_label = faction
		if relation_faction_1 == faction then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			if relation_faction_1 == nil then
				relation_faction_1 = faction
				setFactionRelations()
			else
				if relation_faction_1 == faction then
					relation_faction_1 = nil
					setFactionRelations()
				else
					relation_faction_2 = faction
					actOnFactionPair()
				end
			end
		end)
	end
end
function actOnFactionPair()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Pick Faction Pair",function()
		relation_faction_1 = nil
		relation_faction_2 = nil
		setFactionRelations()
	end)
	addGMFunction(relation_faction_1,function()
		addGMMessage("Select two factions. Selected faction will have an asterisk. Unselect a faction by clicking a faction with an asterisk")
		relation_faction_1 = nil
		relation_faction_2 = nil
		setFactionRelations()
	end)
	addGMFunction(relation_faction_2,function()
		addGMMessage("Select two factions. Selected faction will have an asterisk. Unselect a faction by clicking a faction with an asterisk")
		relation_faction_1 = nil
		relation_faction_2 = nil
		setFactionRelations()
	end)
	local button_label = "Friend"
	local va_1 = VisualAsteroid():setFaction(relation_faction_1)
	local va_2 = VisualAsteroid():setFaction(relation_faction_2)
	if va_1:isFriendly(va_2) then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		local faction_info = getFactionInfo(relation_faction_1)
		local faction_info_2 = getFactionInfo(relation_faction_2)
		faction_info:setFriendly(faction_info_2)
		actOnFactionPair()
	end)
	button_label = "Enemy"
	if va_1:isEnemy(va_2) then
		button_label = button_label .. "*"
	end
	va_1:destroy()
	va_2:destroy()
	addGMFunction(button_label,function()
		local faction_info = getFactionInfo(relation_faction_1)
		local faction_info_2 = getFactionInfo(relation_faction_2)
		faction_info:setEnemy(faction_info_2)
		actOnFactionPair()
	end)
end
--	explosions and beam effects
function setExplosion()
	clearGMFunctions()
	addGMFunction("-Main from Explosion",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("+Max Damage",setExplosionDamage)
	addGMFunction("+Effect Size",setExplosionSize)
	addGMFunction("+Range",setExplosionRange)
	addGMFunction(string.format("Type: %s",explosion_type),function()
		if explosion_type == "Normal" then
			explosion_type = "Electric"
		else
			explosion_type = "Normal"
		end
		setExplosion()
	end)
	local button_label = "+Linked Beam"
	if linked_beam then
		button_label = string.format("%s: Yes",button_label)
	else
		button_label = string.format("%s: No",button_label)
	end
	addGMFunction(button_label,linkBeam)
	addGMFunction("Explode Object",function()
		local object_list = getGMSelection()
		if #object_list ~= 1 then
			addGMMessage("Select one object. No action taken")
		else
			local exp_x, exp_y = object_list[1]:getPosition()
			object_list[1]:destroy()
			if explosion_type == "Electric" then
				ElectricExplosionEffect():setPosition(exp_x, exp_y):setSize(explosion_size):setOnRadar(true)				
			else
				ExplosionEffect():setPosition(exp_x, exp_y):setSize(explosion_size):setOnRadar(true)
			end
			if explosion_damage > 0 then
				local damage_list = getObjectsInRadius(exp_x, exp_y, explosion_range)
				if #damage_list > 0 then
					for i=1,#damage_list do
						if distance_diagnostic then
							print("distance_diagnostic 3 damage_list[i]:",damage_list[i],"exp_x:",exp_x,"exp_y:",exp_y,"i:",i)
						end
						local dist = distance(damage_list[i], exp_x, exp_y)
						local applied_damage = explosion_damage
						if explosion_damage_degredation == "Linear" then
							applied_damage = (1 - (dist/explosion_range)) * explosion_damage
						end
						if explosion_type == "Electric" then
							damage_list[i]:takeDamage(applied_damage, "emp", exp_x, exp_y)
						else
							damage_list[i]:takeDamage(applied_damage, "energy", exp_x, exp_y)
						end
					end
				end
			end
		end
		setExplosion()
	end)
	if gm_click_mode == "place explosion" then
		addGMFunction(">Place Explosion<",placeExplosion)
	else
		addGMFunction("Place Explosion",placeExplosion)
	end
end
function linkBeam()
	clearGMFunctions()
	addGMFunction("-Main from Link Beam",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Explosion",setExplosion)
	if beam_link_object ~= nil and beam_link_object:isValid() then
		if linked_beam then
			addGMFunction("Unlink Beam",function()
				linked_beam = false
				beam_link_object = nil
				setExplosion()
			end)
			addGMFunction(string.format("+Chg: ",beam_link_object_name),function()
				local object_list = getGMSelection()
				if #object_list ~= 1 then
					addGMMessage("Select one object. No action taken")
				else
					if object_list[1]:getCallSign() ~= nil and object_list[1]:getCallSign() ~= "" then
						beam_link_object_name = object_list[1]:getCallSign()
					else
						if ECS then
							beam_link_object_name = "something" .. object_list[1]:getSectorName()
						else
							beam_link_object_name = object_list[1].typeName .. object_list[1]:getSectorName()
						end
					end
					beam_link_object = object_list[1]
				end
				linkBeam()
			end)
		end
	else
		addGMFunction("Link Beam", function()
			local object_list = getGMSelection()
			if #object_list ~= 1 then
				addGMMessage("Select one object. No action taken")
			else
				if object_list[1]:getCallSign() ~= nil and object_list[1]:getCallSign() ~= "" then
					beam_link_object_name = object_list[1]:getCallSign()
				else
					if ECS then
						beam_link_object_name = "something" .. object_list[1]:getSectorName()
					else
						beam_link_object_name = object_list[1].typeName .. object_list[1]:getSectorName()
					end
				end
				beam_link_object = object_list[1]
				linked_beam = true
			end
			linkBeam()
		end)
	end
end
function placeExplosion()
	if gm_click_mode == "place explosion" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "place explosion"
		onGMClick(gmClickPlaceExplosion)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   place explosion\nGM click mode.",prev_mode))
		end
	end
	setExplosion()
end
function gmClickPlaceExplosion(x,y)
	if linked_beam then
		if beam_link_object ~= nil and beam_link_object:isValid() then
			local temp_target = VisualAsteroid():setSize(1):setPosition(x,y)
			BeamEffect():setSource(beam_link_object,0,0,0):setTarget(temp_target,0,0)
			temp_target:destroy()
			if explosion_type == "Electric" then
				ElectricExplosionEffect():setPosition(x, y):setSize(explosion_size):setOnRadar(true)				
			else
				ExplosionEffect():setPosition(x, y):setSize(explosion_size):setOnRadar(true)
			end
			applyExplosionDamage(x,y)
		else
			addGMMessage("Linked beam source no longer valid. No action taken")
		end
	else
		if explosion_type == "Electric" then
			ElectricExplosionEffect():setPosition(x, y):setSize(explosion_size):setOnRadar(true)				
		else
			ExplosionEffect():setPosition(x, y):setSize(explosion_size):setOnRadar(true)
		end
		applyExplosionDamage(x,y)
	end
end
function applyExplosionDamage(x,y)
	if explosion_damage > 0 then
		local damage_list = getObjectsInRadius(x, y, explosion_range)
		if #damage_list > 0 then
			for i=1,#damage_list do
				if distance_diagnostic then
					print("distance_diagnostic 4 damage_list[i]:",damage_list[i],"x:",x,"y:",y,"i:",i)
				end
				local dist = distance(damage_list[i], x, y)
				local applied_damage = explosion_damage
				if explosion_damage_degredation == "Linear" then
					applied_damage = (1 - (dist/explosion_range)) * explosion_damage
				end
				if explosion_type == "Electric" then
					damage_list[i]:takeDamage(applied_damage, "emp", x, y)
				else
					damage_list[i]:takeDamage(applied_damage, "energy", x, y)
				end
			end
		end
	end
end
function setExplosionRange()
	clearGMFunctions()
	addGMFunction("-Main from Range",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Explosion",setExplosion)
	local min_explosion_range = 250
	local max_explosion_range = 5000
	local button_label = ""
	if explosion_range == min_explosion_range or explosion_range == min_explosion_range + 250 then
		for i=min_explosion_range,1250,250 do
			button_label = string.format("Range: %i",i)
			if i == explosion_range then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_range = i
				setExplosionRange()
			end)
		end
	elseif explosion_range == max_explosion_range or explosion_range == max_explosion_range - 250 then
		for i=max_explosion_range - 1000,max_explosion_range,250 do
			button_label = string.format("Range: %i",i)
			if i == explosion_range then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_range = i
				setExplosionRange()
			end)
		end
	else
		for i=explosion_range - 500,explosion_range + 500,250 do
			button_label = string.format("Range: %i",i)
			if i == explosion_range then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_range = i
				setExplosionRange()
			end)
		end
	end
end
function setExplosionSize()
	clearGMFunctions()
	addGMFunction("-Main from Size",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Explosion",setExplosion)
	local min_explosion_size = 250
	local max_explosion_size = 5000
	local button_label = ""
	if explosion_size == min_explosion_size or explosion_size == min_explosion_size + 250 then
		for i=min_explosion_size,1250,250 do
			button_label = string.format("Size: %i",i)
			if i == explosion_size then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_size = i
				setExplosionSize()
			end)
		end
	elseif explosion_size == max_explosion_size or explosion_size == max_explosion_size - 250 then
		for i=max_explosion_size - 1000,max_explosion_size,250 do
			button_label = string.format("Size: %i",i)
			if i == explosion_size then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_size = i
				setExplosionSize()
			end)
		end
	else
		for i=explosion_size - 500,explosion_size + 500,250 do
			button_label = string.format("Size: %i",i)
			if i == explosion_size then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_size = i
				setExplosionSize()
			end)
		end
	end
end
function setExplosionDamage()
	clearGMFunctions()
	addGMFunction("-Main from Damage",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Explosion",setExplosion)
	local min_explosion_damage = 0
	local max_explosion_damage = 500
	local button_label = ""
	addGMFunction(string.format("Degradation: %s",explosion_damage_degredation),function()
		if explosion_damage_degredation == "None" then
			explosion_damage_degredation = "Linear"
		else
			explosion_damage_degredation = "None"
		end
		setExplosionDamage()
	end)
	if explosion_damage == min_explosion_damage or explosion_damage == min_explosion_damage + 10 then
		for i=min_explosion_damage,40,10 do
			button_label = string.format("Damage: %i",i)
			if i == explosion_damage then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_damage = i
				setExplosionDamage()
			end)
		end
	elseif explosion_damage == max_explosion_damage or explosion_damage == max_explosion_damage - 10 then
		for i=max_explosion_damage - 40,max_explosion_damage,10 do
			button_label = string.format("Damage: %i",i)
			if i == explosion_damage then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_damage = i
				setExplosionDamage()
			end)
		end
	else
		for i=explosion_damage - 20,explosion_damage + 20,10 do
			button_label = string.format("Damage: %i",i)
			if i == explosion_damage then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				explosion_damage = i
				setExplosionDamage()
			end)
		end
	end
end
--	freighter commerce
function freighterCommerce()
	clearGMFunctions()
	addGMFunction("-Main from Commerce",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	local commerce_regions = {
		{name = "Skeletal", status = skeletal_commerce,	func = skeletalFreighterCommerce},
		{name = "Icarus",	status = icarus_commerce,	color = icarus_color,	func = icarusFreighterCommerce},
		{name = "Kentar",	status = kentar_commerce,	color = kentar_color,	func = kentarFreighterCommerce},
		{name = "Teresh",	status = teresh_commerce,	color = teresh_color,	func = tereshFreighterCommerce},
		{name = "Lafrina",	status = lafrina_commerce,	color = lafrina_color,	func = lafrinaFreighterCommerce},
		{name = "Bask",		status = bask_commerce,		color = bask_color,		func = baskFreighterCommerce},
		{name = "Staunch",	status = staunch_commerce,	color = staunch_color,	func = staunchFreighterCommerce},
		{name = "Glikton",	status = glikton_commerce,	color = glikton_color,	func = gliktonFreighterCommerce},
	}
	for i,commerce in ipairs(commerce_regions) do
		local button_label = commerce.name
		if commerce.status then
			button_label = button_label .. " On"
		else
			button_label = button_label .. " Off"
		end
		if commerce.color ~= nil then
			if commerce.color then
				addGMFunction(button_label,commerce.func)
			end
		else
			addGMFunction(button_label,commerce.func)
		end
	end
end
function setCommerceFreighterStartPosition(ship)
	local origin_x, origin_y = ship.commerce_origin:getPosition()
	local destination_x, destination_y = ship.commerce_target:getPosition()
	local start_x = (origin_x + destination_x) / 2
	local start_y = (origin_y + destination_y) / 2
	local ds_x, ds_y = vectorFromAngle(random(0,360),random(1000,3000))
	ship:setPosition(start_x + ds_x, start_y + ds_y)
	ship:orderDock(ship.commerce_target)
end
function gliktonFreighterCommerce()
	if glikton_color ~= nil and glikton_color then
		if glikton_commerce then
			removeGliktonCommerce()
		else
			local freighters_message = "Glikton Commerce Assets:"
			local region_identifying_station = stationGlikton
			--Courier
			local ship = courier()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Work Wagon
			ship = workWagon()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Work Wagon
			ship = workWagon()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Work Wagon
			ship = workWagon()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Space Sedan
			ship = spaceSedan()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Omnibus
			ship = omnibus()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Garbage Freighter 2
			ship = CpuShip():setTemplate("Garbage Freighter 2")
			ship:setCommsScript(""):setCommsFunction(commsShip)
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Laden Lorry
			ship = ladenLorry()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Laden Lorry
			ship = ladenLorry()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			--Laden Lorry
			ship = ladenLorry()
			identifyFreighter(ship,region_identifying_station)
			regionCommerceDestination(ship,region_identifying_station)
			setCommerceFreighterStartPosition(ship)
			freighters_message = string.format("%s\n%s %s, %s %s",freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
			table.insert(glikton_commerce_assets,ship)
			addGMMessage(freighters_message)
			glikton_commerce = true
		end
	else
		addGMMessage("Don't try to turn on Glikton commerce without the Glikton region")
	end
	freighterCommerce()
end
function staunchFreighterCommerce()
	if staunch_commerce then
		removeStaunchCommerce()
	else
		local staunch_freighters_message = "Staunch Commerce Assets:"
		--Courier
		local ship = courier()
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		--Work Wagon
		ship = workWagon()
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 36, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 23, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(staunch_commerce_assets,escort_ship)
			end
		end
		--Space Sedan
		ship = spaceSedan()
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 63, type = "MT52 Hornet"},
			{chance = 38, type = "MU52 Hornet"},
			{chance = 21, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(staunch_commerce_assets,escort_ship)
			end
		end
		--Omnibus
		ship = omnibus()
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 47, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(staunch_commerce_assets,escort_ship)
			end
		end
		--Garbage Freighter 2
		local ship = CpuShip():setTemplate("Garbage Freighter 2")
		ship:setCommsScript(""):setCommsFunction(commsShip)
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		--Laden Lorry
		ship = ladenLorry()
		identifyFreighter(ship,stationStaunch)
		regionCommerceDestination(ship,stationStaunch)
		setCommerceFreighterStartPosition(ship)
		staunch_freighters_message = string.format("%s\n%s %s, %s %s",staunch_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(staunch_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 75, type = "MT52 Hornet"},
			{chance = 55, type = "MU52 Hornet"},
			{chance = 34, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(staunch_commerce_assets,escort_ship)
			end
		end
		addGMMessage(staunch_freighters_message)
		staunch_commerce = true
	end
	freighterCommerce()
end
function baskFreighterCommerce()
	if bask_commerce then
		removeBaskCommerce()
	else
		local bask_freighters_message = "Bask Commerce Assets:"
		--Courier
		local ship = courier()
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		--Work Wagon
		ship = workWagon()
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 36, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 23, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(bask_commerce_assets,escort_ship)
			end
		end
		--Space Sedan
		ship = spaceSedan()
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 63, type = "MT52 Hornet"},
			{chance = 38, type = "MU52 Hornet"},
			{chance = 21, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(bask_commerce_assets,escort_ship)
			end
		end
		--Omnibus
		ship = omnibus()
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 47, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(bask_commerce_assets,escort_ship)
			end
		end
		--Fuel Freighter 5
		ship = CpuShip():setTemplate("Fuel Freighter 5")
		ship:setCommsScript(""):setCommsFunction(commsShip)
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 37, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(bask_commerce_assets,escort_ship)
			end
		end
		--Garbage Freighter 2
		local ship = CpuShip():setTemplate("Garbage Freighter 2")
		ship:setCommsScript(""):setCommsFunction(commsShip)
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		--Service Jonque
		ship = serviceJonque()
		identifyFreighter(ship,stationBask)
		regionCommerceDestination(ship,stationBask)
		setCommerceFreighterStartPosition(ship)
		bask_freighters_message = string.format("%s\n%s %s, %s %s",bask_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(bask_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 38, type = "MT52 Hornet"},
			{chance = 21, type = "MU52 Hornet"},
			{chance = 12, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(bask_commerce_assets,escort_ship)
			end
		end
		addGMMessage(bask_freighters_message)
		bask_commerce = true
	end
	freighterCommerce()
end
function tereshFreighterCommerce()
	if teresh_commerce then
		removeTereshCommerce()
	else
		local teresh_freighters_message = "Teresh Commerce Assets:"
		--Courier
		local ship = courier()
		identifyFreighter(ship,stationTeresh)
		regionCommerceDestination(ship,stationTeresh)
		setCommerceFreighterStartPosition(ship)
		teresh_freighters_message = string.format("%s\n%s %s, %s %s",teresh_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(teresh_commerce_assets,ship)
		--Laden Lorry
		ship = ladenLorry()
		identifyFreighter(ship,stationTeresh)
		regionCommerceDestination(ship,stationTeresh)
		setCommerceFreighterStartPosition(ship)
		teresh_freighters_message = string.format("%s\n%s %s, %s %s",teresh_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(teresh_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 75, type = "MT52 Hornet"},
			{chance = 55, type = "MU52 Hornet"},
			{chance = 34, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(teresh_commerce_assets,escort_ship)
			end
		end
		addGMMessage(teresh_freighters_message)
		teresh_commerce = true
	end
	freighterCommerce()
end
function lafrinaFreighterCommerce()
	if lafrina_commerce then
		removeLafrinaCommerce()
	else
		local lafrina_freighters_message = "Lafrina Commerce Assets:"
		--Courier
		local ship = courier()
		identifyFreighter(ship,stationLafrina)
		regionCommerceDestination(ship,stationLafrina)
		setCommerceFreighterStartPosition(ship)
		lafrina_freighters_message = string.format("%s\n%s %s, %s %s",lafrina_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(lafrina_commerce_assets,ship)
		--Work Wagon
		ship = workWagon()
		identifyFreighter(ship,stationLafrina)
		regionCommerceDestination(ship,stationLafrina)
		setCommerceFreighterStartPosition(ship)
		lafrina_freighters_message = string.format("%s\n%s %s, %s %s",lafrina_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(lafrina_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 36, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 23, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(lafrina_commerce_assets,escort_ship)
			end
		end
		addGMMessage(lafrina_freighters_message)
		lafrina_commerce = true
	end
	freighterCommerce()
end
function kentarFreighterCommerce()
	if kentar_commerce then
		removeKentarCommerce()
	else
		local kentar_freighters_message = "Kentar Commerce Assets:"
		--Courier
		local ship = courier()
		identifyFreighter(ship,stationKentar)
		regionCommerceDestination(ship,stationKentar)
		setCommerceFreighterStartPosition(ship)
		kentar_freighters_message = string.format("%s\n%s %s, %s %s",kentar_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(kentar_commerce_assets,ship)
		--Work Wagon
		ship = workWagon()
		identifyFreighter(ship,stationKentar)
		regionCommerceDestination(ship,stationKentar)
		setCommerceFreighterStartPosition(ship)
		kentar_freighters_message = string.format("%s\n%s %s, %s %s",kentar_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(kentar_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 36, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 23, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(kentar_commerce_assets,escort_ship)
			end
		end
		--Space Sedan
		ship = spaceSedan()
		identifyFreighter(ship,stationKentar)
		regionCommerceDestination(ship,stationKentar)
		setCommerceFreighterStartPosition(ship)
		kentar_freighters_message = string.format("%s\n%s %s, %s %s",kentar_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(kentar_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 63, type = "MT52 Hornet"},
			{chance = 38, type = "MU52 Hornet"},
			{chance = 21, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(kentar_commerce_assets,escort_ship)
			end
		end
		--Omnibus
		ship = omnibus()
		identifyFreighter(ship,stationKentar)
		regionCommerceDestination(ship,stationKentar)
		setCommerceFreighterStartPosition(ship)
		kentar_freighters_message = string.format("%s\n%s %s, %s %s",kentar_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(kentar_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 47, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(kentar_commerce_assets,escort_ship)
			end
		end
		--Fuel Freighter 5
		ship = CpuShip():setTemplate("Fuel Freighter 5")
		ship:setCommsScript(""):setCommsFunction(commsShip)
		identifyFreighter(ship,stationKentar)
		regionCommerceDestination(ship,stationKentar)
		setCommerceFreighterStartPosition(ship)
		kentar_freighters_message = string.format("%s\n%s %s, %s %s",kentar_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(kentar_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 37, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(kentar_commerce_assets,escort_ship)
			end
		end
		addGMMessage(kentar_freighters_message)
		kentar_commerce = true
	end
	freighterCommerce()
end
function icarusFreighterCommerce()
	if icarus_commerce then
		removeIcarusCommerce()
	else
		local icarus_freighters_message = "Icarus Commerce Assets:"
		--Garbage Freighter 2
		local ship = CpuShip():setTemplate("Garbage Freighter 2")
		ship:setCommsScript(""):setCommsFunction(commsShip)
		identifyFreighter(ship,stationIcarus)
		regionCommerceDestination(ship,stationIcarus)
		setCommerceFreighterStartPosition(ship)
		icarus_freighters_message = string.format("%s\n%s %s, %s %s",icarus_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(icarus_commerce_assets,ship)
		--Courier
		ship = courier()
		identifyFreighter(ship,stationIcarus)
		regionCommerceDestination(ship,stationIcarus)
		setCommerceFreighterStartPosition(ship)
		icarus_freighters_message = string.format("%s\n%s %s, %s %s",icarus_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(icarus_commerce_assets,ship)
		--Work Wagon
		ship = workWagon()
		identifyFreighter(ship,stationIcarus)
		regionCommerceDestination(ship,stationIcarus)
		setCommerceFreighterStartPosition(ship)
		icarus_freighters_message = string.format("%s\n%s %s, %s %s",icarus_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(icarus_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 36, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 23, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(icarus_commerce_assets,escort_ship)
			end
		end
		--Laden Lorry
		ship = ladenLorry()
		identifyFreighter(ship,stationIcarus)
		regionCommerceDestination(ship,stationIcarus)
		setCommerceFreighterStartPosition(ship)
		icarus_freighters_message = string.format("%s\n%s %s, %s %s",icarus_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(icarus_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 75, type = "MT52 Hornet"},
			{chance = 55, type = "MU52 Hornet"},
			{chance = 34, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(icarus_commerce_assets,escort_ship)
			end
		end
		addGMMessage(icarus_freighters_message)
		icarus_commerce = true
	end
	freighterCommerce()
end
function removeGliktonCommerce()
	for index,ship in ipairs(glikton_commerce_assets) do
		ship:destroy()
	end
	glikton_commerce_assets = {}
	glikton_commerce = false
end
function removeStaunchCommerce()
	for index,ship in ipairs(staunch_commerce_assets) do
		ship:destroy()
	end
	staunch_commerce_assets = {}
	staunch_commerce = false
end
function removeBaskCommerce()
	for index, ship in ipairs(bask_commerce_assets) do
		ship:destroy()
	end
	bask_commerce_assets = {}
	bask_commerce = false
end
function removeTereshCommerce()
	for index, ship in ipairs(teresh_commerce_assets) do
		ship:destroy()
	end
	teresh_commerce_assets = {}
	teresh_commerce = false
end
function removeLafrinaCommerce()
	for index, ship in ipairs(lafrina_commerce_assets) do
		ship:destroy()
	end
	lafrina_commerce_assets = {}
	lafrina_commerce = false
end
function removeKentarCommerce()
	for index, ship in ipairs(kentar_commerce_assets) do
		ship:destroy()
	end
	kentar_commerce_assets = {}
	kentar_commerce = false
end
function removeIcarusCommerce()
	for index, ship in ipairs(icarus_commerce_assets) do
		ship:destroy()
	end
	icarus_commerce_assets = {}
	icarus_commerce = false
end
function skeletalFreighterCommerce()
	if skeletal_commerce then
		for index, ship in ipairs(skeletal_commerce_assets) do
			ship:destroy()
		end
		skeletal_commerce_assets = {}
		skeletal_commerce = false
	else
		local skeletal_freighters_message = "Skeletal Commerce Assets:"
		--Space Sedan
		local ship = spaceSedan()
		identifyFreighter(ship)
		skeletalDestination(ship)
		setCommerceFreighterStartPosition(ship)
		skeletal_freighters_message = string.format("%s\n%s %s, %s %s",skeletal_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(skeletal_commerce_assets,ship)
		local escort_ship = nil
		local escort_count = 0
		local escort_type = {
			{chance = 63, type = "MT52 Hornet"},
			{chance = 38, type = "MU52 Hornet"},
			{chance = 21, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(skeletal_commerce_assets,escort_ship)
			end
		end
		--Omnibus
		ship = omnibus()
		identifyFreighter(ship)
		skeletalDestination(ship)
		setCommerceFreighterStartPosition(ship)
		skeletal_freighters_message = string.format("%s\n%s %s, %s %s",skeletal_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(skeletal_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 47, type = "MT52 Hornet"},
			{chance = 28, type = "MU52 Hornet"},
			{chance = 16, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(skeletal_commerce_assets,escort_ship)
			end
		end
		--Service Jonque
		ship = serviceJonque()
		identifyFreighter(ship)
		skeletalDestination(ship)
		setCommerceFreighterStartPosition(ship)
		skeletal_freighters_message = string.format("%s\n%s %s, %s %s",skeletal_freighters_message,ship:getSectorName(),ship:getTypeName(),ship:getCallSign(),ship:getFaction())
		table.insert(skeletal_commerce_assets,ship)
		escort_count = 0
		escort_type = {
			{chance = 38, type = "MT52 Hornet"},
			{chance = 21, type = "MU52 Hornet"},
			{chance = 12, type = "Fighter"},
		}
		for i=1,#escort_type do
			if random(1,100) < escort_type[i].chance then
				escort_ship = CpuShip():setTemplate(escort_type[i].type):setCommsScript(""):setCommsFunction(commsShip)
				setBeamColor(escort_ship)
				escort_ship:setJumpDrive(true)
				escort_ship:setFaction(ship:getFaction())
				escort_count = escort_count + 1
				escort_ship:setCallSign(string.format("%s E%i",ship:getCallSign(),escort_count))
				local cs_x, cs_y = vectorFromAngle((i-1)*360/#escort_type,1000)
				escort_ship:setPosition(start_x + ds_x + cs_x, start_y + ds_y + cs_y)
				escort_ship:orderDefendTarget(ship)
				escort_ship.commerce_escort = true
				table.insert(skeletal_commerce_assets,escort_ship)
			end
		end
		addGMMessage(skeletal_freighters_message)
		skeletal_commerce = true
	end
	freighterCommerce()
end
function identifyFreighter(ship,region_station)
	local ship_type = ship:getTypeName()
	local ship_id = nil
	if ship_type == "Space Sedan" then
		if space_sedan_names == nil then
			space_sedan_names = {}
		end
		if #space_sedan_names == 0 then
			space_sedan_names = {
				{name = "Bangles N Glitter",	faction = "CUF"},
				{name = "Mauve Mynock",			faction = "Human Navy"},
				{name = "Tartan Tram",			faction = "TSN"},
				{name = "Stardust Deluxe",		faction = "Independent"},
				{name = "Equitable Exit",		faction = "USN"},
				{name = "Demure Departure",		faction = "Arlenians"},
				{name = "Slam Door",			faction = "Kraylor"},
				{name = "Hidey Hole",			faction = "Ktlitans"},
				{name = "Bespoke Break",		faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(space_sedan_names)
		ship:setFaction(ship_id.faction):setCallSign(ship_id.name)
	elseif ship_type == "Omnibus" then
		if omnibus_names == nil then
			omnibus_names = {}
		end
		if #omnibus_names == 0 then
			omnibus_names = {
				{name = "Moya Munge",		faction = "CUF"},
				{name = "Green Gwaihir",	faction = "Human Navy"},
				{name = "Metropol",			faction = "TSN"},
				{name = "Gillig",			faction = "Arlenians"},
				{name = "Grech",			faction = "USN"},
				{name = "Kamaz",			faction = "Independent"},
				{name = "Hunting Hound",	faction = "Kraylor"},
				{name = "Springing Spider",	faction = "Ktlitans"},
				{name = "Bandwidth Bus",	faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(omnibus_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Service Jonque" then
		if service_jonque_names == nil then
			service_jonque_names = {}
		end
		if #service_jonque_names == 0 then
			service_jonque_names = {
				{name = "Knapheide",		faction = "CUF"},
				{name = "Gator",			faction = "Human Navy"},
				{name = "Parry",			faction = "TSN"},
				{name = "Stahl",			faction = "Independent"},
				{name = "Crane",			faction = "USN"},
				{name = "Moran",			faction = "Arlenians"},
				{name = "Marabunta",		faction = "Kraylor"},
				{name = "Caterpillar",		faction = "Ktlitans"},
				{name = "Red Robot",		faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(service_jonque_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Garbage Freighter 2" then
		if garbage_2_names == nil then
			garbage_2_names = {}
		end
		if #garbage_2_names == 0 then
			garbage_2_names = {
				{name = "Heil",				faction = "CUF"},
				{name = "Transwest",		faction = "Human Navy"},
				{name = "Qiufan",			faction = "TSN"},
				{name = "Garwood",			faction = "Arlenians"},
				{name = "Hino",				faction = "USN"},
				{name = "Gareth",			faction = "Independent"},
				{name = "Vital Vulture",	faction = "Kraylor"},
				{name = "Mystery Maggot",	faction = "Ktlitans"},
				{name = "Coy Collector",	faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(garbage_2_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Fuel Freighter 5" then
		if fuel_5_names == nil then
			fuel_5_names = {}
		end
		if #fuel_5_names == 0 then
			fuel_5_names = {
				{name = "Exxon",				faction = "CUF"},
				{name = "Shell",				faction = "Human Navy"},
				{name = "Enron",				faction = "TSN"},
				{name = "WeiChai",				faction = "Independent"},
				{name = "Bosch",				faction = "USN"},
				{name = "Nikola",				faction = "Arlenians"},
				{name = "Carnivorous Canary",	faction = "Kraylor"},
				{name = "Gnarly Gnat",			faction = "Ktlitans"},
				{name = "Electrasol",			faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(fuel_5_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Courier" then
		if courier_names == nil then
			courier_names = {}
		end
		if #courier_names == 0 then
			courier_names = {
				{name = "Porsche",			faction = "CUF"},
				{name = "Razorback",		faction = "Human Navy"},
				{name = "Orlyonok",			faction = "TSN"},
				{name = "Benatar",			faction = "Arlenians"},
				{name = "Jellyfish",		faction = "USN"},
				{name = "Hecate",			faction = "Independent"},
				{name = "Crazy Cougar",		faction = "Kraylor"},
				{name = "Finnicky Flattie",	faction = "Ktlitans"},
				{name = "Omni-Overclock",	faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(courier_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Work Wagon" then
		if work_wagon_names == nil then
			work_wagon_names = {}
		end
		if #work_wagon_names == 0 then
			work_wagon_names = {
				{name = "Mangled Metal",	faction = "CUF"},
				{name = "Banshee",			faction = "Human Navy"},
				{name = "Thing",			faction = "TSN"},
				{name = "Torque",			faction = "Arlenians"},
				{name = "Hulk",				faction = "USN"},
				{name = "Forbid",			faction = "Independent"},
				{name = "Red Rex",			faction = "Kraylor"},
				{name = "Dusky Darwin",		faction = "Ktlitans"},
				{name = "Scarred Steel",	faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(work_wagon_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	elseif ship_type == "Laden Lorry" then
		if laden_lorry_names == nil then
			laden_lorry_names = {}
		end
		if #laden_lorry_names == 0 then
			laden_lorry_names = {
				{name = "Lowboy",			faction = "Arlenians"},
				{name = "Luton",			faction = "Human Navy"},
				{name = "Reefer",			faction = "TSN"},
				{name = "Convoy",			faction = "CUF"},
				{name = "Hulk",				faction = "USN"},
				{name = "Atlas",			faction = "Independent"},
				{name = "Thing Thumb",		faction = "Kraylor"},
				{name = "Whispy Web",		faction = "Ktlitans"},
				{name = "Brown Bag",		faction = "Ghosts"},
			}
		end
		ship_id = tableRemoveRandom(laden_lorry_names)
		ship:setCallSign(ship_id.name):setFaction(ship_id.faction)
	end
	if region_station ~= nil then
		local region_stations = getRegionStations(region_station)
		local visitable_stations = 0
		if #region_stations > 0 then
			for _, station in ipairs(region_stations) do
				if station ~= nil and station:isValid() and not station:isEnemy(ship) then
					visitable_stations = visitable_stations + 1
				end
			end
		end
		if visitable_stations < 2 then
			ship:setFaction(region_station:getFaction())
		end
	end
end
function skeletalDestination(ship)
	local station_pool = {}
	if #skeleton_stations > 0 then
		for index, station in ipairs(skeleton_stations) do
			if station ~= nil and station:isValid() then
				if not station:isEnemy(ship) then
					if ship.commerce_target ~= nil then
						if station ~= ship.commerce_target then
							table.insert(station_pool,station)
						end
					elseif ship.commerce_origin ~= nil then
						if station ~= ship.commerce_origin then
							table.insert(station_pool,station)
						end
					else
						table.insert(station_pool,station)
					end
				else
					if commerce_diagnostic then
						print("station",station:getCallSign(),station:getFaction(),"is an enemy to",ship:getCallSign(),ship:getFaction())
					end
				end
			end
		end
	else
		if commerce_diagnostic then
			print("skeletal stations is empty")
		end
	end
	ship.commerce_target = tableSelectRandom(station_pool)
	if ship.commerce_target == nil then
		if commerce_diagnostic then
			print("got nothing from station pool, assigning Icarus")
		end
		ship.commerce_target = stationIcarus
		ship:setFaction(stationIcarus:getFaction())
	end
	if ship.commerce_origin == nil then
		ship.commerce_origin = tableSelectRandom(station_pool)
		if commerce_diagnostic then
			if ship.commerce_origin == nil then
				print("ship commerce origin is nil")
				if #station_pool > 0 then
					for index, station in ipairs(station_pool) do
						print("index:",index,"station:",station:getCallSign())
					end
				else
					print("station pool is empty")
				end
			else
				print("ship commerce origin:",ship.commerce_origin:getCallSign())
			end
		end
		if ship.commerce_origin == nil then
			ship.commerce_origin = stationIcarus
		end
	end
end
function getRegionStations(region_station)
	local region_stations = {}
	local primary_station = nil
	if region_station == stationIcarus then
		region_stations = icarusStations
		if stationIcarus ~= nil and stationIcarus:isValid() then
			primary_station = stationIcarus
		end
	elseif region_station == stationKentar then
		region_stations = kentar_stations
		if stationKentar ~= nil and stationKentar:isValid() then
			primary_station = stationKentar
		end
	elseif region_station == stationLafrina then
		region_stations = lafrina_stations
		if stationLafrina ~= nil and stationLafrina:isValid() then
			primary_station = stationLafrina
		end
	elseif region_station == stationTeresh then
		region_stations = teresh_stations
		if stationTeresh ~= nil and stationTeresh:isValid() then
			primary_station = stationTeresh
		end
	elseif region_station == stationAstron then
		--not enough stations to warrant commercial traffic
		if stationAstron ~= nil and stationAstron:isValid() then
			primary_station = stationAstron
		end
	elseif region_station == stationBask then
		region_stations = bask_stations
		if stationBask ~= nil and stationBask:isValid() then
			primary_station = stationBask
		end
	elseif region_station == stationStaunch then
		region_stations = staunch_stations
		if stationStaunch ~= nil and stationStaunch:isValid() then
			primary_station = stationStaunch
		end
	elseif region_station == stationGlikton then
		region_stations = glikton_stations
		if stationGlikton ~= nil and stationGlikton:isValid() then
			primary_station = stationGlikton
		end
	end
	return region_stations, primary_station
end
function regionCommerceDestination(ship,region_station)
--	print("in region commerce destination:",ship:getCallSign(),region_station:getCallSign())
	local station_pool = {}
	local avoid_commerce = {
		stationKeyhole23, stationHarriet, stationHelena, stationVilairre, stationRespite
	}
	local region_stations, primary_station = getRegionStations(region_station)
	--handle jump corridor better
	if region_stations ~= nil then
		if #region_stations > 0 then
			for index, station in ipairs(region_stations) do
				if station ~= nil and station:isValid() then
					if not station:isEnemy(ship) then
						local avoid = false
						if ship.commerce_target ~= nil then
							if station ~= ship.commerce_target then
								for _, avoid_station in pairs(avoid_commerce) do
									if station == avoid_station then
										avoid = true
										break
									end
								end
								if not avoid then
									table.insert(station_pool,station)
								end
							end
						elseif ship.commerce_origin ~= nil then
							if station ~= ship.commerce_origin then
								for _, avoid_station in pairs(avoid_commerce) do
									if station == avoid_station then
										avoid = true
										break
									end
								end
								if not avoid then
									table.insert(station_pool,station)
								end
							end
						else
							for _, avoid_station in pairs(avoid_commerce) do
								if station == avoid_station then
									avoid = true
									break
								end
							end
							if not avoid then
								table.insert(station_pool,station)
							end
						end
					end
				end
			end
		else
			if commerce_diagnostic then
				print("regional stations is empty")
			end
		end
	else
		if commerce_diagnostic then
			print("regional stations is nil")
		end
	end
	if primary_station ~= nil then
		table.insert(station_pool,primary_station)
	else
		primary_station = stationIcarus
	end
--	print("station pool count:",#station_pool)
	ship.commerce_target = tableRemoveRandom(station_pool)
	if ship.commerce_target == nil then
		if commerce_diagnostic then
			print("got nothing from station pool, assigning primary station:",primary_station:getCallSign())
		end
		ship.commerce_target = primary_station
		ship:setFaction(primary_station:getFaction())
	end
	if ship.commerce_origin == nil then
		ship.commerce_origin = tableRemoveRandom(station_pool)
		if commerce_diagnostic then
			if ship.commerce_origin == nil then
				print("ship commerce origin is nil")
				if #station_pool > 0 then
					for index, station in ipairs(station_pool) do
						print("index:",index,"station:",station:getCallSign())
					end
				else
					print("station pool is empty")
				end
			else
				print("ship commerce origin:",ship.commerce_origin:getCallSign())
			end
		end
		if ship.commerce_origin == nil then
			ship.commerce_origin = primary_station
		end
	end
end
function addFreighters()
	local freighter_db = queryScienceDatabase("Ships","Freighter")
	if freighter_db == nil then
		local ship_db = queryScienceDatabase("Ships")
		ship_db:addEntry("Freighter")
		freighter_db = queryScienceDatabase("Ships","Freighter")
		freighter_db:setImage("radar/transport.png")
		freighter_db:setLongDescription("Small, medium and large scale transport ships. These are the working ships that keep commerce going in any sector. They may carry personnel, goods, cargo, equipment, garbage, fuel, research material, etc.")
	end
	return freighter_db
end
function addFreighter(freighter_type,ship)
	local freighter_db = addFreighters()
	if freighter_type ~= nil then
		if freighter_type == "Space Sedan" then
			local space_sedan_db = queryScienceDatabase("Ships","Freighter","Space Sedan")
			if space_sedan_db == nil then
				freighter_db:addEntry("Space Sedan")
				space_sedan_db = queryScienceDatabase("Ships","Freighter","Space Sedan")
				genericFreighterScienceInfo(space_sedan_db,queryScienceDatabase("Ships","Corvette","Personnel Jump Freighter 3"),ship)
				space_sedan_db:setModelDataName("transport_1_3")
				space_sedan_db:setLongDescription("The Space Sedan was built around a surplus Personnel Jump Freighter 3. It's designed to provide relatively low cost transportation primarily for people, but there is also a limited amount of cargo space available")
			end
		elseif freighter_type == "Omnibus" then
			local omnibus_db = queryScienceDatabase("Ships","Freighter","Omnibus")
			if omnibus_db == nil then
				freighter_db:addEntry("Omnibus")
				omnibus_db = queryScienceDatabase("Ships","Freighter","Omnibus")
				genericFreighterScienceInfo(omnibus_db,queryScienceDatabase("Ships","Corvette","Personnel Jump Freighter 5"),ship)
				omnibus_db:setModelDataName("transport_1_5")
				omnibus_db:setLongDescription("The Omnibus was designed from the Personnel Jump Freighter 5. It's made to transport large numbers of passengers of various types along with their luggage and any associated cargo")
			end
		elseif freighter_type == "Service Jonque" then
			local service_jonque_db = queryScienceDatabase("Ships","Freighter","Service Jonque")
			if service_jonque_db == nil then
				freighter_db:addEntry("Service Jonque")
				service_jonque_db = queryScienceDatabase("Ships","Freighter","Service Jonque")
				genericFreighterScienceInfo(service_jonque_db,queryScienceDatabase("Ships","Corvette","Equipment Jump Freighter 4"),ship)
				service_jonque_db:setModelDataName("transport_4_4")
				service_jonque_db:setLongDescription("The Service Jonque is a modified Equipment Jump Freighter 4. It's designed to carry spare parts and equipment as well as the necessary repair personnel to where it's needed to repair stations and ships")
			end
		elseif freighter_type == "Courier" then
			local courier_db = queryScienceDatabase("Ships","Freighter","Courier")
			if courier_db == nil then
				freighter_db:addEntry("Courier")
				courier_db = queryScienceDatabase("Ships","Freighter","Courier")
				genericFreighterScienceInfo(courier_db,queryScienceDatabase("Ships","Corvette","Personnel Freighter 1"),ship)
				courier_db:setModelDataName("transport_1_1")
				courier_db:setLongDescription("The Courier is a souped up Personnel Freighter 1. It's made to deliver people and messages fast. Very fast")
			end
		elseif freighter_type == "Work Wagon" then
			local work_wagon_db = queryScienceDatabase("Ships","Freighter","Work Wagon")
			if work_wagon_db == nil then
				freighter_db:addEntry("Work Wagon")
				work_wagon_db = queryScienceDatabase("Ships","Freighter","Work Wagon")
				genericFreighterScienceInfo(work_wagon_db,queryScienceDatabase("Ships","Corvette","Equipment Freighter 2"),ship)
				work_wagon_db:setModelDataName("transport_4_2")
				work_wagon_db:setLongDescription("The Work Wagon is a conversion of an Equipment Freighter 2 designed to carry equipment and parts where they are needed for repair or construction.")
			end
		elseif freighter_type == "Laden Lorry" then
			local laden_lorry_db = queryScienceDatabase("Ships","Freighter","Laden Lorry")
			if laden_lorry_db == nil then
				freighter_db:addEntry("Laden Lorry")
				laden_lorry_db = queryScienceDatabase("Ships","Freighter","Laden Lorry")
				genericFreighterScienceInfo(laden_lorry_db,queryScienceDatabase("Ships","Corvette","Goods Freighter 3"),ship)
				laden_lorry_db:setModelDataName("transport_2_3")
				laden_lorry_db:setLongDescription("As a side contract, Conversion R Us put together the Laden Lorry from some recently acquired Goods Freighter 3 hulls. The added warp drive makes for a more versatile goods carrying vessel.")
			end
		elseif freighter_type == "Physics Research" then
			local physics_research_db = queryScienceDatabase("Ships","Freighter","Physics Research")
			if physics_research_db == nil then
				freighter_db:addEntry("Physics Research")
				physics_research_db = queryScienceDatabase("Ships","Freighter","Physics Research")
				genericFreighterScienceInfo(physics_research_db,queryScienceDatabase("Ships","Corvette","Garbage Freighter 3"),ship)
				physics_research_db:setModelDataName("transport_3_3")
				physics_research_db:setLongDescription("Conversion R Us cleaned up and converted excess freighter hulls into Physics Research vessels. The reduced weight improved the impulse speed and maneuverability.")
			end
		end
	end
end
function genericFreighterScienceInfo(specific_freighter_db,base_db,ship)
	specific_freighter_db:setImage("radar/transport.png")
	specific_freighter_db:setKeyValue("Sub-class","Freighter")
	specific_freighter_db:setKeyValue("Size",base_db:getKeyValue("Size"))
	local shields = ship:getShieldCount()
	if shields > 0 then
		local shield_string = ""
		for i=1,shields do
			if shield_string == "" then
				shield_string = string.format("%i",math.floor(ship:getShieldMax(i-1)))
			else
				shield_string = string.format("%s/%i",shield_string,math.floor(ship:getShieldMax(i-1)))
			end
		end
		specific_freighter_db:setKeyValue("Shield",shield_string)
	end
	specific_freighter_db:setKeyValue("Hull",string.format("%i",math.floor(ship:getHullMax())))
	specific_freighter_db:setKeyValue("Move speed",string.format("%.1f u/min",ship:getImpulseMaxSpeed()*60/1000))
	specific_freighter_db:setKeyValue("Turn speed",string.format("%.1f deg/sec",ship:getRotationMaxSpeed()))
	if ship:hasJumpDrive() then
		local base_jump_range = base_db:getKeyValue("Jump range")
		if base_jump_range ~= nil and base_jump_range ~= "" then
			specific_freighter_db:setKeyValue("Jump range",base_jump_range)
		else
			specific_freighter_db:setKeyValue("Jump range","5 - 50 u")
		end
	end
	if ship:hasWarpDrive() then
		specific_freighter_db:setKeyValue("Warp Speed",string.format("%.1f u/min",ship:getWarpSpeed()*60/1000))
	end
end
--	dynamic terrain support
function mtExuariHugeOnClick(x,y)
	if exuari_huge_clean_list == nil then
		exuari_huge_clean_list = {}
	end
	Planet():setPosition(x + 13091, y + -3065):setPlanetRadius(3000):setPlanetCloudRadius(5200.00)
	SpaceStation():setTemplate("Huge Station"):setFaction("Exuari"):setCallSign("Anaston"):setPosition(x + -2444, y + 1778)
	BlackHole():setPosition(x + -6675, y + -12499)
	BlackHole():setPosition(x + 4331, y + -15419)
	Nebula():setPosition(x + -6205, y + 2261)
	Nebula():setPosition(x + -15097, y + -1790)
	Nebula():setPosition(x + -1944, y + 10890)
	local ship = nil
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("B47"):setPosition(x + -9952, y +  -87):orderStandGround():setTypeName("Missile Pod D4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("UTI177"):setPosition(x + -982, y +  -1086):orderStandGround()
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("S176"):setPosition(x + 3159, y +  4755):orderStandGround()
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("X45"):setPosition(x + -7260, y +  6863):orderStandGround():setTypeName("Missile Pod D4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("Q43"):setPosition(x + -9251, y +  4669):orderStandGround():setTypeName("Missile Pod D4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("U38"):setPosition(x + -4643, y +  4243):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("D41"):setPosition(x + -4948, y +  -328):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("R36"):setPosition(x + -176, y +  740):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("L32"):setPosition(x + -2471, y +  5040):setShortRangeRadarRange(4500):orderStandGround():setTypeName("Missile Pod TX16"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"large"):setWeaponTubeDirection(1, 270):setTubeSize(1,"large"):setTubeSize(2,"large"):setTubeSize(3,"large"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("Z34"):setPosition(x + 113, y +  3486):setShortRangeRadarRange(4500):orderStandGround():setTypeName("Missile Pod TI8"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"large"):setWeaponTubeDirection(1, 90):setTubeSize(1,"large"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("S30"):setPosition(x + -5121, y +  1864):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	ship = CpuShip():setFaction("Exuari"):setTemplate("Jump Carrier"):setCallSign("K28"):setPosition(x + -2810, y +  -861):setShortRangeRadarRange(10000):orderStandGround():setTypeName("Command Base"):setHullMax(300):setHull(300):setImpulseMaxSpeed(0.0,0):setRotationMaxSpeed(0.5):setJumpDrive(false):setShieldsMax(500.00):setShields(500.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 10, 45, 2000, 1.0, 5.0):setBeamWeaponTurret(0, 70, 45, 0):setBeamWeapon(1, 10, 135, 2000, 1.0, 5.0):setBeamWeaponTurret(1, 70, 135, 0):setBeamWeapon(2, 10, 225, 2000, 1.0, 5.0):setBeamWeaponTurret(2, 70, 225, 0):setBeamWeapon(3, 10, 315, 2000, 1.0, 5.0):setBeamWeaponTurret(3, 70, 315, 0)
	Mine():setPosition(x + -11079, y + -1273)
	Mine():setPosition(x + -1418, y + 14362)
	Mine():setPosition(x + -5645, y + 12811)
	Mine():setPosition(x + 1634, y + 11153)
	Mine():setPosition(x + -16044, y + 1630)
	Mine():setPosition(x + -18885, y + -1001)
	Asteroid():setPosition(x + -14518, y + -3894):setSize(random(10,150))
	Asteroid():setPosition(x + -4943, y + 8206):setSize(122)
	Asteroid():setPosition(x + -5048, y + 11205):setSize(124)
	Asteroid():setPosition(x + -16675, y + -632):setSize(115)
	Asteroid():setPosition(x + -17570, y + -3421):setSize(122)
	Asteroid():setPosition(x + -11782, y + 578):setSize(115)
	Asteroid():setPosition(x + -13466, y + -1264):setSize(116)
	Asteroid():setPosition(x + -5890, y + 3103):setSize(121)
	Asteroid():setPosition(x + -14623, y + 1472):setSize(111)
	Asteroid():setPosition(x + -8100, y + 5208):setSize(116)
	Asteroid():setPosition(x + -9204, y + 1577):setSize(120)
	Asteroid():setPosition(x + -5837, y + 420):setSize(129)
	Asteroid():setPosition(x + -11940, y + -3210):setSize(120)
	Asteroid():setPosition(x + -1202, y + -14229):setSize(755)
	Asteroid():setPosition(x + -2996, y + 12521):setSize(125)
	Asteroid():setPosition(x + -2680, y + 9259):setSize(127)
	Asteroid():setPosition(x + -3522, y + 4260):setSize(125)
	Asteroid():setPosition(x + 476, y + 9837):setSize(119)
	Asteroid():setPosition(x + -523, y + 11995):setSize(116)
	
	Asteroid():setPosition(x + -218, y + -7228):setSize(500)
	Asteroid():setPosition(x + 7767, y + 8915):setSize(500)
	Asteroid():setPosition(x + -12940, y + 9259):setSize(500)
end
function movableTerrainOneOnClick(x,y)
	if clean_list == nil then
		clean_list = {}
	end
	table.insert(clean_list,SpaceStation():setTemplate("Large Station"):setFaction(fleetSpawnFaction):setCallSign("Toron Kogash"):setPosition(x + -2813,y +  2110))
	table.insert(clean_list,Planet():setPosition(x + 5943,y +  -11900):setPlanetRadius(5000):setPlanetCloudRadius(5200.00):setPlanetAtmosphereColor(64,0,0):setPlanetSurfaceTexture("planets/planet-2.png"):setPlanetCloudTexture("planets/clouds-2.png"):setPlanetCloudRadius(5500):setDistanceFromMovementPlane(-900):setAxialRotationTime(3500))
	table.insert(clean_list,Nebula():setPosition(x + 7153,y +  20467))
	table.insert(clean_list,Nebula():setPosition(x + 2331,y +  14700))
	table.insert(clean_list,Nebula():setPosition(x + -14413,y +  -2364))
	table.insert(clean_list,Nebula():setPosition(x + -11126,y +  -10943))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -1749,y +  3724))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 2064,y +  9912):setRange(12200.00))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 2917,y +  -2732))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -5152,y +  14366))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -10927,y +  3202):setRange(5700.00))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -5467,y +  -7898))
	table.insert(clean_list,WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -12820,y +  -5054))
	table.insert(clean_list,Mine():setPosition(x + 4281,y +  21356))
	table.insert(clean_list,Mine():setPosition(x + 97,y +  16955))
	table.insert(clean_list,Mine():setPosition(x + 4455,y +  15342))
	table.insert(clean_list,Mine():setPosition(x + 6404,y +  8346))
	table.insert(clean_list,Mine():setPosition(x + -1612,y +  10627))
	table.insert(clean_list,Mine():setPosition(x + 8595,y +  5014))
	table.insert(clean_list,Mine():setPosition(x + 4840,y +  135))
	table.insert(clean_list,Mine():setPosition(x + 5328,y +  2514))
	table.insert(clean_list,Mine():setPosition(x + 3113,y +  2840))
	table.insert(clean_list,Mine():setPosition(x + -6352,y +  18524))
	table.insert(clean_list,Mine():setPosition(x + -9692,y +  3719))
	table.insert(clean_list,Mine():setPosition(x + -16567,y +  2090))
	table.insert(clean_list,Mine():setPosition(x + -14482,y +  6228))
	table.insert(clean_list,Mine():setPosition(x + -12560,y +  429))
	table.insert(clean_list,Mine():setPosition(x + -10580,y +  -8365))
	table.insert(clean_list,Mine():setPosition(x + -4696,y +  -8844))
	table.insert(clean_list,Mine():setPosition(x + -12071,y +  -1820))
	table.insert(clean_list,Mine():setPosition(x + 1256,y +  -4915))
	table.insert(clean_list,commandBase(fleetSpawnFaction):setPosition(x + -8956, 7383 + y):orderStandGround())
	table.insert(clean_list,commandBase(fleetSpawnFaction):setPosition(x + 2950, 9047 + y):orderStandGround())
	table.insert(clean_list,commandBase(fleetSpawnFaction):setPosition(x + 3551, -1913 + y):orderStandGround())
	local ship = nil
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("V17"):setPosition(x + -4169, -6830 + y):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("VK39"):setPosition(x + -1477, -6320 + y):orderStandGround()
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("CSS12"):setPosition(x + -5265, 3274 + y):orderStandGround()
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("C22"):setPosition(x + -8805, 4821 + y):orderStandGround():setTypeName("Missile Pod D4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("H16"):setPosition(x + -6342, 6844 + y):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("SS48"):setPosition(x + -4983, 10340 + y):orderStandGround()
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("VK40"):setPosition(x + 5325, -1451 + y):orderStandGround()
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("P15"):setPosition(x + 550, 11670 + y):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("C61"):setPosition(x + 1813, 13076 + y):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("Y60"):setPosition(x + -3047, 11098 + y):setShortRangeRadarRange(5500):orderStandGround():setTypeName("Missile Pod TX8"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("L35"):setPosition(x + -2971, 7836 + y):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("F62"):setPosition(x + 1600, 4420 + y):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("R58"):setPosition(x + 3717, 5221 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("M54"):setPosition(x + 2146, -490 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("X53"):setPosition(x + 4345, 1525 + y):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("D43"):setPosition(x + 3583, 13401 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TI2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"small"):setWeaponTubeDirection(1, 90):setTubeSize(1,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("I32"):setPosition(x + -21, 8153 + y):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("G13"):setPosition(x + 2988, 10790 + y):setShortRangeRadarRange(8000):orderStandGround():setTypeName("Military Outpost"):setHullMax(300):setHull(300):setShieldsMax(150.00, 150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00, 150.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 396):setBeamWeapon(0, 10, 45, 3000, 2.0, 8.0):setBeamWeaponTurret(0, 80, 45, 0):setBeamWeapon(1, 10, 135, 3000, 2.0, 8.0):setBeamWeaponTurret(1, 80, 135, 0):setBeamWeapon(2, 10, 225, 3000, 2.0, 8.0):setBeamWeaponTurret(2, 80, 225, 0):setBeamWeapon(3, 10, 315, 3000, 2.0, 8.0):setBeamWeaponTurret(3, 80, 315, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("K55"):setPosition(x + 3514, -3946 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("F42"):setPosition(x + -13635, 8153 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TI2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"small"):setWeaponTubeDirection(1, 90):setTubeSize(1,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("W5"):setPosition(x + -10414, 167 + y):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("B25"):setPosition(x + -11384, 7776 + y):setShortRangeRadarRange(8000):orderStandGround():setTypeName("Military Outpost"):setHullMax(300):setHull(300):setShieldsMax(150.00, 150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00, 150.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 396):setBeamWeapon(0, 10, 45, 3000, 2.0, 8.0):setBeamWeaponTurret(0, 80, 45, 0):setBeamWeapon(1, 10, 135, 3000, 2.0, 8.0):setBeamWeaponTurret(1, 80, 135, 0):setBeamWeapon(2, 10, 225, 3000, 2.0, 8.0):setBeamWeaponTurret(2, 80, 225, 0):setBeamWeapon(3, 10, 315, 3000, 2.0, 8.0):setBeamWeaponTurret(3, 80, 315, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("M29"):setPosition(x + -12197, 4997 + y):setShortRangeRadarRange(7000):orderStandGround():setTypeName("Sniper Tower"):setRotationMaxSpeed(3.0):setBeamWeapon(0, 10, 0, 6000, 6.0, 6.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 10, 90, 6000, 6.0, 6.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 10, 180, 6000, 6.0, 6.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 10, 270, 6000, 6.0, 6.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("S30"):setPosition(x + -14606, 1972 + y):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("Y45"):setPosition(x + -11749, 2326 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TI2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"small"):setWeaponTubeDirection(1, 90):setTubeSize(1,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("T21"):setPosition(x + -6379, -8146 + y):setShortRangeRadarRange(8000):orderStandGround():setTypeName("Military Outpost"):setHullMax(300):setHull(300):setShieldsMax(150.00, 150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00, 150.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 396):setBeamWeapon(0, 10, 45, 3000, 2.0, 8.0):setBeamWeaponTurret(0, 80, 45, 0):setBeamWeapon(1, 10, 135, 3000, 2.0, 8.0):setBeamWeaponTurret(1, 80, 135, 0):setBeamWeapon(2, 10, 225, 3000, 2.0, 8.0):setBeamWeaponTurret(2, 80, 225, 0):setBeamWeapon(3, 10, 315, 3000, 2.0, 8.0):setBeamWeaponTurret(3, 80, 315, 0):setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("R47"):setPosition(x + -2467, -8692 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TI2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"small"):setWeaponTubeDirection(1, 90):setTubeSize(1,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("O50"):setPosition(x + 241, -7702 + y):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TI2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(2):setWeaponTubeDirection(0, -90):setTubeSize(0,"small"):setWeaponTubeDirection(1, 90):setTubeSize(1,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 398):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("U39"):setPosition(x + -11524, -5610 + y):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
	ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("K38"):setPosition(x + -7771, -6002 + y):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	setBeamColor(ship)
	table.insert(clean_list,ship)
--	bigger asteroids
	table.insert(clean_list,Asteroid():setPosition(x + 7331, 19526 + y):setSize(random(400,850)))
	table.insert(clean_list,Asteroid():setPosition(x + -16855, -3789 + y):setSize(random(400,1332)))
	table.insert(clean_list,Asteroid():setPosition(x + -13642, 12989 + y):setSize(random(400,774)))
	table.insert(clean_list,Asteroid():setPosition(x + -4845, -3346 + y):setSize(random(400,554)))
	table.insert(clean_list,Asteroid():setPosition(x + -12148, -13071 + y):setSize(random(400,943)))
	table.insert(clean_list,Asteroid():setPosition(x + -3347, 4314 + y):setSize(random(400,777)))
	table.insert(clean_list,Asteroid():setPosition(x + 6967, -4828 + y):setSize(random(400,615)))
--	smaller asteroids
	table.insert(clean_list,Asteroid():setPosition(x + 4194, 19003 + y):setSize(random(40,111)))
	table.insert(clean_list,Asteroid():setPosition(x + 10033, 20528 + y):setSize(random(40,118)))
	table.insert(clean_list,Asteroid():setPosition(x + 5893, 23230 + y):setSize(random(40,112)))
	table.insert(clean_list,Asteroid():setPosition(x + 9292, 19831 + y):setSize(random(40,120)))
	table.insert(clean_list,Asteroid():setPosition(x + 9641, 19134 + y):setSize(random(40,114)))
	table.insert(clean_list,Asteroid():setPosition(x + -818, 19613 + y):setSize(random(40,121)))
	table.insert(clean_list,Asteroid():setPosition(x + 1579, 22489 + y):setSize(random(40,116)))
	table.insert(clean_list,Asteroid():setPosition(x + -1167, 21182 + y):setSize(random(40,127)))
	table.insert(clean_list,Asteroid():setPosition(x + 1187, 20485 + y):setSize(random(40,119)))
	table.insert(clean_list,Asteroid():setPosition(x + 6503, 16998 + y):setSize(random(40,128)))
	table.insert(clean_list,Asteroid():setPosition(x + -1620, 17197 + y):setSize(random(40,123)))
	table.insert(clean_list,Asteroid():setPosition(x + 1686, 17841 + y):setSize(random(40,113)))
	table.insert(clean_list,Asteroid():setPosition(x + 3961, 16510 + y):setSize(random(40,127)))
	table.insert(clean_list,Asteroid():setPosition(x + 5980, 14514 + y):setSize(random(40,128)))
	table.insert(clean_list,Asteroid():setPosition(x + -547, 14406 + y):setSize(random(40,119)))
	table.insert(clean_list,Asteroid():setPosition(x + 1600, 15608 + y):setSize(random(40,112)))
	table.insert(clean_list,Asteroid():setPosition(x + 10120, 11638 + y):setSize(random(40,120)))
	table.insert(clean_list,Asteroid():setPosition(x + 8421, 11682 + y):setSize(random(40,110)))
	table.insert(clean_list,Asteroid():setPosition(x + 8508, 12684 + y):setSize(random(40,113)))
	table.insert(clean_list,Asteroid():setPosition(x + -2313, -4007 + y):setSize(random(40,111)))
	table.insert(clean_list,Asteroid():setPosition(x + -1246, -837 + y):setSize(random(40,117)))
	table.insert(clean_list,Asteroid():setPosition(x + -1674, 93 + y):setSize(random(40,114)))
	table.insert(clean_list,Asteroid():setPosition(x + 1681, -3606 + y):setSize(random(40,118)))
	table.insert(clean_list,Asteroid():setPosition(x + -725, 4110 + y):setSize(random(40,116)))
	table.insert(clean_list,Asteroid():setPosition(x + -1075, 9910 + y):setSize(random(40,113)))
	table.insert(clean_list,Asteroid():setPosition(x + 9685, 7193 + y):setSize(random(40,120)))
	table.insert(clean_list,Asteroid():setPosition(x + -3161, -1265 + y):setSize(random(40,111)))
	table.insert(clean_list,Asteroid():setPosition(x + -3139, -9 + y):setSize(random(40,117)))
	table.insert(clean_list,Asteroid():setPosition(x + -521, 2901 + y):setSize(random(40,124)))
	table.insert(clean_list,Asteroid():setPosition(x + -298, 1153 + y):setSize(random(40,115)))
	table.insert(clean_list,Asteroid():setPosition(x + 3674, 1253 + y):setSize(random(40,116)))
	table.insert(clean_list,Asteroid():setPosition(x + 4022, -797 + y):setSize(random(40,127)))
	table.insert(clean_list,Asteroid():setPosition(x + 6009, -831 + y):setSize(random(40,123)))
	table.insert(clean_list,Asteroid():setPosition(x + 5598, 1087 + y):setSize(random(40,125)))
	table.insert(clean_list,Asteroid():setPosition(x + 6249, 3588 + y):setSize(random(40,118)))
	table.insert(clean_list,Asteroid():setPosition(x + 4000, 4259 + y):setSize(random(40,128)))
	table.insert(clean_list,Asteroid():setPosition(x + 2938, 6620 + y):setSize(random(40,117)))
	table.insert(clean_list,Asteroid():setPosition(x + 651, 9038 + y):setSize(random(40,114)))
	table.insert(clean_list,Asteroid():setPosition(x + 316, 7364 + y):setSize(random(40,129)))
	table.insert(clean_list,Asteroid():setPosition(x + -855, 8480 + y):setSize(random(40,115)))
	table.insert(clean_list,Asteroid():setPosition(x + -742, 11284 + y):setSize(random(40,122)))
	table.insert(clean_list,Asteroid():setPosition(x + 853, 10442 + y):setSize(random(40,118)))
--	medium sized asteroids
	table.insert(clean_list,Asteroid():setPosition(x + 3491, 9954 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + 1518, 11683 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + 4887, 9489 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + 4843, 7140 + y):setSize(random(1,300) + 123))
	table.insert(clean_list,Asteroid():setPosition(x + 2120, 8462 + y):setSize(random(1,300) + 117))
	table.insert(clean_list,Asteroid():setPosition(x + 5133, 5635 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + 4483, -3158 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -4130, 17870 + y):setSize(random(1,300) + 126))
	table.insert(clean_list,Asteroid():setPosition(x + -4086, 19831 + y):setSize(random(1,300) + 123))
	table.insert(clean_list,Asteroid():setPosition(x + -6527, 16519 + y):setSize(random(1,300) + 114))
	table.insert(clean_list,Asteroid():setPosition(x + -9359, 18741 + y):setSize(random(1,300) + 123))
	table.insert(clean_list,Asteroid():setPosition(x + -8749, 15952 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -11667, 14878 + y):setSize(random(1,300) + 127))
	table.insert(clean_list,Asteroid():setPosition(x + -16561, 7880 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + -14930, 9769 + y):setSize(random(1,300) + 120))
	table.insert(clean_list,Asteroid():setPosition(x + -11710, 9812 + y):setSize(random(1,300) + 112))
	table.insert(clean_list,Asteroid():setPosition(x + -16869, -694 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + -15243, -2307 + y):setSize(random(1,300) + 118))
	table.insert(clean_list,Asteroid():setPosition(x + -14806, -164 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -15592, 1035 + y):setSize(random(1,300) + 114))
	table.insert(clean_list,Asteroid():setPosition(x + -6783, -3483 + y):setSize(random(1,300) + 121))
	table.insert(clean_list,Asteroid():setPosition(x + -8331, -3459 + y):setSize(random(1,300) + 128))
	table.insert(clean_list,Asteroid():setPosition(x + -8350, -893 + y):setSize(random(1,300) + 126))
	table.insert(clean_list,Asteroid():setPosition(x + -13509, -1893 + y):setSize(random(1,300) + 124))
	table.insert(clean_list,Asteroid():setPosition(x + -10470, -1451 + y):setSize(random(1,300) + 112))
	table.insert(clean_list,Asteroid():setPosition(x + -10422, 11444 + y):setSize(random(1,300) + 126))
	table.insert(clean_list,Asteroid():setPosition(x + -9091, 9383 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -9893, 1860 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -11325, 948 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -9019, 855 + y):setSize(random(1,300) + 110))
	table.insert(clean_list,Asteroid():setPosition(x + -10999, 5236 + y):setSize(random(1,300) + 120))
	table.insert(clean_list,Asteroid():setPosition(x + -9535, 6200 + y):setSize(random(1,300) + 111))
	table.insert(clean_list,Asteroid():setPosition(x + -3552, 14578 + y):setSize(random(1,300) + 117))
	table.insert(clean_list,Asteroid():setPosition(x + -7330, 14492 + y):setSize(random(1,300) + 128))
	table.insert(clean_list,Asteroid():setPosition(x + -6128, 9211 + y):setSize(random(1,300) + 111))
	table.insert(clean_list,Asteroid():setPosition(x + -6214, 11444 + y):setSize(random(1,300) + 112))
	table.insert(clean_list,Asteroid():setPosition(x + -3767, 9640 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + -13033, 6450 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + -13818, 5236 + y):setSize(random(1,300) + 121))
	table.insert(clean_list,Asteroid():setPosition(x + -14961, 5129 + y):setSize(random(1,300) + 113))
	table.insert(clean_list,Asteroid():setPosition(x + -13925, 3844 + y):setSize(random(1,300) + 125))
	table.insert(clean_list,Asteroid():setPosition(x + -16031, 3595 + y):setSize(random(1,300) + 123))
	table.insert(clean_list,Asteroid():setPosition(x + -12141, 4130 + y):setSize(random(1,300) + 123))
	table.insert(clean_list,Asteroid():setPosition(x + -13234, -439 + y):setSize(random(1,300) + 128))
	table.insert(clean_list,Asteroid():setPosition(x + -13411, 1015 + y):setSize(random(1,300) + 114))
	table.insert(clean_list,Asteroid():setPosition(x + -11623, -694 + y):setSize(random(1,300) + 122))
	table.insert(clean_list,Asteroid():setPosition(x + -13151, -3876 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + -10719, -4388 + y):setSize(random(1,300) + 118))
	table.insert(clean_list,Asteroid():setPosition(x + -10267, -3288 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + -11937, -3033 + y):setSize(random(1,300) + 122))
	table.insert(clean_list,Asteroid():setPosition(x + -4797, -10238 + y):setSize(random(1,300) + 130))
	table.insert(clean_list,Asteroid():setPosition(x + -890, -9938 + y):setSize(random(1,300) + 121))
	table.insert(clean_list,Asteroid():setPosition(x + 2683, -4837 + y):setSize(random(1,300) + 120))
	table.insert(clean_list,Asteroid():setPosition(x + -8976, -5970 + y):setSize(random(1,300) + 111))
	table.insert(clean_list,Asteroid():setPosition(x + -11015, -10326 + y):setSize(random(1,300) + 118))
	table.insert(clean_list,Asteroid():setPosition(x + -8575, -12810 + y):setSize(random(1,300) + 118))
	table.insert(clean_list,Asteroid():setPosition(x + -8967, -10849 + y):setSize(random(1,300) + 121))
	table.insert(clean_list,Asteroid():setPosition(x + -13369, -6273 + y):setSize(random(1,300) + 111))
	table.insert(clean_list,Asteroid():setPosition(x + -14022, -10849 + y):setSize(random(1,300) + 122))
	table.insert(clean_list,Asteroid():setPosition(x + -12366, -8234 + y):setSize(random(1,300) + 112))
	table.insert(clean_list,Asteroid():setPosition(x + -15766, -5619 + y):setSize(random(1,300) + 127))
	table.insert(clean_list,Asteroid():setPosition(x + -6938, -5089 + y):setSize(random(1,300) + 118))
	table.insert(clean_list,Asteroid():setPosition(x + -3926, -7823 + y):setSize(random(1,300) + 110))
	table.insert(clean_list,Asteroid():setPosition(x + -3602, -9398 + y):setSize(random(1,300) + 119))
	table.insert(clean_list,Asteroid():setPosition(x + -8652, -8055 + y):setSize(random(1,300) + 111))
	table.insert(clean_list,Asteroid():setPosition(x + -7030, -8750 + y):setSize(random(1,300) + 129))
	table.insert(clean_list,Asteroid():setPosition(x + -4714, -5692 + y):setSize(random(1,300) + 127))
	table.insert(clean_list,Asteroid():setPosition(x + -2350, -6850 + y):setSize(random(1,300) + 116))
	table.insert(clean_list,Asteroid():setPosition(x + -6474, -6850 + y):setSize(random(1,300) + 115))
	table.insert(clean_list,Asteroid():setPosition(x + -590, -5274 + y):setSize(random(1,300) + 121))
	table.insert(clean_list,Asteroid():setPosition(x + -358, -6340 + y):setSize(random(1,300) + 113))
end
function moveSelectedObjects()
	if gm_click_mode == "move selected" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "move selected"
		onGMClick(gmClickMoveSelected)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   move selected\nGM click mode.",prev_mode))
		end
	end
	tweakTerrain()
end
function gmClickMoveSelected(x,y)
	local object_list = getGMSelection()
	if #object_list > 0 then
		if #object_list > 1 then
			local center_x = 0
			local center_y = 0
			local current_object_x, current_object_y = object_list[1]:getPosition()
			for i=1,#object_list do
				current_object_x, current_object_y = object_list[i]:getPosition()
				center_x = center_x + current_object_x
				center_y = center_y + current_object_y
			end
			center_x = center_x / #object_list
			center_y = center_y / #object_list
			for i=1,#object_list do
				current_object_x, current_object_y = object_list[i]:getPosition()
				current_object_x = current_object_x - center_x
				current_object_y = current_object_y - center_y
				object_list[i]:setPosition(x + current_object_x, y + current_object_y)
			end
		else
			object_list[1]:setPosition(x,y)
		end
	else
		gm_click_mode = nil
		onGMClick(nil)
		addGMMessage("Nothing selected. Move selected mode cancelled")
	end
end
function explodeSelectedArtifact()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("You need to select an object. No action taken.")
		return
	end
	local tempObject = objectList[1]
	if not isObjectType(tempObject,"Artifact") then
		addGMMessage("Only select an artifact since only artifacts explode. No action taken.")
		return
	end
	tempObject:explode()
end
function pulseAsteroid()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("You need to select an object. No action taken.")
		return
	end
	local tempObject = objectList[1]
	if not isObjectType(tempObject,"Asteroid") then
		addGMMessage("Only select an asteroid. No action taken.")
		return
	end
	local selected_in_list = false
	for i=1,#J4_to_L8_asteroids do
		if tempObject == J4_to_L8_asteroids[i] then
			selected_in_list = true
			break
		end
	end
	if selected_in_list then
		if tempObject.original_size == nil then
			addGMMessage("selected has a nil value where it should have an original_size. No action taken")
			return
		end
		if tempObject.original_size < 120 then
			tempObject.grow = true
			tempObject.max_size = 300
			tempObject.increment = (300 - tempObject.original_size)/10
			plotPulse = growAsteroid
		else
			tempObject.shrink = true
			tempObject.min_size = tempObject.original_size/2
			tempObject.increment = (tempObject.original_size - (tempObject.original_size/2))/10
			plotPulse = shrinkAsteroid
		end
		if pulse_asteroid_list == nil then
			pulse_asteroid_list = {}
		end
		table.insert(pulse_asteroid_list,tempObject)
	else
		addGMMessage("Only asteroids in J4 to L8 can pulse. No action taken")
		return
	end
end
function growAsteroid(delta)
	if pulse_asteroid_list ~= nil then
		if #pulse_asteroid_list > 0 then
			for i=1,#pulse_asteroid_list do
				local ta = pulse_asteroid_list[i]
				if ta ~= nil and ta:isValid() then
					if ta.grow_size == nil then
						ta.grow_size = ta.original_size
					end
					ta.grow_size = ta.grow_size + ta.increment
					ta:setSize(ta.grow_size)
					print(string.format("grow_size: %.1f, max_size: %.1f",ta.grow_size,ta.max_size))
					if ta.grow_size >= ta.max_size then
						--end of growth
						print("end of growth")
						resetPulsingAsteroid(ta)
					end
				end
			end
		end
	end
end
function resetPulsingAsteroid(ta)
	ta.grow = nil
	ta.shrink = nil
	ta.max_size = nil
	ta.min_size = nil
	ta.grow_size = nil
	ta.shrink_size = nil
	ta:setSize(ta.original_size)
	for i=1,#pulse_asteroid_list do
		if ta == pulse_asteroid_list[i] then
			table.remove(pulse_asteroid_list,i)
			break
		end
	end
	print("done resetting")
end
function shrinkAsteroid(delta)
	if pulse_asteroid_list ~= nil then
		if #pulse_asteroid_list > 0 then
			for i=1,#pulse_asteroid_list do
				local ta = pulse_asteroid_list[i]
				if ta ~= nil and ta:isValid() then
					if ta.shrink_size == nil then
						ta.shrink_size = ta.original_size
					end
					ta.shrink_size = ta.shrink_size - ta.increment
					ta:setSize(ta.shrink_size)
					print(string.format("shrink_size: %.1f, min_size: %.1f",ta.shrink_size,ta.min_size))
					if ta.shrink_size <= ta.min_size then
						--end of shrink
						print("end of shrink")
						resetPulsingAsteroid(ta)
					end
				end
			end
		end
	end
end
-----------------------
--	Countdown Timer  --
-----------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM TIMER		F	initialGMFunctions
-- +DISPLAY: GM			D	GMTimerDisplay
-- +LENGTH: 5			D	GMTimerLength
-- +PURPOSE: TIMER		D	GMTimerPurpose
-- +ADD SECONDS			F	addSecondsToTimer		(only present after timer starts)
-- +DELETE SECONDS		F	deleteSecondsFromTimer	(only present after timer starts)
-- +CHANGE SPEED		F	changeTimerSpeed		(only present after timer starts)
-- SHOW CURRENT			F	inline					(only present after timer starts)
-- START TIMER			F	inline: toggles between START and STOP (related code in update)
function countdownTimer()
	clearGMFunctions()
	addGMFunction("-Main from Timer",initialGMFunctions)
	local timer_display = "+Display: GM"
	if timer_display_helm then
		timer_display = timer_display .. ",H"
	end
	if timer_display_weapons then
		timer_display = timer_display .. ",W"
	end
	if timer_display_engineer then
		timer_display = timer_display .. ",E"
	end
	if timer_display_science then
		timer_display = timer_display .. ",S"
	end
	if timer_display_relay then
		timer_display = timer_display .. ",R"
	end
	addGMFunction(timer_display,GMTimerDisplay)
	addGMFunction(string.format("+Length: %i",timer_start_length),GMTimerLength)
	addGMFunction(string.format("+Purpose: %s",timer_purpose),GMTimerPurpose)
	addGMFunction(string.format("+Type: %s",timer_type),GMTimerType)
	if timer_started then
		addGMFunction("+Add Seconds",addSecondsToTimer)
		addGMFunction("+Delete Seconds",deleteSecondsFromTimer)
		addGMFunction("+Change Speed",changeTimerSpeed)
		addGMFunction("Show Current",function()
			local timer_status = timer_purpose
			local timer_minutes = math.floor(timer_value / 60)
			local timer_seconds = math.floor(timer_value % 60)
			if timer_minutes <= 0 then
				timer_status = string.format("%s %i",timer_status,timer_seconds)
			else
				timer_status = string.format("%s %i:%.2i",timer_status,timer_minutes,timer_seconds)
			end
			if timer_scale > 1 then
				timer_status = string.format("%s\n(sped up: %.3f)",timer_status,timer_scale)
			elseif timer_scale < 1 then
				timer_status = string.format("%s\n(slowed: %.3f)",timer_status,timer_scale)
			end
			addGMMessage(timer_status)
		end)
		addGMFunction("Stop Timer", function()
			timer_started = false
			countdownTimer()
		end)
	else
		addGMFunction("Start Timer", function()
			startTimer()
			countdownTimer()
		end)
	end
end
function startTimer()
	timer_started = true
end
describeFunction("startTimer","starts the gm configured timer")
function coloredSubspaceRift (x,y,destination_x,destination_y)
	local artifact = Artifact():setPosition(x,y):setCallSign("Subspace rift")
	local all_objs = {}
	local number_in_ring = 20
	local clockwise_objs=createObjectCircle{number = number_in_ring}
	local a_c = {
	--	red						green					blue
	--	start	min	max	time	start	min	max	time	start	min	max	time
		{	0,	128,255,2,		0,		0,	255,2,		0,		0,	255,2	},
		{	0,	128,255,4,		0,		32,	255,4,		0,		0,	255,4	},
		{	0,	128,255,3,		0,		64,	255,3,		0,		0,	255,3	},
		{	0,	128,255,6,		0,		96,	255,6,		0,		0,	255,6	},
		{	0,	96, 255,2,		0,		128,255,2,		0,		0,	255,2	},
		{	0,	64,	255,4,		0,		128,255,4,		0,		0,	255,4	},
		{	0,	32,	255,3,		0,		128,255,3,		0,		0,	255,3	},
		{	0,	0,	255,6,		0,		128,255,6,		0,		32,	255,6	},
		{	0,	0,	255,2,		0,		128,255,2,		0,		64,	255,2	},
		{	0,	0,	255,4,		0,		128,255,4,		0,		96,	255,4	},
		{	0,	0,	255,3,		0,		128,255,3,		0,		128,255,3	},
		{	0,	0,	255,6,		0,		96,	255,6,		0,		128,255,6	},
		{	0,	0,	255,2,		0,		64,	255,2,		0,		128,255,2	},
		{	0,	0,	255,4,		0,		0,	255,4,		0,		128,255,4	},
		{	0,	32,	255,3,		0,		0,	255,3,		0,		128,255,3	},
		{	0,	64,	255,6,		0,		0,	255,6,		0,		128,255,6	},
		{	0,	96,	255,2,		0,		0,	255,2,		0,		128,255,2	},
		{	0,	128,255,4,		0,		0,	255,4,		0,		96,	255,4	},
		{	0,	128,255,3,		0,		0,	255,3,		0,		64,	255,3	},
		{	0,	128,255,6,		0,		0,	255,6,		0,		32,	255,6	},
	}
	for i=1,#clockwise_objs do
		if a_c[i] ~= nil then
			update_system:addArtifactCyclicalColorUpdate(clockwise_objs[i],a_c[i][1],a_c[i][2],a_c[i][3],a_c[i][4],a_c[i][5],a_c[i][6],a_c[i][7],a_c[i][8],a_c[i][9],a_c[i][10],a_c[i][11],a_c[i][12])
		end
	end
--		clockwise_objs[1]:setRadarTraceColor(0,255,0)
	for i=#clockwise_objs,1,-1 do
		createOrbitingObject(clockwise_objs[i],i*(360/number_in_ring),60,x,y,0)
		update_system:addOwned(clockwise_objs[i],artifact)
		table.insert(all_objs,clockwise_objs[i])
	end
	local counterclockwise_objs=createObjectCircle{number = number_in_ring}
	for i=#counterclockwise_objs,1,-1 do
		createOrbitingObject(counterclockwise_objs[i],i*(360/number_in_ring),-60,x,y,0)
		update_system:addOwned(counterclockwise_objs[i],artifact)
		table.insert(all_objs,counterclockwise_objs[i])
	end
	local update_data = {
		all_objs = all_objs,
		current_radius = 0,
		max_radius = 3000,
		max_time = 120,
		destination_x = destination_x or 0,
		destination_y = destination_y or 0,
		update = function (self, obj, delta)
			self.current_radius = extraMath.clamp(self.current_radius+delta*(self.max_radius/self.max_time),0,self.max_radius)
			-- ***techincally*** this is probably wrong - the position of the orbit of the objects is based
			-- on the previous update, who cares though, but consider this a warning if reusing this code somewhere that matters
			for i=#all_objs,1,-1 do
				update_system:getUpdateNamed(all_objs[i],"orbit").distance = self.current_radius
			end
			local x,y=obj:getPosition()
			local objs = getObjectsInRadius(x,y,self.current_radius)
			for i=#objs,1,-1 do
				if isObjectType(objs[i],"PlayerSpaceship") or isObjectType(objs[i],"CpuShip") then
					objs[i]:setPosition(self.destination_x,self.destination_y)
				end
			end
		end,
		edit = {
			{name = "max_time", fixedAdjAmount=1},
			{name = "destination_x", fixedAdjAmount=20000},
			{name = "destination_y", fixedAdjAmount=20000}
		}
	}
	update_system:addUpdate(artifact,"subspace rift",update_data)
	return artifact
end
--------------
--	Custom  --
--------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM END			F	initialGMFunctions
-- +SNIPPET					F	snippetButtons
-- +ONE-OFFS				F	oneOffs
-- +SCIENCE DB				F	scienceDatabase
-- +TRACTOR SOUND			F	tractorSound
-- 4K MINE RING				F	inline
-- SUBSPACE RIFT			F	inline
-- ***DANGER*** RUN DESC	F	mollyGuardLoadDescription
function customButtons()
	clearGMFunctions()
	addGMFunction("-Main From Custom",initialGMFunctions)
	addGMFunction("+Debug",debugButtons)
	addGMFunction("+Snippet",snippetButtons)
	addGMFunction("+One-Offs",oneOffs)
	addGMFunction("+Gateway/Rifts",gatewayRifts)
	addGMFunction("4k mine ring",singleObjectFunction(function (obj)
		local x,y = obj:getPosition()
			mineRingShim{x=x, y=y, dist=12000, segments=4, angle=0, gap_size=5, gap=1, speed=60}
		end))	-- this probably wants to be done properly with a nice fancy UI but today is not the day
	-- X&Y where pulled out of gateway_x and gateway_y, they should refer to the same var really
	-- though when I get round to one of the next improvements to gateway this may need to change anyway
	addGMFunction("contact gm",function ()
		playerFleet:addCustomButton("Relay","gm contact","Contact HQ",function (player)
			if not openGMComms(player) then
				player:wrappedAddCustomMessage("Relay","gm contact fail","unable to complete calibration due to open comms window")
			end
		end)
	end)
	addGMFunction("***DANGER*** run desc",mollyGuardLoadDescription)
end
function gatewayRifts()
	clearGMFunctions()
	addGMFunction("-Main From Gateway/Rifts",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("subspace rift",function () onGMClick(function (x,y)
		local artifact = Artifact():setPosition(x,y):setCallSign("Subspace rift")
		local all_objs = {}
		local number_in_ring = 20
		local clockwise_objs=createObjectCircle{number = number_in_ring}
		for i=#clockwise_objs,1,-1 do
			createOrbitingObject(clockwise_objs[i],i*(360/number_in_ring),60,x,y,0)
			update_system:addOwned(clockwise_objs[i],artifact)
			table.insert(all_objs,clockwise_objs[i])
		end
		local counterclockwise_objs=createObjectCircle{number = number_in_ring}
		for i=#counterclockwise_objs,1,-1 do
			createOrbitingObject(counterclockwise_objs[i],i*(360/number_in_ring),-60,x,y,0)
			update_system:addOwned(counterclockwise_objs[i],artifact)
			table.insert(all_objs,counterclockwise_objs[i])
		end
		local update_data = {
			all_objs = all_objs,
			current_radius = 0,
			max_radius = 3000,
			max_time = 120,
			update = function (self, obj, delta)
				self.current_radius = extraMath.clamp(self.current_radius+delta*(self.max_radius/self.max_time),0,self.max_radius)
				-- ***techincally*** this is probably wrong - the position of the orbit of the objects is based
				-- on the previous update, who cares though, but consider this a warning if reusing this code somewhere that matters
				for i=#all_objs,1,-1 do
					update_system:getUpdateNamed(all_objs[i],"orbit").distance = self.current_radius
				end
				local x,y=obj:getPosition()
				local objs = getObjectsInRadius(x,y,self.current_radius)
				for i=#objs,1,-1 do
					if isObjectType(objs[i],"PlayerSpaceship") then
						local player_x,player_y = objs[i]:getPosition()
						local angle = (math.atan2(x-player_x,y-player_y)/math.pi*180)+90
						setCirclePos(objs[i],x,y,-angle,self.current_radius)
					end
				end
			end,
			edit = {{name = "max_time", fixedAdjAmount=1}} -- this really should have more edit controls but I'm feeling lazy
		}
		update_system:addUpdate(artifact,"subspace rift",update_data)
	end)end)
	addGMFunction("Colored Subspace Rift",function ()
		onGMClick(function (x,y)
			coloredSubspaceRift(x,y,playerSpawnX,playerSpawnY)
		end)
	end)
	addGMFunction("gateway rift",function () gateway_rift=coloredSubspaceRift(59893,373681) end)
	addGMFunction("set gateway exit", function ()
		onGMClick(function (x,y)
			if (gateway_rift ~= nil and gateway_rift:isValid()) then
				local update = update_system:getUpdateNamed(gateway_rift,"subspace rift")
				if update ~= nil then
					update.destination_x = x
					update.destination_y = y
				end
			end
		end)
	end)
	addGMFunction("pending gateway defences",function ()
		-- note one of the command bases probably wants to be changed to a science station (no name yet)
		-- other one to a shipyard?
		-- mines also kind of want tweaking for them (the rows of 8ish mines) - they arent symmetrical
		local gateway_x = 59893
		local gateway_y = 373681
		local dist = 15000
		-- note distances could use a little tweaking (talking 100s of units)
		-- likewise callsigns could use some work to make some matching names
		local ship = nil
		ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(gateway_x + math.sin(((170 )/360)*math.pi*2)*dist, gateway_y - math.cos(((170 )/360)*math.pi*2)*dist)
		setBeamColor(ship)
		ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(gateway_x + math.sin(((190 )/360)*math.pi*2)*dist, gateway_y - math.cos(((190 )/360)*math.pi*2)*dist)
		setBeamColor(ship)
		ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(gateway_x + math.sin(((290 )/360)*math.pi*2)*dist, gateway_y - math.cos(((290 )/360)*math.pi*2)*dist)
		setBeamColor(ship)
		ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(gateway_x + math.sin(((310 )/360)*math.pi*2)*dist, gateway_y - math.cos(((310 )/360)*math.pi*2)*dist)
		setBeamColor(ship)
		dist = 19000
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((105 )/360)*math.pi*2)*dist, gateway_y - math.cos(((105 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((145 )/360)*math.pi*2)*dist, gateway_y - math.cos(((145 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((215 )/360)*math.pi*2)*dist, gateway_y - math.cos(((215 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((265 )/360)*math.pi*2)*dist, gateway_y - math.cos(((265 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((335 )/360)*math.pi*2)*dist, gateway_y - math.cos(((335 )/360)*math.pi*2)*dist)
		dist = 23000
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((15  )/360)*math.pi*2)*dist, gateway_y - math.cos(((15  )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((135 )/360)*math.pi*2)*dist, gateway_y - math.cos(((135 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((225 )/360)*math.pi*2)*dist, gateway_y - math.cos(((225 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((255 )/360)*math.pi*2)*dist, gateway_y - math.cos(((255 )/360)*math.pi*2)*dist)
		sniperTower("Human Navy"):setPosition(gateway_x + math.sin(((345 )/360)*math.pi*2)*dist, gateway_y - math.cos(((345 )/360)*math.pi*2)*dist)
	end)
end
-------------------
--	End Session  --
-------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM END		F	initialGMFunctions
-- +REGION REPORT		F	regionReport
-- +FACTION VICTORY		F	endMission
function endSession()
	clearGMFunctions()
	addGMFunction("-Main From End",initialGMFunctions)
	addGMFunction("+Region Report",regionReport)
	addGMFunction("+Faction Victory",endMission)
end
function establishPolarisDatabase()
	local ships_db = queryScienceDatabase("Ships")
	ships_db:addEntry("Polaris Incident")
	polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	polaris_db:setLongDescription("These ships observed by research on station Polaris. They seem to be part of Kraylor research mixing stasis bubbles and ancient human seasonal rituals.")
	return polaris_db
end
function carolStage1()
	local pearTree=CpuShip():
		setTemplate("Atlantis X23"):
		setTypeName("Arboretum"):
		setWeaponTubeCount(0):
		setWeaponStorageMax("Homing", 0):setWeaponStorage("Homing", 0):
		setWeaponStorageMax("HVLI", 0):setWeaponStorage("HVLI", 0):
		setBeamWeapon(0, 78, 340, 700, 6.0, 8.0):
		setBeamWeapon(1, 83, 20, 700, 6.0, 8.0):
		setBeamWeapon(2, 100, 180, 0, 6.0, 8.0):
		setShieldsMax(100,100,100,100):
		setShields(100,100,100,100):
		setJumpDrive(false)
	setBeamColor(pearTree)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local pear_tree_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Arboretum")
	if pear_tree_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
		if corvette_db == nil then
			polaris_db:addEntry("Corvette")
			corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
			corvette_db:setLongDescription("Corvettes are the common large ships. Larger then a frigate, smaller then a dreadnaught.\nThey generally have 4 or more shield sections. Run with a crew of 20 to 250.\nThis class generally has jumpdrives or warpdrives. But lack the maneuverability that is seen in frigates.\n\nThey come in 3 different subclasses:\n* Destroyer: Combat oriented ships. No science, no transport. Just death in a large package.\n* Support: Large scale support roles. Drone carriers fall in this category, as well as mobile repair centers.\n* Freighter: Large scale transport ships. Most common here are the jump freighters, using specialized jumpdrives to cross large distances with large amounts of cargo.")
		end
		corvette_db:addEntry("Arboretum")
		pear_tree_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Arboretum")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Atlantis X23"),	--base ship database entry
			pear_tree_db,		--modified ship database entry
			pearTree,			--ship just created, long description on the next line
			"The Arboretum looks like it started as an Atlantis X23. But, there are no missile tubes or missiles, the beams have been redirected and curtailed, and the shields weakened. Also, it's missing its jump drive.",
			nil,
			nil,
			"battleship_destroyer_1_upgraded"
		)
	end
	local partridge=CpuShip():
		setTemplate("Defense platform"):
		setRotationMaxSpeed(5):
		setShieldsMax(100):setShields(100):
		setBeamWeapon(0, 30, 0, 4000, 2.0, 10.0):
		setBeamWeapon(1, 240, 0, 2000, 4.0, 10.0):
		setBeamWeapon(2, 240, 0, 0, 4.0, 10.0):
		setBeamWeapon(3, 330, 180, 0, 6.0, 10.0):
		setBeamWeapon(4, 0, 0, 0, 0.0, 0.0):
		setBeamWeapon(5, 0, 0, 0, 0.0, 0.0):
		orderStandGround():
		setTypeName("Fowl Fort")
	setBeamColor(partridge)
	local partridge_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Fowl Fort")
	if partridge_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
		corvette_db:addEntry("Fowl Fort")
		partridge_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Fowl Fort")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Defense platform"),	--base ship database entry
			partridge_db,		--modified ship database entry
			partridge,			--ship just created, long description on the next line
			"The Fowl Fort seems to be a modified defense platform. Rather than six equidistant beams four units long, it has only one long beam. It makes up for the other missing beams with a broad coverage beam with a 2 unit range plus maneuvering thrusters that make it ten time faster to hone in on a target. It's shields consist of a single arc, slightly weaker than its defense platform progenitor.",
			nil,
			nil,
			"space_station_4"
		)
	end
	update_system:addOrbitTargetUpdate(partridge,pearTree,500,60)
	-- I wanted pear tree to regenerate when destroyed but there isnt any good code to loot for that
	return pearTree
end
function carolStage2()
	local white_sky = CpuShip()
		:setTemplate("Atlantis X23")
		:setTypeName("White Sky")
		:setJumpDrive(false)
		:setWeaponTubeCount(0)
		:setWeaponStorageMax("Homing", 0):setWeaponStorage("Homing", 0)
		:setWeaponStorageMax("HVLI", 0):setWeaponStorage("HVLI", 0)
		:setBeamWeapon(0, 100, 340, 0, 6.0, 8.0) -- the original beams are taken out as the x and y offset are not 0
		:setBeamWeapon(1, 100, 20, 0, 6.0, 8.0)
		:setBeamWeapon(2, 100, 180, 0, 6.0, 8.0)
		-- beam 3 also has x and y offset set
		:setBeamWeapon(4, 80, 0, 1500, 8, 11)	-- beams with a small overlap, 360 degree beams
		:setBeamWeapon(5, 80, 60, 1500, 8, 11)
		:setBeamWeapon(6, 80, 120, 1500, 8, 11)
		:setBeamWeapon(7, 80, 180, 1500, 8, 11)
		:setBeamWeapon(8, 80, 240, 1500, 8, 11)
		:setBeamWeapon(9, 80, 300, 1500, 8, 11)
		:setShieldsMax(300, 300, 200):setShields(300, 300, 200)
	setBeamColor(white_sky)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local white_sky_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","White Sky")
	if white_sky_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
		if corvette_db == nil then
			polaris_db:addEntry("Corvette")
			corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
			corvette_db:setLongDescription("Corvettes are the common large ships. Larger then a frigate, smaller then a dreadnaught.\nThey generally have 4 or more shield sections. Run with a crew of 20 to 250.\nThis class generally has jumpdrives or warpdrives. But lack the maneuverability that is seen in frigates.\n\nThey come in 3 different subclasses:\n* Destroyer: Combat oriented ships. No science, no transport. Just death in a large package.\n* Support: Large scale support roles. Drone carriers fall in this category, as well as mobile repair centers.\n* Freighter: Large scale transport ships. Most common here are the jump freighters, using specialized jumpdrives to cross large distances with large amounts of cargo.")
		end
		corvette_db:addEntry("White Sky")
		white_sky_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","White Sky")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Atlantis X23"),	--base ship database entry
			white_sky_db,		--modified ship database entry
			white_sky,			--ship just created, long description on the next line
			"The White Sky resembles an Atlantis X23 without missiles. The beams no longer favor the front of the ship, but fully cover the ship with a slight overlap. They are more powerful, but slower. The shields have fewer but stronger arcs. The jump drive is gone.",
			nil,
			nil,
			"battleship_destroyer_1_upgraded"
		)
	end
	return white_sky
end
function carolStage3()
	-- alpha strike fighter
	local cowards_charge = CpuShip():
		setTemplate("MT52 Hornet"):
		setWeaponTubeCount(1):
		setWeaponStorageMax("Homing", 3):setWeaponStorage("Homing", 3):
		setWeaponTubeDirection(0,0):setTubeLoadTime(0,0.5):
		setTypeName("Cowards Charge")
	setBeamColor(cowards_charge)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local cowards_charge_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Cowards Charge")
	if cowards_charge_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
		if fighter_db == nil then
			polaris_db:addEntry("Starfighter")
			fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
			fighter_db:setLongDescription("Starfighters are single to 3 person small ships. These are most commonly used as light firepower roles.\nThey are common in larger groups, and need a close by station or support ship, as they lack long time life support.\nIt's rare to see starfighters with more then one shield section.\n\nOne of the most well known starfighters is the X-Wing.\n\nStarfighters come in 3 subclasses:\n* Interceptors: Fast, low on firepower, high on manouverability\n* Gunship: Equipped with more weapons, but trades in manouverability because of it.\n* Bomber: Slowest of all starfighters, but pack a large punch in a small package. Usually come without any lasers, but the largers bombers have been known to deliver nukes.")
		end
		fighter_db:addEntry("Cowards Charge")
		cowards_charge_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Cowards Charge")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MT52 Hornet"),	--base ship database entry
			cowards_charge_db,		--modified ship database entry
			cowards_charge,			--ship just created, long description on the next line
			"Cowards Charge seems to have characteristics close to an Adder MK5. However, instead of being loaded with four rounds of HVLI, it's loaded with three rapid fire homing missiles.",
			{
				{key = "Tube 0", value = "1/2 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"AdlerLongRangeScoutYellow"
		)
	end
	return cowards_charge
end
function carolStage4()
	-- warp gunship
	local raven = CpuShip()
		:setTemplate("Gunship")
		:setWeaponTubeCount(0)
		:setBeamWeapon(0, 30, -8, 3000, 6.0, 4.0) -- there probably is an interesting ship design with damage = around 6-8, but it is too heavy for this curren
		:setBeamWeapon(1, 30, 8, 3000, 6.0, 4.0)
		:setBeamWeapon(2, 270, 0, 750, 8.0, 3.0)
		:setWarpDrive(true) -- AI is such it has to have warp as FTL rather than jump
		:setWarpSpeed(1000.00)
		:setRotationMaxSpeed(25)
		:setImpulseMaxSpeed(0)
		:setShields(50):setShieldsMax(50)
		:setHull(50):setHullMax(50):
		setTypeName("Raven")
	setBeamColor(raven)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local raven_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Raven")
	if raven_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
		if frigate_db == nil then
			polaris_db:addEntry("Frigate")
			frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
			frigate_db:setLongDescription("Frigates are one size up from starfighters. They require a crew from 3 to 20 people.\nThink, Firefly, millennium falcon, slave I (Boba fett's ship).\n\nThey generally have 2 or more shield sections, but hardly ever more than 4.\n\nThis class of ships is normally not fitted with jump or warp drives. But in some cases ships are modified to include these, or for certain roles it is built in.\n\nThey are divided in 3 different sub-classes:\n* Cruiser: Weaponized frigates, focused on combat. These come in various roles.\n* Light transport: Small transports, like transporting up to 50 soldiers in spartan conditions or a few diplomats in luxury. Depending on the role it can have some weaponry.\n* Support: Support types come in many varieties. They are simply a frigate hull fitted with whatever was needed. Anything from mine-layers to science vessels.")
		end
		frigate_db:addEntry("Raven")
		raven_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Raven")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Gunship"),	--base ship database entry
			raven_db,		--modified ship database entry
			raven,			--ship just created, long description on the next line
			"The Raven is a Gunship that's been given 'warp wings' in exchange for their missiles. Compared to its Gunship origins, the Raven has longer but weaker beams. It's nimble, but its impulse engines are gone, so it can't chase you in combat. It's shields have been reduced to a single arc and it had to lose some structural protection in order to fly.",
			nil,
			nil,
			"battleship_destroyer_4_upgraded"
		)
	end
	return raven
end
function carolStage5()
	-- shieldless starhammer like
	local golden_chime = CpuShip():
		setTemplate("Starhammer II"):
		setShieldsMax(0):setShields(0):
		setHullMax(1000):setHull(200):
		setWeaponStorageMax("HVLI", 7):setWeaponStorage("HVLI", 7):
		setTypeName("Golden Chime")-- the difference between max and hull is so beams dont break systems quickly
		-- this becomes an alarmingly tanky ship if it ever gets to dock somewhere it can regen hull
	setBeamColor(golden_chime)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local golden_chime_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Golden Chime")
	if golden_chime_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
		if corvette_db == nil then
			polaris_db:addEntry("Corvette")
			corvette_db = queryScienceDatabase("Ships","Polaris Incident","Corvette")
			corvette_db:setLongDescription("Corvettes are the common large ships. Larger then a frigate, smaller then a dreadnaught.\nThey generally have 4 or more shield sections. Run with a crew of 20 to 250.\nThis class generally has jumpdrives or warpdrives. But lack the maneuverability that is seen in frigates.\n\nThey come in 3 different subclasses:\n* Destroyer: Combat oriented ships. No science, no transport. Just death in a large package.\n* Support: Large scale support roles. Drone carriers fall in this category, as well as mobile repair centers.\n* Freighter: Large scale transport ships. Most common here are the jump freighters, using specialized jumpdrives to cross large distances with large amounts of cargo.")
		end
		corvette_db:addEntry("Golden Chime")
		golden_chime_db = queryScienceDatabase("Ships","Polaris Incident","Corvette","Golden Chime")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Starhammer II"),	--base ship database entry
			golden_chime_db,		--modified ship database entry
			golden_chime,			--ship just created, long description on the next line
			"The Golden Chime seems to have come from the same assembly line as the Starhammer II. It's got five times the armor of a Starhammer II, but there seems to be a big hole in the armor making it comparable to a Starhammer II. If this ship ever docks up to get its hull repaired, beware. No shields for this baby. Its HVLI capacity has been severly limited.",
			{
				{key = "Tube 0", value = "10 sec / Homing, EMP, HVLI"},	--torpedo tube direction and load speed
				{key = " Tube 0", value = "10 sec / Homing, HVLI"},	--torpedo tube direction and load speed
			},
			nil,
			"battleship_destroyer_4_upgraded"
		)
	end
	return golden_chime
end
function carolStage6()
	-- tbh this one is kind of bland, just an adder with a small homing payload
	local starspawn = CpuShip():
		setTemplate("Adder MK8"):
		setRotationMaxSpeed(20):
		setWeaponTubeCount(2):
		setWeaponTubeDirection(0, -35):setTubeSize(0,"small"):setTubeLoadTime(0,10):
		setWeaponTubeDirection(0, 35):setTubeSize(1,"small"):setTubeLoadTime(1,10):
		setWeaponStorageMax("Homing", 6):setWeaponStorage("Homing", 6):
		setWeaponStorageMax("HVLI", 0):setWeaponStorage("HVLI", 0):
		setTypeName("Starspawn")
	setBeamColor(starspawn)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local starspawn_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Starspawn")
	if starspawn_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
		if fighter_db == nil then
			polaris_db:addEntry("Starfighter")
			fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
			fighter_db:setLongDescription("Starfighters are single to 3 person small ships. These are most commonly used as light firepower roles.\nThey are common in larger groups, and need a close by station or support ship, as they lack long time life support.\nIt's rare to see starfighters with more then one shield section.\n\nOne of the most well known starfighters is the X-Wing.\n\nStarfighters come in 3 subclasses:\n* Interceptors: Fast, low on firepower, high on manouverability\n* Gunship: Equipped with more weapons, but trades in manouverability because of it.\n* Bomber: Slowest of all starfighters, but pack a large punch in a small package. Usually come without any lasers, but the largers bombers have been known to deliver nukes.")
		end
		fighter_db:addEntry("Starspawn")
		starspawn_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Starspawn")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK8"),	--base ship database entry
			starspawn_db,		--modified ship database entry
			starspawn,			--ship just created, long description on the next line
			"Starspawn comes from an Adder MK8. Two faster angled weapons tubes instead of a centered one. Six homing missiles instead of HVLIs. Slower maneuverability.",
			{
				{key = "Tube -35", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Tube 35", value = "10 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"AdlerLongRangeScoutGreen"
		)
	end
	return starspawn
end
function carolStage7()
	-- HVLI missile tubes in every direction
	local cygnus = CpuShip():setTemplate("Missile Cruiser"):setWeaponTubeCount(16):
		setWeaponTubeDirection(0,     0):setTubeSize(0, "small"):setTubeLoadTime(0, 10):
		setWeaponTubeDirection(1,  22.5):setTubeSize(1, "small"):setTubeLoadTime(1, 10):
		setWeaponTubeDirection(2,    45):setTubeSize(2, "small"):setTubeLoadTime(2, 10):
		setWeaponTubeDirection(3,  67.5):setTubeSize(3, "small"):setTubeLoadTime(3, 10):
		setWeaponTubeDirection(4,    90):setTubeSize(4, "small"):setTubeLoadTime(4, 10):
		setWeaponTubeDirection(5, 112.5):setTubeSize(5, "small"):setTubeLoadTime(5, 10):
		setWeaponTubeDirection(6,   135):setTubeSize(6, "small"):setTubeLoadTime(6, 10):
		setWeaponTubeDirection(7, 157.5):setTubeSize(7, "small"):setTubeLoadTime(7, 10):
		setWeaponTubeDirection(8,   180):setTubeSize(8, "small"):setTubeLoadTime(8, 10):
		setWeaponTubeDirection(9, 202.5):setTubeSize(9, "small"):setTubeLoadTime(9, 10):
		setWeaponTubeDirection(10,  225):setTubeSize(10,"small"):setTubeLoadTime(10,10):
		setWeaponTubeDirection(11,247.5):setTubeSize(11,"small"):setTubeLoadTime(11,10):
		setWeaponTubeDirection(12,  270):setTubeSize(12,"small"):setTubeLoadTime(12,10):
		setWeaponTubeDirection(13,292.5):setTubeSize(13,"small"):setTubeLoadTime(13,10):
		setWeaponTubeDirection(14,  315):setTubeSize(14,"small"):setTubeLoadTime(14,10):
		setWeaponTubeDirection(15,337.5):setTubeSize(15,"small"):setTubeLoadTime(15,10):
		setWeaponStorageMax("Homing", 0):setWeaponStorage("Homing", 0):
		setWeaponStorageMax("HVLI", 200):setWeaponStorage("HVLI", 200):setAI("missilevolley"):
		setTypeName("Cygnus")
	setBeamColor(cygnus)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local cygnus_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Cygnus")
	if cygnus_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
		if frigate_db == nil then
			polaris_db:addEntry("Frigate")
			frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
			frigate_db:setLongDescription("Frigates are one size up from starfighters. They require a crew from 3 to 20 people.\nThink, Firefly, millennium falcon, slave I (Boba fett's ship).\n\nThey generally have 2 or more shield sections, but hardly ever more than 4.\n\nThis class of ships is normally not fitted with jump or warp drives. But in some cases ships are modified to include these, or for certain roles it is built in.\n\nThey are divided in 3 different sub-classes:\n* Cruiser: Weaponized frigates, focused on combat. These come in various roles.\n* Light transport: Small transports, like transporting up to 50 soldiers in spartan conditions or a few diplomats in luxury. Depending on the role it can have some weaponry.\n* Support: Support types come in many varieties. They are simply a frigate hull fitted with whatever was needed. Anything from mine-layers to science vessels.")
		end
		frigate_db:addEntry("Cygnus")
		cygnus_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Cygnus")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Missile Cruiser"),	--base ship database entry
			cygnus_db,		--modified ship database entry
			cygnus,			--ship just created, long description on the next line
			"Cygnus looks like the classic missile cruiser with missile tubes poked into it like a pincushion. The tubes are spaced equidistant around the ship. There are plenty of HVLIs to go around for any approaching ships.",
			{
				{key = "Small Tube 0", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 22.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 45", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 67.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 90", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 112.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 135", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 157.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 180", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 202.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 225", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 247.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 270", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 292.5", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 315", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 337.5", value = "10 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"space_cruiser_4"
		)
	end
	return cygnus
end
function carolStage8()
	-- rear beamed fighter
	local shield_maiden = CpuShip():
		setTemplate("MU52 Hornet"):
		setTypeName("Shield Maiden"):
		setShieldsMax(20,20,20,20,20,20,20,20):
		setShields(20,20,20,20,20,20,20,20):
		setBeamWeapon(0, 5, 0, 1, 20, 1):
		setBeamWeapon(1, 5, 180, 2500, 4, 1):setBeamWeaponTurret(1, 90, 180, .3) -- AI needs a beam at the front to behave as expected
	setBeamColor(shield_maiden)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local shield_maiden_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Shield Maiden")
	if shield_maiden_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
		if fighter_db == nil then
			polaris_db:addEntry("Starfighter")
			fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
			fighter_db:setLongDescription("Starfighters are single to 3 person small ships. These are most commonly used as light firepower roles.\nThey are common in larger groups, and need a close by station or support ship, as they lack long time life support.\nIt's rare to see starfighters with more then one shield section.\n\nOne of the most well known starfighters is the X-Wing.\n\nStarfighters come in 3 subclasses:\n* Interceptors: Fast, low on firepower, high on manouverability\n* Gunship: Equipped with more weapons, but trades in manouverability because of it.\n* Bomber: Slowest of all starfighters, but pack a large punch in a small package. Usually come without any lasers, but the largers bombers have been known to deliver nukes.")
		end
		fighter_db:addEntry("Shield Maiden")
		shield_maiden_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Shield Maiden")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MU52 Hornet"),	--base ship database entry
			shield_maiden_db,		--modified ship database entry
			shield_maiden,			--ship just created, long description on the next line
			"The Shield Maiden sort of looks like a MU52 Hornet, but it's been upgraded with eight shield arcs. The designers also added a fast, weak rear facing turret.",
			nil,
			nil,
			"WespeScoutYellow"
		)
	end
	return shield_maiden
end
function carolStage9()
-- missilevolley with beams
	local trance_queen = CpuShip():
		setTemplate("Ktlitan Queen"):
		setWeaponTubeCount(0):
		setBeamWeapon(0, 30, -90, 3000, 4.0, 8.0):
		setImpulseMaxSpeed(180):
		setRotationMaxSpeed(7):
		setBeamWeapon(1, 30, 90, 3000, 4.0, 8.0):
		setAI("missilevolley"):
		setHull(50):setHullMax(50):
		setShields(40,40,40,40):setShieldsMax(40,40,40,40):
		setTypeName("Trance Queen")
	setBeamColor(trance_queen)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local trance_queen_db = queryScienceDatabase("Ships","Polaris Incident","No Class","Trance Queen")
	if trance_queen_db == nil then
		local no_class_db = queryScienceDatabase("Ships","Polaris Incident","No Class")
		if no_class_db == nil then
			polaris_db:addEntry("No Class")
			no_class_db = queryScienceDatabase("Ships","Polaris Incident","No Class")
			no_class_db:setLongDescription("These ships do not easily fit into existing ship classes.")
		end
		no_class_db:addEntry("Trance Queen")
		trance_queen_db = queryScienceDatabase("Ships","Polaris Incident","No Class","Trance Queen")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Queen"),	--base ship database entry
			trance_queen_db,		--modified ship database entry
			trance_queen,			--ship just created, long description on the next line
			"The Trance Queen takes its design cues from the Ktlitan Queen. However, the missiles have been removed in favor of broadside beams, a high powered impulse engine has been installed, and the hull and shields have been weakened.",
			nil,
			nil,
			"sci_fi_alien_ship_8"
		)
	end
	return trance_queen
end
function carolStage10()
	-- emp bomber
	local starlord = CpuShip():
		setTemplate("MT52 Hornet"):
		setWeaponTubeCount(1):
		setTypeName("Starlord"):
		setTubeSize(0,"small"):setTubeLoadTime(0,15):
		setWeaponStorageMax("EMP", 5):setWeaponStorage("EMP", 5):
		setWeaponStorageMax("Homing",20):setWeaponStorage("Homing",20):
		setBeamWeapon(0, 30, 0, 0, 0, 0)
	setBeamColor(starlord)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local starlord_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Starlord")
	if starlord_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
		if fighter_db == nil then
			polaris_db:addEntry("Starfighter")
			fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
			fighter_db:setLongDescription("Starfighters are single to 3 person small ships. These are most commonly used as light firepower roles.\nThey are common in larger groups, and need a close by station or support ship, as they lack long time life support.\nIt's rare to see starfighters with more then one shield section.\n\nOne of the most well known starfighters is the X-Wing.\n\nStarfighters come in 3 subclasses:\n* Interceptors: Fast, low on firepower, high on manouverability\n* Gunship: Equipped with more weapons, but trades in manouverability because of it.\n* Bomber: Slowest of all starfighters, but pack a large punch in a small package. Usually come without any lasers, but the largers bombers have been known to deliver nukes.")
		end
		fighter_db:addEntry("Starlord")
		starlord_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Starlord")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MT52 Hornet"),	--base ship database entry
			starlord_db,		--modified ship database entry
			starlord,			--ship just created, long description on the next line
			"Starlord vaguely resembles a MT52 Hornet where the beams have been swapped out for a missile tube. It shoots EMPs and homing missiles.",
			{
				{key = "Small Tube 0", value = "15 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"WespeScoutYellow"
		)
	end
	return starlord
end
function carolStage11()
	-- storm but charges in
	local warcry = CpuShip():
		setTemplate("Storm"):
		setAI("default"):
		setWeaponStorageMax("Homing",0):setWeaponStorage("Homing",0):
		setWeaponStorageMax("HVLI",30):setWeaponStorage("HVLI",30):
		setWeaponTubeDirection(0,  -5):setTubeSize(0,"small"):setTubeLoadTime(0,7.5):
		setWeaponTubeDirection(1,-2.5):setTubeSize(1,"small"):setTubeLoadTime(1,7.5):
		setWeaponTubeDirection(2,   0):setTubeSize(2,"small"):setTubeLoadTime(2,7.5):
		setWeaponTubeDirection(3, 2.5):setTubeSize(3,"small"):setTubeLoadTime(3,7.5):
		setWeaponTubeDirection(4,   5):setTubeSize(4,"small"):setTubeLoadTime(4,7.5):
		setBeamWeapon(0, 5, 0, 1250, 3.0, 2.0):setBeamWeaponTurret(0, 90, 0, 0.25):
		setShields(75):setShieldsMax(75):
		setImpulseMaxSpeed(60):
		setTypeName("Warcry")
	setBeamColor(warcry)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local warcry_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Warcry")
	if warcry_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
		if frigate_db == nil then
			polaris_db:addEntry("Frigate")
			frigate_db = queryScienceDatabase("Ships","Polaris Incident","Frigate")
			frigate_db:setLongDescription("Frigates are one size up from starfighters. They require a crew from 3 to 20 people.\nThink, Firefly, millennium falcon, slave I (Boba fett's ship).\n\nThey generally have 2 or more shield sections, but hardly ever more than 4.\n\nThis class of ships is normally not fitted with jump or warp drives. But in some cases ships are modified to include these, or for certain roles it is built in.\n\nThey are divided in 3 different sub-classes:\n* Cruiser: Weaponized frigates, focused on combat. These come in various roles.\n* Light transport: Small transports, like transporting up to 50 soldiers in spartan conditions or a few diplomats in luxury. Depending on the role it can have some weaponry.\n* Support: Support types come in many varieties. They are simply a frigate hull fitted with whatever was needed. Anything from mine-layers to science vessels.")
		end
		frigate_db:addEntry("Warcry")
		warcry_db = queryScienceDatabase("Ships","Polaris Incident","Frigate","Warcry")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Storm"),	--base ship database entry
			warcry_db,		--modified ship database entry
			warcry,			--ship just created, long description on the next line
			"Warcry mimics a Storm. There are differences:\nThe tubes are smaller and faster and only shoot HVLIs\nA turret replaced the standard beam\nThe shields have been strengthened\nThe impulse engine is faster\nThe pilots they've been putting on this ship tend to come at you head on",
			{
				{key = "Small Tube -5", value = "7.5 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube -2.5", value = "7.5 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 0", value = "7.5 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 2.5", value = "7.5 sec"},	--torpedo tube direction and load speed
				{key = "Small Tube 5", value = "7.5 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"HeavyCorvetteYellow"
		)
	end
	return warcry
end
function carolStage12()
	-- fast fighter
	local crescendo = CpuShip():
		setTemplate("MT52 Hornet"):
		setImpulseMaxSpeed(350):
		setRotationMaxSpeed(10):
		setShieldsMax(10):
		setShields(10):
		setBeamWeapon(0, 20, 0, 800, 8, 6):
		setTypeName("Crescendo")
	setBeamColor(crescendo)
	local polaris_db = queryScienceDatabase("Ships","Polaris Incident")
	if polaris_db == nil then
		polaris_db = establishPolarisDatabase()
	end
	local crescendo_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Crescendo")
	if crescendo_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
		if fighter_db == nil then
			polaris_db:addEntry("Starfighter")
			fighter_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter")
			fighter_db:setLongDescription("Starfighters are single to 3 person small ships. These are most commonly used as light firepower roles.\nThey are common in larger groups, and need a close by station or support ship, as they lack long time life support.\nIt's rare to see starfighters with more then one shield section.\n\nOne of the most well known starfighters is the X-Wing.\n\nStarfighters come in 3 subclasses:\n* Interceptors: Fast, low on firepower, high on manouverability\n* Gunship: Equipped with more weapons, but trades in manouverability because of it.\n* Bomber: Slowest of all starfighters, but pack a large punch in a small package. Usually come without any lasers, but the largers bombers have been known to deliver nukes.")
		end
		fighter_db:addEntry("Crescendo")
		crescendo_db = queryScienceDatabase("Ships","Polaris Incident","Starfighter","Crescendo")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MT52 Hornet"),	--base ship database entry
			crescendo_db,		--modified ship database entry
			crescendo,			--ship just created, long description on the next line
			"The Crescendo started off as a MT52 Hornet. They put in an extremely fast impulse engine. It's so fast, it gives some warp engines a run for their money. However, the shield strength was chopped in half. They also beefed up the beam strength.",
			nil,
			nil,
			"WespeScoutYellow"
		)
	end
	return crescendo
end
function carolSpawnSingle(stage,faction)
	assert(type(stage)=="number",string.format("function carolSpawnSingle expected a number for the first argument, 'stage,' but got a %s instead",type(stage)))
	assert(stage > 0 and stage <= 12,string.format("the first argument of carolSpawnSingle, 'stage,' must be between 1 and 12 inclusive. %s is invalid",stage))
	local spawnFun={
		carolStage1,	
		carolStage2,
		carolStage3,
		carolStage4,
		carolStage5,
		carolStage6,
		carolStage7,
		carolStage8,
		carolStage9,
		carolStage10,
		carolStage11,
		carolStage12}
	return spawnFun[stage](spawnFun)
end
function addChristmasArtifact(waypoints)
	if #waypoints > 3 then
		-- yuk yuk this probably should be reworked properly, but it works for this for now
		local update_data = {
			update = function (self, obj, delta)
				local desiredDelta=self.desiredSpeed*delta
				for i=0,10000 do
					self.current=self.current+self.tickSize
					if self.current+2>=#self.waypoints then
						obj:destroy()
						return
					end
					local px,py=obj:getPosition()
					local x,y=extraMath.CubicInterpolate2DTable(self.waypoints,self.current)
					if distance(px,py,x,y)>desiredDelta then
						obj:setPosition(x,y)
						return
					end
				end
			end,
			current = 1,
			desiredSpeed=500,
			tickSize=0.000001,
			waypoints = waypoints
		}
			local texts={
				"Threats to stop nightime life suppport and return the station to silence",	--silent night
				"Religious text containing allusions to Satan's Claws",	
				"Claims omnipresent observation, regardless of state of consciousness or moral state", --Santa claus is coming to town
				"Audio message of numerous voices chanting ritualistically together",	--caroling
				"Broken message threatening to slay the residents of the station",	--
				"Message containing a threat to deck both crewman Hall and engineer Holly",	--Deck the halls
				"Discussions about precious metal fashioned into cylindrical devices tuned to harmonious frequencies",	--silver bells
				"The sound of cacaphonous striking of bulkheads by a small boy",	--little drummer boy
				"A quest for a supernova by three highly ranked CUF officers",	--we three kings
				"Monitor communications from supernatural public relations representatives",	--hark the herald angels
				"Stealthily observe maternal unit interacting with aged seasonal magician",	--I saw mommy kissing Santa Clause
				"Constrain desire for dentition reconstruction",	--All I want for Christmas is my two front teeth
				"Matriarch devastated by encounter with lone horned beast with questionable flight qualities",	--grandma got run over by a reindeer
				"Benign ruler inspects large food cargo set out for consumption",	--good king wenceslas
				"Sleep induced on males with sunny dispositions",	--god rest ye merry gentlemen
				"I have the decapitated beast's head with sundry herbs and spices",	--the boar's head carol
			}
			local art=Artifact():setDescription(texts[irandom(1,#texts)])
		update_system:addUpdate(art,"xmas waypoints",update_data)
	end
end
function christmasArtifact()
	local xmasWaypoints={}
	clearGMFunctions()
	onGMClick(function (x,y)
		if #xmasWaypoints == 0 then
			table.insert(xmasWaypoints,{x=x,y=y})
		end
		table.insert(xmasWaypoints,{x=x,y=y})
	end)
	addGMFunction("done",function ()
		table.insert(xmasWaypoints,xmasWaypoints[#xmasWaypoints])
		addChristmasArtifact(xmasWaypoints)
		onGMClick(nil)
		customButtons()
	end)
end
-- consider single scanning ships
function carolStage(stage)
	-- this wants to be merged with subspace rift
	local x=722333
	local y=88284
	local all_objs = {}
	local number_in_ring = stage*4
	local clockwise_objs=createObjectCircle{number = number_in_ring}
	for i=#clockwise_objs,1,-1 do
		createOrbitingObject(clockwise_objs[i],i*(360/number_in_ring),10*stage,x,y,0)
		table.insert(all_objs,clockwise_objs[i])
	end
	local counterclockwise_objs=createObjectCircle{number = number_in_ring}
	for i=#counterclockwise_objs,1,-1 do
		createOrbitingObject(counterclockwise_objs[i],i*(360/number_in_ring),-10*stage,x,y,0)
		table.insert(all_objs,counterclockwise_objs[i])
	end
	local update_data = {
		all_objs = all_objs,
		current_radius = 0,
		state = "expanding",
		yet_to_spawn = stage,
		update = function (self, obj, delta)
			local christmas = {
				["red"] =		{r =	179,	g =	0,		b =	12},	
				["green"] =		{r =	0,		g =	179,	b =	44},	
				["gold"] =		{r =	255,	g =	215,	b =	0},		
				["purple"] =	{r =	148,	g =	0,		b =	211},	
			}
			local distributed = {
				"red",
				"green",
				"purple",
				"green",
				"red",
				"gold",
				"red",
				"green",
				"purple",
				"green",
				"red",
				"gold",
			}
			local size_per_stage=250
			local max_radius = stage*size_per_stage
			if self.state == "expanding" then
				local max_time = stage*5
				self.current_radius = self.current_radius+delta*(max_radius/max_time)
				if self.current_radius >= max_radius then
					self.state = "compressing"
				end
			end
			if self.state=="compressing" then
				local max_time = stage*1
				self.current_radius = self.current_radius-delta*(max_radius/max_time)
				for i=12,1,-1 do
					if i<=self.yet_to_spawn and self.current_radius < size_per_stage*i then
						createObjectCircle{x = x, y = y, number = i, radius = size_per_stage * i-0.5, start_angle = random(0,360), callback=function() return carolSpawnSingle(i,"Human Navy"):orderRoaming():setFaction("Kraylor") end}
						self.yet_to_spawn = i - 1
						local start_angle=random(0,360)
						for j=1,i*4 do
							local angle=start_angle+((360)/(i*4)*j)
							local sx,sy=vectorFromAngle(angle,size_per_stage*i)
							local dx,dy=vectorFromAngle(angle,1)
							local index = j%12
							if index == 0 then
								index = 12
							end
							local color = distributed[index]
							local r = christmas[color].r
							local g = christmas[color].g
							local b = christmas[color].b
							local art=Artifact():setPosition(x+sx,y+sy):setRadarTraceColor(r,g,b)
--						end
--						local tmp=createObjectCircle{number = i * 4, radius = size_per_stage * i, start_angle = random(0,360), x=x, y=y}
--						for j=#tmp,1,-1 do
--							tmp[j]:setCallSign(i) -- expand out?
--							local dx,dy=vectorFromAngleNorth
							update_system:addTimeToLiveUpdate(art,10)
							update_system:addLinear(art,dx,dy,200)
						end
					end
				end
				if self.current_radius < 0 then
					obj:destroy()
					destroyEEtable(all_objs)
				end
			end
			-- ***techincally*** this is probably wrong - the position of the orbit of the objects is based
			-- on the previous update, who cares though, but consider this a warning if reusing this code somewhere that matters
			for i=#all_objs,1,-1 do
				update_system:getUpdateNamed(all_objs[i],"orbit").distance = self.current_radius
			end
			local objs = getObjectsInRadius(x,y,self.current_radius)
			for i=#objs,1,-1 do
				if isObjectType(objs[i],"PlayerSpaceship") then
					local player_x,player_y = objs[i]:getPosition()
					local angle = (math.atan2(x-player_x,y-player_y)/math.pi*180)+90
					setCirclePos(objs[i],x,y,-angle,self.current_radius)
				end
			end
		end
	}
	update_system:addUpdate(newPhonySpaceObject(),"carol",update_data)
end
function santaContainment()
	santaContainmentRegion = {}
	local station1 = SpaceStation():setTemplate("Large Station"):setFaction("Human Navy"):setPosition(754655, 62391):setCallSign("Polaris"):setDescription("Research base for extra dimensional threat 8"):setCommsFunction(commsStation)
	table.insert(santaContainmentRegion,station1)
	station1:setShortRangeRadarRange(20000)
    station1.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 15,					EMP = 10 },
        weapon_available = 	{Homing = true,HVLI = true,		Mine = true,		Nuke = true,			EMP = true},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK5",
			DF7 = "Adder MK5",
			DF8 = "Adder MK5",
    	},
	}

	--stocking
    table.insert(santaContainmentRegion,Nebula():setPosition(684797, 117999))
    table.insert(santaContainmentRegion,Nebula():setPosition(682587, 112910))
    table.insert(santaContainmentRegion,Nebula():setPosition(682922, 116124))
    table.insert(santaContainmentRegion,Nebula():setPosition(687944, 121883))
    table.insert(santaContainmentRegion,Nebula():setPosition(685935, 110567))
    table.insert(santaContainmentRegion,Nebula():setPosition(689350, 108491))
    table.insert(santaContainmentRegion,Nebula():setPosition(695778, 118535))
    table.insert(santaContainmentRegion,Nebula():setPosition(692899, 113245))
    table.insert(santaContainmentRegion,Nebula():setPosition(689685, 126369))
    table.insert(santaContainmentRegion,Nebula():setPosition(694171, 135609))
    table.insert(santaContainmentRegion,Nebula():setPosition(683458, 136212))
    table.insert(santaContainmentRegion,Nebula():setPosition(686002, 132261))
    table.insert(santaContainmentRegion,Nebula():setPosition(698657, 124159))
    table.insert(santaContainmentRegion,Nebula():setPosition(688948, 140765))
    table.insert(santaContainmentRegion,Nebula():setPosition(698390, 130319))
    local stocking=SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("stocking"):setPosition(682370, 144143):setCommsFunction(commsStation)
	table.insert(santaContainmentRegion,stocking)
	stocking.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = 1,				Mine = math.random(2,4),Nuke = 15,					EMP = 10 },
        weapon_available = 	{Homing = true,HVLI = true,		Mine = true,		Nuke = true,			EMP = true},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = 10,		cost = 1},
        			medicine =	{quantity = 10,		cost = 5}	},
        trade = {	food = false, medicine = false, luxury = false },
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Adder MK5",
			DF7 = "Adder MK5",
			DF8 = "Adder MK5",
    	},
	}

    local b1=BlackHole()
    table.insert(santaContainmentRegion,b1)
    local b2=BlackHole():setPosition(659200, 133568)
    table.insert(santaContainmentRegion,b2)
	update_system:addOrbitTargetUpdate(b1,b2,11000,180)
-- snowman
    table.insert(santaContainmentRegion,Nebula():setPosition(675511, 65243))
    table.insert(santaContainmentRegion,Nebula():setPosition(671010, 69519))
    table.insert(santaContainmentRegion,Nebula():setPosition(673110, 75220))
    table.insert(santaContainmentRegion,Nebula():setPosition(689764, 63142))
    table.insert(santaContainmentRegion,Nebula():setPosition(682188, 62542))
    table.insert(santaContainmentRegion,Nebula():setPosition(684363, 71319))
    table.insert(santaContainmentRegion,Nebula():setPosition(678737, 74545))
    table.insert(santaContainmentRegion,Nebula():setPosition(686839, 79346))
    table.insert(santaContainmentRegion,Nebula():setPosition(689222, 52434))
    table.insert(santaContainmentRegion,Nebula():setPosition(678457, 56620))
    table.insert(santaContainmentRegion,Nebula():setPosition(693290, 74995))
    table.insert(santaContainmentRegion,Nebula():setPosition(692765, 67868))
    table.insert(santaContainmentRegion,Nebula():setPosition(678287, 80171))
    table.insert(santaContainmentRegion,Nebula():setPosition(687946, 49045))
    table.insert(santaContainmentRegion,Nebula():setPosition(686870, 55982))
    table.insert(santaContainmentRegion,Nebula():setPosition(683042, 54786))
    table.insert(santaContainmentRegion,Nebula():setPosition(676663, 51836))
    table.insert(santaContainmentRegion,Nebula():setPosition(679175, 49244))
    table.insert(santaContainmentRegion,Nebula():setPosition(684119, 48168))
    table.insert(santaContainmentRegion,Nebula():setPosition(681129, 41430))
    table.insert(santaContainmentRegion,Nebula():setPosition(679773, 36606))
    table.insert(santaContainmentRegion,Nebula():setPosition(683361, 35490))
    table.insert(santaContainmentRegion,Nebula():setPosition(686551, 40434))


--candy cane nebula
    table.insert(santaContainmentRegion,Nebula():setPosition(741154, 111647))
    table.insert(santaContainmentRegion,Nebula():setPosition(746369, 107069))
    table.insert(santaContainmentRegion,Nebula():setPosition(753613, 104230))
    table.insert(santaContainmentRegion,Nebula():setPosition(766825, 121672))
    table.insert(santaContainmentRegion,Nebula():setPosition(766825, 116573))
    table.insert(santaContainmentRegion,Nebula():setPosition(766477, 110894))
    table.insert(santaContainmentRegion,Nebula():setPosition(762653, 105910))
    table.insert(santaContainmentRegion,Nebula():setPosition(766303, 127351))
    table.insert(santaContainmentRegion,Nebula():setPosition(765840, 132972))
    table.insert(santaContainmentRegion,Nebula():setPosition(765724, 139230))
    table.insert(santaContainmentRegion,Nebula():setPosition(765028, 144851))
    table.insert(santaContainmentRegion,Nebula():setPosition(765434, 150820))

--	christmas tree
    table.insert(santaContainmentRegion,Asteroid():setPosition(753202, 47301))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752202, 47339))
    table.insert(santaContainmentRegion,Mine():setPosition(751180, 47831))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752989, 48612))
    table.insert(santaContainmentRegion,Mine():setPosition(752379, 47814))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750702, 47395))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751202, 47376))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752702, 47320))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751702, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752130, 49124))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752559, 48868))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751272, 49636))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751700, 49380))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750842, 49893))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750412, 50149))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751196, 45694))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751612, 45416))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752859, 44584))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752028, 45139))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752444, 44862))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750364, 46248))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750779, 45971))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749218, 53079))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748718, 53088))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750218, 53062))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750718, 53054))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749718, 53071))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751218, 53045))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748694, 51173))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748266, 51429))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749984, 50405))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749554, 50661))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749124, 50917))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753218, 53012))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752718, 53020))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753418, 48356))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752218, 53029))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751718, 53037))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749204, 47452))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748699, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748704, 47471))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749532, 46803))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749116, 47080))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749948, 46526))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750204, 47414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749704, 47433))
    table.insert(santaContainmentRegion,Mine():setPosition(749980, 47848))
    table.insert(santaContainmentRegion,Mine():setPosition(748780, 47865))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751668, 59295))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751168, 59291))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750168, 59282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750668, 59286))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748168, 59264))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748668, 59268))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749668, 59277))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749168, 59273))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752168, 59300))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753168, 59309))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752668, 59304))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752419, 54473))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751984, 54718))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753292, 53982))
    table.insert(santaContainmentRegion,Asteroid():setPosition(752856, 54227))
    table.insert(santaContainmentRegion,Mine():setPosition(750774, 53506))
    table.insert(santaContainmentRegion,Mine():setPosition(751974, 53501))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750676, 55453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751548, 54963))
    table.insert(santaContainmentRegion,Asteroid():setPosition(751112, 55208))
    table.insert(santaContainmentRegion,Asteroid():setPosition(750242, 55698))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749806, 55943))
    table.insert(santaContainmentRegion,Asteroid():setPosition(749369, 56188))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748934, 56434))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748062, 56924))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748498, 56679))
    table.insert(santaContainmentRegion,Mine():setPosition(748374, 53514))
    table.insert(santaContainmentRegion,Mine():setPosition(749574, 53510))
    table.insert(santaContainmentRegion,Asteroid():setPosition(748218, 53096))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746548, 52453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746118, 52709))
    table.insert(santaContainmentRegion,Mine():setPosition(747174, 53518))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746719, 53122))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747219, 53113))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745688, 52965))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745719, 53138))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746219, 53130))
    table.insert(santaContainmentRegion,Mine():setPosition(745974, 53522))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747406, 51941))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747836, 51685))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746976, 52197))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747718, 53105))
    table.insert(santaContainmentRegion,Asteroid():setPosition(744576, 58885))
    table.insert(santaContainmentRegion,Asteroid():setPosition(744668, 59233))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745168, 59237))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745012, 58640))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745448, 58395))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747190, 57414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747626, 57169))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746754, 57659))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746318, 57904))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745884, 58150))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746668, 59250))
    table.insert(santaContainmentRegion,Asteroid():setPosition(746168, 59246))
    table.insert(santaContainmentRegion,Asteroid():setPosition(745668, 59242))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747168, 59255))
    table.insert(santaContainmentRegion,Asteroid():setPosition(747668, 59259))
    table.insert(santaContainmentRegion,Mine():setPosition(748029, 59973))
    table.insert(santaContainmentRegion,Mine():setPosition(749229, 59994))
    table.insert(santaContainmentRegion,Mine():setPosition(744430, 59910))
    table.insert(santaContainmentRegion,Mine():setPosition(745630, 59931))
    table.insert(santaContainmentRegion,Mine():setPosition(746830, 59952))
    table.insert(santaContainmentRegion,Mine():setPosition(752829, 60056))
    table.insert(santaContainmentRegion,Mine():setPosition(750429, 60015))
    table.insert(santaContainmentRegion,Mine():setPosition(751629, 60035))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760842, 53088))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760842, 53088))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759842, 53071))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759842, 53071))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760342, 53079))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760342, 53079))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761342, 53096))
    table.insert(santaContainmentRegion,Mine():setPosition(761186, 53514))
    table.insert(santaContainmentRegion,Mine():setPosition(762386, 53518))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762584, 52197))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762584, 52197))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761342, 53096))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761842, 53105))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763014, 52453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761842, 53105))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762342, 53113))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762342, 53113))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762842, 53122))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762842, 53122))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762154, 51941))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762154, 51941))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761726, 51685))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761726, 51685))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761296, 51429))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761296, 51429))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761064, 56679))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761064, 56679))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761498, 56924))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761498, 56924))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760192, 56188))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760192, 56188))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760628, 56434))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760628, 56434))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763342, 53130))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763342, 53130))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763014, 52453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760866, 51173))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760866, 51173))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763442, 52709))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763442, 52709))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760436, 50917))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760436, 50917))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760008, 50661))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760008, 50661))
    table.insert(santaContainmentRegion,Mine():setPosition(759986, 53510))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759342, 53062))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759342, 53062))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759756, 55943))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759756, 55943))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759319, 55698))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759319, 55698))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758884, 55453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758884, 55453))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763242, 57904))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763242, 57904))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762806, 57659))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762806, 57659))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763678, 58150))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763678, 58150))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763392, 59246))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763392, 59246))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762894, 59250))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762894, 59250))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762394, 59255))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762394, 59255))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762370, 57414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(762370, 57414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761934, 57169))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761934, 57169))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759578, 50405))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759578, 50405))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758842, 53054))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759148, 50149))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759148, 50149))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760358, 47452))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760856, 47471))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760856, 47471))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760862, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760862, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759858, 47433))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760029, 46803))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760029, 46803))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760446, 47080))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760446, 47080))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759614, 46526))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759614, 46526))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759358, 47414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758858, 47395))
    table.insert(santaContainmentRegion,Mine():setPosition(759580, 47848))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760358, 47452))
    table.insert(santaContainmentRegion,Mine():setPosition(760780, 47865))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759358, 47414))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759858, 47433))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758858, 47395))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759198, 46248))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759198, 46248))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763842, 53138))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763842, 53138))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755342, 52995))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755342, 52995))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756342, 53012))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755842, 53003))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755842, 53003))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757842, 53037))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758342, 53045))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757842, 53037))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758342, 53045))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756842, 53020))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756342, 53012))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756842, 53020))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757342, 53029))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757342, 53029))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757002, 48868))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757002, 48868))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757430, 49124))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757430, 49124))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757860, 49380))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757860, 49380))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758289, 49636))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758289, 49636))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755284, 47844))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755360, 47263))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755360, 47263))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755860, 47282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755860, 47282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756359, 47301))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756859, 47320))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756859, 47320))
    table.insert(santaContainmentRegion,Mine():setPosition(757182, 47814))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758358, 47376))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757858, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757858, 47358))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757359, 47339))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757359, 47339))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755869, 44030))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755869, 44030))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756286, 44307))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756286, 44307))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755454, 43752))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755038, 43475))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757949, 45416))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757534, 45139))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757534, 45139))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756702, 44584))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756702, 44584))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757949, 45416))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757118, 44862))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757118, 44862))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755712, 48100))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755712, 48100))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756359, 47301))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755284, 47844))
    table.insert(santaContainmentRegion,Mine():setPosition(755982, 47797))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756142, 48356))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756142, 48356))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756572, 48612))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756572, 48612))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754699, 47244))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754862, 47244))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754862, 47244))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754854, 47588))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754854, 47588))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754200, 47263))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754962, 53247))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754844, 52986))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755398, 53492))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754894, 59322))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754218, 52995))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755834, 53737))
    table.insert(santaContainmentRegion,Mine():setPosition(753579, 47797))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754844, 52986))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754718, 52986))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753718, 53003))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756269, 53982))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756706, 54227))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754708, 47588))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754278, 47844))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753848, 48100))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753700, 47282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753276, 44307))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753692, 44030))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754108, 43752))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757142, 54473))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757576, 54718))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758012, 54963))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755454, 43752))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755038, 43475))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754524, 43475))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757894, 59295))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758358, 47376))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758366, 45694))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758366, 45694))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756894, 59304))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755394, 59318))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754894, 59322))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756706, 54227))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757142, 54473))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755894, 59313))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756394, 59309))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755894, 59313))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756894, 59304))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756394, 59309))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755394, 59318))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757394, 59300))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757394, 59300))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753728, 53737))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755834, 53737))
    table.insert(santaContainmentRegion,Asteroid():setPosition(756269, 53982))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754168, 59318))
    table.insert(santaContainmentRegion,Asteroid():setPosition(753668, 59313))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754668, 59322))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754164, 53492))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758012, 54963))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757576, 54718))
    table.insert(santaContainmentRegion,Asteroid():setPosition(757894, 59295))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760394, 59273))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754962, 53247))
    table.insert(santaContainmentRegion,Asteroid():setPosition(754598, 53247))
    table.insert(santaContainmentRegion,Asteroid():setPosition(755398, 53492))
    table.insert(santaContainmentRegion,Mine():setPosition(753174, 53497))
    table.insert(santaContainmentRegion,Mine():setPosition(756386, 53497))
    table.insert(santaContainmentRegion,Mine():setPosition(757586, 53501))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760394, 59273))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759394, 59282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759894, 59277))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760894, 59268))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761894, 59259))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758448, 55208))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758448, 55208))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758394, 59291))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758394, 59291))
    table.insert(santaContainmentRegion,Asteroid():setPosition(760894, 59268))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758894, 59286))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759894, 59277))
    table.insert(santaContainmentRegion,Asteroid():setPosition(759394, 59282))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758894, 59286))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761394, 59264))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761394, 59264))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763872, 52965))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763872, 52965))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758842, 53054))
    table.insert(santaContainmentRegion,Mine():setPosition(758786, 53506))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758718, 49893))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758718, 49893))
    table.insert(santaContainmentRegion,Mine():setPosition(758380, 47831))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764392, 59237))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764892, 59233))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764892, 59233))
    table.insert(santaContainmentRegion,Asteroid():setPosition(765392, 59228))
    table.insert(santaContainmentRegion,Asteroid():setPosition(765422, 59130))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764986, 58885))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764986, 58885))
    table.insert(santaContainmentRegion,Asteroid():setPosition(761894, 59259))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758782, 45971))
    table.insert(santaContainmentRegion,Asteroid():setPosition(758782, 45971))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764114, 58395))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764114, 58395))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764549, 58640))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763892, 59242))
    table.insert(santaContainmentRegion,Asteroid():setPosition(763892, 59242))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764392, 59237))
    table.insert(santaContainmentRegion,Mine():setPosition(765130, 59910))
    table.insert(santaContainmentRegion,Asteroid():setPosition(764549, 58640))
    table.insert(santaContainmentRegion,Mine():setPosition(762730, 59952))
    table.insert(santaContainmentRegion,Mine():setPosition(763930, 59931))
    table.insert(santaContainmentRegion,Asteroid():setPosition(765392, 59228))
    table.insert(santaContainmentRegion,Asteroid():setPosition(765422, 59130))
    table.insert(santaContainmentRegion,Mine():setPosition(763586, 53522))
    table.insert(santaContainmentRegion,Mine():setPosition(756732, 60056))
    table.insert(santaContainmentRegion,Mine():setPosition(761532, 59973))
    table.insert(santaContainmentRegion,Mine():setPosition(760332, 59994))
    table.insert(santaContainmentRegion,Mine():setPosition(759132, 60015))
    table.insert(santaContainmentRegion,Mine():setPosition(757932, 60035))


	local x=722333
	local y=88284
	local santa=Artifact():setPosition(x,y):setDescription("A contained extra dimensional ship inside of a weakening stasis bubble")
	table.insert(santaContainmentRegion,santa)
	-- this is kind of alarmingly inefficient
	-- also the tracking logic deep inside of christmasArtifact can get quite expensive if delta becomes large
	-- overall if I had to give a rating for this code it is terrifying
	-- there are situations where the can cause a casscading failure, the christmasArtifact update takes longer
	-- resulting in larger deltas, resulting in more being spawn and cycling to a server hang
	-- this was observed in testing
	-- since then numbers have been dialed down
	-- there really should be a linear update option in the sandbox - that can be done cheaper here and remove this risk
	-- tl;dr - DONT USE THIS IN GENERIC CODE IT MAY CAUSE SANDBOX HANGS
	update_system:addPeriodicCallback(santa,
		function (self,obj)
			for i=1,irandom(1,5) do
				local dx,dy=vectorFromAngle(irandom(0,360),200000)
				addChristmasArtifact({{x=x,y=y},{x=x,y=y},{x=x+dx,y=y+dy},{x=x+dx,y=y+dy}})
			end
		end,60,60,60)

	-- statis stations
	local commsFun = function ()
		setCommsMessage("This is an automated stasis bubble generator \n You have permission to contact the operator of this station")
		addCommsReply("Contact operator",function() 
			setCommsMessage("Stand by while connecting")
			commsSwitchToGM() 
		end)
		commsSwitchToGM()
		return true
	end
	local make_sts=function ()
		return SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCanBeDestroyed(false):setCommsFunction(commsFun):setSharesEnergyWithDocked(false):setRepairDocked(false):setRestocksScanProbes(false):setRestocksMissilesDocked(false)
	end
	local station_offset=20000
	local station_up=make_sts():setPosition(x,y-station_offset):setCallSign("Sts 8a"):setDescription("Northen stasis generator")
	table.insert(santaContainmentRegion,station_up)
	local station_right=make_sts():setPosition(x+station_offset,y):setCallSign("Sts 8b"):setDescription("Eastern stasis generator")
	table.insert(santaContainmentRegion,station_right)
	local station_down=make_sts():setPosition(x,y+station_offset):setCallSign("Sts 8c"):setDescription("Southern stasis generator")
	table.insert(santaContainmentRegion,station_down)
	local station_left=make_sts():setPosition(x-station_offset,y):setCallSign("Sts 8d"):setDescription("Western stasis generator")
	table.insert(santaContainmentRegion,station_left)
	-- the stasis field between them
	local speed=2400
	local pulse_time=1.2*distance(station_up,station_left)/speed-- all stations are the same distnace apart
	local criss_cross=newPhonySpaceObject()
	-- there probabaly should be a addLinearUpdate
	-- though the chasing update nicely manages to get rid of the object
	-- and the CPU time for recaulculating path each time is probably minimal
	local desc="Energy wave from a charging stasis bubble"
	update_system:addPeriodicCallback(criss_cross,
		function (self, obj)
			update_system:addChasingUpdate(Artifact():setPosition(station_up:getPosition()):setDescription(desc), station_left, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_up:getPosition()):setDescription(desc), station_right, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_down:getPosition()):setDescription(desc), station_left, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_down:getPosition()):setDescription(desc), station_right, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_left:getPosition()):setDescription(desc), station_down, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_left:getPosition()):setDescription(desc), station_up, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_right:getPosition()):setDescription(desc), station_up, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_right:getPosition()):setDescription(desc), station_down, speed, nil)
		end,pulse_time,pulse_time)
	local pulse=newPhonySpaceObject()
	update_system:addPeriodicCallback(pulse,
		function (self,obj)
			update_system:addChasingUpdate(Artifact():setPosition(station_up:getPosition()):setDescription(desc), santa, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_down:getPosition()):setDescription(desc), santa, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_left:getPosition()):setDescription(desc), santa, speed, nil)
			update_system:addChasingUpdate(Artifact():setPosition(station_right:getPosition()):setDescription(desc), santa, speed, nil)
			local periodic=update_system:getUpdateNamed(pulse,"periodic callback")
		end,15,15,30)
	return {
		destroy = function(self)
			for i,obj in ipairs(santaContainmentRegion) do
				obj:destroy()
			end
--			addGMMessage("No destroy function exists for Santa Containment yet. No action taken.")
		end
	}
end
function filkRoadSector()
	local objects = {}
	local ret = {
		destroy = function(self)
			addGMMessage("[FilkRoad] removing objects, count=" .. #self.objects)
			assert(type(self)=="table")
			for index = #self.objects,1,-1 do
				self.objects[index]:destroy()
			end
		end,
		objects = objects
	}

	local asteroidCoordinates = {
		{-365138, -421460, 121},
		{-365138, -416188, 124},
		{-364083, -416891, 117},
		{-363029, -416188, 116},
		{-364435, -414431, 118},
		{-365841, -429191, 116},
		{-366192, -431651, 123},
		{-364435, -422163, 120},
		{-364083, -420757, 123},
		{-365138, -423568, 122},
		{-361623, -414783, 126},
		{-360569, -413026, 113},
		{-359515, -414080, 115},
		{-359515, -410566, 113},
		{-349323, -403186, 117},
		{-344403, -400726, 128},
		{-346160, -404591, 121},
		{-352486, -395806, 114},
		{-353540, -407051, 119},
		{-348269, -394400, 130},
		{-358109, -405646, 124},
		{-357758, -404240, 111},
		{-361623, -407403, 113},
		{-367598, -425326, 115},
		{-367598, -427434, 125},
		{-368652, -419000, 115},
		{-371463, -419703, 128},
		{-370761, -415134, 111},
		{-371463, -429191, 121},
		{-367949, -414431, 123},
		{-367949, -409863, 114},
		{-366192, -427434, 125},
		{-366192, -423920, 120},
		{-366543, -422866, 126},
		{-368301, -423217, 122},
		{-358109, -440437, 125},
		{-355649, -443600, 130},
		{-360921, -443600, 116},
		{-364083, -436220, 112},
		{-367949, -432706, 129},
		{-365841, -434814, 128},
		{-367598, -437274, 113},
		{-362326, -437977, 123},
		{-366543, -439031, 128},
		{-367949, -442897, 111},
		{-368301, -431651, 123},
		{-370409, -433057, 124},
		{-314883, -417243, 122},
		{-298015, -442546, 116},
		{-296609, -443249, 127},
		{-300123, -443600, 114},
		{-297312, -437626, 126},
		{-301177, -436923, 125},
		{-296960, -411268, 124},
		{-297663, -410917, 114},
		{-296609, -417946, 121},
		{-306097, -428489, 122},
		{-301880, -432003, 119},
		{-297312, -423568, 123},
		{-334915, -396860, 116},
		{-329643, -390886, 114},
		{-331400, -390534, 110},
		{-307152, -405997, 118},
		{-306800, -419703, 120},
		{-303637, -416188, 120},
		{-301529, -424623, 124},
		{-300475, -429894, 126},
		{-302232, -421460, 112},
		{-304692, -404943, 114},
		{-300826, -441492, 113},
		{-299069, -441843, 124},
		{-301880, -400726, 123},
		{-300826, -436571, 121},
		{-301880, -433409, 127},
		{-326129, -397211, 120},
		{-324723, -394751, 117},
		{-330346, -383857, 126},
		{-334915, -388074, 120},
		{-300123, -439031, 125},
		{-300826, -434814, 121},
		{-302583, -437977, 117},
		{-338078, -390183, 124},
		{-337375, -393697, 128},
		{-312775, -478743, 118},
		{-313829, -489286, 117},
		{-301529, -483663, 118},
		{-320506, -483663, 116},
		{-318046, -481203, 128},
		{-329643, -482257, 122},
		{-300123, -469606, 124},
		{-297663, -466794, 121},
		{-296609, -467849, 128},
		{-306800, -477337, 116},
		{-310315, -472769, 118},
		{-309963, -473120, 115},
		{-310315, -472417, 126},
		{-309612, -472769, 111},
		{-327535, -469606, 112},
		{-299420, -477337, 113},
		{-303286, -467146, 128},
		{-302232, -472417, 130},
		{-308909, -471012, 120},
		{-320155, -473472, 117},
		{-313477, -470660, 120},
		{-317343, -467849, 126},
		{-322263, -473472, 118},
		{-290634, -442194, 112},
		{-289580, -443952, 123},
		{-289932, -454143, 123},
		{-300826, -463983, 115},
		{-302935, -465740, 124},
		{-291689, -454143, 111},
		{-295203, -462226, 111},
		{-300123, -459766, 125},
		{-301880, -460469, 115},
		{-301529, -460820, 116},
		{-300826, -456252, 118},
		{-300826, -456603, 123},
		{-301880, -458360, 119},
		{-300475, -453440, 124},
		{-291689, -446060, 128},
		{-292040, -447114, 124},
		{-292743, -444303, 118},
		{-296960, -447114, 118},
		{-295555, -450277, 121},
		{-299069, -450629, 110},
		{-296257, -445006, 112},
		{-298717, -445006, 117},
		{-298366, -445006, 129},
		{-301880, -445006, 130},
		{-302935, -446060, 113},
		{-300123, -447466, 122},
		{-302583, -448169, 124},
		{-298717, -446060, 122},
		{-299420, -447817, 121},
		{-303286, -453089, 111},
		{-296257, -442546, 113},
		{-295906, -440086, 118},
		{-305395, -463632, 121},
		{-305395, -463280, 122},
		{-295906, -430597, 124},
		{-296257, -430597, 124},
		{-295203, -437274, 119},
		{-295555, -431651, 112},
		{-364083, -456603, 116},
		{-364435, -452737, 115},
		{-369003, -447817, 112},
		{-367949, -464686, 112},
		{-345809, -466092, 130},
		{-360218, -465740, 116},
		{-359163, -457306, 119},
		{-360569, -454846, 127},
		{-360921, -449574, 121},
		{-357055, -445357, 111},
		{-354595, -482609, 129},
		{-350729, -477337, 124},
		{-359515, -467849, 124},
		{-350378, -466092, 125},
		{-352486, -453440, 129},
		{-359866, -446412, 128},
		{-183404, -414487, 128},
		{-206216, -401901, 124},
		{-204643, -401901, 127},
		{-212902, -394034, 127},
		{-207789, -401901, 116},
		{-204249, -402687, 129},
		{-222416, -369846, 116},
		{-222018, -373432, 128},
		{-234767, -366260, 115},
		{-252695, -405702, 118},
		{-255883, -410882, 116},
		{-214847, -454308, 118},
		{-216839, -447933, 124},
		{-249906, -410483, 119},
		{-255883, -413272, 125},
		{-257078, -411678, 128},
		{-219229, -474228, 122},
		{-212456, -465065, 120},
		{-218034, -464667, 110},
		{-200106, -417655, 127},
		{-196520, -411678, 121},
		{-202496, -412475, 115},
		{-218432, -446340, 120},
		{-180982, -445941, 115},
		{-179787, -443153, 111},
		{-177396, -450324, 119},
		{-172217, -435184, 129},
		{-190544, -424826, 126},
		{-183373, -429208, 118},
		{-185763, -422834, 111},
		{-185763, -430802, 117},
		{-183771, -455105, 128},
		{-182576, -458292, 113},
		{-183771, -460682, 126},
		{-182177, -467854, 117},
		{-173014, -461878, 127},
		{-177795, -463073, 115},
		{-176600, -454308, 123},
		{-177396, -448332, 113},
		{-170624, -447535, 119},
		{-167038, -451519, 111},
		{-228791, -426021, 114},
		{-228791, -417256, 114},
		{-186958, -438770, 125},
		{-191341, -428810, 124},
		{-219229, -379009, 125},
		{-219628, -374228, 121},
		{-208074, -390563, 125},
		{-215245, -384587, 116},
		{-166640, -446738, 116},
		{-169428, -451121, 121},
		{-180584, -444348, 120},
		{-175006, -445543, 112},
		{-221221, -492953, 113},
		{-214847, -487774, 124},
		{-181381, -481001, 115},
		{-178990, -494149, 120},
		{-178193, -492157, 112},
		{-165444, -490961, 112},
		{-172616, -486180, 112},
		{-177795, -429208, 121},
		{-173811, -475822, 126},
		{-174209, -474627, 117},
		{-176600, -474627, 129},
		{-176998, -476220, 117},
		{-276600, -384188, 129},
		{-275006, -386579, 126},
		{-273014, -389368, 129},
		{-269030, -392157, 124},
		{-271022, -394547, 128},
		{-266640, -394547, 114},
		{-266640, -395344, 119},
		{-263452, -403710, 120},
		{-265046, -394945, 123},
		{-261062, -402117, 128},
		{-259070, -400922, 115},
		{-259468, -402117, 116},
		{-260265, -398930, 129},
		{-259070, -404507, 118},
		{-265843, -396539, 110},
		{-268233, -398133, 130},
		{-231580, -426420, 125},
		{-195596, -401901, 127},
		{-220424, -436778, 112},
		{-219628, -436380, 114},
		{-229986, -427216, 130},
		{-218831, -439169, 124},
		{-208074, -399726, 118},
		{-205429, -396788, 128},
		{-226799, -363471, 118},
		{-226400, -364268, 125},
		{-227596, -363870, 130},
		{-227994, -363471, 113},
		{-168065, -442412, 126},
		{-168065, -441232, 127},
		{-222018, -372236, 123},
		{-224408, -365862, 121},
		{-238468, -362963, 128},
		{-234928, -365322, 118},
		{-247120, -366109, 124},
		{-233355, -373582, 121},
		{-209362, -387741, 114},
		{-208182, -383415, 111},
		{-217622, -389315, 119},
		{-222735, -379875, 128},
		{-225882, -371222, 115},
		{-226275, -375155, 122},
		{-208969, -380662, 123},
		{-221162, -366896, 118},
		{-306480, -361479, 129},
		{-306480, -360284, 121},
		{-307277, -359886, 125},
		{-301699, -363073, 119},
		{-292138, -366659, 121},
		{-294926, -366659, 127},
		{-288552, -369447, 127},
		{-158324, -398297, 118},
		{-159520, -397899, 115},
		{-157528, -399891, 125},
		{-160715, -393516, 112},
		{-151551, -407859, 110},
		{-150755, -408257, 128},
		{-141193, -415429, 130},
		{-168284, -390329, 127},
		{-169081, -388337, 113},
		{-170675, -391524, 121},
		{-157129, -401484, 129},
		{-157129, -403477, 122},
		{-140794, -417022, 125},
		{-161910, -396305, 123},
		{-165496, -394313, 130},
		{-162308, -394313, 128},
		{-172269, -390728, 118},
		{-172667, -384751, 115},
		{-165496, -397899, 121},
		{-167089, -399891, 123},
		{-145575, -411046, 116},
		{-151551, -411046, 124},
		{-151551, -410648, 112},
		{-148763, -407461, 120},
		{-151551, -404672, 121},
		{-177846, -376783, 119},
		{-174261, -384751, 113},
		{-173065, -384751, 129},
		{-165097, -393118, 116},
		{-168284, -393118, 122},
		{-163902, -389532, 128},
		{-165894, -390329, 114},
		{-168683, -389532, 124},
		{-172667, -393915, 114},
		{-173464, -391126, 113},
		{-167671, -361389, 115},
		{-176253, -383955, 110},
		{-179838, -375987, 126},
		{-181437, -432186, 118},
		{-190877, -422746, 111},
		{-190483, -421960, 115},
		{-202283, -402687, 110},
		{-205036, -403474, 117},
		{-205823, -402294, 125},
		{-184584, -428253, 120},
		{-185764, -425500, 123},
		{-197956, -412127, 120},
		{-200710, -406227, 112},
		{-206609, -399147, 130},
		{-210149, -393641, 130},
		{-209756, -399934, 127},
		{-229421, -378695, 128},
		{-225095, -390495, 128},
		{-225095, -386561, 115},
		{-207396, -397574, 129},
		{-207396, -399934, 110},
		{-219195, -386561, 114},
		{-216442, -388135, 113},
		{-208969, -394821, 111},
		{-208969, -396001, 121},
		{-218409, -395214, 121},
		{-205429, -397968, 127},
		{-201890, -407800, 120},
		{-203069, -407407, 116},
		{-202283, -401507, 122},
		{-203069, -406620, 126},
		{-199530, -416453, 117},
		{-235217, -370409, 129},
		{-236014, -366425, 129},
		{-221162, -389315, 122},
		{-233748, -383808, 128},
		{-233225, -372799, 117},
		{-234141, -380662, 130},
		{-198743, -409374, 114},
		{-198350, -411340, 112},
		{-191663, -417633, 127},
		{-204643, -408587, 114},
		{-181830, -374791, 119},
		{-187010, -369214, 112},
		{-187010, -372401, 123},
		{-244761, -361783, 129},
		{-243974, -362569, 119},
		{-246771, -363636, 117},
		{-245154, -361389, 127},
		{-243974, -365716, 123},
		{-251447, -361389, 119},
		{-245941, -360603, 112},
		{-246334, -360603, 129},
		{-249874, -359816, 128},
		{-254593, -360603, 111},
		{-242007, -364929, 120},
		{-242794, -364143, 112},
		{-239201, -366026, 117},
		{-239648, -363356, 118},
		{-243581, -367682, 120},
		{-243583, -361644, 115},
		{-242007, -370042, 129},
		{-245154, -365322, 115},
		{-240434, -368076, 127},
		{-110914, -436943, 117},
		{-94579, -446504, 125},
		{-98962, -443716, 112},
		{-126053, -433755, 110},
		{-135217, -415827, 118},
		{-104348, -399541, 122},
		{-105134, -391281, 129},
		{-105921, -396001, 119},
		{-86255, -411340, 118},
		{-89008, -409374, 115},
		{-100414, -401114, 122},
		{-132428, -424194, 114},
		{-129241, -425787, 122},
		{-123265, -424592, 115},
		{-122866, -422998, 113},
		{-134420, -418218, 124},
		{-120874, -430170, 113},
		{-122468, -431365, 124},
		{-126452, -426584, 129},
		{-124858, -424990, 112},
		{-116890, -380767, 119},
		{-122047, -377908, 117},
		{-126767, -372795, 113},
		{-117720, -371222, 124},
		{-131093, -371222, 127},
		{-115296, -383955, 111},
		{-115754, -384202, 126},
		{-109461, -390888, 114},
		{-125587, -370042, 125},
		{-125980, -375549, 113},
		{-127553, -370042, 117},
		{-126373, -372402, 125},
		{-129126, -367682, 110},
		{-131880, -366896, 128},
		{-129520, -366502, 127},
		{-136993, -364929, 113},
		{-138959, -364929, 114},
		{-129520, -366502, 127},
		{-128733, -366109, 125},
		{-133060, -365716, 122},
		{-129126, -369256, 116},
		{-129913, -364929, 126},
		{-128045, -366425, 114},
		{-126767, -364929, 128},
		{-114574, -391281, 119},
		{-115754, -390888, 126},
		{-126452, -369612, 121},
		{-127946, -368862, 128},
		{-132030, -361246, 114},
		{-127553, -361389, 124},
		{-139201, -359652, 127},
		{-127160, -364143, 121},
		{-119687, -385775, 129},
		{-122047, -384595, 118},
		{-123620, -375549, 115},
		{-124013, -371616, 125},
		{-127553, -373975, 112},
		{-125193, -365322, 117},
		{-122833, -381448, 115},
		{-129520, -370436, 116},
		{-128733, -368469, 128},
		{-126373, -368862, 125},
		{-124407, -369256, 119},
		{-134239, -372402, 115},
		{-132666, -374369, 122},
		{-132273, -376729, 116},
		{-138173, -360209, 125},
		{-129913, -360603, 125},
		{-130306, -359816, 125},
		{-135813, -365322, 115},
		{-120867, -376335, 118},
		{-143455, -181454, 112},
		{-174699, -274791, 120},
		{-178325, -280760, 119},
		{-176359, -281153, 114},
		{-173105, -278377, 113},
		{-186585, -269747, 122},
		{-185798, -270534, 126},
		{-181865, -274860, 123},
		{-184225, -274860, 129},
		{-183832, -274074, 111},
		{-197638, -236036, 126},
		{-198435, -230857, 112},
		{-200826, -233247, 127},
		{-201224, -228068, 118},
		{-205208, -228865, 110},
		{-206403, -194602, 119},
		{-209590, -190219, 129},
		{-211582, -228466, 113},
		{-206403, -228068, 119},
		{-210387, -223685, 120},
		{-288453, -226876, 124},
		{-297499, -220976, 125},
		{-278620, -233562, 113},
		{-279081, -246106, 123},
		{-257797, -195000, 129},
		{-209989, -187430, 113},
		{-209192, -188625, 121},
		{-283340, -239462, 115},
		{-282947, -239855, 123},
		{-301352, -274393, 120},
		{-298962, -273994, 116},
		{-207997, -188625, 115},
		{-301352, -271604, 129},
		{-300157, -272799, 125},
		{-304141, -269612, 119},
		{-190125, -268567, 119},
		{-193665, -265028, 126},
		{-197204, -261881, 115},
		{-260984, -193805, 116},
		{-260984, -192211, 119},
		{-247155, -264634, 114},
		{-247155, -263848, 127},
		{-243615, -261094, 121},
		{-245975, -265027, 127},
		{-243615, -261881, 121},
		{-242042, -265814, 121},
		{-240076, -263454, 124},
		{-244402, -267387, 114},
		{-242436, -266601, 128},
		{-240862, -271714, 120},
		{-239289, -267387, 124},
		{-242826, -268417, 117},
		{-232209, -276040, 119},
		{-233389, -274467, 122},
		{-229679, -277580, 116},
		{-234569, -265814, 126},
		{-232996, -268174, 126},
		{-234963, -267387, 120},
		{-232209, -270927, 125},
		{-236929, -272107, 119},
		{-267214, -241035, 119},
		{-265248, -239855, 111},
		{-267886, -249692, 121},
		{-264300, -253676, 130},
		{-257381, -246542, 111},
		{-258168, -247328, 129},
		{-258324, -257660, 121},
		{-249161, -257261, 116},
		{-251950, -256863, 121},
		{-258594, -198984, 126},
		{-255008, -201773, 111},
		{-215168, -180259, 125},
		{-214371, -183446, 128},
		{-226310, -277220, 115},
		{-225130, -281153, 126},
		{-290197, -281166, 119},
		{-269749, -183446, 119},
		{-268554, -187032, 116},
		{-223163, -281153, 124},
		{-250755, -266026, 113},
		{-256953, -251655, 127},
		{-251840, -259128, 117},
		{-255773, -256375, 120},
		{-266000, -251655, 129},
		{-272686, -248115, 126},
		{-210542, -326384, 121},
		{-184977, -324811, 118},
		{-203069, -326384, 121},
		{-196383, -333464, 125},
		{-201103, -328351, 118},
		{-201889, -335037, 121},
		{-208182, -323631, 112},
		{-194023, -338184, 114},
		{-193630, -343297, 123},
		{-141747, -313012, 126},
		{-163942, -285947, 113},
		{-166526, -285873, 129},
		{-151580, -302392, 117},
		{-153185, -299891, 130},
		{-150396, -311843, 125},
		{-165739, -283513, 126},
		{-170459, -288233, 112},
		{-167926, -287939, 126},
		{-167313, -285086, 129},
		{-171639, -282727, 128},
		{-156693, -303966, 120},
		{-157480, -295706, 126},
		{-155513, -306719, 125},
		{-155907, -306719, 123},
		{-162593, -289020, 112},
		{-164559, -288233, 130},
		{-159446, -294133, 115},
		{-160626, -292559, 121},
		{-158266, -302392, 127},
		{-161413, -298459, 114},
		{-163380, -290593, 113},
		{-157086, -302786, 128},
		{-164559, -294133, 120},
		{-161020, -295313, 110},
		{-158266, -298459, 119},
		{-157966, -297899, 123},
		{-223163, -310652, 121},
		{-225523, -313012, 125},
		{-230636, -310259, 122},
		{-211364, -317732, 121},
		{-208217, -321271, 113},
		{-230243, -307505, 129},
		{-222109, -307859, 125},
		{-227883, -303966, 113},
		{-161413, -294133, 113},
		{-160755, -294313, 123},
		{-217657, -316158, 122},
		{-214539, -315429, 118},
		{-218050, -309472, 116},
		{-218524, -318616, 125},
		{-216083, -320878, 119},
		{-246762, -287840, 129},
		{-234176, -304359, 129},
		{-209790, -288626, 127},
		{-209397, -289413, 127},
		{-216870, -287053, 115},
		{-331978, -310882, 124},
		{-330385, -307694, 113},
		{-345922, -301718, 127},
		{-332775, -305702, 111},
		{-324807, -307296, 119},
		{-322815, -307694, 114},
		{-324010, -314467, 125},
		{-327994, -311678, 119},
		{-327596, -307296, 129},
		{-283424, -292720, 114},
		{-288205, -282759, 115},
		{-280237, -287939, 127},
		{-293925, -314978, 130},
		{-316042, -313671, 114},
		{-313651, -309288, 128},
		{-310464, -311280, 120},
		{-305724, -300426, 113},
		{-305724, -302786, 129},
		{-293925, -318518, 110},
		{-291739, -324826, 129},
		{-307675, -320045, 113},
		{-306480, -314866, 121},
		{-307277, -318053, 121},
		{-297317, -316459, 125},
		{-296520, -319647, 118},
		{-297715, -319647, 117},
		{-284619, -287142, 126},
		{-286213, -285548, 125},
		{-294978, -287142, 114},
		{-297858, -309079, 124},
		{-302578, -308685, 118},
		{-294579, -287540, 128},
		{-292986, -290728, 120},
		{-284619, -295110, 125},
		{-210970, -322058, 118},
		{-240743, -358292, 129},
		{-226492, -301883, 124},
		{-228484, -299891, 117},
		{-218524, -309851, 110},
		{-221983, -316552, 126},
		{-269428, -349527, 128},
		{-266241, -348730, 129},
		{-269428, -341161, 118},
		{-275404, -345941, 114},
		{-281830, -328975, 111},
		{-278979, -326778, 125},
		{-284221, -326186, 114},
		{-284966, -344746, 125},
		{-278193, -338372, 111},
		{-278643, -331763, 121},
		{-259468, -356300, 115},
		{-264647, -345941, 128},
		{-278192, -328351, 124},
		{-279766, -328744, 116},
		{-229421, -358636, 128},
		{-318432, -353511, 118},
		{-320823, -354706, 118},
		{-321620, -351918, 127},
		{-317636, -357495, 119},
		{-318034, -348730, 127},
		{-323213, -347934, 126},
		{-321620, -346340, 113},
		{-324010, -338770, 120},
		{-316440, -343153, 120},
		{-309269, -353113, 116},
		{-308871, -350324, 123},
		{-314050, -355105, 117},
		{-305683, -350722, 110},
		{-313253, -354308, 120},
		{-312456, -353113, 115},
		{-311659, -359089, 111},
		{-308074, -358690, 119},
		{-294528, -337575, 124},
		{-298114, -340364, 127},
		{-335564, -344348, 112},
		{-347118, -343153, 110},
		{-347118, -337177, 110},
		{-327596, -344746, 120},
		{-324408, -349129, 114},
		{-335165, -344348, 126},
		{-334767, -347934, 122},
		{-330783, -348332, 113},
		{-355484, -340364, 125},
		{-360663, -340364, 118},
		{-363054, -339169, 111},
		{-340743, -334786, 114},
		{-178684, -355490, 124},
		{-177897, -357850, 122},
		{-176324, -349983, 113},
		{-177111, -348410, 111},
		{-152332, -348410, 129},
		{-149579, -349590, 124},
		{-143286, -349590, 112},
		{-146039, -345657, 112},
		{-159805, -342904, 129},
		{-144859, -355096, 122},
		{-228842, -342919, 117},
		{-183404, -348410, 129},
		{-186550, -351163, 118},
		{-195990, -336611, 127},
		{-190483, -345264, 125},
		{-245941, -356670, 125},
		{-292745, -335824, 125},
		{-286845, -339757, 125},
		{-266393, -345264, 111},
		{-270326, -342510, 129},
		{-247966, -353676, 113},
		{-248364, -357261, 122},
		{-252234, -354703, 116},
		{-249480, -356276, 129},
		{-255773, -356276, 112},
		{-254987, -357063, 123},
		{-264033, -349983, 114},
		{-250660, -357456, 114},
		{-258133, -357850, 119},
		{-268284, -297899, 119},
		{-269878, -301485, 112},
		{-266292, -301086, 117},
		{-265496, -298696, 114},
		{-263902, -300688, 125},
		{-267089, -302680, 114},
		{-265894, -303477, 111},
		{-265496, -303875, 121},
		{-265496, -295907, 124},
		{-267886, -296704, 114},
		{-271472, -295508, 116},
		{-261910, -306664, 127},
		{-263504, -306664, 125},
		{-266691, -308257, 120},
		{-263105, -307062, 129},
		{-264300, -307461, 124},
		{-261910, -305469, 129},
		{-261910, -305469, 124},
		{-273464, -301485, 112},
		{-275057, -299492, 120},
		{-274659, -293516, 113},
		{-269081, -295110, 125},
		{-273065, -291524, 124},
		{-277049, -336146, 122},
		{-267966, -339364, 120},
		{-261910, -308656, 116},
		{-265894, -309851, 116},
		{-261113, -312242, 115},
		{-260715, -309851, 115},
		{-260715, -308656, 123},
		{-203069, -331104, 117},
		{-200316, -333071, 110},
		{-208576, -325204, 121},
		{-212902, -324025, 118},
		{-202676, -327171, 112},
		{-204643, -326778, 124},
		{-205823, -328351, 120},
		{-205429, -327171, 123},
		{-202283, -331497, 122},
		{-201889, -334251, 123},
		{-206609, -328351, 129},
		{-249874, -255588, 127},
		{-249087, -254801, 120},
		{-250660, -257161, 119},
		{-252627, -252441, 122},
		{-256167, -262668, 129},
		{-260886, -252835, 112},
		{-257347, -256375, 111},
		{-258920, -260308, 111},
		{-263640, -260701, 112},
		{-168064, -325598, 111},
		{-166885, -327564, 118},
		{-162558, -331891, 127},
		{-156658, -339364, 118},
		{-200954, -326983, 124},
		{-199923, -333071, 113},
		{-200316, -333071, 112},
		{-194181, -335748, 121},
		{-197956, -335431, 121},
		{-198350, -332677, 121},
		{-258324, -314234, 129},
		{-257926, -314632, 116},
		{-260316, -312242, 112},
		{-255535, -314234, 117},
		{-250755, -318616, 127},
		{-248763, -321803, 118},
		{-246771, -325787, 124},
		{-247169, -327381, 114},
		{-257347, -349197, 118},
		{-255380, -348803, 125},
		{-260493, -346837, 120},
		{-244380, -351285, 116},
		{-241990, -326186, 110},
		{-237607, -331763, 110},
		{-239998, -332560, 122},
		{-197956, -338970, 127},
		{-196776, -338184, 129},
		{-195990, -342117, 112},
		{-200316, -329138, 125},
		{-181437, -353523, 112},
		{-181437, -353523, 111},
		{-189697, -347623, 113},
		{-142892, -349590, 124},
		{-120347, -209741, 128},
		{-119949, -211335, 124},
		{-127120, -208944, 115},
		{-124730, -213327, 113},
		{-124331, -210538, 125},
		{-120746, -214123, 124},
		{-120347, -212530, 126},
		{-120347, -211733, 127},
		{-117957, -212131, 112},
		{-117558, -212131, 128},
		{-119152, -212530, 118},
		{-118754, -210936, 116},
		{-103614, -223685, 115},
		{-102419, -224880, 117},
		{-109192, -220100, 121},
		{-114371, -220100, 120},
		{-115566, -220100, 113},
		{-118754, -213327, 116},
		{-116762, -213725, 116},
		{-104809, -213725, 128},
		{-111981, -214123, 117},
		{-110387, -216912, 121},
		{-117558, -214522, 119},
		{-117957, -221295, 113},
		{-118754, -218904, 126},
		{-113574, -219701, 121},
		{-113973, -220100, 127},
		{-98435, -214920, 128},
		{-97240, -210140, 117},
		{-111582, -202968, 128},
		{-106005, -225677, 114},
		{-92857, -201374, 115},
		{-96841, -200976, 128},
		{-101622, -207351, 130},
		{-94451, -212131, 129},
		{-94052, -210538, 114},
		{-117160, -207749, 120},
		{-117558, -207749, 116},
		{-113973, -206155, 126},
		{-123933, -208546, 117},
		{-124730, -208944, 129},
		{-123136, -201773, 124},
		{-123534, -205358, 130},
		{-104809, -227669, 123},
		{-97638, -231255, 121},
		{-99630, -253964, 115},
		{-94052, -261534, 125},
		{-97638, -226474, 120},
		{-98435, -228865, 127},
		{-129909, -201374, 120},
		{-129112, -202171, 126},
		{-127917, -204163, 118},
		{-127917, -200179, 116},
		{-129511, -197789, 120},
		{-129909, -197789, 119},
		{-126722, -207749, 114},
		{-129511, -205757, 111},
		{-128714, -208546, 124},
		{-126722, -205757, 123},
		{-124730, -205757, 128},
		{-66562, -255159, 118},
		{-71343, -255956, 120},
		{-60985, -257550, 129},
		{-72937, -262729, 115},
		{-58993, -262331, 115},
		{-83296, -270299, 115},
		{-88873, -268705, 112},
		{-90865, -264323, 126},
		{-90467, -265916, 119},
		{-76523, -261534, 110},
		{-92060, -262331, 130},
		{-91662, -232450, 126},
		{-92060, -235239, 127},
		{-81702, -243606, 112},
		{-78913, -247191, 127},
		{-83296, -252371, 111},
		{-84889, -250379, 127},
		{-45447, -232052, 112},
		{-46244, -231255, 115},
		{-47040, -230857, 117},
		{-52220, -227271, 116},
		{-45447, -271494, 111},
		{-45447, -272689, 122},
		{-52220, -265916, 122},
		{-56204, -263924, 117},
		{-67359, -252769, 110},
		{-74929, -247988, 124},
		{-72937, -245598, 120},
		{-89272, -242012, 117},
		{-73734, -247191, 129},
		{-75327, -247590, 111},
		{-80905, -240817, 125},
		{-81702, -236434, 113},
		{-82100, -219303, 119},
		{-83296, -219701, 111},
		{-79311, -222888, 112},
		{-73335, -220498, 116},
		{-53415, -219701, 130},
		{-57001, -222490, 119},
		{-61781, -222092, 126},
		{-41821, -226076, 127},
		{-67359, -215717, 119},
		{-70546, -220896, 112},
		{-71742, -220896, 125},
		{-82100, -211335, 118},
		{-82100, -211335, 128},
		{-80507, -216116, 124},
		{-82100, -216116, 114},
		{-77319, -216116, 117},
		{-79311, -218904, 128},
		{-83694, -213725, 111},
		{-82499, -215319, 127},
		{-83694, -214522, 119},
		{-85288, -212928, 127},
		{-86084, -218108, 111},
		{-80905, -214522, 119},
		{-80507, -213327, 129},
		{-81303, -213725, 125},
		{-84889, -208546, 112},
		{-87280, -210140, 118},
		{-89272, -206952, 119},
		{-83296, -208944, 111},
		{-82499, -210936, 117},
		{-80507, -211335, 114},
		{-80108, -209741, 124},
		{-92459, -212530, 124},
		{-89670, -210538, 122},
		{-91662, -215319, 113},
		{-91264, -216514, 120},
		{-92060, -216912, 130},
		{-72538, -219303, 120},
		{-74530, -218904, 120},
		{-73734, -214123, 129},
		{-74530, -217311, 113},
		{-76124, -216912, 130},
		{-131901, -192609, 124},
		{-133494, -194203, 128},
		{-129510, -191016, 130},
		{-129112, -190617, 111},
		{-135885, -183844, 118},
		{-114371, -189821, 112},
		{-131104, -189422, 128},
		{-131104, -187031, 115},
		{-131502, -184641, 119},
		{-129112, -185039, 118},
		{-129112, -196992, 112},
		{-129909, -197390, 120},
		{-140268, -275478, 113},
		{-137479, -277072, 114},
		{-135487, -280657, 123},
		{-135088, -281056, 129},
		{-134690, -278665, 113},
		{-132299, -279462, 115},
		{-131104, -279462, 111},
		{-100029, -196594, 112},
		{-101224, -196992, 115},
		{-72538, -279064, 125},
		{-28674, -277072, 117},
		{-38634, -272689, 114},
		{-35048, -239223, 118},
		{-23495, -246793, 115},
		{-129909, -285837, 117},
		{-137080, -284243, 114},
		{-137814, -317732, 123},
		{-134668, -320485, 124},
		{-124331, -293805, 115},
		{-129112, -287032, 130},
		{-136412, -354473, 112},
		{-140139, -353130, 111},
		{-139746, -357063, 126},
		{-25487, -295000, 124},
		{-26682, -281454, 116},
		{-35447, -284243, 125},
		{-127553, -351556, 127},
		{-195646, -126872, 111},
		{-196443, -128067, 128},
		{-196841, -128067, 125},
		{-205208, -127669, 113},
		{-202817, -127271, 129},
		{-202419, -127669, 125},
		{-201224, -129263, 122},
		{-200427, -128466, 120},
		{-200028, -129661, 123},
		{-196841, -131255, 125},
		{-192857, -136434, 125},
		{-194052, -135637, 122},
		{-187678, -139223, 121},
		{-176124, -147589, 115},
		{-181303, -143207, 118},
		{-183295, -139621, 124},
		{-194849, -131255, 120},
		{-194451, -131653, 115},
		{-193654, -130856, 118},
		{-190865, -128864, 123},
		{-188873, -134442, 119},
		{-189670, -133247, 114},
		{-140626, -176275, 113},
		{-220745, -168705, 127},
		{-215168, -180259, 125},
		{-225885, -106952, 118},
		{-227877, -110139, 121},
		{-204769, -124083, 122},
		{-206363, -124083, 120},
		{-216722, -108545, 123},
		{-212339, -108147, 125},
		{-212737, -112529, 123},
		{-211542, -112928, 113},
		{-209152, -116514, 129},
		{-154570, -164322, 126},
		{-154570, -163924, 115},
		{-156961, -161533, 123},
		{-147000, -134043, 129},
		{-152578, -167111, 128},
		{-149391, -134840, 126},
		{-143415, -138028, 111},
		{-163734, -115318, 127},
		{-167319, -113725, 127},
		{-159749, -120896, 112},
		{-148594, -132051, 111},
		{-158554, -121294, 129},
		{-157359, -136035, 116},
		{-156164, -132450, 112},
		{-154570, -133645, 114},
		{-145407, -138028, 110},
		{-149391, -136035, 125},
		{-149789, -172689, 112},
		{-150984, -135637, 116},
		{-150984, -134442, 114},
		{-204371, -123286, 114},
		{-204371, -125677, 125},
		{-199590, -124880, 118},
		{-202777, -125677, 125},
		{-213136, -117709, 117},
		{-198395, -124482, 112},
		{-148196, -137629, 127},
		{-148196, -132450, 114},
		{-143415, -142012, 121},
		{-142220, -141215, 124},
		{-165726, -114920, 119},
		{-162140, -119302, 117},
		{-161343, -126075, 119},
		{-160148, -124880, 124},
		{-155367, -127271, 112},
		{-152977, -127271, 120},
		{-149789, -128067, 119},
		{-152180, -129661, 118},
		{-152578, -129263, 120},
		{-153375, -128864, 112},
		{-152180, -130059, 114},
		{-151781, -131255, 130},
		{-232259, -90219, 111},
		{-231463, -91812, 126},
		{-257757, -85039, 115},
		{-256562, -87031, 115},
		{-246602, -90219, 123},
		{-250586, -93008, 118},
		{-184052, -100976, 126},
		{-212339, -106553, 115},
		{-226283, -106155, 126},
		{-219909, -103765, 116},
		{-225088, -98984, 111},
		{-231064, -98984, 122},
		{-213136, -117709, 120},
		{-207558, -120498, 114},
		{-227877, -106553, 121},
		{-227877, -106553, 116},
		{-138235, -177071, 115},
		{-130666, -153964, 121},
		{-133056, -150776, 121},
		{-137439, -145597, 119},
		{-137439, -146394, 111},
		{-134251, -151175, 118},
		
	}
	for i=1,#asteroidCoordinates do
		local ass = nil
		if i % 5 == 0 then
			--- every 5th is a visual asteroid to make it more interesting
			ass = VisualAsteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2])
		else
			ass = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2])
		end

		-- stolen from https://stackoverflow.com/a/69740076
		local function random_50_500()
			-- result is from 50 to 500
			-- mean is very near to 100
			local x
			repeat
			   x = math.log(math.random()) + math.log(math.random())
			until x > -18
			return x * -25 + 50
		 end

		 --- overwrite static size with a more intersting value
		local size = random_50_500()
		ass:setSize(size)
		ass.original_size = size
		table.insert(objects, ass)
	end

	local nebulaCoordinates = {
		{-343350, -405301},
		{-352549, -397769},
		{-367659, -405682},
		{-365346, -399917},
		{-365915, -392801},
		{-356532, -381833},
		{-357329, -374662},
		{-379241, -406136},
		{-382827, -415698},
		{-395172, -403454},
		{-350777, -437879},
		{-381233, -444382},
		{-386811, -427650},
		{-303679, -391908},
		{-335573, -395028},
		{-323430, -388966},
		{-321472, -376255},
		{-336213, -381036},
		{-344978, -374662},
		{-297989, -407293},
		{-312858, -382335},
		{-312004, -386605},
		{-296199, -380215},
		{-340131, -393878},
		{-343089, -389505},
		{-346971, -394582},
		{-341392, -485020},
		{-289001, -463169},
		{-327950, -429695},
		{-323538, -439272},
		{-331771, -437362},
		{-336375, -422700},
		{-309884, -466257},
		{-321871, -479044},
		{-323445, -467155},
		{-312458, -482371},
		{-306812, -483076},
		{-291278, -466016},
		{-314676, -462094},
		{-319231, -454693},
		{-313470, -461476},
		{-321455, -434252},
		{-317814, -443178},
		{-333836, -430176},
		{-410282, -410082},
		{-407494, -421237},
		{-401146, -429466},
		{-404847, -434874},
		{-395453, -433451},
		{-395168, -440283},
		{-386412, -440398},
		{-368051, -451516},
		{-388502, -452124},
		{-386225, -463795},
		{-362508, -472669},
		{-348228, -460650},
		{-374460, -468287},
		{-378843, -463506},
		{-348266, -416671},
		{-370840, -496138},
		{-372035, -507692},
		{-376418, -505700},
		{-379605, -491755},
		{-367687, -478247},
		{-370874, -474263},
		{-357294, -464265},
		{-251142, -451500},
		{-330846, -404530},
		{-231398, -453907},
		{-284388, -438574},
		{-284672, -442559},
		{-294346, -500520},
		{-294538, -488378},
		{-293126, -485320},
		{-275629, -488552},
		{-278469, -480818},
		{-284784, -509285},
		{-267254, -504106},
		{-267367, -479964},
		{-258490, -521636},
		{-254107, -472632},
		{-262672, -466583},
		{-271032, -462254},
		{-285301, -471140},
		{-260251, -450075},
		{-261105, -447513},
		{-265659, -438973},
		{-258207, -435667},
		{-312170, -504492},
		{-320457, -499891},
		{-359719, -488606},
		{-329042, -511315},
		{-354540, -493785},
		{-345377, -498566},
		{-327414, -367851},
		{-292316, -394875},
		{-291653, -390066},
		{-283563, -402394},
		{-286412, -423267},
		{-286811, -419283},
		{-280532, -406183},
		{-275232, -402678},
		{-268627, -425833},
		{-270900, -420150},
		{-63050, -374369},
		{-84682, -360209},
		{-185798, -197377},
		{-149613, -230809},
		{-160233, -208784},
		{-169672, -259521},
		{-153153, -270140},
		{-174392, -224123},
		{-156693, -224123},
		{-153547, -246542},
		{-182258, -217436},
		{-161806, -259128},
		{-152367, -213897},
		{-152367, -213503},
		{-144895, -233172},
		{-181078, -254801},
		{-171639, -253621},
		{-160626, -242215},
		{-185012, -250475},
		{-197598, -246148},
		{-213330, -198951},
		{-209397, -204457},
		{-203497, -207210},
		{-210970, -231202},
		{-274687, -210357},
		{-288846, -204457},
		{-280980, -192264},
		{-270361, -199344},
		{-191698, -250082},
		{-244795, -189118},
		{-260921, -217830},
		{-238896, -196198},
		{-236929, -200131},
		{-230636, -198164},
		{-231029, -242215},
		{-237716, -232382},
		{-244795, -232776},
		{-250695, -224909},
		{-249908, -229629},
		{-258168, -223730},
		{-258168, -181645},
		{-225916, -180465},
		{-228669, -180858},
		{-293960, -186365},
		{-337772, -358289},
		{-113035, -255195},
		{-122081, -265814},
		{-103989, -264241},
		{-102416, -265814},
		{-139387, -226483},
		{-92976, -269747},
		{-116182, -273287},
		{-87863, -274860},
		{-105169, -281547},
		{-111855, -288626},
		{-85146, -300502},
		{-79997, -305145},
		{-64658, -313798},
		{-89830, -291773},
		{-100056, -293739},
		{-100414, -342904},
		{-98448, -349197},
		{-94121, -354703},
		{-88615, -349590},
		{-111427, -333071},
		{-107887, -336611},
		{-107887, -340544},
		{-124800, -328744},
		{-49677, -328351},
		{-191698, -175745},
		{-194845, -172992},
		{-237322, -178105},
		{-258168, -157653},
		{-253448, -163552},
		{-262888, -151360},
		{-277440, -145067},
		{-299073, -158833},
		{-294353, -163946},
		{-240469, -172205},
		{-216083, -160406},
		{-214117, -153720},
		{-219623, -149393},
		{-207431, -164732},
		{-204284, -159226},
		{-227883, -155293},
		{-240862, -146247},
		{-309299, -151360},
		{-322637, -145853}
	}
	for i=1,#nebulaCoordinates do
		local neb = Nebula():setPosition(nebulaCoordinates[i][1],nebulaCoordinates[i][2])
		table.insert(objects, neb)
	end

	local wormholeCoordinates = {
		{-337119, -446393, -285081, -394401},
		{-281213, -390134, -240036, -315982},
		{-288121, -390502, -330404, -447450},
		{-182311, -235555, -124978, -171037},
		{-189260, -237288, -240687, -307906},
		{-236685, -311028, -185550, -240929},
		{-244732, -312253, -284528, -387464},
		{-129546, -166316, -185475, -233213},
		{-121062, -166657, -66886, -98109},
		-- {-71370, -94747, -125051, -162639},	-- spawned in Icarus region
		-- {-63495, -92114, -5569, -17483}		-- spawned in Icarus region
		-- {-9623, -13494, -67497, -89579}		-- spawned in Icarus region
	}
	for i=1,#wormholeCoordinates do
		local worm = WormHole():setPosition(wormholeCoordinates[i][1],wormholeCoordinates[i][2]):setTargetPosition(wormholeCoordinates[i][3],wormholeCoordinates[i][4])
		if wormholeCoordinates[i][1] < wormholeCoordinates[i][3] then
			worm:setCallSign("to Icarus")
		else 
			worm:setCallSign("to Micro Solutions Inc.")
		end
		table.insert(objects, worm)
	end

	table.insert(objects, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 7"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-333556, -444455):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	table.insert(objects, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 6"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-284920, -390762):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	table.insert(objects, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 5"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-185633, -237027):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	table.insert(objects, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 4"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-240207, -311652):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	table.insert(objects, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 3"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-125286, -166062):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	local ship = nil
	ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP 2"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 06May2023."):setPosition(-184991, -238907):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderRoaming()
	setBeamColor(ship)
	table.insert(objects,ship)
	ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP 4"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 06May2023."):setPosition(-285064, -392):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderRoaming()
	setBeamColor(ship)
	table.insert(objects,ship)
--	wdpe1Zone = squareZone(-329691, -442387,"wdpe1")
--	wdpe1Zone:setColor(0,128,0):setLabel("1")
	ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP E1.2"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 01July2023."):setPosition(-329691, -442387):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderRoaming()
	setBeamColor(ship)
	table.insert(objects,ship)
--	wdpe2Zone = squareZone(-334164, -441729,"wdpe2")
--	wdpe2Zone:setColor(0,128,0):setLabel("2")
	ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP E2.2"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 01July2023."):setPosition(-334164, -441729):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderRoaming()
	setBeamColor(ship)
	table.insert(objects,ship)
	wdpe3Zone = squareZone(-331854, -445867,"wdpe3")
	wdpe3Zone:setColor(0,128,0):setLabel("3")
--	ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP E3.2"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 01July2023."):setPosition(-331854, -445867):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderRoaming()
--	setBeamColor(ship)
--	table.insert(objects,ship)

	westPoint = militaryOutpost("Human Navy")
	westPoint:setCallSign("West Point"):setPosition(-392998, -419877):setDescription("Ex-Exuari Military Outpost. Surrendered to Icarus Patrol on 01July2023.")
	westPoint:setScannedByFaction("Human Navy",true):orderRoaming()
	westPoint.comms_data = {
		friendlyness = 77,
		weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
		weapon_cost =		{Homing = 3, 		HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = math.random(10,18),	EMP = math.random(7,15) },
		weapon_available = 	{Homing = true,		HVLI = true,			Mine = true,			Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
		system_repair = {
			["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
			["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
			["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
			["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<30},
			["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
			["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
			["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
			["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
			["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
		},
		hack_repair =			random(1,100)<80,
		scan_repair =			random(1,100)<80,
		tube_slow_down_repair = random(1,100)<80,
		sensor_boost = {value = 10000, cost = 20},
		reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
		max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
		goods = {	nickel = 	{quantity = math.random(1,10),	cost = math.random(60,70)},
					dilithium =	{quantity = math.random(6,12),	cost = math.random(75,95)},
				},
		trade = {	food = true, medicine = random(1,100)<=13, luxury = false },
		public_relations = true,
		general_information = "A military outpost.",
		history = "Originally constructed by Exuari as a base of operations, it was captured by Icarus Patrol on 01 July 2023.",
		idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
		},
	}
	westPoint:setRestocksScanProbes(random(1,100)<87)
	westPoint:setRepairDocked(random(1,100)<76)
	westPoint:setSharesEnergyWithDocked(random(1,100)<92)
	table.insert(objects, westPoint)

	-- exuari ambush site close in Twin Pits Reserve
	table.insert(objects, Mine():setPosition(-297992, -402936))
	table.insert(objects, Mine():setPosition(-299654, -403329))
	table.insert(objects, Mine():setPosition(-298991, -402173))
	table.insert(objects, Mine():setPosition(-306138, -390285))
	table.insert(objects, Mine():setPosition(-298634, -404097))
	table.insert(objects, Mine():setPosition(-307334, -391456))
	table.insert(objects, Mine():setPosition(-306171, -391477))
	table.insert(objects, Mine():setPosition(-307356, -390200))
	table.insert(objects, Mine():setPosition(-278365, -405825))
	table.insert(objects, Mine():setPosition(-279735, -406690))
	table.insert(objects, Mine():setPosition(-279447, -405506))
	table.insert(objects, Mine():setPosition(-278573, -406914))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-306742, -390858))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-279129, -406284))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-298809, -403118))

	-- exuari ambush site in the Great Ignis Fatuus Nebula
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-185774, -193836))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-154462, -269991))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-162332, -239387))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-212834, -201568))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-212061, -231334))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-113092, -253695))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-104207, -281975))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-86508, -299162))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-191186, -174507))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-258450, -154406))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-239121, -173734))
	table.insert(objects, WarpJammer():setFaction("Exuari"):setPosition(-173294, -220304))

	-- Twin Pits Reserve region
	table.insert(objects, Planet():setCallSign("Micro Solutions Inc."):setDescription("THIS IS AN AUTOMATED RESPONSE. PROPERTY OF MICRO SOLUTIONS INC. FOR BETTER TOMORROW CONTACT SALES AT 0-12-345-678."):setPosition(-327846, -434276):setPlanetRadius(4000):setPlanetAtmosphereColor(0.10,0.10,0.60):setDistanceFromMovementPlane(-1500.00):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetSurfaceTexture("planets/planet-2.png"):setPlanetCloudRadius(4200.00))
	table.insert(objects, BlackHole():setPosition(-316643, -405038):setCallSign("Fox"))
	table.insert(objects, BlackHole():setPosition(-338417, -471899):setCallSign("Rabbit"))
	
--	microSolutionsStationZone = squareZone(-331344, -437682,"Micro Solutions 2")
--	microSolutionsStationZone:setColor(0,128,0):setLabel("M")
	microSolutionsDockingRing = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Micro Solutions Inc. Docking Ring 2"):setPosition(-331344, -437682):setDescription("PROPERTY OF MICRO SOLUTIONS INC."):setCommsScript(""):setCommsFunction(commsStation)
	microSolutionsDockingRing:setShortRangeRadarRange(8500)
	microSolutionsDockingRing.comms_data = {
		friendlyness = 77,
		weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
		weapon_cost =		{Homing = 3, 		HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = math.random(10,18),	EMP = math.random(7,15) },
		weapon_available = 	{Homing = true,		HVLI = true,			Mine = random(1,100)<50,Nuke = random(1,100)<30,	EMP = random(1,100)<40},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
		system_repair = {
			["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
			["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
			["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
			["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<30},
			["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
			["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
			["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
			["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
			["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
		},
		hack_repair =			true,
		scan_repair =			true,
		tube_slow_down_repair = random(1,100)<30,
		sensor_boost = {value = 10000, cost = 20},
		reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
		max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
		goods = {	nickel = 	{quantity = math.random(1,10),	cost = math.random(60,70)},
					dilithium =	{quantity = math.random(6,12),	cost = math.random(75,95)},
				},
		trade = {	food = false, medicine = random(1,100)<=13, luxury = true },
		public_relations = true,
		general_information = "This is a docking ring of planet Micro Solutions Inc., property of Micro Solutions Inc.. For better tomorrow contact sales AT 0-12-345-678.",
		history = "Constructed by Micro Solutions Inc. in the beginning of May 2023, shortly after buying rights to now aptly named Micro Solutions Inc. planet.",
		idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
		},
	}
	microSolutionsDockingRing:setRestocksScanProbes(random(1,100)<87)
	microSolutionsDockingRing:setRepairDocked(random(1,100)<76)
	microSolutionsDockingRing:setSharesEnergyWithDocked(random(1,100)<92)
	table.insert(objects, microSolutionsDockingRing)
	addGMMessage("[FilkRoad] starting objects, count=" .. #objects)

	return ret
end
function singleCPUShipFunction(fn)
	return singleObjectFunction(function (obj)
		if not isObjectType(obj,"CpuShip") then
			addGMMessage("you must select one CPUship")
			return
		end
		fn(obj)
	end)
end
function GMmessageHackedStatus(ship)
	-- it might be nice if there was logic to see if the systems we print exist
	addGMMessage(
		string.format(
			"hacked amount\n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n" ..
			"%s = %f \n",
			"reactor",ship:getSystemHackedLevel("reactor"),
			"beamweapons",ship:getSystemHackedLevel("beamweapons"),
			"missilesystem",ship:getSystemHackedLevel("missilesystem"),
			"maneuver",ship:getSystemHackedLevel("maneuver"),
			"impulse",ship:getSystemHackedLevel("impulse"),
			"warp",ship:getSystemHackedLevel("warp"),
			"jumpdrive",ship:getSystemHackedLevel("jumpdrive"),
			"frontshield",ship:getSystemHackedLevel("frontshield"),
			"rearshield",ship:getSystemHackedLevel("rearshield")
	))
end
function shieldsDegrade()
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Need to a ship to decay shields on")
		return
	end
	if object_list[1]:getShieldCount() == nil then
		addGMMessage("target has no shield")
		return
	end
	--addShieldDecayCurve = function (self, obj, total_time, curve_x, curve_y)
	--								  obj			,total_time	,curve_x			,curve_y
	--															 table of 4 numbers	 table of 4 numbers
	update_system:addShieldDecayCurve(object_list[1],2*60*60	,{0,0.33,0.66,1}	,{1.0,0.5,0.4,0.1})
end
function shieldsRegen()
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Need to a ship to restore shields on")
		return
	end
	if object_list[1]:getShieldCount() == nil then
		addGMMessage("target has no shield")
		return
	end
	--addShieldDecayCurve = function (self, obj, total_time, curve_x, curve_y)
	--								  obj			,total_time	,curve_x			,curve_y
	--															 table of 4 numbers	 table of 4 numbers
	update_system:addShieldDecayCurve(object_list[1],60*60		,{0,0.33,0.66,1}	,{0.1,0.4,0.5,1.0})
end
function bleedEnergy()
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Need to a ship to decay energy on")
		return
	end
	if object_list[1].getMaxEnergy == nil then
		addGMMessage("target has no energy")
		return
	end
	update_system:addEnergyDecayCurve(object_list[1],2*60*60,{0.0,0.33,0.66,1},{0.0,-0.4,-0.5,-1.0})
end
function restoreEnergy()
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Need to a ship to restore energy on")
		return
	end
	if object_list[1].getMaxEnergy == nil then
		addGMMessage("target has no energy")
		return
	end
	update_system:addEnergyDecayCurve(object_list[1],60*60,{0.0,0.33,0.66,1},{-1.0,-0.5,-0.4,0.0})
end
--	*											   *  --
--	**											  **  --
--	************************************************  --
--	****			Initial Set Up				****  --
--	************************************************  --
--	**											  **  --
--	*											   *  --
-------------------------------------
--	Initial Set Up > Start Region  --
-------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REGION	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- +PLAYER SPAWN POINT	F	setDefaultPlayerSpawnPoint
-- +TERRAIN				F	changeTerrain
function setStartRegion()
	clearGMFunctions()
	addGMFunction("-Main From Region",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("+Player Spawn Point",setDefaultPlayerSpawnPoint)
	addGMFunction("+Terrain",changeTerrain)
	addGMFunction("+Dynamic",setDynamicTerrain)
end
function setDynamicTerrain()
	clearGMFunctions()
	addGMFunction("-Main From Dynamic",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Region",setStartRegion)
	local dynamic_sections = {
		["One"] = movableTerrainOne,
	}
	if clean_list == nil then
		if gm_click_mode == "moveable terrain" then
			addGMFunction(">Moveable Terrain<",movableTerrainOne)
		else
			addGMFunction("Moveable Terrain",movableTerrainOne)
		end
	else
		if gm_click_mode == "moveable terrain" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		addGMFunction("Clean Moveable Terrain",function()
			for i,obj in ipairs(clean_list) do
				obj:destroy()
			end
			clean_list = nil
			setDynamicTerrain()
		end)
	end
	if gm_click_mode == "base01" then
		addGMFunction(">Base01<",base01)
	else
		addGMFunction("Base01",base01)
	end
end
function base01()
	if gm_click_mode == "base01" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "base01"
		onGMClick(base01OnClick)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   Base 01\nGM click mode.",prev_mode))
		end
	end
	setDynamicTerrain()
end
function base01OnClick(x,y)
	local cx=x
	local cy=y
	local inner_ring_speed=180
	local i_rad=5200
	local i_1=15000
	local i_2=math.sqrt(2)*i_1/2
--	local increment = 10
--	mineRingShim{dist=20000	,x=cx		,y=cy		,gap=3	,gap_size=20,speed=1800					,segments=6	,increment=increment}
--	mineRingShim{dist=7000	,x=cx		,y=cy		,gap=12	,gap_size=30,speed=120 					,segments=8	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx		,y=cy+-i_1	,gap=9	,gap_size=40,speed= inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx		,y=cy+ i_1	,gap=9	,gap_size=40,speed= inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+ i_1	,y=cy		,gap=9	,gap_size=40,speed= inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+-i_1	,y=cy		,gap=9	,gap_size=40,speed= inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+-i_2	,gap=9	,gap_size=40,speed=-inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+-i_2	,gap=9	,gap_size=40,speed=-inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+ i_2	,gap=9	,gap_size=40,speed=-inner_ring_speed	,segments=2	,increment=increment}
--	mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+ i_2	,gap=9	,gap_size=40,speed=-inner_ring_speed	,segments=2	,increment=increment}
	createObjectCircle{radius=5000,x=cx	,y=cy	,number=4,callback=function() return WarpJammer():setFaction(fleetSpawnFaction) end}
	createObjectCircle{radius=i_1,x=cx	,y=cy	,number=8,	callback=function() return WarpJammer():setFaction(fleetSpawnFaction) end}
	leech(fleetSpawnFaction):setPosition(cx+2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-1")
	leech(fleetSpawnFaction):setPosition(cx+2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-2")
	leech(fleetSpawnFaction):setPosition(cx-2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-3")
	leech(fleetSpawnFaction):setPosition(cx-2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-4")
	Artifact():setPosition(cx+0,cy+0):setCallSign("Rift Scanner")
end
function movableTerrainOne()
	if gm_click_mode == "moveable terrain" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "moveable terrain"
		onGMClick(movableTerrainOneOnClick)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   moveable terrain\nGM click mode.",prev_mode))
		end
	end
	setDynamicTerrain()
end
-------------------------------------
--	Initial Set Up > Player Ships  --
-------------------------------------
-- Button text		   FD*	Related function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- +TWEAK PLAYER		F	tweakPlayerShip
-- +SPAWN				F	spawnPlayerShip
-- +TELEPORT PLAYERS	F	teleportPlayers
function playerShip()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("+Tweak player",tweakPlayerShip)
	addGMFunction("+Spawn",spawnPlayerShip)
	addGMFunction("+Filtered Spawn",filteredPlayerShipSpawn)
	addGMFunction("+Teleport Players",teleportPlayers)
end
----------------------------------
--	Initial Set Up > Wormholes  --
----------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM WORMHOLE		F	initialGMFunctions
-- -SETUP					F	initialSetUp
-- +ICARUS TO DEFAULT		D	setIcarusWormholeExit
function setWormholes()
	clearGMFunctions()
	addGMFunction("-Main From Wormhole",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("+Icarus to " .. wormholeIcarus.exit,setIcarusWormholeExit)
end
function setIcarusWormholeExit()
	clearGMFunctions()
	addGMFunction("-Wormhole",setWormholes)
	for i,w_exit in ipairs(wormholeIcarus.exits) do
		local button_label = w_exit.name
		if button_label == wormholeIcarus.exit then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			wormholeIcarus.exit = w_exit.name
			wormholeIcarus:setTargetPosition(w_exit.x,w_exit.y):onTeleportation(w_exit.tax)
			setIcarusWormholeExit()
		end)
	end
end
function createRegionUponTeleportation(worm_hole)
	local exit_region = nil
	for i,w_exit in ipairs(worm_hole.exits) do
		if w_exit.name == worm_hole.exit then
			exit_region = w_exit.region_name
			break
		end
	end
	if exit_region ~= nil then
		for i=1,#universe.available_regions do
			local region = universe.available_regions[i]
			if string.find(region.name,exit_region) then
				if not universe:hasRegionSpawned(region) then
					universe:spawnRegion(region)
				end
				break
			end
		end
	end
end
function wormholeTax1(worm_hole,transportee)
	createRegionUponTeleportation(worm_hole)
	if transportee ~= nil then
		if isObjectType(transportee,"PlayerSpaceship") or isObjectType(transportee,"CpuShip") then
			for i,system in ipairs(system_list) do
				if transportee:hasSystem(system) then
					local adjust = random(.7,.95)
					if transportee:getShieldsActive() then
						adjust = math.min(1,adjust + .2)
					end
					transportee:setSystemHealth(system,transportee:getSystemHealth(system)*adjust)
				end
			end
		end
	end
end
function wormholeTax2(worm_hole,transportee)
	createRegionUponTeleportation(worm_hole)
	if transportee ~= nil then
		if isObjectType(transportee,"PlayerSpaceship") or isObjectType(transportee,"CpuShip") then
			local system_pool = {}
			for i,system in ipairs(system_list) do
				if transportee:hasSystem(system) then
					table.insert(system_pool,system)
				end
			end
			for i=1,3 do
				local damage_system = tableRemoveRandom(system_pool)
				transportee:setSystemHealth(damage_system,transportee:getSystemHealth(damage_system)*random(.2,.6))
			end
		end
	end
end
------------------------------
--	Initial Set Up > Zones  --
------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM ZONES		F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- +ADD ZONE			F	addZone
-- +DELETE ZONE			F	deleteZone (button only present if zones available to delete)
function changeZones()
	clearGMFunctions()
	addGMFunction("-Main From Zones",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("+Add Zone",addZone)
	if zone_list ~= nil and #zone_list > 0 then
		addGMFunction("+Delete Zone",deleteZone)
	end
end
--------------------------------------------------
--	Initial Set Up > Automated Station Warning  --
--------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -INITIAL				F	initialSetUp
-- WARNING ON*			*	inline
-- WARNING OFF			*	inline
-- SHIP TYPE ON*		*	inline
-- SHIP TYPE OFF		*	inline
-- +PROXIMITY 30U DFLT	D	setStationSensorRange
function autoStationWarn()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Initial",initialSetUp)
	local button_label = "Warning On"
	if automated_station_danger_warning then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label, function()
		automated_station_danger_warning = true
		autoStationWarn()
	end)
	button_label = "Warning Off"
	if not automated_station_danger_warning then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label, function()
		automated_station_danger_warning = false
		autoStationWarn()
	end)
	button_label = "Ship Type On"
	if warning_includes_ship_type then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label, function()
		warning_includes_ship_type = true
		autoStationWarn()
	end)
	button_label = "Ship Type Off"
	if not warning_includes_ship_type then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label, function()
		warning_includes_ship_type = false
		autoStationWarn()
	end)
	button_label = "+Proximity"
	if server_sensor then
		--local long_range_server = getLongRangeRadarRange()
		local long_range_server = 30000
		button_label = string.format("%s %iU Dflt",button_label,long_range_server/1000)
	else
		button_label = string.format("%s %iU",button_label,station_sensor_range/1000)
	end
	addGMFunction(button_label,setStationSensorRange)
end
--	****************************************************************  --
--	****				Initial Set Up Start Region				****  --
--	****************************************************************  --
----------------------------------------------------------
--	Initial Set Up > Start Region > Player Spawn Point  --
----------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -FROM PLYR SPWN PT	F	setStartRegion
-- followed by all regions after that
function setDefaultPlayerSpawnPoint()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-From Plyr Spwn Pt",setStartRegion)
	local region_group_1 = {
		"Icarus", "Kentar", "Lafrina", "Teresh", "Astron", "Bask"
	}
	for i=1,#universe.available_regions do
		local region=universe.available_regions[i]
		local has_been_created=universe:hasRegionSpawned(region)
		local button_name=region.name
		if startRegion==region.name then
			button_name=button_name .. "*"
		end
		local found_in_group_1 = false
		for _, group_1 in ipairs(region_group_1) do
			if string.find(button_name,group_1) then
				found_in_group_1 = true
			end
		end
		if found_in_group_1 then
			addGMFunction(button_name, function()
				playerSpawnX=region.spawn_x
				playerSpawnY=region.spawn_y
				if not has_been_created then
					universe:spawnRegion(region)
				end
				startRegion=region.name
				setDefaultPlayerSpawnPoint()
			end)
		end
	end
	addGMFunction("+Other Regions",setDefaultPlayerSpawnPointsInOtherRegions)
end
function setDefaultPlayerSpawnPointsInOtherRegions()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Start Region",setStartRegion)
	addGMFunction("-Player Spawn Point",setDefaultPlayerSpawnPoint)
	local region_group_2 = {
		"Eris", "Santa", "Riptide", "Staunch", "Glikton"
	}
	for i=1,#universe.available_regions do
		local region=universe.available_regions[i]
		local has_been_created=universe:hasRegionSpawned(region)
		local button_name=region.name
		if startRegion==region.name then
			button_name=button_name .. "*"
		end
		local found_in_group_2 = false
		for _, group_1 in ipairs(region_group_2) do
			if string.find(button_name,group_1) then
				found_in_group_2 = true
			end
		end
		if found_in_group_2 then
			addGMFunction(button_name, function()
				playerSpawnX=region.spawn_x
				playerSpawnY=region.spawn_y
				if not has_been_created then
					universe:spawnRegion(region)
				end
				startRegion=region.name
				setDefaultPlayerSpawnPoint()
			end)
		end
	end
end
-----------------------------------------------
--	Initial Set Up > Start Region > Terrain  --
-----------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SETUP			F	initialSetUp
-- -FROM TERRAIN	F	setStartRegion
-- followed by all regions after that
function changeTerrain()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-From Terrain",setStartRegion)
	for i=1,#universe.available_regions do
		local region=universe.available_regions[i]
		local has_been_created=universe:hasRegionSpawned(region)
		if has_been_created then
			addGMFunction(region.name .. "*",function ()
				universe:removeRegion(region)
				changeTerrain()
			end)
		else
			addGMFunction(region.name,function ()
				universe:spawnRegion(region)
				changeTerrain()
			end)
		end
	end
	if kentar_moving_asteroids == nil then
		addGMFunction("Add Kentar Whirlpool",function()
			kentar_moving_asteroids = createKentarOrbitingAsteroids()
			changeTerrain()
		end)
	else
		addGMFunction("Del Kentar Whirlpool",function()
			if kentar_moving_asteroids ~= nil then
				for _,ka in pairs(kentar_moving_asteroids) do
					ka:destroy()
				end
			end
			kentar_moving_asteroids = nil
			changeTerrain()
		end)
	end
	if icarus_color then
		if wormhole_tour then
			addGMFunction("Del Wormhole Tour",function()
				wormhole_tour = false
				if wormhole_tour_stuff ~= nil then
					for _, dw in pairs(wormhole_tour_stuff) do
						dw:destroy()
					end
				end
				changeTerrain()	
			end)
		else
			addGMFunction("Add Wormhole tour",function()
				wormhole_tour = true
				wormhole_tour_stuff = wormholeTour()
				changeTerrain()
			end)
		end
	end
	if stationTknolg == nil then
		if gm_click_mode == "tknolg base" then
			addGMFunction(">Tknolg Base<",placeTknolgBase)
		else
			addGMFunction("Tknolg Base",placeTknolgBase)
		end
	else
		if gm_click_mode == "tknolg base" then
			gm_click_mode = nil
			onGMClick(nil)
		end
	end
	if mirrorUniverse then
		addGMFunction("To Non Mirror",function ()
			convertToNonMirror()
			changeTerrain()
		end)
	else
		addGMFunction("To Mirror",function ()
			convertToMirror()
			changeTerrain()
		end)
	end
end
function skeletonToFaction(faction)
	stationIcarus:setFaction(faction)
	stationKentar:setFaction(faction)
	stationAstron:setFaction(faction)
	stationLafrina:setFaction(faction)
	stationTeresh:setFaction(faction)
	stationBask:setFaction(faction)
end
function convertToMirror()
	mirrorUniverse = true
	skeletonToFaction("Holy Terra")
end
function convertToNonMirror()
	mirrorUniverse = false
	skeletonToFaction("Human Navy")
end
-- Icarus area stations, asteroids, mines, etc. 
function icarusSector()
	createIcarusColor()
	local ret = {
		destroy = function(self)
			assert(type(self)=="table")
			removeIcarusColor()
			for index = #self.objects,1,-1 do
				self.objects[index]:destroy()
			end
		end,
		objects = {}
	}
	-- Ghost jump trace (from moons GM session @ 2020-07-18)
	local art=Artifact():setPosition(23387, 73994)
	update_system:addPeriodicCallback(art,
		function (self, obj)
			self:setCallSign(string.format("%.2f",450*(200*math.cos(getScenarioTime()))))
		end
		,0.1)
	table.insert(ret.objects,art)
	return ret
end
function createIcarusColor()
	icarus_color = true
	icarusDefensePlatforms = {}
	icarusMines = {}
	icarus_artifacts = createIcarusArtifacts()
	macassaAsteroids = createMacassaAsteroids()
	aquariusAsteroids = createAquariusAsteroids()
	cindyFollyAsteroids = createCindyFollyAsteroids()
	diversityFeatures = createDiversityFeatures()
	H0_to_K2_asteroids = createH0toK2asteroids()
	H1_to_I2_mines = createH1toI2mines()
	J0_to_K0_nebulae = createJ0toK0nebulae()
	J4_to_L8_asteroids = createJ4toL8asteroids()
	J4_to_L8_nebulae = createJ4toL8nebulae()
	borlanFeatures = createBorlanFeatures()
	finneganFeatures = createFinneganFeatures()
	icarusStations = createIcarusStations()
	icarusWormholeRiptideStuff = createIcarusToRiptideWormholeArea()
	icarusFilkRoadStuff = createIcarusFilkRoadStuff()
	regionStations = icarusStations
	if stationIcarus ~= nil then
		table.insert(regionStations,stationIcarus)
	end
	local icx, icy = stationIcarus:getPosition()
	local startAngle = 23
	for i=1,6 do
		local dpx, dpy = vectorFromAngle(startAngle,8000)
--		if i == 2 and not mirrorUniverse then
--			dp2Zone = squareZone(icx+dpx,icy+dpy,"idp2")
--			dp2Zone:setColor(0,128,0):setLabel("2")
--		elseif i == 1 and not mirrorUniverse then
--			dp1Zone = squareZone(icx+dpx,icy+dpy,"idp1")
--			dp1Zone:setColor(0,128,0):setLabel("1")
--		else		
			local dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(icx+dpx,icy+dpy):setScannedByFaction("Human Navy",true):setCallSign(string.format("IDP%i",i)):setDescription(string.format("Icarus defense platform %i",i)):orderRoaming()
			setBeamColor(dp)
			station_names[dp:getCallSign()] = {dp:getSectorName(), dp}
			dp:setLongRangeRadarRange(20000):setCommsScript(""):setCommsFunction(commsStation)
			if mirrorUniverse then
				dp:setFaction("Holy Terra")
			end
			table.insert(icarusDefensePlatforms,dp)
--		end
		for j=1,5 do
			dpx, dpy = vectorFromAngle(startAngle+17+j*4,8000)
			local dm = Mine():setPosition(icx+dpx,icy+dpy)
			table.insert(icarusMines,dm)
		end
		startAngle = startAngle + 60
	end
	--planetBespin = Planet():setPosition(40000,5000):setPlanetRadius(3000):setDistanceFromMovementPlane(-2000):setCallSign("Donflist")
	--planetBespin:setPlanetSurfaceTexture("planets/gas-1.png"):setAxialRotationTime(300):setDescription("Mining and Gambling")
end
function removeIcarusColor()
	icarus_color = false
	icarusDefensePlatforms = destroyEEtable(icarusDefensePlatforms)
	icarusMines = destroyEEtable(icarusMines)
	icarus_artifacts = destroyEEtable(icarus_artifacts)
	macassaAsteroids = destroyEEtable(macassaAsteroids)
	diversityFeatures = destroyEEtable(diversityFeatures)
	icarusWormholeRiptideStuff = destroyEEtable(icarusWormholeRiptideStuff)
	icarusFilkRoadStuff = destroyEEtable(icarusFilkRoadStuff)
	aquariusAsteroids = destroyEEtable(aquariusAsteroids)
	cindyFollyAsteroids = destroyEEtable(cindyFollyAsteroids)
	H0_to_K2_asteroids = destroyEEtable(H0_to_K2_asteroids)
	J4_to_L8_asteroids = destroyEEtable(J4_to_L8_asteroids)
	H1_to_I2_mines = destroyEEtable(H1_to_I2_mines)
	J0_to_K0_nebulae = destroyEEtable(J0_to_K0_nebulae)
	J4_to_L8_nebulae = destroyEEtable(J4_to_L8_nebulae)
	borlanFeatures = destroyEEtable(borlanFeatures)
	finneganFeatures = destroyEEtable(finneganFeatures)
	if icarusStations ~= nil then
		for _,s in pairs(icarusStations) do
			if not s.skeleton_station then
				s:destroy()
			end
		end
	end
	icarusStations = nil
	if icarus_commerce then
		removeIcarusCommerce()
	end
end
function squareZone(x,y,name)
	local zone = Zone():setPoints(x+500,y+500,x-500,y+500,x-500,y-500,x+500,y-500)
	zone.name = name
	if zone_list == nil then
		zone_list = {}
	end
	table.insert(zone_list,zone)
	return zone
end
function createDiversityFeatures()
	local asteroidList = {}
	local asteroidInfo = {
    	{-47611, 239879, 117},
    	{-49239, 239415, 128},
    	{-47766, 242165, 121},
    	{-50207, 241507, 138},
    	{-45946, 237981, 119},
    	{-42038, 238051, 129},
    	{-45171, 240267, 113},
    	{-43582, 240499, 124},
    	{-42705, 232767, 150},
    	{-45314, 233958, 128},
    	{-46562, 233505, 171},
    	{-46732, 235093, 124},
    	{-48377, 233505, 115},
    	{-44747, 230555, 164},
    	{-43556, 230839, 128},
    	{-46903, 226018, 122},
    	{-45598, 229080, 313},
    	{-43726, 227889, 129},
    	{-37089, 235558, 114},
    	{-37345, 236585, 175},
    	{-35329, 236035, 114},
    	{-38120, 240693, 120},
    	{-36144, 238795, 122},
    	{-34943, 241158, 119},
    	{-35161, 232087, 125},
    	{-35989, 234421, 184},
    	{-37015, 233871, 220},
    	{-40776, 233108, 121},
    	{-39018, 232030, 126},
    	{-41246, 238502, 118},
    	{-40058, 237135, 210},
    	{-40388, 235998, 124},
    	{-33899, 234641, 130},
    	{-30269, 232405, 195},
    	{-30049, 234091, 116},
    	{-29096, 240435, 119},
    	{-30452, 240435, 120},
    	{-30410, 243405, 158},
    	{-30599, 238051, 123},
    	{-29059, 236805, 128},
    	{-33165, 235888, 122},
    	{-33385, 237721, 118},
    	{-31479, 238491, 162},
    	{-33393, 240809, 114},
    	{-22420, 244289, 116},
    	{-22909, 245762, 172},
    	{-23071, 243413, 111},
    	{-24703, 243542, 211},
    	{-24506, 244840, 127},
    	{-20559, 249246, 126},
    	{-20558, 247091, 127},
    	{-21879, 247091, 221},
    	{-23419, 248990, 227},
    	{-18932, 252630, 129},
    	{-17661, 251105, 129},
    	{-20253, 250546, 111},
    	{-19033, 249073, 325},
    	{-25869, 236805, 118},
    	{-28069, 235008, 112},
    	{-28362, 238711, 129},
    	{-26272, 239701, 179},
    	{-27042, 240361, 124},
    	{-23719, 242361, 115},
    	{-25487, 240738, 188},
    	{-26453, 241297, 129},
    }
    for i=1,#asteroidInfo do
    	local staticAsteroid = Asteroid():setPosition(asteroidInfo[i][1],asteroidInfo[i][2]):setSize(asteroidInfo[i][3])
    	table.insert(asteroidList,staticAsteroid)
    end
	table.insert(asteroidList,Nebula():setPosition(-42427, 235391))
	table.insert(asteroidList,Nebula():setPosition(-47002, 241542))
	table.insert(asteroidList,Nebula():setPosition(-46290, 228731))
	table.insert(asteroidList,Nebula():setPosition(-35462, 242254))
	table.insert(asteroidList,Nebula():setPosition(-34140, 235238))
	table.insert(asteroidList,Nebula():setPosition(-22702, 246626))
	table.insert(asteroidList,Nebula():setPosition(-18330, 254912))
	table.insert(asteroidList,Nebula():setPosition(-27023, 237882))
	--northern batch
	table.insert(asteroidList,Nebula():setPosition(-127029, -96430))
	table.insert(asteroidList,Nebula():setPosition(-101552, -118937))
	table.insert(asteroidList,Nebula():setPosition(-96767, -121418))
	table.insert(asteroidList,Nebula():setPosition(-78845, -106627))
	table.insert(asteroidList,Nebula():setPosition(-71648, -107426))
	table.insert(asteroidList,Nebula():setPosition(-75247, -140415))
	table.insert(asteroidList,Nebula():setPosition(-62851, -126420))
	table.insert(asteroidList,Nebula():setPosition(-50690, -104051))
	table.insert(asteroidList,Nebula():setPosition(-54854, -130219))
	table.insert(asteroidList,Nebula():setPosition(-57253, -122021))
	table.insert(asteroidList,Nebula():setPosition(-39859, -122821))
	table.insert(asteroidList,Nebula():setPosition(-104437, -91432))
	table.insert(asteroidList,Nebula():setPosition(-97812, -96153))
    return asteroidList
end
function createIcarusStations()
	local stations = {}
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	--Amaranth
--	local amaranthZone = squareZone(-77672, -141896, "Amaranth 2 zx1")
--	amaranthZone:setColor(0,128,0):setLabel("A")
	stationAmaranth = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Amaranth 2"):setPosition(-77672, -141896):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		-- TSN doesnt really have a mirror version
		stationAmaranth:setFaction("Spacer")
	end
    stationAmaranth.comms_data = {
    	friendlyness = 67,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 5,				HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = true,			Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 10},
        sensor_boost_probes = {name = "Binoc", cost = math.random(39,55), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(4,8),	cost = math.random(50,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = random(1,100)<16, medicine = random(1,100)<34, luxury = false },
        public_relations = true,
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Adder MK5",
			DF4 = "Adder MK5",
			DF5 = "Phobos T3",
			DF6 = "Phobos T3",
    	},
	}
	if random(1,100) <= 72 then stationAmaranth:setRestocksScanProbes(false) end
	if random(1,100) <= 61 then stationAmaranth:setRepairDocked(false) end
	if random(1,100) <= 37 then stationAmaranth:setSharesEnergyWithDocked(false) end
	station_names[stationAmaranth:getCallSign()] = {stationAmaranth:getSectorName(), stationAmaranth}
	table.insert(stations,stationAmaranth)
	--Aquarius F4m9
--	local aquariusZone = squareZone(-4295, 14159, "Aquarius X F4.9")
--	aquariusZone:setColor(51,153,255):setLabel("A")
    stationAquarius = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Aquarius X"):setPosition(-4295, 14159):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationAquarius:setFaction("Spacer")
	end

    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 39 then tradeMedicine = true else tradeMedicine = false end
    if random(1,100) <= 82 then tradeFood = true else tradeFood = false end
    stationAquarius.comms_data = {
    	friendlyness = 67,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 5,				HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = homeAvail,		HVLI = true,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 10},
        sensor_boost_probes = {name = "Binoc", cost = math.random(39,55), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(4,8),	cost = math.random(50,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "Facilitate mining the nearby asteroids",
    	history = "Station named after the platinum mine on ancient Earth on the African continent",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Adder MK5",
			DF4 = "Adder MK5",
			DF5 = "Phobos T3",
			DF6 = "Phobos T3",
    	},
	}
	if random(1,100) <= 72 then stationAquarius:setRestocksScanProbes(false) end
	if random(1,100) <= 61 then stationAquarius:setRepairDocked(false) end
	if random(1,100) <= 37 then stationAquarius:setSharesEnergyWithDocked(false) end
	station_names[stationAquarius:getCallSign()] = {stationAquarius:getSectorName(), stationAquarius}
	table.insert(stations,stationAquarius)
	--Bikolipox
	stationBikolipox = SpaceStation():setTemplate("Small Station"):setFaction("Exuari"):setCallSign("Bikolipox"):setPosition(-19186, 250851):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationBikolipox.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = math.random(9,21) },
        weapon_available = 	{Homing = true,		HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 5},
        mine_probes = {name = "LDSM 1.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
        goods = {	gold = 	{quantity = math.random(1,10),	cost = math.random(60,70)},	
        			cobalt ={quantity = math.random(6,12),	cost = math.random(75,95)},
        			luxury ={quantity = math.random(2,8),	cost = math.random(55,95)} },
        trade = {	food = false, medicine = random(1,100)<13, luxury = false },
        buy = {		circuit =	math.random(95,140),
        			warp =		math.random(125,150)},
        public_relations = true,
        general_information = "Mining of nearby asteroids is what we do",
    	history = "We established this mining station to get in on the extraction of resources from these asteroids",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Adder MK5",
			DF6 = "Adder MK5",
			DF7 = "Adder MK6",
			DF8 = "Adder MK6",
			DF9 = "Phobos T3",
			DF10 = "Phobos T3",
    	},
	}
	if random(1,100) <= 42 then stationBikolipox:setRestocksScanProbes(false) end
	if random(1,100) <= 21 then stationBikolipox:setRepairDocked(false) end
	if random(1,100) <= 13 then stationBikolipox:setSharesEnergyWithDocked(false) end
	station_names[stationBikolipox:getCallSign()] = {stationBikolipox:getSectorName(), stationBikolipox}
	table.insert(stations,stationBikolipox)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationBikolipox:destroy()
	end
	--Borlan
--	local borlanZone = squareZone(68808, 39300, "Borlan 4 G8")
--	borlanZone:setColor(51,153,255):setLabel("B")
    stationBorlan = SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("Borlan 4"):setPosition(68808, 39300):setDescription("Mining and Supply"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationBorlan:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 13 then tradeMedicine = true else tradeMedicine = false end
    stationBorlan.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = math.random(9,21) },
        weapon_available = 	{Homing = true,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair =	true,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        sensor_boost = {value = 10000, cost = 5},
        sensor_boost_probes = {name = "Scope", cost = math.random(59,75), quantity = math.random(1,3), speed = 1000, boost = 30, range = 50},
        mine_probes = {name = "LDSM 1.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
        goods = {	gold = 	{quantity = math.random(1,10),	cost = math.random(60,70)},	
        			cobalt ={quantity = math.random(6,12),	cost = math.random(75,95)},
        			luxury ={quantity = math.random(2,8),	cost = math.random(55,95)} },
        trade = {	food = false, medicine = tradeMedicine, luxury = false },
        buy = {		circuit =	math.random(95,140),
        			warp =		math.random(125,150)},
        public_relations = true,
        general_information = "Mining and resupply, New and improved",
    	history = "Station success based on location and ingenuity of original builder to provide supplies for all the miners wanting to strike it rich",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Adder MK5",
			DF6 = "Adder MK5",
			DF7 = "Adder MK6",
			DF8 = "Adder MK6",
			DF9 = "Phobos T3",
			DF10 = "Phobos T3",
    	},
	}
	if random(1,100) <= 42 then stationBorlan:setRestocksScanProbes(false) end
	if random(1,100) <= 21 then stationBorlan:setRepairDocked(false) end
	if random(1,100) <= 13 then stationBorlan:setSharesEnergyWithDocked(false) end
	station_names[stationBorlan:getCallSign()] = {stationBorlan:getSectorName(), stationBorlan}
	table.insert(stations,stationBorlan)
	--Chitlok
	stationChitlok = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Chitlok"):setPosition(-72708, -106381):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationChitlok.comms_data = {
    	friendlyness = 52,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,6),	HVLI = math.random(1,4),Mine = math.random(5,9),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = random(1,10)<=8,	Mine = true,			Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair =	true,
        sensor_boost = {value = 10000, cost = 10},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	circuit = 	{quantity = math.random(4,8),	cost = math.random(40,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = true, medicine = random(1,100)<18, luxury = false },
        public_relations = true,
    	history = "Talk to the queen",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
			DF6 = "Phobos T3",
			DF7 = "Stalker Q7",
			DF8 = "Nirvana R5A",
			DF9 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 63 then stationChitlok:setRestocksScanProbes(false) end
	if random(1,100) <= 46 then stationChitlok:setRepairDocked(false) end
	if random(1,100) <= 25 then stationChitlok:setSharesEnergyWithDocked(false) end
	station_names[stationChitlok:getCallSign()] = {stationChitlok:getSectorName(), stationChitlok}
	table.insert(stations,stationChitlok)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationChitlok:destroy()
	end
	--Cindy's Folly
	local cindyZone = squareZone(81075, -1304, "Cindy's Folly 4 E9")
	cindyZone:setColor(51,153,255):setLabel("C")
	--[[
    stationCindyFolly = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Cindy's Folly 4"):setPosition(81075, -1304):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 37 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 44 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 23 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 13 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 27 then tradeMedicine = true else tradeMedicine = false end
    stationCindyFolly.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = 30,					EMP = 20 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = false,				EMP = false},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        mine_probes = {name = "LDSM 3.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	dilithium = {quantity = math.random(4,8),	cost = math.random(50,80)},
        			tritanium =	{quantity = math.random(6,12),	cost = math.random(45,65)},
        			platinum =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Mine nearby asteroids",
    	history = "A mining operation often on the brink of failure due to the loss of spacecraft in the nearby black holes",
	}
	if random(1,100) <= 89 then stationCindyFolly:setRestocksScanProbes(false) end
	if random(1,100) <= 72 then stationCindyFolly:setRepairDocked(false) end
	if random(1,100) <= 13 then stationCindyFolly:setSharesEnergyWithDocked(false) end
	station_names[stationCindyFolly:getCallSign()] = {stationCindyFolly:getSectorName(), stationCindyFolly}
	table.insert(stations,stationCindyFolly)
	--]]
	--Clew
	stationClew = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Clew"):setPosition(-130445, -97789):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		-- USN doesnt really have a mirror version
		stationClew:setFaction("Spacer")
	end
    stationClew.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 				HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = 30,					EMP = 20 },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = false,				EMP = false},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	dilithium = {quantity = math.random(4,8),	cost = math.random(50,80)},
        			tritanium =	{quantity = math.random(6,12),	cost = math.random(45,65)},
        			platinum =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = false, medicine = random(1,100)<56, luxury = random(1,100)<74 },
        public_relations = true,
        general_information = "Mine nearby nebula",
    	history = "Not much history",
	}
	if random(1,100) <= 89 then stationClew:setRestocksScanProbes(false) end
	if random(1,100) <= 72 then stationClew:setRepairDocked(false) end
	if random(1,100) <= 13 then stationClew:setSharesEnergyWithDocked(false) end
	station_names[stationClew:getCallSign()] = {stationClew:getSectorName(), stationClew}
	table.insert(stations,stationClew)
	--Elysium F4m2.5 
--	local elysiumZone = squareZone(-7504, 1384, "Elysium 8 F4.3")
--	elysiumZone:setColor(51,153,255):setLabel("E")
    stationElysium = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Elysium 8"):setPosition(-7504, 1384):setDescription("Commerce and luxury accomodations"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationElysium:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 13 then tradeLuxury = true else tradeLuxury = false end
    stationElysium.comms_data = {
    	friendlyness = 29,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(3,7),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = true,			Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	warp =		{quantity = math.random(2,4),	cost = math.random(80,120)},
        			cobalt =	{quantity = math.random(2,4),	cost = math.random(30,70)},	},
        trade = {	food = false, medicine = false, luxury = tradeLuxury },
        public_relations = true,
        general_information = "This is where all the wealthy species shop and stay when traveling",
    	history = "Named after a fictional station from early 21st century literature as a reminder of what can happen if people don't pay attention to what goes on in all levels of the society in which they live",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
    	},
	}
	if random(1,100) <= 86 then stationElysium:setRestocksScanProbes(false) end
	if random(1,100) <= 35 then stationElysium:setRepairDocked(false) end
	if random(1,100) <= 27 then stationElysium:setSharesEnergyWithDocked(false) end
	station_names[stationElysium:getCallSign()] = {stationElysium:getSectorName(), stationElysium}
	table.insert(stations,stationElysium)
	--Endymion
	local endymionDP1zone = squareZone(136035, 82232, "EndymionDP1 J11")
	endymionDP1zone:setColor(255, 255, 128):setLabel("D")
--	local edp1 = CpuShip():setFaction("TSN"):setTemplate("Defense platform"):setCallSign("EDP1"):setPosition(136035, 82232):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
--	setBeamColor(edp1)
--	station_names[edp1:getCallSign()] = {edp1:getSectorName(), edp1}
--	if mirrorUniverse then
--		-- TSN doesnt really have a mirror version
--		edp1:setFaction("Spacer")
--	end
--	table.insert(stations,edp1)
	local endymionZone = squareZone(138284, 81805,"Endymion 2 J11")
	endymionZone:setColor(255, 255, 128):setLabel("E")
	--[[
	stationEndymion = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Endymion"):setPosition(138284, 81805):setDescription("Trading and mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		-- TSN doesnt really have a mirror version
		stationEndymion:setFaction("Spacer")
	end
    stationEndymion.comms_data = {
    	friendlyness = 29,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(3,7),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = true,			Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        mine_probes = {name = "LDSM 1.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	warp =		{quantity = math.random(2,4),	cost = math.random(80,120)},
        			cobalt =	{quantity = math.random(2,4),	cost = math.random(30,70)},	},
        trade = {	food = false, medicine = false, luxury = random(1,100)<46 },
        public_relations = true,
        general_information = "We mine these asteroids for all they're worth",
    	history = "A beautiful sleepy little mining station, just like it's namesake",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
    	},
	}
	if random(1,100) <= 86 then stationEndymion:setRestocksScanProbes(false) end
	if random(1,100) <= 35 then stationEndymion:setRepairDocked(false) end
	if random(1,100) <= 27 then stationEndymion:setSharesEnergyWithDocked(false) end
	station_names[stationEndymion:getCallSign()] = {stationEndymion:getSectorName(), stationEndymion}
	table.insert(stations,stationEndymion)
	--]]
	--Finnegan
	local finneganZone = squareZone(114460, 95868, "Finnegan 3 J10")
	finneganZone:setColor(51,153,255):setLabel("F")
	--[[
	stationFinnegan = SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("Finnegan 3"):setPosition(114460, 95868):setDescription("Trading, mining and manufacturing"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationFinnegan:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 63 then tradeMedicine = true else tradeMedicine = false end
    stationFinnegan.comms_data = {
    	friendlyness = 52,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,6),	HVLI = math.random(1,4),Mine = math.random(5,9),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = true,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair =	true,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost_probes = {name = "Binoc", cost = math.random(39,50), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        sensor_boost = {value = 10000, cost = 10},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	circuit = 	{quantity = math.random(4,8),	cost = math.random(40,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "We mine the asteroids and the nebula and use these to manufacture various specialized circuits",
    	history = "The Finnegan family set up this station here to take advantage of the readily available resources",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
			DF6 = "Phobos T3",
			DF7 = "Stalker Q7",
			DF8 = "Nirvana R5A",
			DF9 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 63 then stationFinnegan:setRestocksScanProbes(false) end
	if random(1,100) <= 46 then stationFinnegan:setRepairDocked(false) end
	if random(1,100) <= 25 then stationFinnegan:setSharesEnergyWithDocked(false) end
	station_names[stationFinnegan:getCallSign()] = {stationFinnegan:getSectorName(), stationFinnegan}
	table.insert(stations,stationFinnegan)
	--]]
	--Gagarin
	--local gagarinZone = squareZone(-60000, 62193, "Gagarin I2")
	--gagarinZone:setColor(0,128,0)
	stationGagarin = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Gagarin"):setPosition(-60000, 62193):setDescription("Mining and exploring"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationGagarin:setFaction("Holy Terra")
	end
    stationGagarin:setShortRangeRadarRange(9000)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 23 then tradeMedicine = true else tradeMedicine = false end
    stationGagarin.comms_data = {
    	friendlyness = 82,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<60,
        sensor_boost = {value = 10000, cost = 10},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(4,8),	cost = math.random(50,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "Facilitate mining the nearby asteroids",
    	history = "Station named after the Cosmonaut from 20th century Earth"
	}
	if random(1,100) <= 16 then stationGagarin:setRestocksScanProbes(false) end
	if random(1,100) <= 25 then stationGagarin:setRepairDocked(false) end
	if random(1,100) <= 11 then stationGagarin:setSharesEnergyWithDocked(false) end
	station_names[stationGagarin:getCallSign()] = {stationGagarin:getSectorName(), stationGagarin}
	table.insert(stations,stationGagarin)
	--Gatarbleax
	stationGatarbleax = SpaceStation():setTemplate("Small Station"):setFaction("Exuari"):setCallSign("Gatarbleax"):setPosition(-36658, -122758):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationGatarbleax:destroy()
	end
    stationGatarbleax.comms_data = {
    	friendlyness = 82,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<60,
        sensor_boost = {value = 10000, cost = 10},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(4,8),	cost = math.random(50,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = true, medicine = random(1,100)<38, luxury = false },
        public_relations = true,
        general_information = "Facilitate mining the nearby nebula",
    	history = "'Get while the getting is good' is our motto from before the administration switched over"
	}
	if random(1,100) <= 16 then stationGatarbleax:setRestocksScanProbes(false) end
	if random(1,100) <= 25 then stationGatarbleax:setRepairDocked(false) end
	if random(1,100) <= 11 then stationGatarbleax:setSharesEnergyWithDocked(false) end
	station_names[stationGatarbleax:getCallSign()] = {stationGatarbleax:getSectorName(), stationGatarbleax}
	table.insert(stations,stationGatarbleax)
	--Kitpik
	stationKiptik = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Kiptik 2"):setPosition(-29279, 233358):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationKiptik:destroy()
	end
    stationKiptik.comms_data = {
    	friendlyness = 55,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), HVLI = math.random(1,3),Mine = math.random(2,3),Nuke = math.random(13,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = true,			Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	gold = 	{quantity = math.random(4,8),	cost = math.random(60,70)},
        			dilithium = {quantity = math.random(2,11),	cost = math.random(55,85)}	},
        trade = {	food = random(1,100)<=12, medicine = false, luxury = random(1,100)<=32 },
        public_relations = true,
        general_information = "Station location facilitates mining the nearby asteroids. Rebuilt a couple of times due to neighborly conflict",
    	history = "Name: Obscure reference to a mineral deity in the Ktlitan language."
	}
	if random(1,100) <= 16 then stationKiptik:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationKiptik:setRepairDocked(false) end
	if random(1,100) <= 9  then stationKiptik:setSharesEnergyWithDocked(false) end
	station_names[stationKiptik:getCallSign()] = {stationKiptik:getSectorName(), stationKiptik}
	table.insert(stations,stationKiptik)
	--Loowine
--		local loowineZone = squareZone(-41198, 237422, "Loowine II Q2")
--		loowineZone:setColor(255,128,0):setLabel("L")
	stationLoowine = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Loowine II"):setPosition(-41198, 237422):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationLoowine.comms_data = {
    	friendlyness = 82,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<60,
        sensor_boost = {value = 10000, cost = 10},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(4,8),	cost = math.random(50,80)},
        			nickel =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = true, medicine = random(1,100)<27, luxury = false },
        public_relations = true,
        general_information = "Facilitate mining the nearby asteroids",
    	history = "Exploration brought us to this region where we discovered such rich deposits of minerals"
	}
	if random(1,100) <= 16 then stationLoowine:setRestocksScanProbes(false) end
	if random(1,100) <= 25 then stationLoowine:setRepairDocked(false) end
	if random(1,100) <= 11 then stationLoowine:setSharesEnergyWithDocked(false) end
	station_names[stationLoowine:getCallSign()] = {stationLoowine:getSectorName(), stationLoowine}
	table.insert(stations,stationLoowine)
	--Macassa
--	local macassaZone = squareZone(16335, -18034, "Macassa 13 E5")
--	macassaZone:setColor(0,128,0):setLabel("M")
    stationMacassa = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(16335, -18034):setCallSign("Macassa 13"):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationMacassa:setShortRangeRadarRange(8000)
	if mirrorUniverse then
		stationMacassa:setFaction("Holy Terra")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 37 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 12 then tradeFood = true else tradeFood = false end
    stationMacassa.comms_data = {
    	friendlyness = 55,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), HVLI = math.random(1,3),Mine = math.random(2,3),Nuke = math.random(13,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = true,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	gold = 	{quantity = math.random(4,8),	cost = math.random(60,70)},
        			dilithium = {quantity = math.random(2,11),	cost = math.random(55,85)}	},
        trade = {	food = tradeFood, medicine = false, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Station location facilitates mining the nearby asteroids. This is the 8th time the staion has been rebuilt",
    	history = "The station was named in the hopes that the asteroids will be as productive as the Macassa mine was on Earth in the mid to late 1900s"
	}
	if random(1,100) <= 16 then stationMacassa:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationMacassa:setRepairDocked(false) end
	if random(1,100) <= 9  then stationMacassa:setSharesEnergyWithDocked(false) end
	station_names[stationMacassa:getCallSign()] = {stationMacassa:getSectorName(), stationMacassa}
	table.insert(stations,stationMacassa)
	--Maximilian
--	local maximilianZone = squareZone(-16565, -16446, "Maximilian Mark 9 E4")
--	maximilianZone:setColor(51,153,255):setLabel("X")
    stationMaximilian = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Maximilian Mark 9"):setPosition(-16565, -16446):setDescription("Black Hole Research"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationMaximilian:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 39 then tradeMedicine = true else tradeMedicine = false end
    if random(1,100) <= 62 then tradeFood = true else tradeFood = false end
    stationMaximilian.comms_data = {
    	friendlyness = 43,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2,				HVLI = math.random(2,3),Mine = math.random(2,3),Nuke = math.random(14,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost = {value = 10000, cost = 10},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	filament = 	{quantity = math.random(4,8),	cost = math.random(50,80)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = true },
        public_relations = true,
        general_information = "Observe and measure black hole for scientific understanding purposes",
    	history = "One of the researchers also develops software and watches ancient films. He was put in charge of naming the station so he named it after a mute evil robot depicted in an old movie about a black hole from the late 1970s",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
    	},
	}
	if random(1,100) <= 81 then stationMaximilian:setRestocksScanProbes(false) end
	if random(1,100) <= 68 then stationMaximilian:setRepairDocked(false) end
	if random(1,100) <= 16 then stationMaximilian:setSharesEnergyWithDocked(false) end
	station_names[stationMaximilian:getCallSign()] = {stationMaximilian:getSectorName(), stationMaximilian}
	table.insert(stations,stationMaximilian)
	--Mean Time
	stationMeanTime = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Mean Time"):setPosition(-59605, -126288):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationMeanTime.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 				HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(90,110), 
        	reinforcements = math.random(140,160),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)},
        			gold = 		{quantity = 5,					cost = math.random(75,90)}	},
        trade = {	food = true, medicine = false, luxury = random(1,100)<42 },
        public_relations = true,
        general_information = "Mining the nebula is what we do",
    	history = "Our founcing administrator was obsessed with systemic mean time between failure statistics, so we gave the station a related name",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
			DF6 = "Nirvana R5A",
			DF7 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 36 then stationMeanTime:setRestocksScanProbes(false) end
	if random(1,100) <= 22 then stationMeanTime:setRepairDocked(false) end
	if random(1,100) <= 5  then stationMeanTime:setSharesEnergyWithDocked(false) end
	station_names[stationMeanTime:getCallSign()] = {stationMeanTime:getSectorName(), stationMeanTime}
	table.insert(stations,stationMeanTime)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationMeanTime:destroy()
	end
	--Mermaid
	-- only destroyed in non mirror universe
--	if not mirrorUniverse then
--		local mermaidZone = squareZone(28889, -4417, "Mermaid 13 E6")
--		mermaidZone:setColor(51,153,255):setLabel("11")
--	else
		stationMermaid = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setPosition(28889, -4417):setCallSign("Mermaid 13"):setDescription("Tavern and hotel"):setCommsScript(""):setCommsFunction(commsStation)
		if mirrorUniverse then
			stationMermaid:setFaction("Spacer")
		end
		if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
		if random(1,100) <= 40 then empAvail = true else empAvail = false end
		if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
		if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
		if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
		if random(1,100) <= 17 then tradeLuxury = true else tradeLuxury = false end
		stationMermaid.comms_data = {
			friendlyness = 75,
			weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
			weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
			weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
			service_cost = 		{
				supplydrop = math.random(80,120), 
				reinforcements = math.random(125,175),
				probe_launch_repair = math.random(1,4) + math.random(1,5),
				hack_repair = math.random(1,4) + math.random(1,5),
				scan_repair = math.random(1,4) + math.random(1,5),
				combat_maneuver_repair = math.random(1,4) + math.random(1,5),
				self_destruct_repair = math.random(1,4) + math.random(1,5),
				tube_slow_down_repair = math.random(1,4) + math.random(1,5),
			},
			system_repair = {
				["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
				["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
				["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
				["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
				["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
				["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
				["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
				["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
				["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
			},
			hack_repair =			true,
			scan_repair =			true,
			reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
			max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
			goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)},
						gold = 		{quantity = 5,					cost = math.random(75,90)}	},
			trade = {	food = true, medicine = false, luxury = tradeLuxury },
			public_relations = true,
			general_information = "Rest stop, refueling and convenience shopping",
			history = "In the tradition of taverns at crossroads on olde Earth in Kingston where the Millstone river and the Assunpink trail crossed and The Sign of the Mermaid tavern was built in the 1600s, the builders of this station speculated that this would be a good spot for space travelers to stop\n\nFree drinks for the crew of the freighter Gamma Hydra",
			idle_defense_fleet = {
				DF1 = "MT52 Hornet",
				DF2 = "Ktlitan Drone",
				DF3 = "MU52 Hornet",
				DF4 = "Adder MK5",
				DF5 = "Adder MK6",
				DF6 = "Nirvana R5A",
				DF7 = "WX-Lindworm",
			},
		}
		if random(1,100) <= 36 then stationMermaid:setRestocksScanProbes(false) end
		if random(1,100) <= 22 then stationMermaid:setRepairDocked(false) end
		if random(1,100) <= 5  then stationMermaid:setSharesEnergyWithDocked(false) end
		station_names[stationMermaid:getCallSign()] = {stationMermaid:getSectorName(), stationMermaid}
		table.insert(stations,stationMermaid)
--		local mermaidDPZone = squareZone(31664, -5237, "MDP1 E6")
--		mermaidDPZone:setColor(51,153,255):setLabel("M1")
	    mdp1 = CpuShip():setFaction("Independent"):setTemplate("Defense platform"):setCallSign("MDP1"):setPosition(31664, -5237):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
	    setBeamColor(mdp1)
	    station_names[mdp1:getCallSign()] = {mdp1:getSectorName(), mdp1}
--	end
	--Nilwea
--	local nilweaZone = squareZone(-101008, -92567, "Nilwea Two A-1")
--	nilweaZone:setColor(51,153,255):setLabel("N")
	stationNilwea = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Nilwea Two"):setPosition(-101008, -92567):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationNilwea.comms_data = {
    	friendlyness = 93,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 				HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost_probes = {name = "Binoc", cost = math.random(39,55), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	impulse = 	{quantity = math.random(5,10),	cost = math.random(80,100)},
        			lifter = 	{quantity = 5,					cost = math.random(75,90)}	},
        trade = {	food = random(1,100)<22, medicine = true, luxury = false },
        public_relations = true,
        general_information = "We mine and contemplate the meaning of these nebula",
    	history = "We were searching for a calm and restful place. This turned out to be both and it's profitable on top of that",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
			DF6 = "Nirvana R5A",
			DF7 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 28 then stationNilwea:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationNilwea:setRepairDocked(false) end
	if random(1,100) <= 12 then stationNilwea:setSharesEnergyWithDocked(false) end
	station_names[stationNilwea:getCallSign()] = {stationNilwea:getSectorName(), stationNilwea}
	table.insert(stations,stationNilwea)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationNilwea:destroy()
	end
	--Mos Espa
	--local mosEspaZone = squareZone(113941, -85822, "Mos Espa A10")
	--mosEspaZone:setColor(51,153,255)
	stationMosEspa = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setPosition(113941, -85822):setCallSign("Mos Espa"):setDescription("Resupply and Entertainment"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationMosEspa:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 26 then tradeFood = true else tradeFood = false end
    stationMosEspa.comms_data = {
    	friendlyness = 93,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost_probes = {name = "Binoc", cost = math.random(39,55), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	impulse = 	{quantity = math.random(5,10),	cost = math.random(80,100)},
        			lifter = 	{quantity = 5,					cost = math.random(75,90)}	},
        trade = {	food = tradeFood, medicine = true, luxury = false },
        public_relations = true,
        general_information = "Relax, maybe observe a scheduled race",
    	history = "You will never find a more wretched hive of scum and villainy... except in Mos Eisley space port. Mos Espa is a much better place",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Adder MK6",
			DF6 = "Nirvana R5A",
			DF7 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 28 then stationMosEspa:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationMosEspa:setRepairDocked(false) end
	if random(1,100) <= 12 then stationMosEspa:setSharesEnergyWithDocked(false) end
	station_names[stationMosEspa:getCallSign()] = {stationMosEspa:getSectorName(), stationMosEspa}
	table.insert(stations,stationMosEspa)
	--Nerva E4m8
--	local nervaZone = squareZone(-9203, -2077, "Nerva 12 E4")
--	nervaZone:setColor(51,153,255):setLabel("N")
    stationNerva = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Nerva 12"):setPosition(-9203, -2077):setDescription("Observatory"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationNerva:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 17 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 69 then tradeMedicine = true else tradeMedicine = false end
    stationNerva.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	optic = 	{quantity = math.random(5,10),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Observatory of stellar phenomena and space ship traffic",
    	history = "A combination of science and military staff share the various delicate instruments on this station. Originally designed to watch for incoming Kraylor and Exuari ships, other stations now share the early warning military purpose and these sensors double as research resources",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "WX-Lindworm",
			DF5 = "MT52 Hornet",
			DF6 = "Ktlitan Drone",
			DF7 = "MU52 Hornet",
			DF8 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 13 then stationNerva:setRestocksScanProbes(false) end
	if random(1,100) <= 42 then stationNerva:setRepairDocked(false) end
	if random(1,100) <= 23 then stationNerva:setSharesEnergyWithDocked(false) end
	station_names[stationNerva:getCallSign()] = {stationNerva:getSectorName(), stationNerva}
	table.insert(stations,stationNerva)
	--Pistil
--	local pistilZone = squareZone(24834, 20416, "Pistil 9 G6")
--	pistilZone:setColor(0,128,0):setLabel("P")
    stationPistil = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(24834, 20416):setCallSign("Pistil 9"):setDescription("Fleur nebula research"):setCommsScript(""):setCommsFunction(commsStation)
    stationPistil:setShortRangeRadarRange(10000)
	if mirrorUniverse then
		stationPistil:setFaction("Holy Terra")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 37 then tradeLuxury = true else tradeLuxury = false end
    stationPistil.comms_data = {
    	friendlyness = 55,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), HVLI = math.random(1,3),Mine = math.random(2,3),Nuke = math.random(14,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = homeAvail,		HVLI = true,			Mine = true,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(95,120), 
        	reinforcements = math.random(145,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        fast_probes = {name = "Screamer", cost = math.random(8,15), quantity = math.random(1,5), speed = 4000},
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	sensor = 	{quantity = math.random(4,8),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = true, luxury = tradeLuxury },
        buy =	{	robotic = math.random(40,200),
        			dilithium = math.random(40,200)	},
        public_relations = true,
        general_information = "Studying, observing, measuring the Fleur nebula",
    	history = "The station naming continued in the vein of the nebula which we study. Station personnel have started paying closer attention to readings indicating enemy vessels in the area after some stray Exuari got past the defensive patrols and destroyed the station.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "Ktlitan Drone",
			DF3 = "MU52 Hornet",
			DF4 = "WX-Lindworm",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5A",
			DF7 = "Phobos T3",
			DF8 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 4  then stationPistil:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationPistil:setRepairDocked(false) end
	if random(1,100) <= 8  then stationPistil:setSharesEnergyWithDocked(false) end
	station_names[stationPistil:getCallSign()] = {stationPistil:getSectorName(), stationPistil}
	table.insert(stations,stationPistil)
	--Proktan
	stationProktan = SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Proktan"):setPosition(106363, 89304):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationProktan:setShortRangeRadarRange(12000)
    stationProktan.comms_data = {
    	friendlyness = 55,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,5),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = false,	HVLI = true,		Mine = false,			Nuke = false,				EMP = false},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	communication = {quantity = math.random(5,10),	cost = math.random(40,70)}	},
        trade = {	food = false, medicine = random(1,100)<67, luxury = false },
        public_relations = true,
        general_information = "Mining asteroids and nebula",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Phobos T3",
			DF7 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 22 then stationProktan:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationProktan:setRepairDocked(false) end
	if random(1,100) <= 3  then stationProktan:setSharesEnergyWithDocked(false) end
	station_names[stationProktan:getCallSign()] = {stationProktan:getSectorName(), stationProktan}
	table.insert(stations,stationProktan)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationProktan:destroy()
	end
	--Purple People Eater
	stationPurple = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Purple People Eater"):setPosition(-44237, 229421):setDescription("Communications Relay"):setCommsScript(""):setCommsFunction(commsStation)
    stationPurple.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5),	HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = math.random(11,17) },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        scan_repair =			true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	tractor = 	{quantity = math.random(5,10),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = random(1,100)<=72, luxury = random(1,100)<=49 },
        public_relations = true,
        general_information = "We mine the nearby asteroids and nebula",
    	history = "Our station founder was somewhat whimsical. The station name comes from the lyrics of a mid 20th century song. We've tried filing paperwork to get it changed to no avail. We did manage to shrink the name from the former name, 'one eyed, one eared flying purple people eater,' thank goodness.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Piranha F8",
			DF7 = "Stalker R7",
    	},
	}
	if random(1,100) <= 43 then stationPurple:setRestocksScanProbes(false) end
	if random(1,100) <= 34 then stationPurple:setRepairDocked(false) end
	if random(1,100) <= 26 then stationPurple:setSharesEnergyWithDocked(false) end
	station_names[stationPurple:getCallSign()] = {stationPurple:getSectorName(), stationPurple}
	table.insert(stations,stationPurple)
	if mirrorUniverse then
		stationPurple:destroy()
	end
	--Relay-13
--	local relay13Zone = squareZone(77918, 23876, "Relay-13 H G8")
--	relay13Zone:setColor(0,255,0):setLabel("R")
    stationRelay13 = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Relay-13 H"):setPosition(77918, 23876):setDescription("Communications Relay"):setCommsScript(""):setCommsFunction(commsStation)
    stationRelay13:setShortRangeRadarRange(12000)
	if mirrorUniverse then
		stationRelay13:setFaction("Holy Terra")
	end
    if random(1,100) <= 69 then tradeMedicine = true else tradeMedicine = false end
    stationRelay13.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,5),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = false,	HVLI = true,		Mine = false,			Nuke = false,				EMP = false},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	communication = {quantity = math.random(5,10),	cost = math.random(40,70)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "Communication traffic relay and coordination",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Phobos T3",
			DF7 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 22 then stationRelay13:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationRelay13:setRepairDocked(false) end
	if random(1,100) <= 3  then stationRelay13:setSharesEnergyWithDocked(false) end
	station_names[stationRelay13:getCallSign()] = {stationRelay13:getSectorName(), stationRelay13}
	table.insert(stations,stationRelay13)
	--Slurry
--	local slurryZone = squareZone(100342, 27871, "Slurry VI G10")
--	slurryZone:setColor(51,153,255)
    stationSlurry = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Slurry VI"):setPosition(100342, 27871):setDescription("Mining Research"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationSlurry:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 17 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 57 then tradeMedicine = true else tradeMedicine = false end
    stationSlurry.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5),	HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = math.random(11,17) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        scan_repair =			true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	tractor = 	{quantity = math.random(5,10),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Mining and research of nearby stellar phenomena",
    	history = "Joint effort between miners and scientists to establish station to research and to provide resources to support research",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Piranha F8",
			DF7 = "Stalker R7",
    	},
	}
	if random(1,100) <= 43 then stationSlurry:setRestocksScanProbes(false) end
	if random(1,100) <= 34 then stationSlurry:setRepairDocked(false) end
	if random(1,100) <= 26 then stationSlurry:setSharesEnergyWithDocked(false) end
	station_names[stationSlurry:getCallSign()] = {stationSlurry:getSectorName(), stationSlurry}
	table.insert(stations,stationSlurry)
	--Sovinec
--	local sovinecZone = squareZone(134167, 104690, "Sovinec Four K11")
--	sovinecZone:setColor(51,153,255)
--	local sdp1 = CpuShip():setFaction("Independent"):setTemplate("Defense platform"):setCallSign("SDP1"):setPosition(136055, 105132):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
--	setBeamColor(sdp1)
--	station_names[sdp1:getCallSign()] = {sdp1:getSectorName(), sdp1}
	local sdpZone = squareZone(136055, 105132, "SDP K11")
	sdpZone:setColor(51,153,255):setLabel("DP")
	if mirrorUniverse then
		sdp1:setFaction("Spacer")
	end
	table.insert(stations,sdp1)
	stationSovinec = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Sovinec Four"):setPosition(134167, 104690):setDescription("Beam component research and manufacturing"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationSovinec:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 37 then tradeMedicine = true else tradeMedicine = false end
    if random(1,100) <= 37 then tradeLuxury = true else tradeLuxury = false end
    stationSovinec.comms_data = {
    	friendlyness = 62,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6),	HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = homeAvail,		HVLI = true,			Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        jump_overcharge =		true,
        shield_overcharge =		true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        self_destruct_repair =	true,
        tube_slow_down_repair = random(1,100)<30,
        remote_warp_jammer = {name = "Snag", cost = math.random(9,20), quantity = math.random(1,5), speed = 2500, warp_jam_range = 10000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	beam =	 	{quantity = math.random(4,8),	cost = math.random(40,80)},
        			tritanium =	{quantity = math.random(6,12),	cost = math.random(45,65)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		filament = math.random(90,120),
        			impulse = math.random(105,130)	},
        public_relations = true,
        general_information = "We manufacture beam components from the resources gathered from the nearby asteroids. We specialize in plasma based beam systems",
    	history = "Our station recognizes Sovinec, an early computer simulation researcher in plasma based weaponry in the late 20th century on Earth",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Piranha F8",
			DF7 = "Stalker R7",
			DF8 = "Atlantis X23",
    	},
	}
	if random(1,100) <= 63 then stationSovinec:setRestocksScanProbes(false) end
	if random(1,100) <= 34 then stationSovinec:setRepairDocked(false) end
	if random(1,100) <= 11 then stationSovinec:setSharesEnergyWithDocked(false) end
	station_names[stationSovinec:getCallSign()] = {stationSovinec:getSectorName(), stationSovinec}
	table.insert(stations,stationSovinec)	
	--Speculator
--	local speculatorZone = squareZone(55000,108000, "Speculator 4 K7")
--	speculatorZone:setColor(0,255,0):setLabel("S")
    stationSpeculator = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Speculator 4"):setPosition(55000,108000):setDescription("Mining and mobile nebula research"):setCommsScript(""):setCommsFunction(commsStation)
    stationSpeculator:setShortRangeRadarRange(13000)
	if mirrorUniverse then
		stationSpeculator:setFaction("Holy Terra")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 13 then tradeMedicine = true else tradeMedicine = false end
    stationSpeculator.comms_data = {
    	friendlyness = 82,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 2, 		HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = math.random(10,18),	EMP = math.random(7,15) },
        weapon_available = 	{Homing = true,		HVLI = true,			Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 20},
        remote_warp_jammer = {name = "Snag", cost = math.random(9,20), quantity = math.random(1,5), speed = 2500, warp_jam_range = 10000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
        goods = {	nickel = 	{quantity = math.random(1,10),	cost = math.random(60,70)},	
        			dilithium =	{quantity = math.random(6,12),	cost = math.random(75,95)},
        			tritanium =	{quantity = math.random(2,8),	cost = math.random(45,85)} },
        trade = {	food = false, medicine = tradeMedicine, luxury = true },
        public_relations = true,
        general_information = "Mining operations are the primary purpose, but there are scientists here conducting research on the mobile nebula in the area",
    	history = "A consorium of mining interests and scientists banded together to create this station. It was considered a risk for both groups, but they undertook it anyway.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Piranha F8",
			DF7 = "Stalker R7",
    	},
	}
	if random(1,100) <= 13 then stationSpeculator:setRestocksScanProbes(false) end
	if random(1,100) <= 24 then stationSpeculator:setRepairDocked(false) end
	if random(1,100) <= 11 then stationSpeculator:setSharesEnergyWithDocked(false) end
	station_names[stationSpeculator:getCallSign()] = {stationSpeculator:getSectorName(), stationSpeculator}
	table.insert(stations,stationSpeculator)
	--Stromboli
	--local stromboliZone = squareZone(109555, 12685, "Stromboli 3 F10")
	--stromboliZone:setColor(51,153,255)
    stationStromboli = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Stromboli 3"):setPosition(109555, 12685):setDescription("Vacation getaway for Stromboli family"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationStromboli:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 23 then tradeMedicine = true else tradeMedicine = false end
    stationStromboli.comms_data = {
    	friendlyness = 35,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 2.0, neutral = 4.0},
        remote_warp_jammer = {name = "Swamp", cost = math.random(9,20), quantity = math.random(1,5), speed = 1500, warp_jam_range = 20000},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "A remote station location for the Stromboli family and gusts to get away from the pressures of modern life",
    	history = "The Stromboli family picked this station up cheap from the Human Navy when this sector was practically empty. Now it serves as a nice place for the family to escape to when they are stressed out",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
			DF8 = "Piranha F8",
			DF9 = "Piranha F12",
    	},
	}
	if random(1,100) <= 53 then stationStromboli:setRestocksScanProbes(false) end
	if random(1,100) <= 17 then stationStromboli:setRepairDocked(false) end
	if random(1,100) <= 11 then stationStromboli:setSharesEnergyWithDocked(false) end
	station_names[stationStromboli:getCallSign()] = {stationStromboli:getSectorName(), stationStromboli}
	table.insert(stations,stationStromboli)
	--Tilkon
	stationTilkon = SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Tilkon"):setPosition(126957, -70998):setDescription("Monitoring outpost"):setCommsScript(""):setCommsFunction(commsStation)
    stationTilkon.comms_data = {
    	friendlyness = 15,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 				HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        sensor_boost = {value = 5000, cost = 5},
        reputation_cost_multipliers = {friend = 2.0, neutral = 4.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "A remote observation station to monitor Human activity",
    	history = "Established to keep an eye on Human activity, it now does occasional trading with neutral stations in the region",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
			DF8 = "Piranha F8",
			DF9 = "Piranha F12",
    	},
	}
	if random(1,100) <= 53 then stationTilkon:setRestocksScanProbes(false) end
	if random(1,100) <= 17 then stationTilkon:setRepairDocked(false) end
	if random(1,100) <= 11 then stationTilkon:setSharesEnergyWithDocked(false) end
	station_names[stationTilkon:getCallSign()] = {stationTilkon:getSectorName(), stationTilkon}
	table.insert(stations,stationTilkon)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationTilkon:destroy()
	end
	--Tortuga
	if not mirrorUniverse then
		local tortugaZone = squareZone(-49045, 241042, "Tortuga 2 R2")
		tortugaZone:setColor(255,128,255):setLabel("T")
	end
	--[[
	stationTortuga = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Tortuga 2"):setPosition(-49045, 241042):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationTortuga.comms_data = {
    	friendlyness = 35,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 				HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = random(1,10)<=6,	HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = random(1,10)<=4},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        sensor_boost_probes = {name = "Scope", cost = math.random(57,75), quantity = math.random(1,3), speed = 1000, boost = 30, range = 50},
        remote_warp_jammer = {name = "Swamp", cost = math.random(9,20), quantity = math.random(1,5), speed = 1500, warp_jam_range = 20000},
        reputation_cost_multipliers = {friend = 2.0, neutral = 4.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)},
        			medicine =	{quantity = math.random(5,10),	cost = math.random(5,10)}	},
        trade = {	food = random(1,100)<23, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Tortuga is for mining among these islands of asteroids",
    	history = "We don't engage in any intentional harboring of pirates, we're just a fan of the historical ocean based pirates from 19th century Earth",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
    	},
	}
	if random(1,100) <= 43 then stationTortuga:setRestocksScanProbes(false) end
	if random(1,100) <= 27 then stationTortuga:setRepairDocked(false) end
	if random(1,100) <= 21 then stationTortuga:setSharesEnergyWithDocked(false) end
	station_names[stationTortuga:getCallSign()] = {stationTortuga:getSectorName(), stationTortuga}
	table.insert(stations,stationTortuga)
	--]]
	--Transylvania
	--local transylvaniaZone = squareZone(-95000, 111000, "Transylvania K0")
	--transylvaniaZone:setColor(51,153,255)
    stationTransylvania = SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("Transylvania"):setPosition(-95000, 111000):setDescription("Abandoned science station turned haven"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationTransylvania:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 23 then tradeFood = true else tradeFood = false end
    stationTransylvania.comms_data = {
    	friendlyness = 35,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,2),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 5},
        sensor_boost_probes = {name = "Scope", cost = math.random(57,75), quantity = math.random(1,3), speed = 1000, boost = 30, range = 50},
        remote_warp_jammer = {name = "Swamp", cost = math.random(9,20), quantity = math.random(1,5), speed = 1500, warp_jam_range = 20000},
        reputation_cost_multipliers = {friend = 2.0, neutral = 4.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	luxury = 	{quantity = math.random(5,10),	cost = math.random(60,70)},
        			medicine =	{quantity = math.random(5,10),	cost = math.random(5,10)}	},
        trade = {	food = tradeFood, medicine = false, luxury = false },
        public_relations = true,
        general_information = "Transylvania is a refuge from those who would prejudge our cultural practices",
    	history = "Originally a science station, now it caters to a group of persecuted beings whose cultural practices offend a number of other species",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
    	},
	}
	--local leechAZone = squareZone(-93000,109000, "Leech A K0")
	--leechAZone:setColor(51,153,255)
	--local leechABZone = squareZone(-97000,109000, "Leech AB K0")
	--leechABZone:setColor(51,153,255)
	--local leechBZone = squareZone(-93000,113000, "Leech B K0")
	--leechBZone:setColor(51,153,255)
	--local leechOZone = squareZone(-97000,113000, "Leech O K0")
	--leechOZone:setColor(51,153,255)
	leechA = leech("Independent")
	leechA:setPosition(-93000,109000):setScannedByFaction("Human Navy",true):setCallSign("A"):setDescription("Leech satellite A")
	leechAB = leech("Independent")
	leechAB:setPosition(-97000,109000):setScannedByFaction("Human Navy",true):setCallSign("AB"):setDescription("Leech satellite AB")
	leechB = leech("Independent")
	leechB:setPosition(-93000,113000):setScannedByFaction("Human Navy",true):setCallSign("B"):setDescription("Leech satellite B")
	leechO = leech("Independent")
	leechO:setPosition(-97000,113000):setScannedByFaction("Human Navy",true):setCallSign("O"):setDescription("Leech satellite O")
	if mirrorUniverse then
		leechA:setFaction("Spacer")
		leechAB:setFaction("Spacer")
		leechB:setFaction("Spacer")
		leechO:setFaction("Spacer")
	end
	table.insert(stations,leechA)
	table.insert(stations,leechAB)
	table.insert(stations,leechB)
	table.insert(stations,leechO)
	if random(1,100) <= 43 then stationTransylvania:setRestocksScanProbes(false) end
	if random(1,100) <= 27 then stationTransylvania:setRepairDocked(false) end
	if random(1,100) <= 21 then stationTransylvania:setSharesEnergyWithDocked(false) end
	station_names[stationTransylvania:getCallSign()] = {stationTransylvania:getSectorName(), stationTransylvania}
	table.insert(stations,stationTransylvania)
	--Tron
	stationTron = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Tron"):setPosition(-23540, 244041):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationTron.comms_data = {
    	friendlyness = 76,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,7),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = random(1,10)<=8,	Mine = random(1,10)<=5,	Nuke = random(1,10)<=3,		EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	software = 	{quantity = math.random(4,8),	cost = math.random(80,90)}	},
        trade = {	food = false, medicine = random(1,100)<53, luxury = false },
        public_relations = true,
        general_information = "Everyone needs resources. We're getting our share from these asteroids",
    	history = "After observing various commercial successes from a number of freighters picking up minerals from these asteroids, we decided to set up our own mining operation here.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 83 then stationTron:setRestocksScanProbes(false) end
	if random(1,100) <= 47 then stationTron:setRepairDocked(false) end
	if random(1,100) <= 28 then stationTron:setSharesEnergyWithDocked(false) end
	station_names[stationTron:getCallSign()] = {stationTron:getSectorName(), stationTron}
	table.insert(stations,stationTron)
	if mirrorUniverse then
		-- it seems a shame to not use a few stations like this
		-- as such its being removed until / unless someone can think of a good use
		stationTron:destroy()
	end
	--Wookie F4m5 
--	local wookieZone = squareZone(-11280, 7425, "Wookie-dookie F4")	-- -oka means 4, kin means 5, -gookie means 6, De means 7, -ock means 8, Noo means 9, Wookied means 10, -dookie means 11
--	wookieZone:setColor(51,153,255):setLabel("W")
    stationWookie = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Wookie-dookie"):setPosition(-11280, 7425):setDescription("Esoteric Xenolinguistic Research"):setCommsScript(""):setCommsFunction(commsStation)
	if mirrorUniverse then
		stationWookie:setFaction("Spacer")
	end
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 39 then tradeMedicine = true else tradeMedicine = false end
    stationWookie.comms_data = {
    	friendlyness = 76,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,7),	HVLI = math.random(2,5),Mine = math.random(3,7),Nuke = math.random(12,18),	EMP = math.random(9,13) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(123,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	software = 	{quantity = math.random(4,8),	cost = math.random(80,90)}	},
        trade = {	food = false, medicine = tradeMedicine, luxury = false },
        public_relations = true,
        general_information = "Researchers here study the Wookie language as well as several other languages of intelligent species. -Ock is a Wookie language suffix meaning 8",
    	history = "The first language studied when the station was founded was Wookie. Wookie language and culture is still a major focus of study",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 83 then stationWookie:setRestocksScanProbes(false) end
	if random(1,100) <= 47 then stationWookie:setRepairDocked(false) end
	if random(1,100) <= 28 then stationWookie:setSharesEnergyWithDocked(false) end
	station_names[stationWookie:getCallSign()] = {stationWookie:getSectorName(), stationWookie}
	table.insert(stations,stationWookie)
	return stations
end
function createIcarusToRiptideWormholeArea()

	local ret = {}
	local icarusToRiptideWormHole = WormHole():setPosition(19778, 114698): --- next to Speculator 3
		setScanningParameters(2, 3):setDescriptions("Wormhole leading to Riptide Binary system", 
			"Anomaly type: Wormhole"):setTargetPosition(-780000, 20000)
	update_system:addUpdate(icarusToRiptideWormHole, "icarus-riptide wormhole rotation", {
		update=function(self, obj, delta)
			if not obj:isValid() then
				return
			end
			obj:setRotation(getScenarioTime() * 5)
		end
	})
	table.insert(ret, icarusToRiptideWormHole)

	local whx, why = icarusToRiptideWormHole:getPosition()
	local stabilizers = {}
	local numStabilizers = 5
	local angleSeparation = 360 / numStabilizers
	for i=1, numStabilizers do
		local dist = 3000
		local dx, dy = vectorFromAngle(angleSeparation*i, dist)

		local name = string.format("Stabilizer %i", i)
		local stab = WarpJammer():setPosition(whx + dx, why + dy):setScanningParameters(2, 2):
			setRadarSignatureInfo(.2,.4,.1):setFaction("Human Navy"):
			setDescriptions("Wormhole stabilizer","Wormhole stabilizer. Brought here by the Exuari, captured by Human Navy.\n" ..
				"Technology is of Arlenian origin. "):
			setCallSign(name):setRange(2000)
			if mirrorUniverse then
				stab:setFaction("Holy Terra")
			end
		table.insert(ret, stab)
	end

	return ret
end
function createIcarusFilkRoadStuff()
	local ret = {}

	table.insert(ret, WormHole():setPosition(-9623, -13494):setTargetPosition(-67497, -89579):setCallSign("to Micro Solutions Inc."))
	table.insert(ret, WormHole():setPosition(-71370, -94747):setTargetPosition(-125051, -162639):setCallSign("to Micro Solutions Inc."))
	table.insert(ret, WormHole():setPosition(-63495, -92114):setTargetPosition(-5569, -17483):setCallSign("to Icarus"))

	table.insert(ret, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 2"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-67142, -94163):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
--	local wormhole_generator_1_zone	= squareZone(-6841, -16073, "WH Gen 1 E4")
--	wormhole_generator_1_zone:setColor(51,153,255):setLabel("W")
	table.insert(ret, SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("WormH-Gen 1"):setDescription("PROPERTY OF MICRO SOLUTIONS INC. Arlenian short range two-way wormhole generator. Deployed by Icarus Patrol on 06May2023."):setScannedByFaction("Human Navy", true):setPosition(-6841, -16073):setCommsScript(""):setCommsFunction(wormHGenCommsFunc))
	local ship = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCallSign("Worm-WP 1"):setDescription("Weapons platform protecting the trade route between Icarus station and Micro Solutions Inc. planet. Deployed by Icarus Patrol on 06May2023."):setPosition(-67349, -95244):setScannedByFaction("Human Navy", true):setCommsScript(""):setCommsFunction(wormWPCommsFunc):orderStandGround()
	setBeamColor(ship)
	table.insert(ret, ship)
	return ret
end
function wormHGenCommsFunc()
	setCommsMessage(_("station-comms", "THIS IS AN AUTOMATED RESPONSE. PROPERTY OF MICRO SOLUTIONS INC. FOR BETTER TOMORROW CONTACT SALES AT 0-12-345-678."))
end
function wormWPCommsFunc()
	setCommsMessage(_("station-comms", "Beep bop I'm an automated defense system and not in talkative mood."))
end
function createIcarusArtifacts()
	local artifact_list = {}
	local artifact_details = {
	--						Scan Parameters				Descriptions
	--		  x,		 y, complex, depth,	     model,				unscanned,	scanned
		{-47187,	112576,		  1,	 1,	"ammo_box",	"unusual mechanism",	"photonic radiation barrier"}	
	}
	for i=1,#artifact_details do
		local static_artifact = Artifact():setPosition(artifact_details[i][1],artifact_details[i][2]):setScanningParameters(artifact_details[i][3],artifact_details[i][4]):setModel(artifact_details[i][5]):setDescriptions(artifact_details[i][6],artifact_details[i][7])
		table.insert(artifact_list,static_artifact)
	end
	return artifact_list
end
function createAquariusAsteroids()
	local asteroidList = {}
	local asteroidCoordinates = {
		{-645, 12145, 120},
		{-79, 13907, 50},
		{-1274, 14914, 20},
		{-2722, 13026, 160},
		{-2848, 14536, 230},
		{-1778, 19256, 13},
		{-834, 16487, 34},
		{-3414, 16676, 65},
		{-5176, 15480, 176},
		{-10588, 4342, 310},
		{-11846, 2391, 450},
		{-8196, 7929, 23},
		{-8700, 5789, 65},
		{-5805, 9817, 87},
		{-5931, 6481, 150},
		{-9833, 2391, 240},
		{-3540, 11704, 140},
		{-4735, 8181, 120},
		{-7064, 10509, 25},
		{-5428, 12711, 18},
		{1494, 16424, 43},
		{1809, 13403, 98} 
	}
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createMacassaAsteroids()
	local asteroidList = {}
	local asteroidCoordinates = {
    {15070, -15621, 120},
    {14714, -16096, 87},
    {13923, -16175, 165},
    {14239, -18864, 109},
    {14833, -16610, 78},
    {16612, -18745, 12},
    {17245, -18508, 14},
    {17878, -17717, 44},
    {16850, -17361, 54},
    {9296,  -20011, 187},
    {11194, -19932, 177},
    {10997, -24005, 56},
    {13330, -23135, 77},
    {13448, -21870, 154},
    {8268,  -22819, 210},
    {10838, -22107, 165},
    {12302, -21118, 254},
    {13844, -17322, 143},
    {12381, -16926, 286},
    {14319, -15384, 23},
    {12658, -15582, 97},
    {14714, -20762, 144},
    {13607, -20248, 244},
    {12737, -19536, 344},
    {11432, -18310, 187},
    {12934, -18231, 266},
    {17087, -19615, 43},
    {15703, -19892, 32},
    {16019, -20723, 15},
    {14912, -19101, 33},
    {15505, -17954, 78},
    {15900, -16926, 88},
    {15980, -16373, 117},
    {16652, -16254, 376},
    {19776, -16214, 243},
    {19578, -17045, 333},
    {18629, -16728, 129},
    {17370, -16617, 32},
    {6844,  -19813, 44},
    {8070,  -17757, 23},
    {11590, -16214, 70},
    {16177, -14237, 188},
    {18352, -13406, 255},
    {10759, -17045, 123},
    {9494,  -17875, 438},
    {18036, -16056, 181},
    {17296, -15873, 65},
    {18985, -9293, 134},
    {19737, -10440, 223},
    {18273, -12418, 267},
    {18511, -11825, 312},
    {26737, -9768, 289},
    {27172, -10875, 165},
    {25076, -10084, 32},
    {25194, -8463, 43},
    {25392, -11825, 132},
    {25827, -13644, 412},
    {23968, -12892, 357},
    {24482, -14514, 120},
    {21991, -11666, 178},
    {23454, -14791, 31},
    {22544, -13486, 87},
    {23731, -10757, 98},
    {22979, -12022, 213},
    {19222, -12497, 27},
    {19776, -13367, 89},
    {20092, -15621, 278},
    {19737, -14276, 178},
    {23019, -8740, 112},
    {22070, -8898, 159},
    {20528, -8858, 329},
    {20923, -10164, 398},
    {21872, -10638, 12},
    {20607, -11825, 17},
    {21081, -13130, 24},
    {22149, -15265, 42},
    {21239, -14514, 32},
    {20923, -15582, 78},
    {17364, -14000, 31},
    {17799, -14632, 42},
    {17957, -15107, 67},
    {17047, -15265, 43},
    {18787, -15582, 158},
    {19104, -15107, 228},
    {17601, -12932, 143},
    {18867, -13802, 210},
    {17364, -15067, 132},
    {16929, -14791, 166},
    {16494, -14870, 187},
    {16254, -15724, 188},
    {15821, -15067, 32},
    {15584, -15948, 332}	}
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createCindyFollyAsteroids()
	local asteroidList = {}
	local asteroidCoordinates = {
    {81362, 1207, 120},
    {83658, 2211, 32},
    {83801, 1351, 254},
    {81003, -3528, 160},
    {79497, -4604, 12},
    {82725, -586, 44},
    {81434, -371, 87},
    {82438, 1566, 378},
    {83012, 705, 221},
    {79999, -3026, 109},
    {78349, -3815, 387},
    {82008, -1806, 32},
    {80501, -2021, 21},
    {78851, -2380, 38},
    {77416, -3241, 23} }
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createH0toK2asteroids()
	local asteroidList = {}
	local asteroidCoordinates = {
    {-55790, 57467, 120},
    {-55506, 51890, 220},
    {-58720, 50095, 160},
    {-57585, 53875, 110},
    {-45676, 57183, 180},
    {-49362, 52363, 20},
    {-51064, 45747, 40},
    {-53994, 41871, 270},
    {-57869, 44896, 190},
    {-52481, 49149, 140},
    {-55979, 47164, 180},
    {-47188, 49433, 260},
    {-44447, 53214, 60},
    {-51820, 58129, 335},
    {-53805, 58696, 25},
    {-53805, 56238, 165},
    {-48984, 56805, 185},
    {-50024, 59546, 195},
    {-48890, 61815, 115},
    {-51253, 60870, 45},
    {-41423, 61909, 55},
    {-42557, 64461, 95},
    {-42084, 69093, 15},
    {-42273, 58412, 245},
    {-53143, 54253, 355},
    {-55033, 54631, 155},
    {-51158, 55766, 165},
    {-57207, 55388, 45},
    {-47566, 59924, 75},
    {-45582, 61626, 25},
    {-47945, 64461, 35},
    {-45676, 66824, 85},
    {-48039, 67297, 145},
    {-50024, 65690, 175},
    {-59665, 57372, 225},
    {-61366, 57467, 325},
    {-52670, 63422, 425},
    {-51253, 63989, 225},
    {-61461, 40359, 175},
    {-65241, 41777, 165},
    {-62028, 44802, 145},
    {-66943, 45936, 15},
    {-73559, 41871, 45},
    {-69778, 43006, 25},
    {-69022, 40832, 45},
    {-64674, 49244, 35},
    {-62028, 48866, 175},
    {-65336, 51890, 175},
    {-63067, 52363, 185},
    {-61555, 58507, 185},
    {-55317, 59641, 220},
    {-53332, 60302, 230},
    {-52387, 65690, 270},
    {-57680, 58696, 260},
    {-59570, 54159, 270},
    {-60893, 52646, 210},
    {-61461, 55766, 200},
    {-61933, 53592, 250},
    {-62973, 54442, 263},
    {-58814, 56522, 323},
    {-62595, 57278, 123},
    {-71763, 68904, 283},
    {-71952, 65595, 293},
    {-69211, 65690, 133},
    {-67510, 67202, 183},
    {-69022, 67675, 263},
    {-67037, 64745, 233},
    {-65147, 65595, 153},
    {-64107, 63233, 23},
    {-62784, 63327, 53},
    {-69022, 58223, 63},
    {-68644, 60491, 323},
    {-69211, 63233, 83},
    {-66470, 62665, 23},
    {-61461, 64272, 43},
    {-63162, 60491, 93},
    {-60515, 58790, 223},
    {-71385, 62382, 363},
    {-71574, 59452, 43},
    {-73559, 53970, 83},
    {-72519, 56616, 173},
    {-66565, 55766, 153},
    {-70251, 56144, 133},
    {-68549, 55577, 193},
    {-66659, 57750, 283},
    {-67132, 60208, 313},
    {-65052, 54631, 383},
    {-63635, 57089, 123},
    {-63635, 58601, 143},
    {-65336, 62193, 173},
    {-64013, 61909, 73},
    {-64863, 57940, 43},
    {-64580, 56427, 23},
    {-65052, 60681, 53},
    {-78285, 50284, 283},
    {-75166, 46881, 13},
    {-72141, 47070, 13},
    {-70818, 50473, 12},
    {-74126, 50662, 23},
    {-68171, 50756, 20},
    {-69589, 53592, 50},
    {-67793, 53119, 320},
    {-53489, 115865, 158},
    {-49845, 116259, 248},
    {-47089, 112517, 258},
    {-53390, 111927, 228},
    {-51322, 108087, 248},
    {-58116, 110745, 158},
    {-56246, 106610, 58},
    {-62252, 104148, 318},
    {-49268, 78922, 167},
    {-47283, 83365, 137},
    {-46716, 79584, 127},
    {-46054, 75992, 197},
    {-40572, 73535, 67},
    {-44353, 73913, 47},
    {-48959, 88099, 16},
    {-50929, 91939, 137},
    {-53616, 86200, 267},
    {-48565, 99225, 237},
    {-53685, 102474, 32},
    {-52012, 97945, 212},
    {-46892, 94991, 112},
    {-53981, 93711, 12},
    {-53616, 80813, 312},
    {-51158, 81853, 262},
    {-43347, 101588, 137},
    {-44725, 108284, 37},
    {-47975, 104837, 237},
    {-57526, 97354, 146},
    {-60282, 93317, 46},
    {-57132, 89280, 246},
    {-58720, 85539, 136},
    {-58436, 81380, 166},
    {-56168, 81474, 186},
    {-61562, 99324, 126},
    {-66486, 98142, 136},
    {-69341, 92530, 46},
    {-64910, 93022, 56},
    {-64221, 88788, 16},
    {-66943, 85255, 146},
    {-69144, 87311, 166},
    {-62406, 85633, 148},
    {-63824, 81191, 14},
    {-61933, 81947, 166},
    {-68833, 76087, 186},
    {-69873, 82798, 196},
    {-66470, 79017, 246},
    {-66659, 81285, 346},
    {-73476, 88493, 246},
    {-72141, 84310, 216},
    {-76962, 81380, 336},
    {-74882, 78828, 106},
    {-70818, 78733, 116},
    {-46054, 71645, 246},
    {-48795, 73819, 216},
    {-48134, 76087, 326},
    {-51253, 75236, 446},
    {-59192, 70510, 346},
    {-58058, 72117, 446},
    {-54466, 70794, 136},
    {-51158, 72779, 46},
    {-61272, 71739, 16},
    {-60421, 72873, 14},
    {-56073, 72401, 46},
    {-55884, 69660, 446},
    {-49268, 68904, 46},
    {-49079, 70699, 66},
    {-52387, 69849, 86},
    {-59381, 65974, 36},
    {-58909, 64745, 56},
    {-60515, 65028, 136},
    {-60232, 64461, 176},
    {-60421, 63138, 196},
    {-51347, 68336, 246},
    {-54183, 67580, 346},
    {-55979, 68053, 46},
    {-58909, 68147, 146},
    {-54844, 65312, 246},
    {-55884, 66257, 246},
    {-56924, 67108, 156},
    {-58247, 66730, 166},
    {-53805, 73913, 176},
    {-57113, 74197, 186},
    {-59192, 74669, 196},
    {-55884, 78355, 246},
    {-60893, 76181, 246},
    {-60515, 79017, 226},
    {-58342, 77505, 216},
    {-52954, 77316, 266},
    {-55600, 76276, 266},
    {-63351, 78450, 646},
    {-66281, 77032, 246},
    {-64107, 75331, 16},
    {-65903, 73819, 46},
    {-64863, 72023, 66},
    {-62500, 73440, 46},
    {-58720, 62193, 76},
    {-58625, 63705, 26},
    {-61177, 60113, 26},
    {-61272, 63422, 46},
    {-61366, 62382, 76},
    {-61839, 60870, 246},
    {-62500, 64745, 246},
    {-62500, 62193, 346},
    {-54088, 62854, 446},
    {-53899, 64272, 446},
    {-82633, 53781, 16},
    {-84334, 58507, 14},
    {-80364, 56711, 46},
    {-85090, 69282, 146},
    {-85657, 65028, 146},
    {-81404, 59830, 146},
    {-81593, 65974, 346},
    {-77623, 53970, 246},
    {-76300, 58318, 176},
    {-74221, 59168, 276},
    {-78663, 65028, 376},
    {-75260, 65406, 76},
    {-76772, 61720, 76},
    {-73937, 62382, 76},
    {-79041, 68336, 17},
    {-75638, 68053, 17},
    {-74504, 70605, 17},
    {-80837, 76654, 276},
    {-81687, 71550, 276},
    {-77907, 70983, 376},
    {-71574, 73062, 376},
    {-76867, 74858, 176},
    {-73559, 74669, 176},
    {-68266, 74291, 33},
    {-69117, 71550, 133},
    {-67037, 70510, 153},
    {-65619, 67864, 163},
    {-64107, 69093, 233},
    {-62595, 70416, 333},
    {-57869, 69376, 233},
    {-61177, 69093, 433},
    {-63540, 65595, 153},
    {-60704, 66352, 163},
    {-56168, 60964, 173},
    {-57963, 60870, 13},
    {-59287, 60208, 13},
    {-60137, 61248, 33},
    {-62689, 67958, 33},
    {-61083, 67864, 153},
    {-61839, 66446, 183},
    {-59948, 67013, 113},
    {-57585, 65406, 123},
    {-56640, 64556, 183},
    {-55695, 63422, 233},
    {-55695, 61909, 433},
    {-57207, 62854, 33}
    }
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createH1toI2mines()
	local mine_list = {}
	local mine_coordinates = {
    {-69684, 69565},
    {-63162, 50378},
    {-57396, 57089},
    {-52859, 61720},
    {-52765, 67486},
    {-71385, 54253},
    {-72992, 63894},
    {-65808, 59263},
    {-64296, 67202},
    {-60736, 54671},
    {-57869, 75898}
    }
    for i=1,#mine_coordinates do
    	local static_mine = Mine():setPosition(mine_coordinates[i][1],mine_coordinates[i][2])
    	table.insert(mine_list,static_mine)
    end
    return mine_list
end
function createJ0toK0nebulae()
	local nebula_list = {}
	local nebula_coordinates = {
		{-89306, 81682},
		{-89049, 90014},
		{-85717, 97192},
		{-86999, 109498},
		{-83409, 101294}
    }
    for i=1,#nebula_coordinates do
    	local static_nebula = Nebula():setPosition(nebula_coordinates[i][1],nebula_coordinates[i][2])
    	table.insert(nebula_list,static_nebula)
    end
    return nebula_list
end
function createJ4toL8nebulae()
	local nebula_list = {}
	local nebula_coordinates = {
    	{11830, 121981},
    	{49516, 123627},
    	{36680, 94663}
    }
    for i=1,#nebula_coordinates do
    	local static_nebula = Nebula():setPosition(nebula_coordinates[i][1],nebula_coordinates[i][2])
    	table.insert(nebula_list,static_nebula)
    end
    local neb_x = random(-5000,75000)
    local neb_y = random(80000,140000)
    icarus_mobile_nebula_1 = Nebula():setPosition(neb_x,neb_y)
    icarus_mobile_nebula_1.angle = random(0,360)
    icarus_mobile_nebula_1.increment = random(0,10)
	plotMobile = movingObjects
	table.insert(nebula_list,icarus_mobile_nebula_1)
    return nebula_list
end
function createJ4toL8asteroids()
	local asteroidList = {}
	local asteroidCoordinates = {
		{30127, 87524, 20},
		{37878, 91210, 160},
		{42982, 96692, 150},
		{61413, 84121, 12},
		{43832, 84972, 220},
		{52434, 86011, 320},
		{47897, 91777, 220},
		{25874, 92155, 420},
		{32301, 97543, 520},
		{34192, 106333, 10},
		{14815, 103592, 60},
		{22944, 102268, 90},
		{49882, 99338, 125},
		{49409, 107845, 160},
		{45534, 105198, 180},
		{39957, 110491, 250},
		{68596, 93573, 330},
		{61224, 93478, 30},
		{56025, 106522, 20},
		{63681, 107561, 60},
		{71999, 102363, 520},
		{56309, 98677, 40},
		{59900, 114178, 50},
		{51488, 115879, 160},
		{45817, 115406, 130},
		{37689, 115312, 100},
		{27764, 114650, 110},
		{13870, 115501, 220},
		{14343, 94140, 320},
		{11507, 108318, 220},
		{18691, 109641, 130},
		{26347, 106616, 140},
		{6592, 105860, 125},
		{2339, 106049, 17},
		{5458, 112004, 180},
		{21432, 128639, 320},
		{6687, 117486, 520},
		{30127, 129584, 620},
		{26536, 123062, 420},
		{51677, 131191, 320},
		{25496, 133743, 220},
		{61318, 127410, 12},
		{70676, 116730, 12},
		{-3143, 117675, 12},
		{-2765, 123724, 150},
		{24551, 128355, 60},
		{26158, 138847, 190},
		{33341, 132703, 220},
		{2623, 128450, 320},
		{11885, 135444, 420},
		{17651, 133176, 480},
		{31640, 124764, 160},
		{19825, 119282, 180},
		{12263, 125803, 260},
		{42226, 125803, 380},
		{43360, 134877, 470},
		{53662, 121267, 120}
	}
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	staticAsteroid.original_size = asteroidCoordinates[i][3]
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createBorlanFeatures()
	local asteroidList = {}
	local asteroidCoordinates = {
		{94849, 47119, 120},
		{97216, 46689, 220},
		{97001, 47837, 320},
		{95710, 46689, 220},
		{95996, 46043, 320},
		{96212, 48841, 10},
		{97646, 49487, 12},
		{98436, 48698, 20},
		{98149, 47478, 220},
		{85523, 47909, 250},
		{85523, 49415, 30},
		{86671, 44896, 380},
		{82366, 44824, 420},
		{92338, 46187, 520},
		{91907, 44824, 120},
		{90903, 43676, 80},
		{90975, 46689, 60},
		{90616, 47550, 220},
		{94131, 45900, 320},
		{93270, 47550, 220},
		{95925, 47550, 70},
		{94275, 48267, 50},
		{88464, 47550, 20},
		{80071, 49056, 12},
		{83227, 47693, 280},
		{86742, 46402, 370},
		{84877, 47048, 120},
		{84590, 45685, 460},
		{88392, 45613, 40},
		{89038, 44680, 12},
		{89755, 45900, 60},
		{82151, 45828, 80},
		{79497, 45398, 20},
		{80358, 44250, 20},
		{73040, 35067, 12},
		{79712, 42887, 90},
		{83873, 50563, 110},
		{83514, 49272, 150},
		{82008, 48985, 170},
		{80716, 46904, 320},
		{76484, 50132, 370},
		{78636, 47191, 450},
		{76340, 48482, 320},
		{78062, 48482, 520},
		{77058, 45541, 70},
		{76555, 46474, 40},
		{75336, 40807, 12},
		{75695, 43676, 12},
		{75766, 45900, 12},
		{76699, 44967, 12},
		{74332, 47980, 12},
		{73614, 47478, 20},
		{74403, 46474, 20},
		{75336, 47550, 20},
		{73471, 45541, 20},
		{74619, 42959, 20},
		{74762, 41739, 70},
		{74690, 44680, 20},
		{73614, 44106, 20},
		{74762, 38080, 90},
		{73973, 39372, 220},
		{74403, 40663, 220},
		{74834, 39946, 320},
		{73542, 40376, 320},
		{72610, 39443, 420},
		{73829, 42170, 420},
		{72969, 41524, 120},
		{72108, 38224, 10},
		{72395, 37291, 160},
		{73327, 38511, 50},
		{74045, 37363, 40},
		{77345, 43030, 220},
		{78349, 43963, 70},
		{77201, 39443, 90},
		{78277, 40304, 160},
		{78492, 42241, 520},
		{76771, 40663, 10},
		{76197, 42026, 10},
		{75264, 39157, 12},
		{73040, 36215, 320},
		{71749, 35713, 120},
		{71677, 34350, 470}
    }
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2])
    	staticAsteroid:setSize(asteroidCoordinates[i][3])
    	staticAsteroid.original_size = asteroidCoordinates[i][3]
    	table.insert(asteroidList,staticAsteroid)
    end
    return asteroidList
end
function createFinneganFeatures()
	local feature_list = {}
	local asteroidCoordinates = {
		{121621, 76465, 120},
		{117556, 76465, 15},
		{120581, 76654, 50},
		{121337, 77505, 320},
		{114532, 74953, 65},
		{116139, 76087, 12},
		{116328, 77505, 460},
		{116706, 79584, 120},
		{117651, 79962, 160},
		{118785, 79112, 195},
		{119636, 77694, 270},
		{117178, 80813, 333},
		{116611, 82231, 120},
		{118785, 77127, 10},
		{117178, 77694, 220},
		{117934, 78639, 250},
	
		{133814, 79206, 620},
		{133530, 77599, 20},
		{132112, 80246, 120},
		{137594, 81380, 12},
		{135326, 80435, 12},
		{136838, 80246, 12},
		{135893, 79206, 220},
		{135137, 78072, 320},
		{142415, 85728, 70},
		{138350, 82420, 80},
		{139012, 82798, 70},
		{137216, 82798, 80},
		{138256, 80624, 180},
		{140808, 85161, 190},
		{140241, 84216, 220},
		{139296, 81569, 20},
	
		{130694, 105009, 580},
		{130316, 103403, 12},
		{129088, 102363, 12},
		{128899, 101323, 20},
		{132963, 106238, 320},
		{130600, 109263, 220},
		{130883, 107467, 470},
		{133908, 107372, 80},
		{129655, 108034, 20},
		{132207, 104726, 12},
		{131356, 104348, 90},
		{133246, 103403, 220},
		{131545, 106144, 320},
		{134475, 101796, 270},
	
		{109995, 96597, 120},
		{107916, 92911, 220},
		{108483, 92250, 320},
		{106781, 90359, 420},
		{108766, 93478, 12},
		{108672, 94329, 20},
		{109239, 98015, 60},
		{108955, 95936, 70},
		{104513, 88280, 80},
		{103284, 89792, 90},
		{101961, 91777, 320},
		{105175, 89509, 380},
		{107727, 91021, 25},
		{106876, 89319, 70},
		{102055, 90548, 65},
		{102717, 88752, 120}
    }
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	staticAsteroid.original_size = asteroidCoordinates[i][3]
    	table.insert(feature_list,staticAsteroid)
    end
    local neb = Nebula():setPosition(108483, 93100)
    table.insert(feature_list,neb)
    local strat_x = 138000
    local strat_y = 138000
    local planet_strat = Planet():setPosition(strat_x,strat_y):setPlanetRadius(750):setDistanceFromMovementPlane(-1500):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(1.0,.9,.9):setCallSign("Stratbik")
    table.insert(feature_list,planet_strat)
    local primus_angle = random(0,360)
    local primus_distance = 45000
    local primus_x, primus_y = vectorFromAngle(primus_angle,primus_distance)
    local planet_pillory = Planet():setPosition(strat_x+primus_x,strat_y+primus_y):setPlanetRadius(1800):setDistanceFromMovementPlane(-600)
    planet_pillory:setPlanetSurfaceTexture("planets/planet-2.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.1,0.6,0.1)
    planet_pillory:setCallSign("Pillory"):setOrbit(planet_strat,2500)
    table.insert(feature_list,planet_pillory)
    return feature_list
end
function wormholeTour()
	local feature_list = {}
	local zone_sign = Zone()
	local base_x, base_y = vectorFromAngle(40,5000,true)
	base_x = base_x + 220000
	base_y = base_y - 380000
	local base_left_corner_x, base_left_corner_y = vectorFromAngle(40 + 270,1000,true)
	base_left_corner_x = base_left_corner_x + base_x
	base_left_corner_y = base_left_corner_y + base_y
	local left_inner_arrow_x, left_inner_arrow_y = vectorFromAngle(40,10000,true)
	left_inner_arrow_x = left_inner_arrow_x + base_left_corner_x
	left_inner_arrow_y = left_inner_arrow_y + base_left_corner_y
	local left_outer_arrow_x, left_outer_arrow_y = vectorFromAngle(40 + 270,1000,true)
	left_outer_arrow_x = left_outer_arrow_x + left_inner_arrow_x
	left_outer_arrow_y = left_outer_arrow_y + left_inner_arrow_y
	local arrow_tip_x, arrow_tip_y = vectorFromAngle(40,13000,true)
	arrow_tip_x = arrow_tip_x + base_x
	arrow_tip_y = arrow_tip_y + base_y
	local base_right_corner_x, base_right_corner_y = vectorFromAngle(40 + 90,1000,true)
	base_right_corner_x = base_right_corner_x + base_x
	base_right_corner_y = base_right_corner_y + base_y
	local right_inner_arrow_x, right_inner_arrow_y = vectorFromAngle(40,10000,true)
	right_inner_arrow_x = right_inner_arrow_x + base_right_corner_x
	right_inner_arrow_y = right_inner_arrow_y + base_right_corner_y
	local right_outer_arrow_x, right_outer_arrow_y = vectorFromAngle(40 + 90,1000,true)
	right_outer_arrow_x = right_outer_arrow_x + right_inner_arrow_x
	right_outer_arrow_y = right_outer_arrow_y + right_inner_arrow_y
	zone_sign:setPoints(
		base_left_corner_x, 	base_left_corner_y,
		left_inner_arrow_x, 	left_inner_arrow_y,
		left_outer_arrow_x, 	left_outer_arrow_y,
		arrow_tip_x,			arrow_tip_y,
		right_outer_arrow_x,	right_outer_arrow_y,
		right_inner_arrow_x,	right_inner_arrow_y,
		base_right_corner_x,	base_right_corner_y
	)
	zone_sign:setLabel("Wormhole Tour ~50U"):setColor(40,40,150)
	table.insert(feature_list,zone_sign)
--	I90 north of Lafrina, west of Icarus
	table.insert(feature_list,WormHole():setPosition(-280955, 79017):setTargetPosition(-320252, 653528))
	table.insert(feature_list,BlackHole():setPosition(-290344, 73094))
--	F88 south of Lafrina
	table.insert(
		feature_list,
		WormHole():setPosition(-323252, 653528):setTargetPosition(419531, 616181):onTeleportation(function(self, teleportee)
			local wep_x = 319531
			local wep_y = 617181
			local vx, vy = vectorFromAngle(random(0,360),random(50,500))
			if self ~= nil then
			    self:setTargetPosition(wep_x + vx, wep_y + vy)
			end
		end)
	)
	local asteroidCoordinates = {
		{-346106, 680515, 379},
		{-345466, 679052, 214},
		{-345969, 679235, 256},
		{-340666, 676994, 338},
		{-337145, 678183, 249},
		{-337602, 665793, 297},
		{-338288, 664467, 283},
		{-336459, 664696, 230},
		{-338197, 662958, 207},
		{-350541, 677726, 150},
		{-345695, 678595, 340},
		{-345192, 678503, 241},
		{-337419, 674388, 314},
		{-338882, 671234, 331},
		{-347844, 674388, 219},
		{-344872, 671965, 275},
		{-341397, 672560, 257},
		{-332893, 663736, 257},
		{-334905, 663827, 248},
		{-332847, 661907, 272},
		{-335773, 661907, 184},
		{-334173, 661221, 268},
		{-337008, 666707, 215},
		{-337511, 668033, 265},
		{-337556, 667256, 172},
		{-341260, 665884, 266},
		{-342494, 668628, 304},
		{-338379, 667347, 281},
		{-336551, 667073, 244},
		{-335910, 670502, 182},
		{-334585, 667667, 165},
		{-330424, 660581, 311},
		{-331293, 662547, 233},
		{-333442, 656832, 275},
		{-333030, 658798, 316},
		{-334585, 658843, 289},
		{-331110, 659118, 266},
		{-329510, 656374, 228},
		{-328279, 656363, 247},
		{-326711, 656461, 257},
		{-330744, 655551, 328},
		{-330104, 654637, 249},
		{-328138, 652305, 312},
		{-329372, 653082, 248},
		{-329098, 654911, 261},
		{-328504, 654317, 190},
		{-323474, 648647, 316},
		{-324800, 648693, 246},
		{-328138, 651528, 289},
		{-327818, 650705, 346},
		{-326629, 649196, 136},
		{-325029, 650019, 273},
		{-324434, 649608, 282},
		{-326629, 652351, 324},
		{-327299, 654501, 240},
		{-326949, 651208, 178},
		{-327361, 652900, 260},
		{-330333, 656237, 326},
		{-331796, 657929, 295},
		{-331476, 656466, 249},
		{-326417, 657539, 217},
		{-328181, 658323, 235},
		{-326126, 649973, 239},
		{-325943, 650796, 225},
		{-325349, 649242, 257},
		--AJ25
    	{421053, 628901, 278},
    	{420642, 628474, 176},
    	{418054, 629098, 330},
    	{418404, 629281, 294},
 --   	{419592, 624578, 347},
    	{418770, 629753, 258},
    	{420505, 628794, 181},
    	{419820, 629372, 249},
    	{420231, 629418, 177},
    	{420718, 629281, 200},
    	{419548, 622373, 178},
    	{418905, 621872, 209},
    	{418968, 629357, 236},
    	{418359, 628657, 248},
    	{418831, 628018, 206},
    	{418815, 628809, 299},
    	{420248, 621948, 182},
    	{419397, 622827, 244},
 --   	{419019, 622439, 235},
 --   	{419444, 621910, 286},
    	{419784, 622175, 296},
    	{419510, 623290, 228},
 --   	{419406, 623706, 237},
 --   	{419945, 622808, 211},
    	{419652, 623517, 163},
 --   	{419567, 625681, 226},
 --   	{419633, 626163, 310},
 --   	{419662, 624122, 315},
 --   	{419576, 625029, 192},
    	{420040, 627515, 207},
    	{420219, 627997, 241},
 --   	{419482, 626626, 255},
    	{419718, 626882, 268},
    	{419113, 627638, 257},
    	{418877, 628422, 285},
    	{419690, 627468, 347},
    	{419387, 627175, 242},
    	{419454, 629027, 198},
    	{419992, 628318, 125},
    	{420021, 628942,  37},
    	{419340, 628583, 127},
    	{419633, 627846, 262},
    	{419321, 628148, 123},
    	{420307, 629890, 235},
    	{419455, 629890, 189},
    }
--	AJ25 southeast of Kentar
	table.insert(feature_list,BlackHole():setPosition(414508, 624940))
	table.insert(
		feature_list,
		WormHole():setPosition(419531, 619181):setTargetPosition(258703, -420658):onTeleportation(function(self, teleportee)
			local wep_x = 258703
			local wep_y = -420658
			local vx, vy = vectorFromAngle(random(0,360),random(50,200))
			if self ~= nil then
			    self:setTargetPosition(wep_x + vx, wep_y + vy)
			end
		end)
	)
	table.insert(feature_list,WarpJammer():setFaction("Independent"):setPosition(419664, 628392):setRange(80000))
	table.insert(feature_list,BlackHole():setPosition(424682, 624964))
--	ZJ17 Near north end of linked Cindy's folly wormhole pair
	table.insert(feature_list,Nebula():setPosition(261439, -423676))
	table.insert(feature_list,Nebula():setPosition(255314, -422770))
	table.insert(feature_list,WormHole():setPosition(258056, -424035):setTargetPosition(-282955, 79017))
    for i=1,#asteroidCoordinates do
    	local staticAsteroid = Asteroid():setPosition(asteroidCoordinates[i][1],asteroidCoordinates[i][2]):setSize(asteroidCoordinates[i][3])
    	staticAsteroid.original_size = asteroidCoordinates[i][3]
    	table.insert(feature_list,staticAsteroid)
    end
    return feature_list
end
-- Kentar area stations, asteroids, mines, etc. 
function kentarSector()
	createKentarColor()
	return {
		destroy = function(self)
			assert(type(self)=="table")
			removeKentarColor()
		end
	}
end
function createKentarColor()
	kentar_color = true
	kentar_defense_platforms = {}
	kentar_planets = createKentarPlanets()
	kentar_asteroids = createKentarAsteroids()
	kentar_moving_asteroids = createKentarOrbitingAsteroids()
	kentar_nebula = createKentarNebula()
	kentar_mines = createKentarMines()
	kentar_stations = createKentarStations()
	regionStations = kentar_stations
	if stationKentar ~= nil then
		table.insert(regionStations,stationKentar)
	end
	local start_angle = 315
	local kentar_zone = nil
	for i=1,3 do
		local dpx, dpy = vectorFromAngle(start_angle,3500)
		if i == 2 then
			kentar_zone = squareZone(kentar_x+dpx,kentar_y+dpy,string.format("Kentar DP%i",i))
			kentar_zone:setColor(0,128,0):setLabel(string.format("%i",i))
		else
			local dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(kentar_x+dpx,kentar_y+dpy):setScannedByFaction("Human Navy",true):setCallSign(string.format("KDP%i",i)):setDescription(string.format("Kentar defense platform %i",i)):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
			setBeamColor(dp)
			station_names[dp:getCallSign()] = {dp:getSectorName(), dp}
			table.insert(kentar_defense_platforms,dp)
		end
		start_angle = (start_angle + 120) % 360
	end
end
function createKentarStations()
	local stations = {}
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	--Gamma
	--local gamma3Zone = squareZone(266825, 314128, "Gamma-4 U18")
	--gamma3Zone:setColor(0,128,0)
    stationGamma3 = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Gamma-4"):setPosition(266825, 314128):setDescription("Observation Post Gamma 3"):setCommsScript(""):setCommsFunction(commsStation)
    stationGamma3:setShortRangeRadarRange(11000)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationGamma3.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,4), HVLI = math.random(2,4),Mine = math.random(2,5),Nuke = math.random(8,20),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 10},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	tractor = 	{quantity = math.random(2,5),	cost = math.random(40,70)},
        			repulsor = 	{quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We watch and report on enemy vessel movement. We also run a small tractor and repulsor component machine shop",
    	history = "The Human Navy set this station up as a strategic observation post",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 22 then stationGamma3:setRestocksScanProbes(false) end
	if random(1,100) <= 31 then stationGamma3:setRepairDocked(false) end
	if random(1,100) <= 17 then stationGamma3:setSharesEnergyWithDocked(false) end
	station_names[stationGamma3:getCallSign()] = {stationGamma3:getSectorName(), stationGamma3}
	table.insert(stations,stationGamma3)

	--Gateway
	gateway_objects = {}
	local gateway_x = 59893
	local gateway_y = 373681
	local e = 0.95
	local semi_major_axis = 10000
	local orbit_inner = 5000
	local orbit_focal = orbit_inner + semi_major_axis*(1-e) -- width of central offset + distance at perihelion
	local orbit_mid = orbit_inner + semi_major_axis
	local orbit_far = orbit_inner + semi_major_axis*2
	local orbit_time = 30
	local o = orbit_time
	local l = 50 -- low_colour
	local low2 = 128
	local h =255 -- high_colour
	local red_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(red_artifact,getScenarioTime(),low2,h,o,l,l,l,o,l,l,l,o)
	local green_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(green_artifact,l,l,l,o,getScenarioTime(),low2,h,o,l,l,l,o)
	local blue_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(blue_artifact,l,l,l,o,l,l,l,o,getScenarioTime(),low2,h,o)
	update_system:addSlowAndAccurateElliptical(red_artifact, gateway_x + math.sin(((0  )/360)*math.pi*2)*orbit_focal, gateway_y - math.cos(((0  )/360)*math.pi*2)*orbit_focal, orbit_time, -90, e, semi_major_axis,180)
	update_system:addSlowAndAccurateElliptical(green_artifact, gateway_x + math.sin(((120)/360)*math.pi*2)*orbit_focal, gateway_y - math.cos(((120)/360)*math.pi*2)*orbit_focal, orbit_time, 120-90, e,semi_major_axis,180)
	update_system:addSlowAndAccurateElliptical(blue_artifact, gateway_x + math.sin(((240)/360)*math.pi*2)*orbit_focal, gateway_y - math.cos(((240)/360)*math.pi*2)*orbit_focal, orbit_time, 240-90, e,semi_major_axis,180)
	table.insert(gateway_objects,red_artifact)
	table.insert(gateway_objects,green_artifact)
	table.insert(gateway_objects,blue_artifact)

	-- there is an internal logic to the callsigns
	-- I dont mind if the style is changed, but the internal logic is important IMO
	-- I feel that an internal logic is important, even if its not completely self evidence
	-- general form is (colour)(reason for station)(station itteration)

	-- the color near stations
	-- coms scripts are disabled due to not wantint players to have unlimited restock
	-- ideally it would be changed to an automated message, but I havent got round to it
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("RN1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((0  )/360)*math.pi*2)*orbit_inner, gateway_y - math.cos(((0  )/360)*math.pi*2)*orbit_inner):setCommsFunction(SwitchToGM))
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("GN1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((120  )/360)*math.pi*2)*orbit_inner, gateway_y - math.cos(((120  )/360)*math.pi*2)*orbit_inner):setCommsFunction(SwitchToGM))
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("BN1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((240  )/360)*math.pi*2)*orbit_inner, gateway_y - math.cos(((240  )/360)*math.pi*2)*orbit_inner):setCommsFunction(SwitchToGM))

	-- creating this was more manual than I would like
	-- if it needs to be regnerated create (via gmClickMineCircle)
	-- 6 mine rings, all radius 15, +-20 degrees from (0,120,240)
	-- 16000 units from gateway central
	-- I also disabled randomness in start angle (set to 0)
	table.insert(gateway_objects,Mine():setPosition(54138, 368593))
	table.insert(gateway_objects,Mine():setPosition(52687, 366663))
	table.insert(gateway_objects,Mine():setPosition(53374, 367657))
	table.insert(gateway_objects,Mine():setPosition(52609, 371241))
	table.insert(gateway_objects,Mine():setPosition(44289, 371912))
	table.insert(gateway_objects,Mine():setPosition(58935, 345094))
	table.insert(gateway_objects,Mine():setPosition(59740, 344621))
	table.insert(gateway_objects,Mine():setPosition(60851, 345094))
	table.insert(gateway_objects,Mine():setPosition(56844, 346301))
	table.insert(gateway_objects,Mine():setPosition(55879, 347027))
	table.insert(gateway_objects,Mine():setPosition(57865, 345656))
	table.insert(gateway_objects,Mine():setPosition(65648, 368593))
	table.insert(gateway_objects,Mine():setPosition(66412, 367657))
	table.insert(gateway_objects,Mine():setPosition(67099, 366663))
	table.insert(gateway_objects,Mine():setPosition(68220, 364525))
	table.insert(gateway_objects,Mine():setPosition(68649, 363396))
	table.insert(gateway_objects,Mine():setPosition(69372, 359853))
	table.insert(gateway_objects,Mine():setPosition(67703, 365617))
	table.insert(gateway_objects,Mine():setPosition(51416, 371047))
	table.insert(gateway_objects,Mine():setPosition(68985, 362236))
	table.insert(gateway_objects,Mine():setPosition(69226, 361052))
	table.insert(gateway_objects,Mine():setPosition(50212, 370950))
	table.insert(gateway_objects,Mine():setPosition(68649, 353896))
	table.insert(gateway_objects,Mine():setPosition(68985, 355056))
	table.insert(gateway_objects,Mine():setPosition(69421, 358646))
	table.insert(gateway_objects,Mine():setPosition(68220, 352766))
	table.insert(gateway_objects,Mine():setPosition(67099, 350629))
	table.insert(gateway_objects,Mine():setPosition(67703, 351675))
	table.insert(gateway_objects,Mine():setPosition(69226, 356240))
	table.insert(gateway_objects,Mine():setPosition(69372, 357439))
	table.insert(gateway_objects,Mine():setPosition(50560, 361052))
	table.insert(gateway_objects,Mine():setPosition(50414, 359853))
	table.insert(gateway_objects,Mine():setPosition(50801, 362236))
	table.insert(gateway_objects,Mine():setPosition(50365, 358646))
	table.insert(gateway_objects,Mine():setPosition(51137, 363396))
	table.insert(gateway_objects,Mine():setPosition(50414, 357439))
	table.insert(gateway_objects,Mine():setPosition(63907, 347027))
	table.insert(gateway_objects,Mine():setPosition(64812, 347828))
	table.insert(gateway_objects,Mine():setPosition(65648, 348699))
	table.insert(gateway_objects,Mine():setPosition(66412, 349635))
	table.insert(gateway_objects,Mine():setPosition(62942, 346301))
	table.insert(gateway_objects,Mine():setPosition(61921, 345656))
	table.insert(gateway_objects,Mine():setPosition(51566, 364525))
	table.insert(gateway_objects,Mine():setPosition(52083, 365617))
	table.insert(gateway_objects,Mine():setPosition(50560, 356240))
	table.insert(gateway_objects,Mine():setPosition(50801, 355056))
	table.insert(gateway_objects,Mine():setPosition(51137, 353896))
	table.insert(gateway_objects,Mine():setPosition(51566, 352766))
	table.insert(gateway_objects,Mine():setPosition(52083, 351675))
	table.insert(gateway_objects,Mine():setPosition(52687, 350629))
	table.insert(gateway_objects,Mine():setPosition(53374, 349635))
	table.insert(gateway_objects,Mine():setPosition(54974, 347828))
	table.insert(gateway_objects,Mine():setPosition(54138, 348699))
	table.insert(gateway_objects,Mine():setPosition(85178, 385938))
	table.insert(gateway_objects,Mine():setPosition(85129, 384731))
	table.insert(gateway_objects,Mine():setPosition(84742, 382348))
	table.insert(gateway_objects,Mine():setPosition(84983, 383532))
	table.insert(gateway_objects,Mine():setPosition(85129, 387145))
	table.insert(gateway_objects,Mine():setPosition(84983, 388344))
	table.insert(gateway_objects,Mine():setPosition(84171, 388804))
	table.insert(gateway_objects,Mine():setPosition(76254, 391447))
	table.insert(gateway_objects,Mine():setPosition(75046, 391447))
	table.insert(gateway_objects,Mine():setPosition(77458, 391350))
	table.insert(gateway_objects,Mine():setPosition(79823, 390867))
	table.insert(gateway_objects,Mine():setPosition(78650, 391156))
	table.insert(gateway_objects,Mine():setPosition(82080, 390011))
	table.insert(gateway_objects,Mine():setPosition(80969, 390485))
	table.insert(gateway_objects,Mine():setPosition(83150, 389450))
	table.insert(gateway_objects,Mine():setPosition(43178, 372386))
	table.insert(gateway_objects,Mine():setPosition(36327, 378967))
	table.insert(gateway_objects,Mine():setPosition(36931, 377921))
	table.insert(gateway_objects,Mine():setPosition(35809, 380058))
	table.insert(gateway_objects,Mine():setPosition(35380, 381188))
	table.insert(gateway_objects,Mine():setPosition(40122, 374319))
	table.insert(gateway_objects,Mine():setPosition(39218, 375120))
	table.insert(gateway_objects,Mine():setPosition(37617, 376927))
	table.insert(gateway_objects,Mine():setPosition(38381, 375991))
	table.insert(gateway_objects,Mine():setPosition(71477, 390867))
	table.insert(gateway_objects,Mine():setPosition(73842, 391350))
	table.insert(gateway_objects,Mine():setPosition(72650, 391156))
	table.insert(gateway_objects,Mine():setPosition(70331, 390485))
	table.insert(gateway_objects,Mine():setPosition(69220, 390011))
	table.insert(gateway_objects,Mine():setPosition(68150, 389450))
	table.insert(gateway_objects,Mine():setPosition(67129, 388804))
	table.insert(gateway_objects,Mine():setPosition(66163, 388078))
	table.insert(gateway_objects,Mine():setPosition(65259, 387277))
	table.insert(gateway_objects,Mine():setPosition(48309, 390867))
	table.insert(gateway_objects,Mine():setPosition(47136, 391156))
	table.insert(gateway_objects,Mine():setPosition(49455, 390485))
	table.insert(gateway_objects,Mine():setPosition(50566, 390011))
	table.insert(gateway_objects,Mine():setPosition(37706, 390011))
	table.insert(gateway_objects,Mine():setPosition(39963, 390867))
	table.insert(gateway_objects,Mine():setPosition(38817, 390485))
	table.insert(gateway_objects,Mine():setPosition(45944, 391350))
	table.insert(gateway_objects,Mine():setPosition(44740, 391447))
	table.insert(gateway_objects,Mine():setPosition(55364, 386406))
	table.insert(gateway_objects,Mine():setPosition(53623, 388078))
	table.insert(gateway_objects,Mine():setPosition(56128, 385470))
	table.insert(gateway_objects,Mine():setPosition(54527, 387277))
	table.insert(gateway_objects,Mine():setPosition(52657, 388804))
	table.insert(gateway_objects,Mine():setPosition(51636, 389450))
	table.insert(gateway_objects,Mine():setPosition(43532, 391447))
	table.insert(gateway_objects,Mine():setPosition(42328, 391350))
	table.insert(gateway_objects,Mine():setPosition(41136, 391156))
	table.insert(gateway_objects,Mine():setPosition(34649, 388078))
	table.insert(gateway_objects,Mine():setPosition(35615, 388804))
	table.insert(gateway_objects,Mine():setPosition(36636, 389450))
	table.insert(gateway_objects,Mine():setPosition(34657, 387145))
	table.insert(gateway_objects,Mine():setPosition(34608, 385938))
	table.insert(gateway_objects,Mine():setPosition(34657, 384731))
	table.insert(gateway_objects,Mine():setPosition(34803, 383532))
	table.insert(gateway_objects,Mine():setPosition(35044, 382348))
	table.insert(gateway_objects,Mine():setPosition(41087, 373593))
	table.insert(gateway_objects,Mine():setPosition(42108, 372947))
	table.insert(gateway_objects,Mine():setPosition(45435, 371530))
	table.insert(gateway_objects,Mine():setPosition(46608, 371241))
	table.insert(gateway_objects,Mine():setPosition(47800, 371047))
	table.insert(gateway_objects,Mine():setPosition(49004, 370950))
	table.insert(gateway_objects,Mine():setPosition(57936, 382339))
	table.insert(gateway_objects,Mine():setPosition(56814, 384476))
	table.insert(gateway_objects,Mine():setPosition(57418, 383430))
	table.insert(gateway_objects,Mine():setPosition(58364, 381209))
	table.insert(gateway_objects,Mine():setPosition(62972, 384476))
	table.insert(gateway_objects,Mine():setPosition(62368, 383430))
	table.insert(gateway_objects,Mine():setPosition(73178, 371241))
	table.insert(gateway_objects,Mine():setPosition(74351, 371530))
	table.insert(gateway_objects,Mine():setPosition(75497, 371912))
	table.insert(gateway_objects,Mine():setPosition(76608, 372386))
	table.insert(gateway_objects,Mine():setPosition(77678, 372947))
	table.insert(gateway_objects,Mine():setPosition(78699, 373593))
	table.insert(gateway_objects,Mine():setPosition(79664, 374319))
	table.insert(gateway_objects,Mine():setPosition(80568, 375120))
	table.insert(gateway_objects,Mine():setPosition(81405, 375991))
	table.insert(gateway_objects,Mine():setPosition(82169, 376927))
	table.insert(gateway_objects,Mine():setPosition(82855, 377921))
	table.insert(gateway_objects,Mine():setPosition(83459, 378967))
	table.insert(gateway_objects,Mine():setPosition(83977, 380058))
	table.insert(gateway_objects,Mine():setPosition(84406, 381188))
	table.insert(gateway_objects,Mine():setPosition(63658, 385470))
	table.insert(gateway_objects,Mine():setPosition(64422, 386406))
	table.insert(gateway_objects,Mine():setPosition(61850, 382339))
	table.insert(gateway_objects,Mine():setPosition(61422, 381209))
	table.insert(gateway_objects,Mine():setPosition(69574, 370950))
	table.insert(gateway_objects,Mine():setPosition(68370, 371047))
	table.insert(gateway_objects,Mine():setPosition(67177, 371241))
	table.insert(gateway_objects,Mine():setPosition(70782, 370950))
	table.insert(gateway_objects,Mine():setPosition(71986, 371047))

	-- these where mines with a radius of 5u from the stations
	table.insert(gateway_objects,Mine():setPosition(72964, 363459))
	table.insert(gateway_objects,Mine():setPosition(73930, 364258))
	table.insert(gateway_objects,Mine():setPosition(75128, 368924))
	table.insert(gateway_objects,Mine():setPosition(74667, 365272))
	table.insert(gateway_objects,Mine():setPosition(75128, 366438))
	table.insert(gateway_objects,Mine():setPosition(75285, 367681))
	table.insert(gateway_objects,Mine():setPosition(71830, 362926))
	table.insert(gateway_objects,Mine():setPosition(45456, 364742))
	table.insert(gateway_objects,Mine():setPosition(44852, 365840))
	table.insert(gateway_objects,Mine():setPosition(44852, 369522))
	table.insert(gateway_objects,Mine():setPosition(44540, 367054))
	table.insert(gateway_objects,Mine():setPosition(44540, 368308))
	table.insert(gateway_objects,Mine():setPosition(48564, 362770))
	table.insert(gateway_objects,Mine():setPosition(47372, 363157))
	table.insert(gateway_objects,Mine():setPosition(46314, 363828))
	table.insert(gateway_objects,Mine():setPosition(62572, 389903))
	table.insert(gateway_objects,Mine():setPosition(63538, 389104))
	table.insert(gateway_objects,Mine():setPosition(55848, 388620))
	table.insert(gateway_objects,Mine():setPosition(56706, 389534))
	table.insert(gateway_objects,Mine():setPosition(57764, 390205))
	table.insert(gateway_objects,Mine():setPosition(58956, 390592))
	table.insert(gateway_objects,Mine():setPosition(60207, 390671))
	table.insert(gateway_objects,Mine():setPosition(61438, 390436))

	-- the color far stations
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("RF1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((0  )/360)*math.pi*2)*orbit_far, gateway_y - math.cos(((0  )/360)*math.pi*2)*orbit_far):setCommsFunction(SwitchToGM))
--	local gf1zone = squareZone(gateway_x + math.sin(((120  )/360)*math.pi*2)*orbit_far, gateway_y - math.cos(((120  )/360)*math.pi*2)*orbit_far,"GF1 Y9")
--	gf1zone:setColor(0,128,0):setLabel("F")
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("GF1.2"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((120  )/360)*math.pi*2)*orbit_far, gateway_y - math.cos(((120  )/360)*math.pi*2)*orbit_far):setCommsFunction(SwitchToGM))
    table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("BF1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((240  )/360)*math.pi*2)*orbit_far, gateway_y - math.cos(((240  )/360)*math.pi*2)*orbit_far):setCommsFunction(SwitchToGM))

	-- the mid way "guidance" stations, split to left center and right
	local guidance_width = 14
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("RGC1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((0  )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((0  )/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
--	local ggc1zone = squareZone(gateway_x + math.sin(((120  )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((120  )/360)*math.pi*2)*orbit_mid,"GGC1.2 Y8")
--	ggc1zone:setColor(0,128,0):setLabel("G")
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("GGC1.2"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((120  )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((120  )/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
    table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("BGC1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((240  )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((240  )/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("RGL1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((0  - guidance_width )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((0  - guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
--	local ggl1zone = squareZone(gateway_x + math.sin(((120  - guidance_width)/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((120  - guidance_width)/360)*math.pi*2)*orbit_mid,"GGL1.2 X8")
--	ggl1zone:setColor(0,128,0):setLabel("L")
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("GGL1.2"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((120  - guidance_width)/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((120  - guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
    table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("BGL1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((240  -guidance_width )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((240  - guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
	table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("RGR1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((0    +guidance_width )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((0  + guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
    table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("GGR1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((120  +guidance_width)/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((120  + guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))
    table.insert(gateway_objects,SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("BGR1"):setDescription("An accelerator for subspace rift creation"):setPosition(gateway_x + math.sin(((240  +guidance_width )/360)*math.pi*2)*orbit_mid, gateway_y - math.cos(((240  + guidance_width)/360)*math.pi*2)*orbit_mid):setCommsFunction(SwitchToGM))

	-- outer defence platforms
	local outer_defence_dist = orbit_far + 2000
	local dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(dp)
	dp:setPosition(gateway_x + math.sin(((0  )/360)*math.pi*2)*outer_defence_dist, gateway_y - math.cos(((0  )/360)*math.pi*2)*outer_defence_dist):setCallSign("DPR1"):setScanState("fullscan")
	table.insert(gateway_objects,dp)
--	local dpg1zone = squareZone(gateway_x + math.sin(((120)/360)*math.pi*2)*outer_defence_dist, gateway_y - math.cos(((120)/360)*math.pi*2)*outer_defence_dist, "DPG1 Y9")
--	dpg1zone:setColor(0,128,0):setLabel("DPG1")
	dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(dp)
	dp:setPosition(gateway_x + math.sin(((120)/360)*math.pi*2)*outer_defence_dist, gateway_y - math.cos(((120)/360)*math.pi*2)*outer_defence_dist):setCallSign("DPG1.2"):setScanState("fullscan")
	table.insert(gateway_objects,dp)
	dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(dp)
	dp:setPosition(gateway_x + math.sin(((240)/360)*math.pi*2)*outer_defence_dist, gateway_y - math.cos(((240)/360)*math.pi*2)*outer_defence_dist):setCallSign("DPB1"):setScanState("fullscan")
	table.insert(gateway_objects,dp)

	-- the calculation of these is kind of a pain, but if nothing else its good for documentation for why things are placed for later
	local x = gateway_x + math.sin(((25  )/360)*math.pi*2)*19000
	local y =gateway_y - math.cos(((25  )/360)*math.pi*2)*19000
--	local agst1Zone = squareZone(x, y, "AGST1 W8")
--	agst1Zone:setColor(0,128,0):setLabel("AGST1")
	table.insert(gateway_objects,sniperTower("Human Navy"):setCallSign("AGST1"):setPosition(x, y):orderRoaming())
	local x = gateway_x + math.sin(((50  )/360)*math.pi*2)*15000
	local y = gateway_y - math.cos(((50  )/360)*math.pi*2)*15000
--	local agdp1Zone = squareZone(x, y, "AGDP1 X8")
--	agdp1Zone:setColor(0,128,0):setLabel("AGDP1")
	local ship = CpuShip():setFaction("Human Navy"):setTemplate("Defense platform"):setCallSign("AGDP1"):setPosition(x,y):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	table.insert(gateway_objects,ship)
	local x = gateway_x + math.sin(((70  )/360)*math.pi*2)*15000
	local y = gateway_y - math.cos(((70  )/360)*math.pi*2)*15000
--	local agdp2Zone = squareZone(x, y, "AGDP2 X8")
--	agdp2Zone:setColor(0,128,0):setLabel("AGDP2")
	ship = CpuShip():setFaction("Human Navy"):setTemplate("Defense platform"):setCallSign("AGDP2"):setPosition(x, y):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	table.insert(gateway_objects,ship)
	local x = gateway_x + math.sin(((95  )/360)*math.pi*2)*19000
	local y =gateway_y - math.cos(((95  )/360)*math.pi*2)*19000
--	local agst2Zone = squareZone(x, y, "AGST2 X8")
--	agst2Zone:setColor(0,128,0):setLabel("A")
	table.insert(gateway_objects,sniperTower("Human Navy"):setCallSign("AGST2"):setPosition(x, y):orderRoaming())

	local orbit_time = 15
	local red_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(red_artifact,getScenarioTime(),h,low2,o,l,l,l,o,l,l,l,o)
	table.insert(gateway_objects,red_artifact)
	local green_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(green_artifact,l,l,l,o,getScenarioTime(),h,low2,o,l,l,l,o)
	table.insert(gateway_objects,green_artifact)
	local blue_artifact = Artifact()
	update_system:addArtifactCyclicalColorUpdate(blue_artifact,l,l,l,o,l,l,l,o,getScenarioTime(),h,low2,o)
	table.insert(gateway_objects,blue_artifact)

	update_system:addOrbitUpdate(red_artifact,gateway_x,gateway_y,orbit_inner,orbit_time,90+180)
	update_system:addOrbitUpdate(green_artifact:setRadarTraceColor(0,255,0),gateway_x,gateway_y,orbit_inner,orbit_time,120+90+180)
	update_system:addOrbitUpdate(blue_artifact:setRadarTraceColor(0,0,255),gateway_x,gateway_y,orbit_inner,orbit_time,240+90+180)

	local gateway_offset = orbit_inner + 7000
	local gateway_station_x = gateway_x + math.sin(((60  )/360)*math.pi*2)*gateway_offset
	local gateway_station_y = gateway_y - math.cos(((60  )/360)*math.pi*2)*gateway_offset

	-- these command bases are semi temporary
	-- at some point
	table.insert(gateway_objects,commandBase("Human Navy"):setPosition(gateway_x + math.sin(((180  )/360)*math.pi*2)*gateway_offset,gateway_y - math.cos(((180  )/360)*math.pi*2)*gateway_offset ):setCallSign("GCB1"))
	table.insert(gateway_objects,commandBase("Human Navy"):setPosition(gateway_x + math.sin(((300  )/360)*math.pi*2)*gateway_offset,gateway_y - math.cos(((300  )/360)*math.pi*2)*gateway_offset ):setCallSign("GCB2"))

    stationGateway = SpaceStation():setTemplate("Medium Station"):setFaction("Human Navy"):setCallSign("Gateway"):setPosition(gateway_station_x, gateway_station_y):setDescription("Subspace Rift Research and Construction"):setCommsScript(""):setCommsFunction(commsStation)
    stationGateway:setShortRangeRadarRange(8000)
    stationGateway.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,4), HVLI = math.random(2,4),Mine = math.random(2,5),Nuke = math.random(8,20),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = random(1,100)<60,	HVLI = random(1,100)<80,Mine = random(1,100)<50,Nuke = random(1,100)<30,	EMP = random(1,100)<40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 10},
        sensor_boost_probes = {name = "Spectacle", cost = math.random(18,35), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	sensor = 	{quantity = math.random(2,5),	cost = math.random(40,70)},
        			beam =		{quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = random(1,100)<42, luxury = random(1,100)<42 },
        public_relations = true,
        general_information = "We serve as the nexus of research and construction of subspace rift manipulation.",
    	history = "CUF set this base at this location due to the characteristics of the nearby space time continuum. Kraylor have also been using this area as part fo their efforts to further refine their subspace rift creation technology.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 12 then stationGateway:setRestocksScanProbes(false) end
	if random(1,100) <= 31 then stationGateway:setRepairDocked(false) end
	if random(1,100) <= 17 then stationGateway:setSharesEnergyWithDocked(false) end
	station_names[stationGateway:getCallSign()] = {stationGateway:getSectorName(), stationGateway}
	table.insert(stations,stationGateway)
	--Katanga
	--local katangaZone = squareZone(229513, 224048, "Katanga 2 Q16")
	--katangaZone:setColor(0,128,0)
    stationKatanga = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(229513, 224048):setCallSign("Katanga 2"):setDescription("Mining station for cobalt, gold and other minerals"):setCommsScript(""):setCommsFunction(commsStation)
    stationKatanga:setShortRangeRadarRange(8000)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 67 then tradeLuxury = true else tradeLuxury = false end
    stationKatanga.comms_data = {
    	friendlyness = 75,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(2,4),Mine = math.random(2,5),Nuke = math.random(12,18),	EMP = 10 },
        weapon_available = 	{Homing = homeAvail,HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 5},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	cobalt = 	{quantity = math.random(5,10),	cost = math.random(60,70)},
        			gold = 		{quantity = math.random(5,10),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = false, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Extracting minerals from these asteroids is our job",
    	history = "Based on the scans showing cobalt in many of these asteroids, we named this station after an ancient earth mining operation that was part of the Glencore Public Limited Company",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
			DF8 = "Piranha F8",
			DF9 = "Piranha F12",
    	},
	}
	if random(1,100) <= 22 then stationKatanga:setRestocksScanProbes(false) end
	if random(1,100) <= 38 then stationKatanga:setRepairDocked(false) end
	if random(1,100) <= 12 then stationKatanga:setSharesEnergyWithDocked(false) end
	station_names[stationKatanga:getCallSign()] = {stationKatanga:getSectorName(), stationKatanga}
	table.insert(stations,stationKatanga)
	--Keyhole-23 T15
	stationKeyhole23 = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Keyhole-23"):setPosition(213600,290000):setDescription("Gravitational lensing spy satellite"):setCommsScript(""):setCommsFunction(commsStation)
    stationKeyhole23:setShortRangeRadarRange(6500)
	stationKeyhole23.total_time = 0
    if random(1,100) <= 67 then tradeLuxury = true else tradeLuxury = false end
    stationKeyhole23.comms_data = {
    	friendlyness = 25,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(2,4),Mine = math.random(2,5),Nuke = math.random(32,58),	EMP = 20 },
        weapon_available = 	{Homing = false,	HVLI = false,			Mine = false,			Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(180,320), 
        	reinforcements = math.random(225,375),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost_probes = {name = "Scope", cost = math.random(57,72), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	dilithium = 	{quantity = math.random(5,10),	cost = math.random(20,30)},
        			tritanium =		{quantity = math.random(5,10),	cost = math.random(25,40)}	},
        trade = {	food = true, medicine = false, luxury = tradeLuxury },
        public_relations = true,
        general_information = "Work here is classified, however, it involves research on this black hole",
    	history = "Reference classified archives at headquarters. Public access redacted"
	}
	if random(1,100) <= 42 then stationKeyhole23:setRestocksScanProbes(false) end
	if random(1,100) <= 28 then stationKeyhole23:setRepairDocked(false) end
	if random(1,100) <= 15 then stationKeyhole23:setSharesEnergyWithDocked(false) end
	station_names[stationKeyhole23:getCallSign()] = {stationKeyhole23:getSectorName(), stationKeyhole23}
	table.insert(stations,stationKeyhole23)
	update_system:addOrbitUpdate(stationKeyhole23,210000,290000,3600,15*2*math.pi)
	--Kolar
--	local kolarZone = squareZone(165481, 272311, "Kolar 3 S13")
--	kolarZone:setColor(51,153,255)
    stationKolar = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Kolar 3"):setPosition(165481, 272311):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationKolar.comms_data = {
    	friendlyness = 85,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(1,4), HVLI = math.random(1,4),Mine = math.random(1,4),Nuke = math.random(12,18),	EMP = math.random(13,17) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 5000, cost = 10},
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        remote_warp_jammer = {name = "Mire", cost = math.random(9,20), quantity = math.random(1,5), speed = 2000, warp_jam_range = 15000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	circuit = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			autodoc =	{quantity = math.random(5,9),	cost = math.random(63,70)},
        			gold =		{quantity = math.random(5,9),	cost = math.random(33,50)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We mine gold, we make and sell autodoc and circuit",
    	history = "We said, 'thar's gold in them there rocks' and we just had to get some",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
			DF6 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 62 then stationKolar:setRestocksScanProbes(false) end
	if random(1,100) <= 48 then stationKolar:setRepairDocked(false) end
	if random(1,100) <= 35 then stationKolar:setSharesEnergyWithDocked(false) end
	station_names[stationKolar:getCallSign()] = {stationKolar:getSectorName(), stationKolar}
	table.insert(stations,stationKolar)
	--Locarno
	--local locarnoZone = squareZone(246819, 331779, "Locarno V17")
	--locarnoZone:setColor(51,153,255)
    stationLocarno = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Locarno"):setPosition(246819, 331779):setDescription("Mining and resupply"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationLocarno.comms_data = {
    	friendlyness = 85,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "neutral", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        sensor_boost = {value = 5000, cost = 5},
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nanites = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			android =	{quantity = math.random(5,9),	cost = math.random(63,70)},
        			cobalt =	{quantity = math.random(5,9),	cost = math.random(33,50)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We mine, we trade, we sell nanites and android components",
    	history = "It looked like a good location for resupply and mining and it's served us well",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "Piranha F12",
    	},
	}
	if random(1,100) <= 32 then stationLocarno:setRestocksScanProbes(false) end
	if random(1,100) <= 28 then stationLocarno:setRepairDocked(false) end
	if random(1,100) <= 25 then stationLocarno:setSharesEnergyWithDocked(false) end
	station_names[stationLocarno:getCallSign()] = {stationLocarno:getSectorName(), stationLocarno}
	table.insert(stations,stationLocarno)
	--Monocle	(originally Arecibo)
--	local MonocleZone = squareZone(389907,193834, "Monocle III O24")
--	MonocleZone:setColor(0,128,0):setLabel("M")
    stationMonocle = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setPosition(389907,193834):setDescription("Observation and resupply"):setCommsScript(""):setCommsFunction(commsStation)
    stationMonocle:setShortRangeRadarRange(12000)
    if random(1,100) < 50 then
    	stationMonocle:setCallSign("Monocle III")
    else
    	stationMonocle:setCallSign("Arecibo III")
    end
	nukeAvail =		random(1,100) <= 30
	empAvail =		random(1,100) <= 40
	mineAvail =		random(1,100) <= 50
	homeAvail =		random(1,100) <= 60
	hvliAvail =		random(1,100) <= 80
	tradeLuxury =	random(1,100) <= 42
	tradeMedicine =	random(1,100) <= 42
    stationMonocle.comms_data = {
    	friendlyness = 58,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,7), HVLI = math.random(1,3),Mine = math.random(1,6),Nuke = math.random(13,15),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        combat_maneuver_repair=	random(1,100)<30,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	sensor = 		{quantity = math.random(5,9),	cost = math.random(30,50)},
        			communication = {quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "In conjunction with station Pastern, we observe the asteroids in orbit around Rigil. We also provide supplies for Human Navy ships that might need them",
    	history = string.format("Established in Nov2020, %s was intended to help Pastern observe asteroids in exchange for information about T'k'nol'g, suspected of biological research using human tissue illicitly obtained. The results of the research so far have yielded an addictive drug that in large enough doses not only kills the consumer but turns their body into a hyper-acidic blob that tends to eat through the hulls of ships and stations. Certain personnel on %s are tasked with watching for T'k'nol'g and reporting any additional sightings or gleaned information",stationMonocle:getCallSign(),stationMonocle:getCallSign()),
    	idle_defense_fleet = {
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
    	},
	}
	stationMonocle:setRestocksScanProbes(random(1,100) <= 32)
	stationMonocle:setRepairDocked(random(1,100) <= 87)
	stationMonocle:setSharesEnergyWithDocked(random(1,100) <= 78)
	station_names[stationMonocle:getCallSign()] = {stationMonocle:getSectorName(), stationMonocle}
	table.insert(stations,stationMonocle)
	--Nereus
--	local NereusZone = squareZone(174288, 321668, "Nereus D V13")
--	NereusZone:setColor(0,128,0):setLabel("N")
    stationNereus = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Nereus D"):setPosition(174288, 321668):setDescription("Mining, observation and lifter manufacturing"):setCommsScript(""):setCommsFunction(commsStation)
    stationNereus:setShortRangeRadarRange(8500)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationNereus.comms_data = {
    	friendlyness = 58,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,7), HVLI = math.random(1,3),Mine = math.random(1,6),Nuke = math.random(13,15),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        remote_warp_jammer = {name = "Snag", cost = math.random(9,20), quantity = math.random(1,5), speed = 2500, warp_jam_range = 10000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nickel = 	{quantity = math.random(2,5),	cost = math.random(30,50)},
        			lifter = 	{quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We mine primarily for nickel, watch for enemy vessels and manufacture lifter components",
    	history = "These asteroids provide a good nearby source for nickel, so a station was placed to facilitate mining. One of the original station members had lifter experience and over time built up a lifter manufacturing facility",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 12 then stationNereus:setRestocksScanProbes(false) end
	if random(1,100) <= 18 then stationNereus:setRepairDocked(false) end
	if random(1,100) <= 35 then stationNereus:setSharesEnergyWithDocked(false) end
	station_names[stationNereus:getCallSign()] = {stationNereus:getSectorName(), stationNereus}
	table.insert(stations,stationNereus)
	--Pastern (Orbiting Ergot which orbits Rigil in N25. Look in the square bounded by Q22, K22, K28 and Q28)
	local ergot_x, ergot_y = planet_ergot:getPosition()
    stationPastern = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Pastern"):setPosition(ergot_x+1500, ergot_y):setDescription("Research"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationPastern.comms_data = {
    	friendlyness = 58,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,7), HVLI = math.random(1,3),Mine = math.random(1,6),Nuke = math.random(13,15),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost_probes = {name = "Binoc", cost = math.random(38,54), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        remote_warp_jammer = {name = "Snag", cost = math.random(9,20), quantity = math.random(1,5), speed = 2500, warp_jam_range = 10000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	circuit = 	{quantity = math.random(2,5),	cost = math.random(30,50)},
        			battery = 	{quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We research the relationship between Rigil, Ergot and the cosmos",
    	history = "Continuing the equine anatomy nomenclature, the station builders named this station Pastern due to its proximity to Ergot"
	}
	update_system:addOrbitTargetUpdate(stationPastern,planet_ergot,1500,23*2*math.pi,0)
	if random(1,100) <= 23 then stationPastern:setRestocksScanProbes(false) end
	if random(1,100) <= 18 then stationPastern:setRepairDocked(false) end
	if random(1,100) <= 15 then stationPastern:setSharesEnergyWithDocked(false) end
	station_names[stationPastern:getCallSign()] = {stationPastern:getSectorName(), stationPastern}
	table.insert(stations,stationPastern)
	--Talos
--	local talosZone = squareZone(124505, 317170, "Talos 2 U11")
--	talosZone:setColor(0,128,0):setLabel("T")
	stationTalos = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Talos 2"):setPosition(124505, 317170):setDescription("Mining and observation"):setCommsScript(""):setCommsFunction(commsStation)
    stationTalos:setShortRangeRadarRange(12500)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationTalos.comms_data = {
    	friendlyness = 35,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,7), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(14,18),	EMP = math.random(8,12) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair = random(1,100)<30,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = 	{quantity = math.random(2,5),	cost = math.random(50,80)},
        			gold =	 	{quantity = math.random(2,5),	cost = math.random(43,70)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We mine primarily for platinum and gold and watch for enemy vessels",
    	history = "These asteroids provide a good nearby source for gold and platinum, so a station was placed to facilitate mining. It also serves as a good early warning post for enemy vessels",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 14 then stationTalos:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationTalos:setRepairDocked(false) end
	if random(1,100) <= 12 then stationTalos:setSharesEnergyWithDocked(false) end
	station_names[stationTalos:getCallSign()] = {stationTalos:getSectorName(), stationTalos}
	table.insert(stations,stationTalos)
	--Sutter (T9)
    stationSutter = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Sutter"):setPosition(84609, 293172):setDescription("Mining and research"):setCommsScript(""):setCommsFunction(commsStation)
    stationSutter:setShortRangeRadarRange(14500)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationSutter.comms_data = {
    	friendlyness = 45,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nickel = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			dilithium =	{quantity = math.random(5,9),	cost = math.random(43,70)},
        			cobalt =	{quantity = math.random(5,9),	cost = math.random(63,70)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We mine for nickel, dilithium and cobalt. A science team researches some extraordinarily rare minerals found here",
    	history = "These asteroids provide a good nearby source for nickel, dilithium and cobalt, so a station was placed to facilitate mining. A scientific research team is also based herer to investigate unusual readings on some of the asteroids",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
    	},
	}
	if random(1,100) <= 14 then stationSutter:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationSutter:setRepairDocked(false) end
	if random(1,100) <= 12 then stationSutter:setSharesEnergyWithDocked(false) end
	station_names[stationSutter:getCallSign()] = {stationSutter:getSectorName(), stationSutter}
	table.insert(stations,stationSutter)
	return stations
end
function createKentarPlanets()
	local planet_list = {}
	rigil_x = 408742
	rigil_y = 169754
	planet_rigil = Planet():setPosition(rigil_x,rigil_y):setPlanetRadius(1000):setDistanceFromMovementPlane(-2000):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(1.0,.9,.9):setCallSign("Rigil")
	table.insert(planet_list,planet_rigil)
	primus_angle = random(0,360)
	primus_distance = 60000
	primus_x, primus_y = vectorFromAngle(primus_angle,primus_distance)
	planet_ergot = Planet():setPosition(rigil_x+primus_x,rigil_y+primus_y):setPlanetRadius(1000):setDistanceFromMovementPlane(-500)
	planet_ergot:setPlanetSurfaceTexture("planets/planet-2.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.3,0.15,0.1)
	planet_ergot:setCallSign("Ergot"):setOrbit(planet_rigil,3000)
	table.insert(planet_list,planet_ergot)
	black_hole_k1 = BlackHole():setPosition(290000,210000)
	table.insert(planet_list,black_hole_k1)
	black_hole_k2 = BlackHole():setPosition(210000,290000)
	table.insert(planet_list,black_hole_k2)
	return planet_list
end
function createKentarOrbitingAsteroids()
	local asteroid_list = {}
	local asteroid_details = {
		-- radius between 62557.29 69203.92
		{438202, 106939,179},
		{439406, 108631,244},
		{439556, 110404,255},
		{445151, 115994,234},
		{446075, 110491,267},
		{447353, 107336,188},
		{443965, 104266,251},
		{443846, 101072,288},
		{420298, 100935,177},
		{422742, 99380,204},
		{426465, 103303,179},
		{428234, 96320,172},
		{433853, 100713,223},
		{436062, 104991,199},
		{434632, 106705,284},
		{475853, 142935,183},
		{475631, 136046,125},
		{466924, 137718,261},
		{468606, 137287,263},
		{476803, 148254,172},
		{476853, 150890,249},
		{484298, 152935,215},
		{480340, 154309,285},
		{476462, 155769,179},
		{476465, 202473,206},
		{481853, 192269,245},
		{482056, 187312,147},
		{479631, 177158,264},
		{482712, 176455,184},
		{480419, 183944,212},
		{482490, 183557,168},
		{489409, 166935,245},
		{483187, 164269,195},
		{478175, 169012,208},
		{464711, 124665,226},
		{465849, 123165,149},
		{467409, 131158,213},
		{462081, 129193,220},
		{460076, 125201,99},
		{456533, 127512,214},
		{456743, 116285,151},
		{451294, 116868,239},
		{453409, 113824,140},
		{457262, 108972,169},
		{458742, 121602,156},
		{453991, 123866,111},
		{451631, 243158,174},
		{457409, 235824,225},
		{449409, 235602,219},
		{442520, 241824,166},
		{451409, 232046,246},
		{462742, 220713,215},
		{461187, 223380,186},
		{415853, 252491,181},
		{420520, 244046,164},
		{434964, 253158,192},
		{427187, 254491,129},
		{428075, 238046,225},
		{433187, 242269,243},
		{473409, 208269,207},
		{470742, 217602,205},
		{468520, 211380,263},
		{420075, 239158,228},
		{430298, 241380,142},
		{449409, 230713,223},
		{391631, 240491,204},
		{388964, 254491,196},
		{394742, 250713,263},
		{401853, 245158,169},
		{401853, 250491,281},
		{408742, 246935,214},
		{385631, 236713,162},
		{392742, 235158,179},
		{400964, 239380,221},
		{407853, 243158,220},
		{410520, 103158,176},
		{409384, 107200,158},
		{408292, 97682,134},
		{413880, 101053,198},
		{403853, 99824,199},
		{406695, 100545,173},
		{396199, 104603,144},
		{395902, 102635,256},
		{394016, 107213,115},
		{397227, 105327,178},
		{397511, 106332,232},
		{397501, 107461,185},
		{399834, 98489,110},
		{400109, 98032,155},
		{390956, 103875,140},
		{391159, 106602,201},
		{387302, 105046,198},
		{383187, 107824,161},
		{382227, 105381,173},
		{350742, 133158,198},
		{351409, 137158,236},
		{355064, 124956,121},
		{353821, 129744,221},
		{360742, 127158,137},
		{364822, 124480,237},
		{357552, 129346,143},
		{358964, 123380,119},
		{362560, 121821,253},
		{347187, 138491,196},
		{343187, 143824,175},
		{348964, 146269,167},
		{343853, 153158,196},
		{338964, 172046,230},
		{340075, 158935,191},
		{342075, 167602,138},
		{364298, 114713,145},
		{368075, 117380,120},
		{368928, 113308,212},
		{371631, 118046,221},
		{371962, 114999,213},
		{370469, 110794,248},
		{375631, 108269,184},
		{377990, 112614,138},
		{342075, 178046,247},
		{333187, 194935,156},
		{333631, 186269,135},
		{340298, 186269,190},
		{335853, 211158,138},
		{339853, 206491,194},
		{341187, 193602,173},
		{370964, 245380,213},
		{369409, 238491,214},
		{377631, 240935,229},
		{381187, 247158,218},
		{362520, 230713,253},
		{363631, 225158,114},
		{352520, 220269,202},
		{357409, 235380,199},
		{345409, 219158,220},
		{348298, 209602,295},
		{350520, 227602,132},
		{374964, 230935,150},
		{346520, 200046,263},    
    }
    for i=1,#asteroid_details do
    	local static_asteroid = Asteroid():setPosition(asteroid_details[i][1],asteroid_details[i][2]):setSize(asteroid_details[i][3])
--		if distance_diagnostic then
--			print("distance_diagnostic 5 static_asteroid:",static_asteroid,"planet_rigil:",planet_rigil)
--		end
    	local orbit_distance = distance(static_asteroid,planet_rigil)
    	local s_orbit = .8
    	local f_orbit = 1.5
    	static_asteroid.orbit_influencer = planet_ergot
    	update_system:addOrbitTargetWithInfluenceUpdate(static_asteroid,planet_rigil,orbit_distance,s_orbit,f_orbit,planet_ergot,10000,30000)
    	table.insert(asteroid_list,static_asteroid)
    end
	-- radius between 43759.45 and 47552.27
	local asteroid_details = {
		{414667, 120222,205},
		{422222, 118889,200},
		{443778, 127111,133},
		{426444, 121778,239},
		{426444, 118000,129},
		{442000, 130444,201},
		{438444, 131333,207},
		{435556, 124444,283},
		{431111, 126000,170},
		{448889, 136222,179},
		{448444, 141111,216},
		{445556, 134444,141},
		{443556, 135556,237},
		{453111, 137778,246},
		{454222, 148000,244},
		{453333, 143556,90},
		{458000, 181778,179},
		{458667, 173333,189},
		{463111, 172444,202},
		{460667, 176889,224},
		{464000, 174889,154},
		{461111, 162667,166},
		{462667, 165778,175},
		{460667, 171556,202},
		{462667, 168222,184},
		{460222, 166667,188},
		{458889, 160667,207},
		{460444, 159111,200},
		{456667, 158222,119},
		{456222, 146000,235},
		{455556, 183556,139},
		{457111, 151111,218},
		{459333, 155778,230},
		{441556, 202222,191},
		{443556, 199333,268},
		{446667, 198444,186},
		{447556, 195778,156},
		{451556, 186667,159},
		{451556, 190000,216},
		{450222, 197556,294},
		{444444, 203111,185},
		{403556, 217333,196},
		{406889, 215556,193},
		{397778, 219111,235},
		{397333, 212000,138},
		{412889, 215111,142},
		{409111, 213778,251},
		{420667, 212222,260},
		{420444, 214667,244},
		{426222, 211778,143},
		{434444, 208889,282},
		{432889, 208889,234},
		{435111, 205556,121},
		{438444, 206889,244},    
    }
    for i=1,#asteroid_details do
    	local static_asteroid = Asteroid():setPosition(asteroid_details[i][1],asteroid_details[i][2]):setSize(asteroid_details[i][3])
--		if distance_diagnostic then
--			print("distance_diagnostic 6 damage_list[i]:",damage_list[i],"x:",x,"y:",y,"i:",i)
--		end
    	local orbit_distance = distance(static_asteroid,planet_rigil)
    	local s_orbit = 1.1
    	local f_orbit = 1.7
    	static_asteroid.orbit_influencer = planet_ergot
    	update_system:addOrbitTargetWithInfluenceUpdate(static_asteroid,planet_rigil,orbit_distance,s_orbit,f_orbit,planet_ergot,10000,30000)
    	table.insert(asteroid_list,static_asteroid)
    end
    return asteroid_list
end
function createKentarMines()
	local mine_list = {}
	local mine_coordinates = {
		{82955, 295158},
		{86968, 293163},
		{86740, 294663},
		{83024, 294199},
		{84715, 295869},
		{85475, 292120},
		{83908, 294447},
		{83179, 292457},
		{83737, 291864},
		{84700, 291781},
		{82666, 292940}
	}
	for i=1,#mine_coordinates do
    	local static_mine = Mine():setPosition(mine_coordinates[i][1],mine_coordinates[i][2])
    	table.insert(mine_list,static_mine)
	end
	return mine_list
end
function createKentarAsteroids()
	local asteroid_list = {}
	local asteroid_coordinates = {
		{237355, 341175, 355},
		{242045, 341317, 255},
		{243466, 338901, 155},
		{244177, 336556, 455},
		{245669, 335774, 555},
		{246806, 334495, 655},
		{246593, 332932, 55},
		{247588, 333571, 55},
		{247375, 330871, 35},
		{248663, 329973, 15},
		{78851, 290391, 34},
		{80538, 292640, 23},
		{83249, 289135, 334},
		{83216, 290490, 24},
		{75710, 296906, 134},
		{78256, 295748, 274},
		{73395, 295451, 214},
		{127099, 315622, 134},
		{77727, 300014, 64},
		{78653, 298030, 134},
		{173839, 324127, 34},
		{73263, 292508, 34},
		{75611, 287217, 34},
		{150434, 325181, 24},
		{72304, 294426, 24},
		{201040, 304939, 534},
		{82786, 294988, 294},
		{173980, 318785, 334},
		{82423, 291582, 134},
		{195698, 306063, 244},
		{84010, 293599, 237},
		{127591, 318926, 94},
		{81067, 293367, 434},
		{79612, 297269, 134},
		{79050, 293863, 234},
		{74817, 293731, 234},
		{74189, 290722, 214},
		{121124, 314076, 254},
		{122038, 319207, 54},
		{81166, 296112, 4},
		{84804, 294822, 34},
		{76735, 289267, 534},
		{79876, 288506, 434},
		{77826, 287349, 134},
		{81993, 286688, 174},
		{79215, 285894, 84},
		{80207, 283745, 634},
		{77727, 285299, 34},
		{89202, 294855, 34},
		{86622, 289895, 24},
		{87482, 292508, 24},
		{90921, 293169, 44},
		{89764, 292078, 64},
		{91351, 291020, 54},
		{92773, 294558, 64},
		{86755, 287713, 34},
		{87052, 296343, 24},
		{90061, 299121, 84},
		{87118, 299121, 134},
		{85663, 300047, 164},
		{85366, 284836, 194},
		{85465, 286886, 234},
		{87879, 285001, 234},
		{90326, 287283, 44},
		{93401, 290490, 334},
		{93269, 292045, 434},
		{97634, 298559, 74},
		{95253, 295252, 84},
		{83316, 301502, 214},
		{81960, 300444, 204},
		{95749, 300279, 354},
		{94856, 301932, 394},
		{93699, 295847, 234},
		{94559, 297071, 234},
		{97270, 296509, 254},
		{92112, 300510, 274},
		{84043, 304379, 284},
		{80604, 301833, 234},
		{88540, 304048, 224},
		{92211, 304048, 214},
		{86325, 302527, 334},
		{86457, 304941, 334},
	--
		{169727, 259094, 334},
		{177727, 267520, 434},
		{166243, 250230, 534},
		{148395, 259612, 134},
		{149949, 254021, 24},
		{152708, 246528, 24},
		{143186, 262425, 34},
		{140056, 268814, 634},
		{144204, 271605, 434},
		{132887, 270315, 134},
		{137324, 255011, 264},
		{164706, 279692, 239},
		{165361, 284918, 254},
		{142007, 276720, 284},
		{127403, 256736, 294},
		{140631, 246240, 164},
		{148207, 286302, 184},
		{153997, 282920, 194},
		{168402, 266420, 164},
		{170658, 266600, 234},
		{167680, 271157, 234},
		{171786, 269217, 234},
		{164748, 274406, 334},
		{167184, 274677, 534},
		{169576, 276797, 634},
		{164703, 277925, 134},
		{137088, 280666, 264},
		{141341, 284662, 274},
		{173681, 275545, 284},
		{175121, 274484, 34},
		{176636, 275166, 34},
		{174969, 276379, 23},
		{177091, 277819, 23},
		{174060, 271075, 23},
		{172469, 272211, 14},
		{171256, 274636, 34},
		{170574, 274788, 134},
		{177697, 274181, 334},
		{175954, 273045, 334},
		{179137, 272439, 334},
		{173075, 267665, 434},
		{169437, 264482, 434},
		{162412, 271558, 434},
		{165203, 268814, 534},
		{164738, 264490, 534},
		{158753, 262663, 534},
		{155040, 266452, 734},
		{152994, 262057, 264},
		{148675, 266755, 264},
		{147538, 274484, 274},
		{154964, 269104, 274},
		{159208, 270393, 284},
		{161405, 267816, 294},
		{145038, 277212, 134},
		{147084, 278425, 134},
		{151251, 274257, 134},
		{151782, 278273, 154},
		{155116, 274181, 154},
		{155874, 277970, 164},
		{165800, 270393, 154},
		{162314, 277970, 174},
		{168452, 277970, 184},
		{172847, 278198, 254},
		{158980, 274257, 284},
		{162314, 274257, 284},
		{165952, 275015, 284},
		{169437, 274106, 284},
		{169589, 271984, 234},
		{169134, 269332, 234},
		{165270, 261527, 234},
		{160227, 260305, 234},
		{162845, 258723, 214},
		{156460, 254771, 214},
		{160875, 255237, 214},
		{155116, 257359, 234},
		{160117, 252358, 234},
		{223576, 220378, 20},
		{228043, 213831, 120},
		{231509, 219223, 220},
		{229352, 216758, 320},
		{222882, 239095, 180},
		{236054, 227079, 160},
		{232741, 219300, 190},
		{233897, 219300, 12},
		{227427, 220995, 20},
		{231432, 220840, 220},
		{225501, 231239, 320},
		{227966, 227465, 420},
		{230200, 227542, 520},
		{226425, 224461, 620},
		{221881, 227002, 320},
		{216720, 230854, 220},
		{224423, 216527, 170},
		{236439, 224615, 180},
		{238518, 222689, 20},
		{228813, 232317, 12},
		{224962, 234474, 50},
		{232664, 230931, 70},
		{235514, 228928, 80},
		{237594, 219146, 15},
		{232048, 223690, 25},
		{236747, 229698, 325},
		{240059, 230391, 725},
		{234051, 226925, 225},
		{234282, 232471, 225},
		{237671, 227465, 165},
		{240521, 226232, 165},
		{238826, 231470, 175},
		{239366, 228312, 195},
		{240752, 228389, 325},
		{241907, 228235, 425} 
	}
    for i=1,#asteroid_coordinates do
    	local static_asteroid = Asteroid():setPosition(asteroid_coordinates[i][1],asteroid_coordinates[i][2]):setSize(asteroid_coordinates[i][3])
    	table.insert(asteroid_list,static_asteroid)
    end
    return asteroid_list
end
function createKentarNebula()
	local nebula_list = {}
	local nebula_coordinates = {
		{120064, 312382},
		{120643, 319370},
		{115342, 316108},
		{114325, 308421},
		{126696, 314745},
		{131154, 317849},
		{92475, 300295},
		{125060, 321237},
		{136554, 319815},
		{192982, 308249},
		{87185, 295651},
		{198593, 301982},
		{182353, 316287},
		{198580, 308113},
		{187791, 312512},
		{131449, 322751},
		{150626, 322953},
		{97651, 297388},
		{85424, 302134},
		{93237, 293237},
		{143416, 321745},
		{176997, 318076},
		{176536, 323162},
		{101116, 306820},
		{104202, 300923},
		{108819, 305042},
		{173097, 326215},
		{87144, 287426},
		{164896, 322006},
		{170688, 319822},
		{78704, 287201},
		{150965, 326807},
		{80073, 298276},
		{82811, 291992},
		{156892, 322419},
		{205808, 295642},
		{75531, 293547},
		{203577, 305468},
		{214130, 197543},
		{225472, 200000},
		{228118, 191115},
		{219234, 192628},
		{194659, 189792},
		{201842, 190737},
		{209404, 193384},
		{235680, 188091}
	}
	for i=1,#nebula_coordinates do
    	local static_nebula = Nebula():setPosition(nebula_coordinates[i][1],nebula_coordinates[i][2])
    	table.insert(nebula_list,static_nebula)
	end
	local mobile_neb_dist = 56568.542495
	local nebula_start_angle = random(0,360)
	local snpx,snpy = vectorFromAngle(nebula_start_angle,mobile_neb_dist)
	kentar_mobile_nebula_1 = Nebula():setPosition(210000+snpx,290000+snpy)
	kentar_mobile_nebula_1.angle = nebula_start_angle
	kentar_mobile_nebula_1.mobile_neb_dist = mobile_neb_dist
	kentar_mobile_nebula_1.center_x = 210000
	kentar_mobile_nebula_1.center_y = 290000
	if kentar_mobile_nebula_1.angle >= 45 then
		kentar_mobile_nebula_1.ready = false
	else
		kentar_mobile_nebula_1.ready = true
	end
	kentar_mobile_nebula_1.lower_black_hole = true
	kentar_mobile_nebula_1.increment = .05
	plotMobile = movingObjects
	table.insert(nebula_list,kentar_mobile_nebula_1)
    return nebula_list
end
function removeKentarColor()
	kentar_color = false
	if kentar_planets ~= nil then
		for _,kp in pairs(kentar_planets) do
			kp:destroy()
		end
	end
	kentar_planets = nil
	
	if kentar_asteroids ~= nil then
		for _,ka in pairs(kentar_asteroids) do
			ka:destroy()
		end
	end
	kentar_asteroids = nil
	
	if kentar_moving_asteroids ~= nil then
		for _,ka in pairs(kentar_moving_asteroids) do
			ka:destroy()
		end
	end
	kentar_moving_asteroids = nil
	
	if kentar_nebula ~= nil then
		for _,kn in pairs(kentar_nebula) do
			kn:destroy()
		end
	end
	kentar_nebula = nil
	
	if kentar_stations ~= nil then
		for _,ks in pairs(kentar_stations) do
			if not ks.skeleton_station then
				ks:destroy()
			end
		end
	end
	kentar_stations = nil
	
	if gateway_objects ~= nil then
		for _,kgo in pairs(gateway_objects) do
			if not kgo.skeleton_station then
				kgo:destroy()
			end
		end
	end
	gateway_objects = nil
	
	if kentar_mines ~= nil then
		for _,km in pairs(kentar_mines) do
			km:destroy()
		end
	end
	kentar_mines = nil
	
	if kentar_defense_platforms ~= nil then
		for _,kdp in pairs(kentar_defense_platforms) do
			kdp:destroy()
		end
	end
	kentar_defense_platforms = nil
	if kentar_commerce then
		removeKentarCommerce()
	end
end
--	Eris area stations, asteroids, mines, etc.
function erisSector(x,y)
	assert(type(x)=="number")
	assert(type(y)=="number")
	local eris = {
		all_local_objects = {}, -- this may want to become another system maybe?
		destroy = function(self)
			assert(type(self)=="table")
			for i=1,#self.all_local_objects do
				local obj=self.all_local_objects[i]
				if obj:isValid() then
					obj:destroy()
				end
			end
		end
	}
	return eris
end
--	Astron area stuff
function ghostNebulaSector()
	local wip = {
		all_objects = {}, -- this may want to become another system maybe?
		asteroid_locations = {
			{465336, 287674,	82},
			{465338, 305555,	131},
			{465408, 290326,	111},
			{465542, 279592,	192},
			{465623, 297779,	155},
			{465828, 302571,	92},
			{466033, 337365,	152},
			{466033, 339532,	198},
			{466196, 292977,	132},
			{466196, 306291,	134},
			{466401, 283967,	168},
			{466401, 335607,	100},
			{466605, 307518,	128},
			{466687, 341577,	160},
			{466770, 304587,	187},
			{466851, 309153,	165},
			{467055, 340882,	117},
			{467200, 299785,	152},
			{467260, 343662,	133},
			{467271, 297850,	161},
			{467341, 311607,	182},
			{467341, 336997,	125},
			{467414, 289108,	208},
			{467423, 332622,	78},
			{467558, 292332,	152},
			{467668, 334830,	162},
			{467791, 346238,	131},
			{467844, 305447,	149},
			{468131, 294912,	190},
			{468131, 301505,	174},
			{468159, 341822,	194},
			{468363, 337733,	82},
			{468486, 310421,	87},
			{468609, 344602,	140},
			{468650, 343049,	98},
			{468691, 330823,	122},
			{468763, 339367,	160},
			{468776, 287244,	111},
			{468895, 348446,	184},
			{468936, 336548,	96},
			{468977, 346033,	127},
			{469018, 350122,	148},
			{469063, 303440,	174},
			{469134, 305949,	164},
			{469140, 334940,	111},
			{469278, 290182,	150},
			{469278, 298925,	197},
			{469304, 312261,	173},
			{469421, 308528,	119},
			{469467, 333481,	198},
			{469590, 342108,	133},
			{469708, 283016,	125},
			{469708, 297062,	147},
			{469708, 301362,	153},
			{469713, 347628,	157},
			{469825, 340809,	165},
			{469835, 280573,	157},
			{469958, 345011,	115},
			{470203, 352821,	141},
			{470244, 335853,	194},
			{470285, 350817,	156},
			{470326, 331151,	169},
			{470326, 343989,	108},
			{470367, 349018,	200},
			{470408, 328820,	121},
			{470424, 293192,	162},
			{470490, 358054,	182},
			{470496, 306235,	156},
			{470735, 356255,	159},
			{470854, 303369,	184},
			{470858, 354947,	142},
			{471021, 313610,	176},
			{471141, 287746,	132},
			{471226, 333031,	180},
			{471226, 351676,	141},
			{471284, 286528,	93},
			{471307, 315164,	104},
			{471348, 311770,	83},
			{471389, 319620,	93},
			{471389, 321624,	95},
			{471428, 295987,	154},
			{471499, 308600,	131},
			{471553, 326530,	202},
			{471570, 335118,	137},
			{471571, 284019,	179},
			{471643, 300430,	185},
			{471675, 317780,	178},
			{471757, 353475,	116},
			{471757, 359444,	108},
			{471858, 307382,	183},
			{471873, 339216,	113},
			{471921, 323832,	149},
			{471921, 361325,	149},
			{472001, 291329,	96},
			{472002, 329188,	211},
			{472025, 342023,	106},
			{472166, 356255,	148},
			{472216, 304874,	174},
			{472248, 357850,	138},
			{472480, 349307,	184},
			{472575, 312997,	155},
			{472575, 354742,	198},
			{472616, 333195,	172},
			{472738, 314264,	149},
			{472943, 330455,	153},
			{473012, 336332,	168},
			{473012, 341719,	154},
			{473065, 279388,	184},
			{473071, 282098,	137},
			{473163, 344982,	217},
			{473188, 319620,	182},
			{473188, 325999,	166},
			{473188, 360712,	215},
			{473229, 321297,	98},
			{473229, 359117,	155},
			{473363, 309890,	86},
			{473474, 315900,	128},
			{473474, 328288,	142},
			{473515, 322850,	155},
			{473556, 362388,	165},
			{473578, 297779,	210},
			{473649, 288319,	173},
			{473664, 338541,	98},
			{473679, 355846,	145},
			{473721, 303010,	144},
			{473760, 324813,	142},
			{473791, 334622,	146},
			{473883, 353270,	144},
			{474008, 293121,	133},
			{474151, 295486,	107},
			{474223, 291401,	148},
			{474294, 307167,	139},
			{474377, 348244,	137},
			{474653, 311897,	116},
			{474681, 351204,	140},
			{474683, 341217,	159},
			{474811, 336629,	180},
			{474824, 332336,	167},
			{474864, 360712,	170},
			{474864, 362225,	147},
			{474868, 285739,	70},
			{474946, 323505,	161},
			{475011, 300144,	173},
			{475028, 363533,	127},
			{475226, 304730,	168},
			{475441, 321930,	156},
			{475441, 329956,	139},
			{475480, 334271,	102},
			{475513, 318060,	142},
			{475515, 349914,	236},
			{475543, 338349,	129},
			{475591, 344072,	142},
			{475667, 357349,	122},
			{475723, 280696,	87},
			{475735, 354916,	139},
			{475871, 325799,	85},
			{475943, 314907,	116},
			{476046, 347182,	120},
			{476086, 290684,	103},
			{476229, 287889,	118},
			{476229, 309532,	104},
			{476244, 336183,	105},
			{476301, 301649,	105},
			{476582, 362797,	169},
			{476602, 283760,	144},
			{476659, 307167,	100},
			{476659, 311897,	121},
			{476659, 342905,	168},
			{476803, 353605,	217},
			{476850, 340643,	156},
			{476874, 303942,	167},
			{476874, 327591,	93},
			{476874, 331819,	165},
			{476881, 349155,	145},
			{476946, 295199,	159},
			{476946, 298782,	240},
			{477018, 319780,	95},
			{477089, 278716,	165},
			{477184, 351583,	139},
			{477184, 358336,	130},
			{477264, 346059,	80},
			{477376, 292906,	108},
			{477522, 364678,	136},
			{477582, 339433,	85},
			{477591, 334112,	191},
			{477806, 290756,	210},
			{477901, 351284,	167},
			{477949, 312972,	111},
			{478092, 337648,	104},
			{478124, 349213,	188},
			{478164, 320066,	166},
			{478171, 355225,	172},
			{478195, 285491,	169},
			{478236, 310822,	174},
			{478307, 315695,	145},
			{478379, 322073,	168},
			{478451, 305519,	215},
			{478451, 325154,	184},
			{478522, 351957,	145},
			{478602, 342937,	106},
			{478666, 347589,	173},
			{478793, 345008,	121},
			{478809, 287889,	63},
			{478809, 330959,	210},
			{479016, 350743,	103},
			{479144, 341312,	163},
			{479233, 359018,	187},
			{479239, 357618,	178},
			{479382, 292619,	104},
			{479454, 333754,	127},
			{479462, 349182,	205},
			{479526, 318060,	158},
			{479526, 328594,	169},
			{479526, 336549,	69},
			{479597, 308457,	112},
			{479597, 311610,	102},
			{479741, 354178,	150},
			{479812, 297062,	118},
			{479812, 299785,	89},
			{479812, 339129,	133},
			{479884, 301792,	140},
			{480027, 280078,	124},
			{480027, 283016,	121},
			{480027, 290827,	148},
			{480219, 362812,	214},
			{480242, 322001,	213},
			{480272, 285560,	147},
			{480314, 330601,	202},
			{480386, 303870,	132},
			{480386, 350094,	167},
			{480457, 315265,	191},
			{480529, 289108,	128},
			{480601, 313115,	139},
			{480705, 344817,	93},
			{480737, 346601,	175},
			{480816, 320640,	154},
			{480928, 342873,	180},
			{481031, 353032,	106},
			{481102, 323578,	184},
			{481282, 359625,	176},
			{481317, 293909,	143},
			{481389, 306235,	92},
			{481532, 310822,	142},
			{481532, 340849,	121},
			{481676, 316483,	164},
			{481747, 348875,	206},
			{481819, 326803,	160},
			{481819, 338556,	88},
			{481891, 357833,	113},
			{481947, 355808,	136},
			{481962, 281869,	160},
			{482034, 329383,	190},
			{482034, 351598,	163},
			{482142, 287499,	169},
			{482177, 298066,	144},
			{482177, 318203,	130},
			{482249, 290326,	95},
			{482321, 345650,	210},
			{482392, 344217,	207},
			{482751, 332464,	191},
			{482822, 284091,	128},
			{482822, 340706,	135},
			{482894, 347155,	207},
			{482894, 353533,	157},
			{482966, 301434,	149},
			{483181, 309747,	181},
			{483252, 313473,	92},
			{483252, 360055,	122},
			{483324, 304587,	161},
			{483324, 335546,	135},
			{483324, 343429,	145},
			{483539, 280723,	204},
			{483539, 294626,	130},
			{483611, 307740,	144},
			{483611, 317701,	107},
			{483682, 356042,	97},
			{483826, 322861,	180},
			{483897, 314548,	143},
			{484041, 320496,	126},
			{484184, 337696,	159},
			{484184, 350595,	154},
			{484256, 333252,	156},
			{484327, 329024,	136},
			{484399, 312183,	114},
			{484614, 286169,	116},
			{484614, 290182,	221},
			{484686, 345579,	127},
			{484686, 354107,	125},
			{484829, 282586,	159},
			{484829, 340992,	220},
			{484829, 358048,	146},
			{484972, 352315,	120},
			{485044, 316483,	188},
			{485187, 302652,	98},
			{485259, 298639,	150},
			{485259, 335904,	156},
			{485474, 326086,	188},
			{485546, 343572,	159},
			{485689, 347800,	202},
			{485904, 295199,	72},
			{486119, 292332,	173},
			{486119, 318920,	87},
			{486190, 307955,	122},
			{486190, 355182,	190},
			{486262, 329383,	90},
			{486406, 359697,	156},
			{486692, 284019,	173},
			{486692, 288176,	116},
			{486692, 324151,	125},
			{486764, 353247,	144},
			{486835, 350810,	186},
			{486907, 312470,	92},
			{486979, 331748,	163},
			{487337, 359697,	101},
			{487337, 361130,	147},
			{487409, 338842,	171},
			{487409, 342139,	161},
			{487409, 357905,	175},
			{487695, 321141,	72},
			{488054, 281368,	132},
			{488269, 333754,	80},
			{488269, 354035,	160},
			{488484, 326444,	129},
			{488484, 345005,	117},
			{488524, 296704,	127},
			{488956, 309996,	174},
			{488985, 356185,	108},
			{489344, 293694,	121},
			{489415, 362635,	172},
			{489559, 295486,	171},
			{489605, 302647,	85},
			{489702, 284378,	160},
			{489702, 286384,	114},
			{489702, 348875,	164},
			{489702, 351814,	182},
			{489845, 358837,	155},
			{490060, 290111,	154},
			{490562, 281583,	146},
			{490634, 360772,	181},
			{490685, 316155,	202},
			{490920, 353748,	190},
			{491010, 310968,	122},
			{491010, 339713,	157},
			{491135, 363065,	125},
			{491279, 283804,	145},
			{491874, 302972,	103},
			{491924, 286958,	148},
			{491995, 360843,	119},
			{492090, 300054,	167},
			{492198, 343603,	89},
			{492210, 291902,	184},
			{492354, 351384,	172},
			{492630, 295839,	169},
			{492712, 356973,	98},
			{492955, 299622,	154},
			{493063, 324800,	144},
			{493063, 331933,	119},
			{493285, 293981,	121},
			{493357, 359338,	132},
			{493500, 289179,	136},
			{493644, 364211,	149},
			{493859, 366003,	146},
			{494074, 285739,	111},
			{494145, 362061,	167},
			{494288, 280723,	192},
			{494359, 307402,	111},
			{494684, 300594,	134},
			{494792, 318857,	197},
			{494900, 333337,	170},
			{495005, 283804,	158},
			{495008, 297136,	150},
			{495292, 352673,	122},
			{495292, 366218,	171},
			{495332, 311076,	148},
			{495548, 320586,	179},
			{495578, 289108,	142},
			{495650, 357332,	129},
			{495764, 345116,	161},
			{495872, 327502,	110},
			{495937, 361488,	160},
			{496295, 363638,	172},
			{496367, 286958,	172},
			{496725, 293049,	166},
			{497061, 336687,	194},
			{497169, 323504,	103},
			{497227, 355898,	125},
			{497277, 313454,	134},
			{497493, 303404,	102},
			{497513, 367795,	175},
			{497728, 284593,	201},
			{497800, 290326,	176},
			{497943, 280006,	122},
			{498445, 282371,	93},
			{498517, 274201,	160},
			{498947, 287459,	128},
			{499222, 358624,	157},
			{499546, 295839,	155},
			{499547, 358624,	189},
			{499655, 367053,	167},
			{499763, 306970,	126},
			{499763, 329663,	165},
			{499878, 289968,	163},
			{500087, 320046,	139},
			{500195, 296056,	82},
			{500308, 276208,	108},
			{500380, 292834,	165},
			{500519, 363271,	104},
			{500843, 354842,	149},
			{501059, 325017,	109},
			{501168, 279361,	142},
			{501384, 298865,	140},
			{501384, 342415,	208},
			{501492, 367486,	156},
			{501600, 310428,	167},
			{501600, 346413,	118},
			{501813, 282156,	155},
			{501816, 364892,	85},
			{502032, 354626,	131},
			{502243, 273413,	131},
			{502356, 358624,	110},
			{502464, 301675,	155},
			{502602, 285524,	108},
			{502680, 359381,	88},
			{502788, 335823,	158},
			{502888, 289609,	178},
			{503004, 304592,	150},
			{503113, 351816,	216},
			{503221, 315075,	192},
			{503329, 333013,	161},
			{503462, 275778,	164},
			{503462, 292834,	167},
			{503545, 346845,	108},
			{503653, 310320,	167},
			{503820, 277713,	94},
			{503977, 319721,	183},
			{504393, 281153,	150},
			{504517, 357220,	163},
			{504734, 323288,	132},
			{504950, 359381,	164},
			{505166, 362731,	155},
			{505253, 274846,	186},
			{505382, 298973,	215},
			{505382, 330528,	103},
			{505382, 356139,	148},
			{505396, 285524,	165},
			{505598, 293786,	114},
			{505598, 361542,	175},
			{505611, 289968,	187},
			{505706, 352897,	100},
			{505814, 340794,	131},
			{506185, 283374,	90},
			{506328, 270117,	87},
			{506354, 326746,	85},
			{506463, 305889,	129},
			{506571, 336255,	136},
			{506571, 360245,	136},
			{506615, 276065,	113},
			{506787, 297568,	155},
			{506895, 309347,	114},
			{506901, 271980,	115},
			{507331, 279648,	118},
			{507759, 328150,	139},
			{507975, 322639,	120},
			{508048, 267895,	153},
			{508048, 283159,	162},
			{508048, 292117,	186},
			{508192, 302539,	157},
			{508192, 337012,	152},
			{508263, 273771,	134},
			{508406, 288606,	170},
			{508516, 354734,	109},
			{508516, 355166,	164},
			{508732, 357436,	137},
			{508840, 313994,	111},
			{509051, 269830,	119},
			{509164, 344792,	125},
			{509410, 273915,	146},
			{509488, 309239,	116},
			{509488, 347602,	114},
			{509704, 354302,	197},
			{509768, 277498,	71},
			{509840, 283446,	131},
			{510245, 293354,	181},
			{510413, 271622,	152},
			{510461, 323396,	158},
			{510556, 288176,	188},
			{510700, 284951,	182},
			{510785, 341442,	154},
			{510893, 357003,	138},
			{510986, 279863,	139},
			{511109, 323071,	128},
			{511217, 352357,	143},
			{511433, 357760,	112},
			{511758, 337120,	132},
			{511918, 264957,	113},
			{512082, 327070,	189},
			{512276, 268397,	136},
			{512276, 278573,	98},
			{512298, 318749,	163},
			{512348, 273628,	165},
			{512622, 356247,	192},
			{512838, 345441,	144},
			{512921, 280866,	154},
			{513271, 354302,	142},
			{513487, 324908,	228},
			{513595, 314102,	165},
			{513703, 330096,	148},
			{513703, 354086,	167},
			{513811, 343495,	117},
			{513924, 270905,	91},
			{514211, 273556,	154},
			{514283, 265315,	93},
			{514283, 277068,	162},
			{514641, 267250,	146},
			{514675, 283412,	153},
			{515108, 351168,	83},
			{515501, 269328,	174},
			{515573, 256142,	119},
			{515648, 319613,	184},
			{515648, 352357,	179},
			{515648, 354734,	194},
			{515788, 263309,	199},
			{515859, 272052,	168},
			{515972, 328258,	179},
			{516080, 315723,	157},
			{516188, 336471,	201},
			{516296, 355490,	132},
			{516648, 268182,	121},
			{516791, 254422,	112},
			{516791, 259582,	211},
			{516863, 265673,	116},
			{517161, 298541,	186},
			{517269, 356139,	152},
			{517579, 257934,	176},
			{517593, 348466,	178},
			{517723, 263094,	184},
			{517794, 256214,	149},
			{517809, 341550,	178},
			{518025, 354302,	166},
			{518224, 261015,	100},
			{518350, 332257,	94},
			{518350, 357003,	187},
			{518583, 271693,	126},
			{518674, 298541,	87},
			{518890, 289356,	158},
			{518890, 354626,	117},
			{518998, 305997,	180},
			{519084, 259224,	169},
			{519228, 269113,	168},
			{519430, 312805,	138},
			{519586, 255282,	144},
			{519646, 338633,	207},
			{519658, 263954,	151},
			{519754, 356787,	100},
			{519862, 285789,	125},
			{520079, 313454,	127},
			{520079, 351816,	110},
			{520088, 266175,	173},
			{520303, 261804,	148},
			{520511, 323071,	104},
			{520619, 293138,	143},
			{520619, 355274,	163},
			{521483, 282331,	148},
			{521521, 257432,	136},
			{521521, 269185,	159},
			{521700, 340145,	160},
			{521700, 345441,	183},
			{521879, 258865,	152},
			{521879, 266748,	130},
			{521951, 254996,	181},
			{522166, 263810,	184},
			{522240, 320910,	128},
			{522348, 333878,	89},
			{522348, 343279,	102},
			{522452, 261230,	136},
			{522456, 352681,	155},
			{522672, 328367,	132},
			{522739, 252057,	122},
			{522780, 301026,	143},
			{523212, 282764,	156},
			{523320, 354086,	123},
			{523384, 264240,	188},
			{524185, 323828,	138},
			{524185, 357544,	132},
			{524244, 254351,	154},
			{524244, 261302,	155},
			{524244, 267035,	194},
			{524293, 307510,	154},
			{524293, 359921,	179},
			{524401, 299405,	167},
			{524401, 305889,	188},
			{524617, 351708,	171},
			{524674, 265745,	224},
			{525050, 290112,	126},
			{525050, 314967,	110},
			{525247, 259295,	147},
			{525374, 336255,	196},
			{525374, 363379,	154},
			{525482, 349655,	153},
			{525590, 276280,	147},
			{525606, 263954,	186},
			{525677, 257289,	55},
			{525749, 267393,	78},
			{526130, 356247,	168},
			{526179, 251699,	93},
			{526454, 305781,	119},
			{526670, 350736,	180},
			{526752, 250767,	108},
			{526778, 339929,	71},
			{526887, 272390,	117},
			{526887, 351168,	161},
			{526896, 258937,	115},
			{526967, 261302,	122},
			{527039, 254279,	151},
			{527103, 331608,	161},
			{527103, 345657,	123},
			{527397, 255712,	146},
			{527535, 318857,	132},
			{527751, 281899,	163},
			{527751, 295191,	100},
			{527827, 263667,	177},
			{527859, 288491,	153},
			{527967, 359165,	118},
			{528042, 253921,	133},
			{528042, 265673,	98},
			{528075, 356031,	128},
			{528257, 251699,	147},
			{528399, 343820,	146},
			{528399, 343820,	103},
			{528724, 362190,	180},
			{528759, 248331,	117},
			{529117, 261660,	163},
			{529260, 262592,	153},
			{529332, 256859,	131},
			{529480, 351168,	137},
			{529588, 300810,	146},
			{529696, 302431,	126},
			{529906, 253992,	92},
			{530128, 305133,	187},
			{530264, 252272,	86},
			{530336, 246826,	124},
			{530336, 249262,	179},
			{530453, 285573,	103},
			{530550, 264742,	104},
			{530561, 278549,	153},
			{530561, 362731,	130},
			{530669, 313562,	171},
			{530669, 336255,	167},
			{530909, 259725,	138},
			{531267, 250194,	176},
			{531317, 341118,	178},
			{531317, 350412,	167},
			{531317, 363487,	98},
			{531533, 359057,	183},
			{531641, 267635,	142},
			{531697, 262592,	152},
			{531857, 366729,	149},
			{531966, 301243,	109},
			{532055, 255497,	153},
			{532055, 257647,	137},
			{532074, 348034,	143},
			{532074, 355923,	165},
			{532182, 352681,	165},
			{532182, 361758,	143},
			{532342, 248187,	209},
			{532414, 252917,	140},
			{532614, 291949,	162},
			{532772, 251484,	134},
			{533130, 259009,	88},
			{533154, 291517,	208},
			{533154, 366621,	169},
			{533370, 358624,	178},
			{533478, 281035,	85},
			{533775, 263380,	85},
			{533911, 272822,	174},
			{533919, 250122,	126},
			{534019, 325233,	163},
			{534019, 344144,	170},
			{534205, 261159,	158},
			{534235, 340254,	161},
			{534235, 347170,	180},
			{534277, 257145,	170},
			{534420, 245536,	140},
			{534451, 359165,	171},
			{534451, 362407,	203},
			{534492, 251627,	107},
			{534559, 364892,	100},
			{534635, 254279,	146},
			{534667, 356247,	212},
			{534775, 292165,	150},
			{534775, 298649,	100},
			{534775, 309023,	93},
			{534850, 248402,	87},
			{534991, 300162,	151},
			{534991, 366945,	148},
			{535316, 347494,	201},
			{535532, 310860,	65},
			{535532, 320262,	172},
			{535710, 257074,	137},
			{535748, 352681,	135},
			{535925, 250266,	176},
			{535997, 243529,	159},
			{535997, 259224,	138},
			{535997, 261947,	173},
			{536140, 247184,	178},
			{536499, 255282,	179},
			{536612, 356463,	161},
			{536612, 357544,	138},
			{536828, 359921,	85},
			{536857, 245608,	118},
			{537144, 252487,	73},
			{537215, 251484,	218},
			{537261, 373537,	145},
			{537369, 272390,	181},
			{537369, 362515,	100},
			{537477, 362623,	144},
			{537574, 248761,	178},
			{537585, 348574,	160},
			{537585, 369755,	145},
			{537645, 258077,	141},
			{537693, 347494,	148},
			{537801, 359381,	169},
			{538017, 327826,	122},
			{538075, 260012,	138},
			{538125, 303728,	112},
			{538233, 285249,	135},
			{538290, 253777,	85},
			{538341, 375482,	217},
			{538434, 242454,	169},
			{538434, 245966,	185},
			{538449, 366405,	182},
			{538449, 370079,	158},
			{538577, 243959,	166},
			{538774, 278441,	113},
			{538882, 345332,	149},
			{538882, 356787,	142},
			{539007, 258507,	134},
			{539150, 248402,	119},
			{539150, 250767,	198},
			{539150, 256285,	135},
			{539314, 309888,	161},
			{539314, 352681,	144},
			{539638, 297028,	143},
			{539854, 267743,	210},
			{539962, 360569,	121},
			{539962, 360569,	159},
			{539962, 372240,	162},
			{540070, 336471,	129},
			{540297, 246969,	170},
			{540368, 244748,	152},
			{540368, 260084,	124},
			{540440, 242669,	175},
			{540503, 370511,	168},
			{540583, 252631,	187},
			{540935, 365648,	173},
			{541085, 257719,	141},
			{541443, 255497,	140},
			{541475, 356355,	115},
			{541583, 304701,	164},
			{541945, 251054,	170},
			{542017, 249979,	164},
			{542088, 259080,	179},
			{542160, 246468,	171},
			{542340, 285789,	162},
			{542448, 344684,	118},
			{542664, 290004,	168},
			{542664, 355382,	164},
			{542664, 365432,	125},
			{542988, 360569,	124},
			{543096, 349547,	125},
			{543096, 373861,	148},
			{543235, 249621,	169},
			{543312, 314967,	81},
			{543312, 317236,	187},
			{543420, 295191,	161},
			{543450, 254207,	211},
			{543528, 353329,	117},
			{543636, 329987,	100},
			{543636, 377860,	194},
			{543665, 256429,	179},
			{543744, 365216,	128},
			{544023, 252774,	156},
			{544177, 332905,	167},
			{544501, 274767,	118},
			{544717, 267851,	146},
			{544717, 357544,	160},
			{544717, 366189,	154},
			{544740, 249907,	164},
			{544933, 281575,	197},
			{545149, 372564,	85},
			{545365, 371052,	136},
			{545474, 278225,	110},
			{545743, 252559,	122},
			{545906, 362947,	127},
			{545958, 246539,	156},
			{546014, 325125,	172},
			{546014, 349115,	136},
			{546030, 255067,	148},
			{546338, 300270,	149},
			{546446, 361542,	217},
			{546532, 258507,	127},
			{546890, 251699,	127},
			{546986, 267094,	226},
			{546986, 311509,	129},
			{546986, 337012,	118},
			{546986, 368350,	140},
			{547094, 284709,	86},
			{547094, 340578,	123},
			{547094, 351276,	174},
			{547202, 351060,	147},
			{547311, 273038,	126},
			{547419, 358516,	90},
			{547527, 362839,	154},
			{547527, 377319,	68},
			{547606, 248474,	109},
			{547678, 256500,	136},
			{547893, 245464,	147},
			{547959, 306862,	147},
			{548067, 294759,	142},
			{548067, 354302,	147},
			{548067, 375806,	129},
			{548252, 243099,	115},
			{548283, 355815,	117},
			{548391, 261259,	174},
			{548391, 367486,	176},
			{548607, 361650,	218},
			{548682, 253491,	127},
			{548715, 371268,	183},
			{548823, 321883,	108},
			{548896, 250982,	118},
			{548932, 356355,	159},
			{549148, 312697,	109},
			{549183, 247041,	139},
			{549364, 303188,	131},
			{549364, 355923,	206},
			{549472, 257261,	165},
			{549685, 256142,	198},
			{549688, 352249,	164},
			{549904, 358732,	170},
			{550115, 245464,	153},
			{550115, 248546,	179},
			{550444, 371160,	173},
			{550877, 369971,	189},
			{550877, 373213,	181},
			{550985, 364892,	74},
			{551046, 253777,	160},
			{551093, 273254,	136},
			{551093, 372240,	176},
			{551201, 346413,	152},
			{551309, 328799,	187},
			{551417, 348790,	180},
			{551417, 362515,	148},
			{551525, 265257,	121},
			{551525, 351060,	81},
			{551835, 250696,	130},
			{551978, 247256,	204},
			{552173, 319505,	159},
			{552498, 351816,	91},
			{552498, 358732,	122},
			{552498, 365432,	163},
			{552498, 373213,	101},
			{552930, 323936,	160},
			{553038, 293246,	158},
			{553146, 359597,	139},
			{553362, 337768,	127},
			{553794, 263961,	97},
			{554010, 269040,	134},
			{554227, 359597,	133},
			{554271, 255067,	135},
			{554443, 280710,	190},
			{554551, 350952,	147},
			{554551, 368458,	68},
			{554659, 308915,	110},
			{554659, 359597,	190},
			{554701, 252487,	190},
			{554767, 319829,	169},
			{554845, 250122,	194},
			{555199, 348682,	181},
			{555523, 298217,	155},
			{555523, 364352,	106},
			{555740, 364460,	120},
			{556064, 370295,	206},
			{556379, 255243,	101},
			{556496, 363703,	175},
			{556636, 251556,	163},
			{556712, 365648,	109},
			{557036, 355707,	97},
			{557144, 290328,	118},
			{557144, 332797,	142},
			{557353, 253276,	105},
			{557469, 347602,	113},
			{557926, 248187,	197},
			{558117, 314750,	213},
			{558225, 355598,	176},
			{558333, 369106,	102},
			{558549, 325557,	105},
			{558765, 259098,	112},
			{558765, 277577,	166},
			{559306, 335931,	181},
			{559414, 265906,	174},
			{559431, 253276,	193},
			{559522, 302431,	165},
			{559630, 268824,	140},
			{559630, 364568,	135},
			{559738, 296920,	128},
			{559861, 248546,	139},
			{559861, 250552,	150},
			{560006, 255871,	195},
			{560170, 348142,	190},
			{560710, 312373,	139},
			{560710, 363379,	195},
			{560927, 343063,	147},
			{560927, 364676,	136},
			{561035, 363055,	103},
			{561251, 286438,	171},
			{561359, 361542,	105},
			{561791, 366729,	179},
			{561899, 305673,	139},
			{561899, 352140,	114},
			{562115, 350628,	97},
			{562369, 250051,	135},
			{562448, 253709,	70},
			{562656, 330744,	134},
			{562764, 349655,	160},
			{562764, 355058,	183},
			{563145, 252663,	134},
			{563304, 291949,	150},
			{563844, 278981,	168},
			{564168, 316588,	171},
			{564168, 353978,	154},
			{564277, 275307,	212},
			{564385, 306538,	142},
			{564385, 323504,	155},
			{564680, 255174,	165},
			{564709, 358192,	122},
			{564709, 360029,	231},
			{564817, 297785,	162},
			{564889, 251058,	136},
			{565033, 262340,	143},
			{565141, 335066,	106},
			{565465, 269040,	147},
			{566006, 278009,	156},
			{566006, 353978,	171},
			{566114, 288491,	119},
			{566144, 252663,	153},
			{566330, 280819,	141},
			{566330, 340362,	144},
			{566762, 310428,	173},
			{566978, 318641,	171},
			{567194, 356679,	118},
			{567330, 254197,	109},
			{567518, 348358,	148},
			{567749, 255732,	101},
			{567818, 250500,	154},
			{568167, 326097,	157},
			{568725, 252663,	210},
			{568815, 265041,	175},
			{568815, 350412,	165},
			{569074, 257057,	157},
			{569139, 269796,	107},
			{569247, 291949,	103},
			{570112, 305025,	152},
			{570190, 254058,	153},
			{570328, 342631,	161},
			{570469, 255522,	143},
			{571193, 299514,	183},
			{571306, 257057,	160},
			{571517, 318100,	195},
			{571733, 338308,	150},
			{571934, 251616,	118},
			{571949, 333121,	135},
			{571949, 357976,	107},
			{572381, 347494,	87},
			{572492, 258661,	134},
			{572840, 254825,	198},
			{572884, 249082,	122},
			{572910, 253011,	153},
			{572922, 351924,	80},
			{573084, 251650,	144},
			{573138, 277252,	187},
			{573138, 359597,	126},
			{573354, 310968,	180},
			{573678, 257336,	107},
			{573852, 251884,	200},
			{573952, 250249,	113},
			{574002, 284709,	85},
			{574326, 320910,	228},
			{574434, 348466,	196},
			{574514, 252942,	125},
			{575083, 327394,	175},
			{575119, 254686,	155},
			{575153, 252051,	143},
			{575191, 306862,	128},
			{575299, 303296,	227},
			{575407, 355166,	175},
			{575623, 359381,	177},
			{575720, 250416,	116},
			{575720, 257522,	169},
			{575731, 341010,	163},
			{575979, 255871,	117},
			{576220, 248815,	109},
			{576272, 362298,	119},
			{576380, 335931,	197},
			{576596, 268824,	144},
			{576754, 253919,	202},
			{576812, 293786,	188},
			{576854, 252184,	158},
			{577028, 362407,	85},
			{577088, 257956,	93},
			{577455, 255687,	108},
			{577755, 249615,	101},
			{577788, 256688,	162},
			{577888, 253519,	214},
			{578001, 352249,	126},
			{578001, 358948,	165},
			{578109, 276928,	114},
			{578433, 289248,	77},
			{578689, 251884,	127},
			{578757, 361326,	44},
			{578865, 333337,	79},
			{578889, 254920,	173},
			{578973, 262664,	154},
			{578973, 347386,	171},
			{579081, 283196,	94},
			{579223, 257222,	104},
			{579405, 351816,	95},
			{579890, 255687,	119},
			{580054, 313021,	114},
			{580162, 354950,	71},
			{580390, 253018,	178},
			{580490, 249949,	137},
			{580810, 361326,	107},
			{581242, 340037,	103},
			{581458, 247180,	166},
			{581458, 251784,	152},
			{581459, 362623,	153},
			{581675, 319613,	210},
			{581783, 347818,	122},
			{581891, 326529,	183},
			{581891, 346629,	191},
			{582025, 249982,	143},
			{582215, 309023,	143},
			{583026, 245278,	96},
			{583080, 333986,	123},
			{583080, 353113,	98},
			{583193, 251584,	128},
			{583226, 248114,	153},
			{583404, 270228,	169},
			{583404, 358840,	187},
			{583944, 280710,	184},
			{584484, 318641,	81},
			{584484, 357003,	153},
			{584761, 246313,	174},
			{584828, 249615,	132},
			{584917, 284925,	188},
			{584917, 362623,	144},
			{584928, 251584,	75},
			{585228, 247814,	200},
			{585349, 265906,	216},
			{585673, 351492,	153},
			{585889, 325989,	173},
			{586213, 337228,	116},
			{586430, 329987,	191},
			{586430, 350952,	83},
			{586796, 250149,	136},
			{586862, 341442,	93},
			{586996, 245312,	163},
			{587186, 362623,	125},
			{587294, 357976,	205},
			{587618, 353005,	97},
			{587726, 276496,	157},
			{588050, 315291,	171},
			{588097, 252651,	165},
			{588230, 247514,	112},
			{588431, 250216,	109},
			{588483, 348466,	133},
			{588915, 356787,	131},
			{589780, 345549,	169},
			{590104, 273794,	166},
			{590320, 338524,	90},
			{590320, 359165,	153},
			{590320, 360894,	150},
			{590536, 353761,	137},
			{590752, 243537,	129},
			{590860, 282115,	162},
			{591292, 245590,	178},
			{591400, 269472,	185},
			{591725, 278009,	145},
			{591941, 347278,	117},
			{592265, 345657,	156},
			{592481, 307942,	132},
			{592589, 260395,	145},
			{592805, 250993,	186},
			{592913, 336904,	191},
			{593130, 285465,	65},
			{593130, 329555,	165},
			{594102, 325449,	209},
			{594102, 351384,	154},
			{594318, 243429,	192},
			{594750, 275415,	212},
			{594967, 356031,	154},
			{595183, 247535,	120},
			{595831, 353870,	172},
			{595831, 353870,	173},
			{595831, 358192,	169},
			{596047, 315615,	195},
			{596804, 270877,	120},
			{596912, 322531,	140},
			{596912, 355274,	170},
			{597020, 282656,	70},
			{597236, 348899,	140},
			{597560, 311401,	193},
			{597776, 351384,	140},
			{598208, 266122,	180},
			{598208, 292057,	156},
			{598208, 344360,	59},
			{598425, 287627,	148},
			{599181, 307942,	147},
			{599613, 353005,	203},
			{599721, 356139,	123},
			{599938, 354086,	125},
			{600046, 253911,	93},
			{600046, 335823,	185},
			{600370, 249696,	212},
			{600478, 343603,	135},
			{600586, 302431,	143},
			{601126, 258233,	180},
			{601234, 354518,	137},
			{601342, 260178,	187},
			{601342, 305565,	228},
			{601342, 347386,	154},
			{601775, 296704,	146},
			{602639, 251425,	139},
			{602639, 279954,	191},
			{602747, 330204,	136},
			{603179, 355274,	106},
			{603396, 355490,	92},
			{603828, 349979,	91},
			{603936, 286438,	134},
			{604044, 318857,	211},
			{604152, 254235,	190},
			{604260, 301243,	186},
			{604692, 343603,	94},
			{604800, 348358,	182},
			{605016, 307294,	159},
			{605125, 249048,	174},
			{605233, 293786,	144},
			{605557, 266878,	153},
			{605665, 296704,	168},
			{606529, 314210,	185},
			{607070, 273254,	90},
			{607070, 333662,	172},
			{607934, 349547,	123},
			{608150, 262772,	72},
			{608366, 291301,	186},
			{608366, 352681,	91},
			{608474, 340902,	70},
			{608475, 253046,	147},
			{608691, 364352,	127},
			{609339, 353221,	107},
			{609447, 325341,	120},
			{609555, 344360,	154},
			{609555, 348142,	166},
			{609771, 249912,	174},
			{609771, 337228,	114},
			{610095, 298757,	167},
			{610204, 255316,	159},
			{610312, 280170,	116},
			{610420, 269796,	211},
			{610420, 359165,	76},
			{610528, 359597,	212},
			{610852, 364676,	174},
			{610960, 276928,	132},
			{611068, 366189,	139},
			{611176, 262988,	144},
			{611176, 281791,	167},
			{611176, 301675,	134},
			{611392, 286438,	151},
			{611500, 253154,	94},
			{611608, 286978,	167},
			{611608, 294867,	104},
			{611608, 308699,	187},
			{611608, 360353,	156},
			{611608, 361434,	177},
			{612041, 350412,	204},
			{612257, 265906,	150},
			{612473, 343603,	157},
			{612905, 354518,	157},
			{613013, 319505,	117},
			{613337, 271633,	201},
			{613337, 356571,	152},
			{613445, 325665,	93},
			{613554, 273686,	131},
			{613554, 361866,	183},
			{613770, 258557,	96},
			{613878, 313994,	142},
			{613878, 331392,	123},
			{614202, 340037,	146},
			{614634, 250669,	160},
			{614742, 292381,	108},
			{615823, 308591,	74},
			{615931, 254667,	179},
			{615931, 364352,	201},
			{616039, 298433,	127},
			{616363, 311833,	204},
			{616687, 344468,	152},
			{616687, 360461,	133},
			{617012, 282007,	153},
			{617120, 354626,	166},
			{617228, 322423,	140},
			{617336, 250561,	124},
			{617336, 303296,	157},
			{617444, 277577,	167},
			{618092, 258125,	148},
			{618849, 354734,	190},
			{619281, 339065,	142},
			{619605, 368458,	116},
			{619821, 330204,	136},
			{619821, 333445,	141},
			{619929, 255208,	135},
			{620253, 364136,	119},
			{620254, 256937,	112},
			{620578, 267419,	107},
			{620794, 372132,	139},
			{621226, 305025,	135},
			{621226, 320478,	204},
			{621226, 332149,	165},
			{621550, 271633,	213},
			{621550, 314642,	143},
			{621550, 359381,	89},
			{621874, 250993,	183},
			{622523, 369971,	146},
			{622631, 258990,	156},
			{623279, 288491,	120},
			{623603, 264501,	197},
			{623603, 270228,	124},
			{623711, 348899,	181},
			{623820, 348899,	165},
			{623928, 280602,	165},
			{623928, 353870,	151},
			{624144, 302323,	165},
			{624360, 256720,	149},
			{624576, 315723,	154},
			{624684, 321775,	115},
			{624900, 254451,	151},
			{625008, 274659,	180},
			{625116, 365108,	135},
			{625116, 370619,	103},
			{625440, 267743,	167},
			{625440, 272498,	118},
			{625549, 282223,	136},
			{625549, 309239,	109},
			{625657, 260178,	197},
			{625873, 364784,	182},
			{625981, 342199,	112},
			{626197, 374942,	142},
			{626305, 289896,	136},
			{626305, 293894,	196},
			{626305, 354302,	123},
			{626305, 366945,	123},
			{626521, 294002,	140},
			{626629, 336687,	138},
			{626737, 362947,	101},
			{626845, 278009,	77},
			{626953, 354302,	130},
			{626953, 358192,	136},
			{626953, 361110,	200},
			{627278, 369971,	147},
			{627494, 313454,	130},
			{627494, 328691,	197},
			{627710, 342523,	197},
			{627818, 257693,	158},
			{627818, 303512,	129},
			{628250, 346845,	156},
			{628682, 266446,	220},
			{628682, 270444,	139},
			{628790, 255316,	90},
			{629007, 270444,	171},
			{629331, 283952,	146},
			{629439, 324368,	136},
			{629547, 298973,	126},
			{629763, 333770,	203},
			{629763, 367486,	137},
			{629871, 261043,	94},
			{629979, 300486,	205},
			{629979, 327394,	201},
			{630195, 288059,	141},
			{630303, 346953,	131},
			{630519, 344684,	161},
			{630628, 283196,	148},
			{630736, 355815,	163},
			{630844, 280494,	130},
			{630952, 291301,	101},
			{631060, 308807,	141},
			{631060, 362839,	180},
			{631384, 259746,	149},
			{631492, 273794,	180},
			{631708, 270444,	145},
			{631924, 295407,	115},
			{632032, 318100,	161},
			{632032, 360786,	171},
			{632140, 299405,	183},
			{632140, 357760,	193},
			{632357, 279306,	137},
			{632357, 299297,	125},
			{632357, 332041,	175},
			{632573, 266338,	134},
			{632573, 268607,	173},
			{633113, 336579,	124},
			{633221, 292489,	192},
			{633437, 312913,	219},
			{633437, 317776,	128},
			{633545, 304917,	163},
			{633653, 343603,	175},
			{633761, 305133,	89},
			{634086, 364352,	147},
			{634194, 310428,	135},
			{634518, 261907,	94},
			{634734, 325449,	187},
			{634842, 315615,	197},
			{635274, 307726,	139},
			{635382, 330744,	150},
			{635923, 361434,	192},
			{636031, 275523,	182},
			{636031, 294326,	119},
			{636139, 279522,	176},
			{636895, 274335,	163},
			{637003, 322315,	157},
			{637219, 337228,	152},
			{637328, 325665,	199},
			{637436, 340902,	132},
			{637544, 269148,	141},
			{637652, 260611,	116},
			{637868, 287735,	183},
			{637976, 317452,	93},
			{638084, 344144,	170},
			{638192, 264393,	187},
			{638300, 294651,	104},
			{639056, 326205,	161},
			{639273, 301783,	85},
			{639381, 291301,	149},
			{639381, 308915,	128},
			{639381, 333013,	168},
			{639597, 290220,	169},
			{639705, 277577,	209},
			{640353, 331716,	114},
			{640786, 333445,	144},
			{640894, 297028,	202},
			{640894, 338957,	102},
			{641326, 261043,	156},
			{641326, 283412,	185},
			{641434, 339929,	172},
			{641542, 307186,	134},
			{641650, 324368,	147},
			{641866, 303296,	222},
			{642190, 256828,	156},
			{642190, 267959,	172},
			{642190, 269040,	152},
			{642190, 332905,	170},
			{642298, 345657,	161},
			{642406, 269796,	128},
			{642839, 262124,	165},
			{642839, 346629,	169},
			{643595, 321667,	106},
			{644027, 293030,	139},
			{644135, 344792,	134},
			{644352, 348142,	146},
			{644460, 272714,	169},
			{644568, 303296,	184},
			{644676, 310104,	166},
			{645000, 281791,	123},
			{645108, 327286,	128},
			{645324, 284601,	147},
			{645324, 288167,	197},
			{645432, 263636,	147},
			{645864, 258341,	111},
			{645973, 260070,	166},
			{646621, 342631,	120},
			{646729, 315183,	152},
			{647053, 279090,	155},
			{647702, 337444,	179},
			{647918, 260503,	153},
			{647918, 315399,	106},
			{648026, 267094,	186},
			{648134, 241700,	238},
			{648134, 293678,	78},
			{648134, 329987,	86},
			{648242, 270120,	110},
			{648350, 248291,	148},
			{648350, 256396,	148},
			{648350, 342199,	119},
			{648674, 244833,	118},
			{648674, 273794,	137},
			{648674, 284169,	126},
			{648674, 307402,	193},
			{648782, 348466,	165},
			{648890, 291733,	183},
			{648890, 299189,	112},
			{648998, 320154,	123},
			{649323, 262772,	187},
			{649647, 329987,	148},
			{649755, 286546,	122},
			{650187, 273038,	93},
			{650187, 337444,	176},
			{650295, 333337,	156},
			{650727, 322855,	162},
			{650727, 323179,	176},
			{650835, 246130,	109},
			{650944, 246779,	148},
			{650944, 254235,	127},
			{650944, 324044,	108},
			{651052, 283952,	145},
			{651052, 283952,	143},
			{651052, 300162,	142},
			{651052, 311833,	191},
			{651052, 342307,	181},
			{651160, 242996,	196},
			{651160, 306970,	179},
			{651268, 303512,	153},
			{651376, 279306,	137},
			{651376, 341118,	107},
			{651484, 268607,	173},
			{651592, 257153,	203},
			{651808, 347062,	130},
			{652348, 261691,	175},
			{652348, 289464,	101},
			{652564, 287843,	116},
			{652781, 241700,	155},
			{652781, 262124,	84},
			{652889, 251209,	93},
			{652889, 280494,	185},
			{652889, 343712,	95},
			{653105, 265365,	182},
			{653537, 335931,	110},
			{653645, 324152,	177},
			{653969, 254559,	211},
			{654185, 244077,	148},
			{654293, 246779,	141},
			{654293, 288491,	186},
			{654402, 271201,	103},
			{654618, 298217,	140},
			{654726, 340686,	145},
			{654834, 265365,	199},
			{654942, 250020,	148},
			{654942, 314967,	197},
			{655050, 270661,	136},
			{655050, 276604,	108},
			{655374, 285249,	216},
			{655590, 256937,	141},
			{655590, 279738,	148},
			{655914, 312373,	97},
			{656022, 253478,	184},
			{656022, 308051,	186},
			{656022, 332581,	170},
			{656347, 254235,	105},
			{656455, 292381,	132},
			{656779, 244293,	210},
			{656779, 302539,	116},
			{656887, 260503,	140},
			{656887, 288383,	152},
			{657211, 280170,	162},
			{657427, 336255,	123},
			{657860, 268824,	106},
			{657860, 276604,	101},
			{658076, 299946,	99},
			{658076, 311292,	179},
			{658292, 282331,	145},
			{658292, 301134,	106},
			{658616, 304917,	110},
			{658616, 336795,	169},
			{658724, 263096,	127},
			{658832, 256720,	155},
			{659048, 247535,	97},
			{659156, 292597,	75},
			{659264, 266122,	135},
			{659372, 271957,	137},
			{659589, 299622,	180},
			{659913, 275199,	114},
			{659913, 279306,	189},
			{660021, 266230,	150},
			{660021, 313454,	168},
			{660129, 338416,	181},
			{660237, 244185,	103},
			{660237, 250453,	137},
			{660345, 261475,	160},
			{660345, 273146,	135},
			{660561, 276604,	139},
			{660669, 252182,	162},
			{660993, 318749,	134},
			{660993, 321234,	153},
			{661210, 295839,	151},
			{661318, 301891,	168},
			{661426, 282007,	188},
			{661426, 293030,	107},
			{661642, 310752,	154},
			{661750, 342091,	151},
			{661858, 297568,	184},
			{662074, 247859,	186},
			{662398, 256072,	185},
			{662398, 259314,	179},
			{662614, 268824,	134},
			{663155, 285898,	65},
			{663155, 304701,	210},
			{663263, 249804,	197},
			{663263, 288167,	125},
			{663371, 244185,	156},
			{663479, 264501,	145},
			{663479, 271741,	178},
			{663587, 284709,	123},
			{663803, 285681,	180},
			{664560, 246670,	133},
			{664884, 296380,	150},
			{665100, 279198,	170},
			{665208, 275523,	108},
			{665640, 268067,	152},
			{665748, 251425,	182},
			{666072, 248400,	117},
			{666180, 316371,	161},
			{666288, 258233,	115},
			{666288, 296704,	216},
			{666397, 254019,	145},
			{666505, 289031,	113},
			{666505, 290652,	197},
			{666613, 277793,	188},
			{666937, 280602,	178},
			{666937, 314102,	134},
			{667153, 301891,	96},
			{667693, 291193,	215},
			{667909, 273254,	141},
			{667909, 282980,	166},
			{668018, 259314,	124},
			{668018, 282223,	182},
			{668990, 255964,	137},
			{668990, 272498,	119},
			{669530, 302215,	85},
			{670395, 291841,	154},
			{670395, 295623,	116},
			{670611, 268175,	131},
			{670611, 273146,	143},
			{671259, 284925,	112},
			{671368, 258666,	106},
			{671476, 269796,	184},
			{671692, 255099,	155},
			{671800, 263420,	91},
			{671908, 275848,	118},
			{671908, 282115,	145},
			{672016, 282223,	118},
			{672556, 261259,	77},
			{672556, 278657,	153},
			{674285, 284277,	79},
			{674393, 268499,	135},
			{674393, 293678,	161},
			{674501, 299730,	135},
			{674609, 289788,	228},
			{675042, 301675,	133},
			{675150, 287518,	158},
			{675150, 290868,	119},
			{675690, 272714,	115},
			{675690, 295083,	160},
			{676446, 276496,	214},
			{676663, 262340,	149},
			{676771, 265149,	171},
			{676879, 259098,	85},
			{677527, 298217,	166},
			{678824, 264825,	211},
			{679256, 292814,	152},
			{679364, 280170,	161},
			{679580, 268499,	85},
			{679904, 260935,	168},
			{680121, 279522,	91},
			{680229, 270877,	187},
			{680445, 286114,	111},
			{680553, 297244,	119},
			{680769, 276820,	169},
			{680877, 303728,	159},
			{680985, 303728,	124},
			{681417, 266986,	147},
			{681742, 275740,	137},
			{681850, 290977,	132},
			{682714, 300594,	112},
			{682714, 300594,	159},
			{682822, 282980,	129},
			{682930, 261691,	144},
			{683363, 292706,	133},
			{683363, 295191,	127},
			{683579, 308591,	202},
			{683795, 263961,	188},
			{683903, 288707,	192},
			{684011, 282115,	110},
			{684984, 300486,	138},
			{685524, 277793,	181},
			{685524, 306213,	151},
			{685632, 294975,	179},
			{685632, 301567,	187},
			{686064, 297676,	165},
			{686172, 280386,	159},
			{686280, 265149,	146},
			{686388, 286438,	148},
			{686388, 308267,	150},
			{686496, 262880,	188},
			{686496, 299622,	89},
			{686712, 268607,	142},
			{687145, 292381,	145},
			{687361, 258449,	153},
			{687361, 287410,	143},
			{687577, 263420,	122},
			{688226, 303944,	186},
			{688333, 286546,	162},
			{688658, 281683,	128},
			{688766, 284385,	164},
			{689522, 291193,	176},
			{689738, 291409,	185},
			{690171, 266554,	178},
			{690927, 301351,	141},
			{691143, 264393,	189},
			{691359, 297676,	98},
			{691575, 305889,	186},
			{693304, 286978,	148},
			{693953, 295623,	176},
			{694709, 291841,	121},
			{696114, 280386,	119},
			{696438, 281899,	167},
			{696438, 287302,	180}
		},
		nebula_locations={},
		mine_locations = {
			{455347, 291973},
			{457401, 293313},
			{457669, 291080},
			{459426, 292062},
			{460644, 290760},
			{460825, 293313},
			{462265, 290977},
			{463742, 287001},
			{463742, 288996},
			{464487, 292360},
			{465946, 290068},
			{466541, 286019},
			{466958, 287984},
			{469131, 285662},
			{470143, 287686},
			{470858, 283994},
			{471989, 282178},
			{472495, 285274},
			{472644, 280541},
			{473329, 282535},
			{473984, 283875},
			{475175, 282416},
			{475294, 280571},
			{476931, 281493},
			{478360, 280958},
			{478420, 279677},
			{479819, 281374},
			{480414, 279529},
			{481933, 278933},
			{481933, 280749},
			{482379, 281345},
			{483243, 279707},
			{483838, 281970},
			{484493, 280600},
			{485714, 282178},
			{487589, 280064},
			{487976, 282387},
			{488661, 280600},
			{489525, 283726},
			{489882, 282863},
			{490299, 280303},
			{491192, 281017},
			{491609, 282952},
			{492710, 282357},
			{493157, 280511},
			{493960, 283458},
			{495002, 281315},
			{496432, 283071},
			{497086, 281047},
			{498486, 283071},
			{499587, 278070},
			{500004, 279826},
			{500004, 281761},
			{501374, 274914},
			{501880, 277593},
			{502922, 279588},
			{502981, 274944},
			{503845, 272383},
			{505303, 275748},
			{506494, 268930},
			{506673, 273753},
			{506911, 270716},
			{508668, 275480},
			{509114, 272294},
			{510186, 268662},
			{511228, 267352},
			{511258, 270032},
			{511645, 271848},
			{513431, 265238},
			{513848, 268513},
			{515783, 262440},
			{516349, 266667},
			{516408, 264851},
			{516646, 256962},
			{517450, 259492},
			{518016, 254312},
			{518343, 262410},
			{518581, 264822},
			{519534, 256515},
			{519564, 261844},
			{519802, 259671},
			{520725, 263958},
			{521707, 253419},
			{522005, 263214},
			{522273, 256009},
			{522720, 258718},
			{523732, 250591},
			{524149, 255711},
			{524774, 252734},
			{526620, 256039},
			{528019, 250472},
			{528860, 253148},
			{529773, 248108},
			{530130, 251362},
			{531241, 254299},
			{531281, 248465},
			{532868, 246362},
			{532987, 251243},
			{534574, 248386},
			{536122, 244497},
			{536638, 249815},
			{537352, 246442},
			{539098, 245410},
			{539733, 242791},
			{540209, 249894},
			{540804, 247354},
			{542074, 245053},
			{544455, 251045},
			{544653, 248188},
			{546955, 244735},
			{547510, 252195},
			{548978, 250251},
			{549693, 253981},
			{550010, 247037},
			{552431, 251640},
			{553740, 254100},
			{556796, 253148},
			{557867, 247077},
			{557907, 250053},
			{560803, 249259},
			{561399, 251680},
			{562787, 255172},
			{565843, 253346},
			{566557, 250172},
			{567390, 257076},
			{568859, 253783},
			{570327, 257671},
			{571240, 255370},
			{572152, 249815},
			{573462, 253822},
			{573898, 259695},
			{574335, 255925},
			{576517, 250846},
			{577271, 254775},
			{579176, 250727},
			{579850, 253386},
			{581556, 248624},
			{582549, 250450},
			{583025, 245926},
			{584374, 252751},
			{585485, 248227},
			{587231, 246124},
			{587588, 251402},
			{588501, 249021},
			{589890, 247672},
			{591913, 247870},
			{592389, 243347},
			{593064, 244894},
			{593858, 249299},
			{596000, 245450},
			{596516, 250926},
			{598421, 248902},
			{601437, 252592},
			{601873, 248942},
			{604135, 251322},
			{605286, 257592},
			{606198, 253703},
			{607944, 250886},
			{608460, 255092},
			{610722, 250489},
			{613460, 251759},
			{613658, 255013},
			{616198, 252553},
			{616555, 256045},
			{618380, 249854},
			{618857, 255251},
			{621515, 253029},
			{623222, 255965},
			{624650, 252949},
			{625483, 250688},
			{625563, 261084},
			{627586, 256441},
			{627864, 261878},
			{630404, 259338},
			{630840, 262711},
			{633896, 264973},
			{635245, 261560},
			{636118, 259973},
			{637507, 263584},
			{638895, 259100},
			{639054, 261520},
			{640681, 266123},
			{641237, 262354},
			{642625, 259100},
			{643618, 264814},
			{644133, 256521},
			{644530, 260767},
			{648816, 258425},
			{649054, 262314},
			{650601, 255211},
			{651117, 251362},
			{653022, 260568},
			{653617, 256203},
			{655363, 250608},
			{656950, 252711},
			{659331, 251084},
			{659926, 258782},
			{661514, 254180},
			{663617, 250926},
			{665204, 257037},
			{666037, 259298},
			{668259, 254219},
			{669013, 262274},
			{669886, 258465},
			{673180, 259060},
			{673656, 264060},
			{674648, 275409},
			{675124, 268266},
			{676394, 260806},
			{677942, 265925},
			{678299, 269576},
			{678457, 277432},
			{678973, 272552},
			{679370, 263901},
			{679727, 282234},
			{679965, 260687},
			{680164, 267949},
			{681513, 273187},
			{682306, 264219},
			{683259, 277591},
			{683695, 267354},
			{684330, 281956},
			{685084, 263505},
			{685124, 279258},
			{686116, 266600},
			{687187, 260647},
			{687822, 279099},
			{688258, 267354},
			{688298, 281321},
			{689290, 277234},
			{689647, 263227},
			{690758, 281797},
			{690917, 284853},
			{693973, 282075},
			{694449, 284654},
			{694607, 278186},
			{696671, 283662},
			{699528, 283226}
		},
		nebula_locations = {
			{458470, 294833},
			{463027, 289973},
			{467127, 295744},
			{468190, 289821},
			{469557, 298022},
			{472542, 305386},
			{472898, 281468},
			{473810, 289062},
			{474213, 339103},
			{475883, 347760},
			{478162, 358087},
			{478465, 310246},
			{479125, 297415},
			{479377, 327712},
			{479680, 317992},
			{479885, 288302},
			{481252, 279949},
			{481655, 350646},
			{483530, 297415},
			{483781, 336369},
			{484237, 343659},
			{485148, 307361},
			{487478, 288302},
			{487578, 329990},
			{488033, 350190},
			{488238, 297719},
			{489097, 359454},
			{489856, 319815},
			{489908, 280101},
			{490378, 349144},
			{490530, 338665},
			{490682, 312238},
			{490986, 332134},
			{491071, 340318},
			{491190, 283156},
			{491289, 305708},
			{491950, 291054},
			{493013, 297888},
			{493434, 326366},
			{494059, 322199},
			{495101, 333449},
			{495309, 299282},
			{495518, 341991},
			{495934, 310949},
			{496425, 364149},
			{497184, 284074},
			{498434, 271366},
			{498851, 354908},
			{500101, 326366},
			{500518, 291782},
			{500726, 305532},
			{501143, 347824},
			{501559, 315116},
			{502184, 279699},
			{502184, 336574},
			{502401, 362162},
			{503643, 298449},
			{505309, 289699},
			{506351, 321783},
			{507601, 331158},
			{507601, 342408},
			{508851, 270949},
			{508851, 281991},
			{509059, 311366},
			{509268, 355324},
			{510310, 302824},
			{510518, 294908},
			{512393, 345741},
			{513226, 336574},
			{515101, 267408},
			{515158, 327231},
			{515310, 317815},
			{515934, 289074},
			{516143, 277199},
			{516768, 282616},
			{517436, 301868},
			{517809, 256783},
			{517809, 352616},
			{518955, 309462},
			{519685, 262824},
			{520474, 332850},
			{520518, 343449},
			{521081, 295945},
			{523018, 270116},
			{523226, 283032},
			{524119, 322067},
			{524893, 253449},
			{525726, 264074},
			{525941, 315385},
			{526549, 289718},
			{526559, 276158},
			{526559, 349283},
			{526559, 357199},
			{526852, 359429},
			{527004, 305817},
			{527460, 339685},
			{528523, 331028},
			{528675, 297919},
			{530934, 249699},
			{531351, 256991},
			{531351, 269282},
			{531712, 283491},
			{531712, 365656},
			{532168, 319182},
			{533383, 310525},
			{533643, 353658},
			{533687, 326472},
			{535358, 345912},
			{535509, 302627},
			{535726, 275949},
			{535965, 362314},
			{536572, 336496},
			{536724, 293818},
			{536768, 263658},
			{537809, 245533},
			{538091, 321156},
			{538243, 373097},
			{539306, 314322},
			{539893, 269699},
			{540066, 283643},
			{541351, 260533},
			{542040, 303842},
			{542809, 350116},
			{543018, 251158},
			{543255, 329357},
			{543559, 339533},
			{544318, 277264},
			{544470, 359580},
			{544470, 366415},
			{544926, 322067},
			{545533, 292603},
			{546748, 374616},
			{546900, 312955},
			{547809, 269699},
			{548874, 353809},
			{549059, 247199},
			{549178, 283491},
			{549178, 300957},
			{549893, 346574},
			{550726, 260741},
			{550934, 253241},
			{551304, 330572},
			{552519, 275745},
			{552823, 316448},
			{553582, 337862},
			{553734, 360947},
			{554190, 323130},
			{554646, 290571},
			{554798, 309310},
			{555253, 369756},
			{555815, 297374},
			{556453, 283236},
			{556768, 348658},
			{557809, 268241},
			{558643, 250949},
			{558643, 355741},
			{558898, 318422},
			{559059, 261574},
			{560113, 330117},
			{560173, 303432},
			{561130, 294929},
			{561236, 275689},
			{561936, 363985},
			{562239, 341204},
			{563362, 286000},
			{564531, 310767},
			{565429, 323738},
			{565518, 253449},
			{566143, 264699},
			{566351, 355949},
			{568011, 349101},
			{568358, 279516},
			{568464, 270056},
			{568783, 294291},
			{569074, 334673},
			{569314, 302795},
			{570696, 318633},
			{570934, 257616},
			{571352, 341507},
			{572393, 283449},
			{572719, 327535},
			{573643, 358658},
			{574204, 311723},
			{575161, 273882},
			{575480, 266017},
			{576351, 252199},
			{576976, 293866},
			{577579, 349405},
			{578018, 361158},
			{578642, 332850},
			{578643, 303449},
			{578851, 287408},
			{579838, 321609},
			{580616, 340444},
			{580794, 279729},
			{580920, 259191},
			{581768, 355533},
			{582708, 315231},
			{583851, 286574},
			{584268, 307199},
			{584834, 270056},
			{585101, 248866},
			{585845, 296025},
			{586691, 330724},
			{586995, 347430},
			{588018, 359491},
			{588362, 264658},
			{588448, 279729},
			{589273, 339381},
			{589729, 254938},
			{589893, 301366},
			{590892, 311617},
			{591143, 287199},
			{591743, 321396},
			{593018, 246574},
			{593018, 353241},
			{594285, 346216},
			{594506, 271863},
			{594613, 282492},
			{595038, 305665},
			{595518, 294074},
			{595652, 330572},
			{596715, 336647},
			{596867, 256154},
			{597019, 264658},
			{597393, 299699},
			{597695, 315763},
			{598652, 288657},
			{600309, 351366},
			{600968, 343026},
			{600990, 278985},
			{601119, 272404},
			{602184, 251574},
			{602486, 323130},
			{602585, 298118},
			{603967, 308109},
			{604157, 317055},
			{605348, 284406},
			{605524, 259798},
			{605524, 268759},
			{606283, 335736},
			{606891, 328294},
			{606976, 351366},
			{608112, 292378},
			{608865, 275442},
			{609268, 252199},
			{609321, 363985},
			{609928, 345152},
			{610232, 316144},
			{612054, 356239},
			{612151, 301944},
			{612510, 268455},
			{612510, 282428},
			{612510, 309765},
			{612814, 322067},
			{613434, 351366},
			{613877, 339533},
			{614029, 330117},
			{615092, 261014},
			{615396, 291388},
			{616003, 360188},
			{616914, 274986},
			{617393, 252824},
			{617674, 284402},
			{619041, 313107},
			{619476, 349491},
			{620256, 297008},
			{620256, 368693},
			{621471, 305665},
			{621774, 338926},
			{622078, 265114},
			{622686, 277720},
			{622686, 329965},
			{623141, 271189},
			{623445, 321460},
			{623643, 253449},
			{624893, 346574},
			{625723, 371427},
			{626027, 314018},
			{626027, 358214},
			{626179, 284706},
			{626768, 257616},
			{627394, 291692},
			{627546, 354417},
			{629216, 273619},
			{629368, 362618},
			{629824, 334977},
			{630887, 264203},
			{631039, 300197},
			{631191, 326776},
			{631768, 343241},
			{632406, 307183},
			{632558, 317663},
			{633924, 360947},
			{634532, 280150},
			{635139, 272708},
			{636051, 287743},
			{637266, 325257},
			{637569, 307943},
			{637601, 262824},
			{637721, 334825},
			{638936, 296097},
			{640607, 317511},
			{640911, 270278},
			{640934, 344074},
			{641063, 278935},
			{642885, 301716},
			{643948, 327839},
			{644100, 284402},
			{645310, 260116},
			{646378, 318574},
			{646768, 309282},
			{646976, 349283},
			{647138, 292755},
			{647664, 276335},
			{647745, 266329},
			{647810, 328658},
			{648353, 303387},
			{648504, 275593},
			{648644, 339700},
			{648728, 294864},
			{649685, 347825},
			{651351, 244283},
			{651765, 301395},
			{652676, 261604},
			{652765, 319807},
			{652909, 285162},
			{653740, 283625},
			{653891, 254010},
			{654284, 328616},
			{654499, 276183},
			{654499, 292434},
			{654739, 341829},
			{655106, 269805},
			{655195, 311605},
			{657184, 245533},
			{658992, 335298},
			{659903, 321629},
			{660934, 254491},
			{661351, 301782},
			{661768, 260324},
			{662393, 248033},
			{662601, 264491},
			{662601, 272408},
			{662601, 283449},
			{662601, 290532},
			{664004, 310694},
			{667041, 318895},
			{668320, 257503},
			{668927, 276487},
			{668927, 302002},
			{669990, 269805},
			{671053, 294257},
			{671509, 263730},
			{672572, 285448},
			{676521, 278158},
			{677128, 270260},
			{677128, 290612},
			{677736, 300180},
			{678191, 263122},
			{680318, 277247},
			{681533, 286511},
			{683203, 294712},
			{684874, 307622},
			{686696, 264033},
			{686848, 280892},
			{689430, 302154},
			{689582, 288182},
			{693379, 293649},
			{694746, 281803}
		},
		destroy = function(self) -- sigh I am getting less convinced this is a good way, will look at it when I have time for eris
			assert(type(self)=="table")
			for i=1,#self.all_objects do
				local obj=self.all_objects[i]
				if obj:isValid() then
					obj:destroy()
				end
			end
		end
	}
	for i=1,#wip.asteroid_locations do
		table.insert(wip.all_objects,Asteroid():setPosition(wip.asteroid_locations[i][1],wip.asteroid_locations[i][2]):setSize(wip.asteroid_locations[i][3]))
	end
	for i=1,#wip.mine_locations do
		table.insert(wip.all_objects,Mine():setPosition(wip.mine_locations[i][1],wip.mine_locations[i][2]))
	end
	for i=1,#wip.nebula_locations do
		table.insert(wip.all_objects,Nebula():setPosition(wip.nebula_locations[i][1],wip.nebula_locations[i][2]))
	end
	table.insert(wip.all_objects,SpaceStation():setTemplate("Large Station"):setFaction("Ghosts"):setCallSign("HAL 9000"):setPosition(643891, 298289))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("A7M2"):setPosition(578512, 296192))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("AM"):setPosition(586051, 288731))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("Glados"):setPosition(586084, 303815))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("Dr. Theopolis"):setPosition(593648, 296247))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Astrolabe"):setPosition(581293, 291121))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Sextant"):setPosition(591362, 291885))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("TAIRseach"):setPosition(591223, 301850))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Wykres"):setPosition(581154, 301850))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Processing Center Delta"):setPosition(602274, 282095))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Resource Processing Gamma"):setPosition(572772, 281978))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Resource Processing Alpha"):setPosition(603272, 309987))
	table.insert(wip.all_objects,SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Resource Processing Beta"):setPosition(573352, 309694))
	--local stations = {}
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	--Brillo
    stationBrillo = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Brillo"):setPosition(466525, 301218):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationBrillo.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "friend",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,4), HVLI = math.random(2,4),Mine = math.random(2,5),Nuke = math.random(8,20),	EMP = math.random(12,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = hvliAvail,		Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        probe_launch_repair =	true,
        scan_repair =			true,
        sensor_boost = {value = 10000, cost = 10},
        reputation_cost_multipliers = {friend = 1.0, neutral = 2.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	sensor = 		{quantity = math.random(2,5),	cost = math.random(40,70)},
        			transporter =	{quantity = math.random(2,5),	cost = math.random(50,80)},
        			nickel = 		{quantity = math.random(2,5),	cost = math.random(55,90)}	},
        trade = {	food = true, medicine = tradeMedicine, luxury = tradeLuxury },
        public_relations = true,
        general_information = "We coordinate mining nearby asteroids",
    	history = "Shortly after Astron was established, a group of entrepreneurs wanted to take advantage of the proximity of mineral laden asteroids. Astron agreed under the stipulation that mining activity be kept hidden from the Ghosts in the area"
	}
	if random(1,100) <= 22 then stationBrillo:setRestocksScanProbes(false) end
	if random(1,100) <= 31 then stationBrillo:setRepairDocked(false) end
	if random(1,100) <= 17 then stationBrillo:setSharesEnergyWithDocked(false) end
	--station_names[stationBrillo:getCallSign()] = {stationBrillo:getSectorName(), stationBrillo}
	--table.insert(stations,stationBrillo)
	table.insert(wip.all_objects,stationBrillo)
	astron_color = true
	astron_terrain = wip.all_objects
	return wip
end
function removeAstronColor()
	for _, obj in ipairs(astron_terrain) do
		if obj:isValid() then
			obj:destroy()
		end
	end
	astron_terrain = nil
	astron_color = false
end
--	Lafrina area stations, asteroids, planets, etc.
function lafrinaSector()
	lafrina_color = true
	lafrina_planets = createLafrinaPlanets()
	lafrina_asteroids = createLafrinaAsteroids()
	lafrina_stations = createLafrinaStations()
	lafrina_nebulae = createLafrinaNebulae()
	regionStations = lafrina_stations
	if stationLafrina ~= nil then
		table.insert(regionStations,stationLafrina)
	end
	return {destroy=removeLafrinaColor}
end
function createLafrinaStations()
	lafrina_defense_platforms = {}
	local stations = {}
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	--Advance
	stationAdvance = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Advance"):setPosition(-414326, 292291):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationAdvance.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(4,6),Nuke = math.random(12,20),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,				HVLI = false,			Mine = random(1,100)<30,Nuke = random(1,100)<30,	EMP = random(1,100)<73	},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        hack_repair =			random(1,100) < 63,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nanites = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100)<30, medicine = random(1,100)<30, luxury = random(1,100)<30 },
        buy = {		filament = math.random(90,120),
        			impulse = math.random(105,130)	},
        public_relations = true,
        general_information = "We mine the nearby asteroids and maintain good relations with Marielle",
    	history = "The survey on these asteroids show them as prime resource candidates, so when relations improved with the Arlenians during our assistance with pushing out Kraylor incursions, we took the Arlenian offer to establish a base here.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	stationAdvance:setRestocksScanProbes(random(1,100)<85)
	stationAdvance:setRepairDocked(random(1,100)<47)
	stationAdvance:setSharesEnergyWithDocked(true)
	station_names[stationAdvance:getCallSign()] = {stationAdvance:getSectorName(), stationAdvance}
	table.insert(stations,stationAdvance)
	--Bond
    stationBond = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Bond"):setPosition(-271961, 284971):setDescription("Observation and Research"):setCommsScript(""):setCommsFunction(commsStation)
    stationBond.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100)<30,Mine = true,			Nuke = random(1,100)<30,	EMP = random(1,100)<30	},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 63,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	circuit = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100)<30, medicine = random(1,100)<30, luxury = random(1,100)<30 },
        buy = {		nanites = math.random(90,120),
        			gold = math.random(105,130)	},
        public_relations = true,
        general_information = "We research the nearby black hole in conjunction with Lafrina",
    	history = "Lafrina requested research assistance. TSN had the available reseources and set up another base to help",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	stationBond:setRestocksScanProbes(random(1,100)<70)
	stationBond:setRepairDocked(random(1,100)<70)
	stationBond:setSharesEnergyWithDocked(random(1,100)<70)
	station_names[stationBond:getCallSign()] = {stationBond:getSectorName(), stationBond}
	table.insert(stations,stationBond)
	--Borie
--	local BorieZone = squareZone(-326622, 278067, "Borie S-12")
--	BorieZone:setColor(51,153,255):setLabel("Br")
	--Arlenian prefixes: Del = 2, Til = 3
	stationBorie = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Til Borie"):setPosition(-326622, 278067):setDescription("Mining and gambling"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 52 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 32 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 42 then tradeMedicine = true else tradeMedicine = false end
    stationBorie.comms_data = {
    	friendlyness = 45,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = hvliAvail,		Mine = true,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 63,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        remote_warp_jammer = {name = "Swamp", cost = math.random(9,20), quantity = math.random(1,5), speed = 1500, warp_jam_range = 20000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		circuit = math.random(90,120),
        			nickel = math.random(20,50)	},
        public_relations = true,
        general_information = "We mine asteroids for minerals and we've got facilities for miners and others to try their hand at games of chance... for a price",
    	history = "Mining alone could not pay the bills for station maintenance, so we added a gambling facility to help. The gambling revenue pays about half of the bills now",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationBorie:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationBorie:setRepairDocked(false) end
	if random(1,100) <= 12 then stationBorie:setSharesEnergyWithDocked(false) end
	local bdp1Zone = squareZone(-324585, 279012, "BDP1")
	bdp1Zone:setColor(51,153,255):setLabel("1")
	--[[
	local ship = CpuShip():setFaction("Arlenians"):setTemplate("Defense platform"):setCallSign("BDP1"):setPosition(-324585, 279012):orderStandGround()
	setBeamColor(ship)
	table.insert(lafrina_defense_platforms,ship)
	--]]
	station_names[stationBorie:getCallSign()] = {stationBorie:getSectorName(), stationBorie}
	table.insert(stations,stationBorie)
	--Ilorea	
--	local IloreaZone = squareZone(-381821, 316064, "Ilorea U-15")
--	IloreaZone:setColor(51,153,255):setLabel("I")
	--Arlenian prefixes: Del = 2, Til = 3
	stationIlorea = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Del Ilorea"):setPosition(-381821, 316064):setDescription("Mining and resupply"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 42 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 32 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 52 then tradeMedicine = true else tradeMedicine = false end
    stationIlorea.comms_data = {
    	friendlyness = 62,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = true,			Mine = mineAvail,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        probe_launch_repair =	true,
        hack_repair =			random(1,100) < 83,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			tritanium =	{quantity = math.random(5,9),	cost = math.random(43,70)},
        			platinum =	{quantity = math.random(5,9),	cost = math.random(63,70)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		cobalt = math.random(60,90),
        			warp = math.random(80,130)	},
        public_relations = true,
        general_information = "We mine for nickel, dilithium and cobalt. With these minerals we build components for ships as well as entire ships for exploration, mining and research",
    	history = "These asteroids provide a good nearby source for nickel, dilithium and cobalt, so a station was placed to facilitate mining. Materials experts and manufacturing experts are employed to convert local resources into completed ships and ship systems. This was one of the first bases established in the area to take advantage of asteroids here filled with rich deposits of valuable resources",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationIlorea:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationIlorea:setRepairDocked(false) end
	if random(1,100) <= 12 then stationIlorea:setSharesEnergyWithDocked(false) end
	station_names[stationIlorea:getCallSign()] = {stationIlorea:getSectorName(), stationIlorea}
	table.insert(stations,stationIlorea)
	--Lurive
	--local luriveZone = squareZone(-294864, 225704, "Lurive Q90")
	--luriveZone:setColor(51,153,255):setLabel("LV")
	stationLurive = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Lurive 2"):setPosition(-294864, 225704):setDescription("Mining and research"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 62 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 22 then tradeMedicine = true else tradeMedicine = false end
    stationLurive.comms_data = {
    	friendlyness = 45,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = true,			Mine = false,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        hack_repair =			random(1,100) < 63,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		autodoc = math.random(90,120),
        			lifter = math.random(105,130)	},
        public_relations = true,
        general_information = "We mine and study the asteroids nearby",
    	history = "We started out as just a research station, but as time went on, we found our research could be applied to efficiently mine the asteroids for valuable minerals. As it happens, we needed that money when the grant funds ran dry",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationLurive:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationLurive:setRepairDocked(false) end
	if random(1,100) <= 12 then stationLurive:setSharesEnergyWithDocked(false) end
	station_names[stationLurive:getCallSign()] = {stationLurive:getSectorName(), stationLurive}
	table.insert(stations,stationLurive)
	--Marielle
	stationMarielle = SpaceStation():setTemplate("Medium Station"):setFaction("Arlenians"):setCallSign("Marielle"):setPosition(-436074, 287708):setDescription("Mining and manufacturing"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 32 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 52 then tradeMedicine = true else tradeMedicine = false end
    stationMarielle.comms_data = {
    	friendlyness = 82,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "neutral", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = homeAvail,		HVLI = false,			Mine = true,			Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<50},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<50},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<60},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<90},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<75},
        },
        shield_overcharge =		true,
        probe_launch_repair =	random(1,100) < 83,
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<70,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost_probes = {name = "Binoc", cost = math.random(37,52), quantity = math.random(1,3), speed = 1000, boost = 20, range = 40},
        remote_warp_jammer = {name = "Snag", cost = math.random(9,20), quantity = math.random(1,5), speed = 2500, warp_jam_range = 10000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			dilithium =	{quantity = math.random(5,9),	cost = math.random(43,70)},
        			cobalt =	{quantity = math.random(5,9),	cost = math.random(63,70)}	},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		platinum = math.random(60,100),
        			tractor = math.random(105,130)	},
        public_relations = true,
        general_information = "We mine for nickel, dilithium and cobalt. With these minerals we build components for ships as well as entire ships for exploration, mining and research",
    	history = "These asteroids provide a good nearby source for nickel, dilithium and cobalt, so a station was placed to facilitate mining. Materials experts and manufacturing experts are employed to convert local resources into completed ships and ship systems. This was one of the first bases established in the area to take advantage of asteroids here filled with rich deposits of valuable resources",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK4",
			DF4 = "Adder MK5",
			DF5 = "WX-Lindworm",
			DF6 = "Phobos T3",
			DF7 = "Nirvana R5A",
			DF8 = "Piranha F8",
			DF9 = "Piranha F12",
    	},
	}
	if random(1,100) <= 14 then stationMarielle:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationMarielle:setRepairDocked(false) end
	if random(1,100) <= 12 then stationMarielle:setSharesEnergyWithDocked(false) end
	station_names[stationMarielle:getCallSign()] = {stationMarielle:getSectorName(), stationMarielle}
	table.insert(stations,stationMarielle)
	--Rivelle
	--local rivelleZone = squareZone(-359704, 375988, "Del Rivelle X87")	--Del is Arlenian for two
	--rivelleZone:setColor(51,153,255):setLabel("R")
    stationRivelle = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Del Rivelle"):setPosition(-359704, 375988):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 52 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 32 then tradeMedicine = true else tradeMedicine = false end
    stationRivelle.comms_data = {
    	friendlyness = 45,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = false,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			random(1,100) < 83,
        tube_slow_down_repair = random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		tritanium = math.random(80,100),
        			repulsor = math.random(105,130)	},
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "We wanted in on the mining rush. So far, we have not had much luck",
    	idle_defense_fleet = {
			DF1 = "Adder MK4",
			DF2 = "Adder MK5",
			DF3 = "WX-Lindworm",
			DF4 = "Phobos T3",
			DF5 = "Piranha F8",
			DF6 = "Piranha F12",
    	},
	}
	if random(1,100) <= 14 then stationRivelle:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationRivelle:setRepairDocked(false) end
	if random(1,100) <= 12 then stationRivelle:setSharesEnergyWithDocked(false) end
	station_names[stationRivelle:getCallSign()] = {stationRivelle:getSectorName(), stationRivelle}
	table.insert(stations,stationRivelle)
	--Vilairre
    stationVilairre = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Vilairre"):setDescription("Communications and administration"):setCommsScript(""):setCommsFunction(commsStation)
	update_system:addOrbitTargetUpdate(stationVilairre,planet_wilaux,6000,23*2*math.pi,0)
    if random(1,100) <= 30 then nukeAvail = true else nukeAvail = false end
    if random(1,100) <= 40 then empAvail = true else empAvail = false end
    if random(1,100) <= 50 then mineAvail = true else mineAvail = false end
    if random(1,100) <= 60 then homeAvail = true else homeAvail = false end
    if random(1,100) <= 80 then hvliAvail = true else hvliAvail = false end
    if random(1,100) <= 52 then tradeLuxury = true else tradeLuxury = false end
    if random(1,100) <= 42 then tradeFood = true else tradeFood = false end
    if random(1,100) <= 32 then tradeMedicine = true else tradeMedicine = false end
    stationVilairre.comms_data = {
    	friendlyness = 45,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,				HVLI = hvliAvail,		Mine = false,		Nuke = nukeAvail,			EMP = empAvail},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	true,
        hack_repair =			true,
        scan_repair =			random(1,100) < 83,
        tube_slow_down_repair = random(1,100)<30,
        fast_probes = {name = "Screamer", cost = math.random(8,15), quantity = math.random(1,5), speed = 4000},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	sensor = 		{quantity = math.random(5,9),	cost = math.random(50,80)},
        			communication = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			transporter = 	{quantity = math.random(5,9),	cost = math.random(50,80)},},
        trade = {	food = tradeFood, medicine = tradeMedicine, luxury = tradeLuxury },
        buy = {		optic = math.random(90,120),
        			dilithium = math.random(105,130)	},
        public_relations = true,
        general_information = "We handle planetary and station communications as well as administering the sale and transfer of minerals to and from planetary industries and manufacturing",
    	history = "This staiton was established when the Arlenians first arrived in this system. It was used as a convenient point to interact with Wilaux and gradually started handling administration as well as inter-station communication",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationVilairre:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationVilairre:setRepairDocked(false) end
	if random(1,100) <= 12 then stationVilairre:setSharesEnergyWithDocked(false) end
	station_names[stationVilairre:getCallSign()] = {stationVilairre:getSectorName(), stationVilairre}
	table.insert(stations,stationVilairre)
	return stations
end
function createLafrinaPlanets()
	local planet_list = {}
	balinor_x = -343904
	balinor_y = 295274
    planet_balinor = Planet():setPosition(balinor_x,balinor_y):setPlanetRadius(1200):setDistanceFromMovementPlane(-2400):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(0.8,1.0,0.8):setCallSign("Balinor")
	table.insert(planet_list,planet_balinor)
	wilaux_primus_angle = random(0,360)
	wilaux_primus_distance = distance(-343904,295274,-388328,337618)
	local wilaux_x, wilaux_y = vectorFromAngle(wilaux_primus_angle,wilaux_primus_distance)
	planet_wilaux = Planet():setPosition(balinor_x+wilaux_x,balinor_y+wilaux_y):setPlanetRadius(4100):setDistanceFromMovementPlane(-2000)
	planet_wilaux:setPlanetSurfaceTexture("planets/planet-1.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.1,0.2,0.3)
	planet_wilaux:setCallSign("Wilaux"):setOrbit(planet_balinor,2500)
	table.insert(planet_list,planet_wilaux)
    local lafrina_black_hole = BlackHole():setPosition(-262247, 289530)
	table.insert(planet_list,lafrina_black_hole)
	return planet_list
end
function createLafrinaNebulae()
	local nebula_list = {}
	table.insert(nebula_list,Nebula():setPosition(-352332, 382697))
	table.insert(nebula_list,Nebula():setPosition(-369940, 329138))
	table.insert(nebula_list,Nebula():setPosition(-332523, 255219))
	table.insert(nebula_list,Nebula():setPosition(-325369, 259438))
	table.insert(nebula_list,Nebula():setPosition(-337292, 261089))
	table.insert(nebula_list,Nebula():setPosition(-425150, 272094))
	table.insert(nebula_list,Nebula():setPosition(-433221, 267875))
	return nebula_list
end
function createLafrinaAsteroids()
	local asteroid_list = {}
	local asteroid_data = {
    	{-445984, 278639, 187},
    	{-444282, 277127, 241},
    	{-446362, 272779, 233},
    	{-447685, 278828, 133},
    	{-449386, 279206, 249},
    	{-447118, 280151, 192},
    	{-445227, 280529, 204},
    	{-446551, 284877, 136},
    	{-443526, 279962, 168},
    	{-435209, 311909, 234},
    	{-437666, 310397, 149},
    	{-445795, 313800, 227},
    	{-448252, 290926, 197},
    	{-439178, 294518, 280},
    	{-449575, 292439, 251},
    	{-449953, 290926, 246},
    	{-446551, 293195, 255},
    	{-445606, 289036, 174},
    	{-453545, 295841, 192},
    	{-452789, 287524, 78},
    	{-455624, 310775, 182},
    	{-453167, 306616, 177},
    	{-450710, 299055, 196},
    	{-444660, 299433, 241},
    	{-428025, 274102, 217},
    	{-423677, 282420, 211},
    	{-431428, 292060, 212},
    	{-427647, 296975, 253},
    	{-428592, 292250, 210},
    	{-411201, 299244, 168},
    	{-413280, 299244, 271},
    	{-415738, 302836, 117},
    	{-419519, 298488, 154},
    	{-424434, 312098, 163},
    	{-420653, 308129, 202},
    	{-425190, 309263, 149},
    	{-426324, 298866, 209},
    	{-425757, 297164, 209},
    	{-420842, 303970, 161},
    	{-424244, 305293, 250},
    	{-423866, 296408, 273},
    	{-440312, 304726, 232},
    	{-429159, 304726, 229},
    	{-433696, 296219, 259},
    	{-422921, 295652, 244},
    	{-425001, 294896, 247},
    	{-430861, 297164, 248},
    	{-429159, 297921, 220},
    	{-440880, 270888, 243},
    	{-436721, 269943, 206},
    	{-452978, 261437, 157},
    	{-445606, 262382, 163},
    	{-439745, 260680, 161},
    	{-431617, 274480, 288},
    	{-430483, 260680, 221},
    	{-435587, 254064, 200},
    	{-440691, 286200, 252},
    	{-431995, 284121, 121},
    	{-419140, 275803, 201},
    	{-434830, 277694, 173},
    	{-410256, 287902, 240},
    	{-414037, 288469, 103},
    	{-412524, 291304, 167},
    	{-416305, 285822, 137},
    	{-419140, 289414, 186},
    	{-415549, 295841, 206},
    	{-419519, 293951, 158},
    	{-414982, 293951, 212},
    	{-415360, 291493, 300},
    	{-412335, 295841, 219},
    	{-411012, 293006, 216},
    	{-409878, 305104, 206},
    	{-375473, 329112, 231},
    	{-381900, 330813, 243},
    	{-384358, 309452, 225},
    	{-387950, 310964, 213},
    	{-383980, 312854, 201},
    	{-374339, 325898, 183},
    	{-362808, 364083, 241},
    	{-363186, 362193, 142},
    	{-365643, 362760, 197},
    	{-367534, 361248, 246},
    	{-364887, 346314, 301},
    	{-367345, 343478, 89},
    	{-390974, 308696, 205},
    	{-393432, 307183, 187},
    	{-361106, 380907, 197},
    	{-359594, 382609, 136},
    	{-360728, 384310, 189},
    	{-362619, 376370, 182},
    	{-361296, 377883, 223},
    	{-357515, 381664, 258},
    	{-358460, 379962, 293},
    	{-354490, 381285, 210},
    	{-358649, 377883, 243},
    	{-363186, 373913, 248},
    	{-357704, 374669, 176},
    	{-361296, 374291, 163},
    	{-360350, 371456, 227},
    	{-363942, 371267, 260},
    	{-358649, 368998, 238},
    	{-362052, 369376, 135},
    	{-363753, 366352, 166},
    	{-390029, 314745, 239},
    	{-387950, 316635, 194},
    	{-391730, 311531, 166},
    	{-370936, 339320, 133},
    	{-368479, 340454, 165},
    	{-369235, 342344, 280},
    	{-374528, 336862, 297},
    	{-384547, 317013, 163},
    	{-384358, 319093, 188},
    	{-385681, 317391, 230},
    	{-387950, 314556, 245},
    	{-383980, 317769, 162},
    	{-382089, 320227, 167},
    	{-382846, 324197, 158},
    	{-383980, 321361, 291},
    	{-373394, 334215, 182},
    	{-367912, 335161, 174},
    	{-379443, 318715, 309},
    	{-367723, 337240, 168},
    	{-371503, 333459, 137},
    	{-372827, 329868, 228},
    	{-370369, 337240, 127},
    	{-373394, 332892, 178},
    	{-377174, 328544, 195},
    	{-376229, 327410, 206},
    	{-376607, 333270, 274},
    	{-376418, 331191, 268},
    	{-376985, 323251, 178},
    	{-380577, 323062, 279},
    	{-377742, 325331, 177},
    	{-379821, 326654, 165},
--second swath    	
    	{-327227, 257143, 277},
    	{-326976, 260568, 233},
    	{-323495, 270225, 267},
    	{-324251, 268523, 181},
    	{-333874, 284725, 312},
    	{-332698, 286986, 204},
    	{-326189, 281922, 210},
    	{-329986, 282646, 245},
    	{-328992, 279662, 207},
    	{-331342, 281922, 261},
    	{-331071, 283098, 273},
    	{-332066, 282917, 296},
    	{-291548, 228448, 303},
    	{-288145, 225612, 196},
    	{-300622, 238089, 357},
    	{-297597, 234497, 333},
    	{-294951, 236387, 275},
    	{-292304, 232228, 212},
    	{-295140, 229393, 279},
    	{-329896, 275593, 274},
    	{-326731, 274960, 372},
    	{-338395, 294761, 283},
    	{-338666, 295756, 390},
    	{-336677, 293676, 245},
    	{-325007, 271548, 328},
    	{-323684, 265121, 322},
    	{-321227, 268145, 246},
    	{-316690, 265877, 249},
    	{-312720, 263797, 119},
    	{-294453, 229753, 338},
    	{-293730, 229029, 210},
    	{-293910, 231199, 264},
    	{-289480, 222519, 248},
    	{-294001, 224056, 412},
    	{-285321, 216823, 298},
    	{-295086, 220892, 301},
    	{-298574, 210530, 250},
    	{-302667, 210447, 276},
    	{-299075, 216879, 384},
    	{-296261, 221706, 199},
    	{-297572, 218717, 285},
    	{-297708, 221887, 259},
    	{-296080, 223243, 294},
    	{-297437, 225594, 271},
    	{-325194, 267004, 219},
    	{-325465, 269083, 318},
    	{-336750, 298995, 219},
    	{-317257, 262474, 345},
    	{-312531, 258882, 175},
    	{-315178, 257181, 282},
    	{-313665, 253968, 427},
    	{-309695, 254346, 319},
    	{-298920, 241113, 282},
    	{-296463, 241302, 318},
	}
    for i=1,#asteroid_data do
    	local static_asteroid = Asteroid():setPosition(asteroid_data[i][1],asteroid_data[i][2]):setSize(asteroid_data[i][3])
    	table.insert(asteroid_list,static_asteroid)
    end
    return asteroid_list
end
function removeLafrinaColor()
	lafrina_color = false
	if lafrina_planets ~= nil then
		for _, lp in pairs(lafrina_planets) do
			lp:destroy()
		end
	end
	lafrina_planets = nil
	
	if lafrina_nebulae ~= nil then
		for _, ln in pairs(lafrina_nebulae) do
			ln:destroy()
		end
	end
	lafrina_nebulae = nil
	
	if lafrina_asteroids ~= nil then
		for _, la in pairs(lafrina_asteroids) do
			la:destroy()
		end
	end
	lafrina_asteroids = nil
	
	if lafrina_stations ~= nil then
		for _, ls in pairs(lafrina_stations) do
			if not ls.skeleton_station then
				ls:destroy()
			end
		end
	end
	lafrina_stations = nil
	
	if lafrina_defense_platforms ~= nil then
		for _, ld in pairs(lafrina_defense_platforms) do
			ld:destroy()
		end
	end
	lafrina_defense_platforms = nil
end
--	Teresh area
function tereshSector()
	teresh_color = true
	teresh_defense_platforms = {}
	teresh_mines = {}
	teresh_planets = createTereshPlanets()
	teresh_asteroids = createTereshAsteroids()
	teresh_nebulae = createTereshNebulae()
	teresh_stations = createTereshStations()
	regionStations = teresh_stations
	if stationTeresh ~= nil then
		table.insert(regionStations,stationTeresh)
	end
	local t_x, t_y = stationTeresh:getPosition()
	local start_angle = 34
	for i=1,5 do
		local dpx, dpy = vectorFromAngle(start_angle,8000)
--		if i == 5 then
--			tdp5Zone = squareZone(t_x+dpx,t_y+dpy,"Tdp5")
--			tdp5Zone:setColor(0,128,0):setLabel("5")
--		elseif i == 3 then
--			tdp3Zone = squareZone(t_x+dpx,t_y+dpy,"Tdp3")
--			tdp3Zone:setColor(0,128,0):setLabel("3")
--		elseif i == 4 then
--			tdp4Zone = squareZone(t_x+dpx,t_y+dpy,"Tdp4")
--			tdp4Zone:setColor(0,128,0):setLabel("4")
--		else		
			local dp = CpuShip():setTemplate("Defense platform"):setFaction("Human Navy"):setPosition(t_x+dpx,t_y+dpy):setScannedByFaction("Human Navy",true):setCallSign(string.format("TDP%i",i)):setDescription(string.format("Teresh defense platform %i",i)):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
			setBeamColor(dp)
			station_names[dp:getCallSign()] = {dp:getSectorName(), dp}
			dp:setLongRangeRadarRange(20000)
			table.insert(teresh_defense_platforms,dp)
--		end
		for j=1,5 do
			dpx, dpy = vectorFromAngle(start_angle+17+j*6,8000)
			local dm = Mine():setPosition(t_x+dpx,t_y+dpy)
			table.insert(teresh_mines,dm)
		end
		start_angle = start_angle + 72
	end
	return {destroy=removeTereshColor}
end
function createTereshPlanets()
	local planet_list = {}
	local arcturus_x = 750692
	local arcturus_y = 101512
	planet_arcturus_star = Planet():setPosition(arcturus_x, arcturus_y):setPlanetRadius(1200):setDistanceFromMovementPlane(-2400):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(1,.3,.3):setCallSign("Arcturus")
	table.insert(planet_list,planet_arcturus_star)
	local ursid_x, ursid_y = vectorFromAngle(random(0,360),distance(arcturus_x, arcturus_y, 830087, 118147))
	planet_ursid = Planet():setPosition(arcturus_x + ursid_x, arcturus_y + ursid_y):setPlanetRadius(3800):setDistanceFromMovementPlane(-1900):setPlanetCloudTexture("planets/clouds-3.png")
	planet_ursid:setPlanetSurfaceTexture("planets/planet-5.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.1,0.2,0.3)
	planet_ursid:setCallSign("Ursid"):setOrbit(planet_arcturus_star,3500)
	table.insert(planet_list,planet_ursid)
	return planet_list
end
function createTereshAsteroids()
	local asteroid_list = {}
	--	Northwest
	table.insert(asteroid_list,Asteroid():setPosition(732923, 89188):setSize(331))
	table.insert(asteroid_list,Asteroid():setPosition(716288, 77279):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(711751, 64424):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(717233, 63668):setSize(90))
	table.insert(asteroid_list,Asteroid():setPosition(740296, 86164):setSize(240))
	table.insert(asteroid_list,Asteroid():setPosition(737649, 79547):setSize(865))
	table.insert(asteroid_list,Asteroid():setPosition(730655, 81249):setSize(654))
	table.insert(asteroid_list,Asteroid():setPosition(723850, 84084):setSize(466))
	table.insert(asteroid_list,Asteroid():setPosition(721770, 68583):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(723282, 73876):setSize(266))
	table.insert(asteroid_list,Asteroid():setPosition(738405, 72742):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(743698, 73120):setSize(119))
	table.insert(asteroid_list,Asteroid():setPosition(711940, 53082):setSize(42))
	table.insert(asteroid_list,Asteroid():setPosition(714776, 49869):setSize(25))
	table.insert(asteroid_list,Asteroid():setPosition(727630, 54027):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(724984, 50058):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(731222, 49680):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(737271, 63290):setSize(110))
	table.insert(asteroid_list,Asteroid():setPosition(727630, 67449):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(733490, 75199):setSize(345))
	table.insert(asteroid_list,Asteroid():setPosition(735759, 67827):setSize(110))
	table.insert(asteroid_list,Asteroid():setPosition(724039, 62345):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(730466, 62912):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(732167, 54973):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(734625, 57997):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(722904, 51948):setSize(32))
	table.insert(asteroid_list,Asteroid():setPosition(714587, 60833):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(739918, 61211):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(733679, 61967):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(728576, 59699):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(729521, 56863):setSize(130))
	table.insert(asteroid_list,Asteroid():setPosition(726118, 61211):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(724984, 58942):setSize(94))
	table.insert(asteroid_list,Asteroid():setPosition(720258, 60833):setSize(114))
	table.insert(asteroid_list,Asteroid():setPosition(712507, 55918):setSize(55))
	table.insert(asteroid_list,Asteroid():setPosition(718368, 57808):setSize(86))
	table.insert(asteroid_list,Asteroid():setPosition(724228, 54595):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(715532, 53649):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(718368, 52515):setSize(121))
	table.insert(asteroid_list,Asteroid():setPosition(721581, 56296):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(709861, 59320):setSize(68))
	table.insert(asteroid_list,Asteroid():setPosition(706080, 60266):setSize(123))
	--	Northeast
    table.insert(asteroid_list,Asteroid():setPosition(813546, 34499):setSize(16))
    table.insert(asteroid_list,Asteroid():setPosition(815815, 36389):setSize(71))
    table.insert(asteroid_list,Asteroid():setPosition(822227, 38948):setSize(39))
    table.insert(asteroid_list,Asteroid():setPosition(822447, 35971):setSize(52))
    table.insert(asteroid_list,Asteroid():setPosition(827519, 35530):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(824888, 31285):setSize(63))
    table.insert(asteroid_list,Asteroid():setPosition(825455, 27694):setSize(127))
    table.insert(asteroid_list,Asteroid():setPosition(815247, 31096):setSize(63))
    table.insert(asteroid_list,Asteroid():setPosition(818839, 31664):setSize(18))
    table.insert(asteroid_list,Asteroid():setPosition(821014, 29357):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(826590, 49055):setSize(23))
    table.insert(asteroid_list,Asteroid():setPosition(829062, 43248):setSize(37))
    table.insert(asteroid_list,Asteroid():setPosition(834244, 42917):setSize(117))
    table.insert(asteroid_list,Asteroid():setPosition(830165, 39940):setSize(342))
    table.insert(asteroid_list,Asteroid():setPosition(831126, 28450):setSize(146))
    table.insert(asteroid_list,Asteroid():setPosition(834529, 30529):setSize(123))
    table.insert(asteroid_list,Asteroid():setPosition(834529, 26181):setSize(342))
    table.insert(asteroid_list,Asteroid():setPosition(813848, 27152):setSize(58))
    table.insert(asteroid_list,Asteroid():setPosition(833141, 36633):setSize(81))
    table.insert(asteroid_list,Asteroid():setPosition(836228, 37294):setSize(69))
    table.insert(asteroid_list,Asteroid():setPosition(833206, 33176):setSize(364))
    table.insert(asteroid_list,Asteroid():setPosition(825975, 38617):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(850119, 33546):setSize(45))
    table.insert(asteroid_list,Asteroid():setPosition(846591, 31231):setSize(218))
    table.insert(asteroid_list,Asteroid():setPosition(845268, 19765):setSize(97))
    table.insert(asteroid_list,Asteroid():setPosition(850781, 25167):setSize(425))
    table.insert(asteroid_list,Asteroid():setPosition(857616, 30128):setSize(169))
    table.insert(asteroid_list,Asteroid():setPosition(855521, 34759):setSize(890))
    table.insert(asteroid_list,Asteroid():setPosition(866436, 18773):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(858057, 23073):setSize(398))
    table.insert(asteroid_list,Asteroid():setPosition(857726, 15135):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(866215, 25277):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(865002, 29908):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(858277, 38617):setSize(201))
    table.insert(asteroid_list,Asteroid():setPosition(864782, 35641):setSize(657))
    table.insert(asteroid_list,Asteroid():setPosition(854419, 30459):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(872058, 34869):setSize(284))
    table.insert(asteroid_list,Asteroid():setPosition(869853, 46775):setSize(193))
    table.insert(asteroid_list,Asteroid():setPosition(874153, 41153):setSize(110))
    table.insert(asteroid_list,Asteroid():setPosition(855512, 39792):setSize(133))
    table.insert(asteroid_list,Asteroid():setPosition(854088, 47657):setSize(124))
    table.insert(asteroid_list,Asteroid():setPosition(861585, 45122):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(838121, 33932):setSize(76))
    table.insert(asteroid_list,Asteroid():setPosition(843036, 32042):setSize(404))
    table.insert(asteroid_list,Asteroid():setPosition(844166, 44240):setSize(61))
    table.insert(asteroid_list,Asteroid():setPosition(843981, 38469):setSize(146))
    table.insert(asteroid_list,Asteroid():setPosition(840748, 41043):setSize(127))
    table.insert(asteroid_list,Asteroid():setPosition(851993, 36082):setSize(222))
    table.insert(asteroid_list,Asteroid():setPosition(849085, 37902):setSize(111))
    table.insert(asteroid_list,Asteroid():setPosition(847142, 35641):setSize(257))
    table.insert(asteroid_list,Asteroid():setPosition(852109, 41871):setSize(252))
    table.insert(asteroid_list,Asteroid():setPosition(843036, 35444):setSize(128))
    table.insert(asteroid_list,Asteroid():setPosition(843945, 27262):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(818920, 26270):setSize(115))
    table.insert(asteroid_list,Asteroid():setPosition(839066, 30340):setSize(116))
    --	East
    table.insert(asteroid_list,Asteroid():setPosition(915532, 112440):setSize(114))
    table.insert(asteroid_list,Asteroid():setPosition(919124, 102799):setSize(153))
    table.insert(asteroid_list,Asteroid():setPosition(904946, 104689):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(908727, 117544):setSize(172))
    table.insert(asteroid_list,Asteroid():setPosition(896061, 108281):setSize(286))
    table.insert(asteroid_list,Asteroid():setPosition(888500, 105823):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(902299, 113385):setSize(124))
    table.insert(asteroid_list,Asteroid():setPosition(891524, 95804):setSize(299))
    table.insert(asteroid_list,Asteroid():setPosition(897952, 81249):setSize(48))
    table.insert(asteroid_list,Asteroid():setPosition(900409, 91079):setSize(118))
    table.insert(asteroid_list,Asteroid():setPosition(907214, 94481):setSize(645))
    table.insert(asteroid_list,Asteroid():setPosition(924984, 89377):setSize(164))
    table.insert(asteroid_list,Asteroid():setPosition(916099, 94481):setSize(120))
    table.insert(asteroid_list,Asteroid():setPosition(887177, 123593):setSize(93))
    table.insert(asteroid_list,Asteroid():setPosition(886231, 115464):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(898519, 121702):setSize(128))
    table.insert(asteroid_list,Asteroid():setPosition(885286, 133234):setSize(74))
    table.insert(asteroid_list,Asteroid():setPosition(883396, 128697):setSize(153))
    table.insert(asteroid_list,Asteroid():setPosition(860712, 136825):setSize(48))
    table.insert(asteroid_list,Asteroid():setPosition(843887, 140417):setSize(20))
    table.insert(asteroid_list,Asteroid():setPosition(832545, 141551):setSize(182))
    table.insert(asteroid_list,Asteroid():setPosition(873755, 138148):setSize(23))
--	table.insert(asteroid_list,Mine():setPosition(903722, 133420))
--	table.insert(asteroid_list,Mine():setPosition(902383, 133141))
--	table.insert(asteroid_list,Mine():setPosition(901178, 133789))
--	table.insert(asteroid_list,Mine():setPosition(900671, 135059))
--	table.insert(asteroid_list,Mine():setPosition(901099, 136358))
--	table.insert(asteroid_list,Mine():setPosition(902263, 137078))
--	table.insert(asteroid_list,Mine():setPosition(903617, 136882))
--	table.insert(asteroid_list,Mine():setPosition(904528, 135861))
--	table.insert(asteroid_list,Mine():setPosition(904569, 134494))
--	table.insert(asteroid_list,WarpJammer():setFaction("Human Navy"):setPosition(902678, 135124):setRange(25000):setCallSign("BDWJ"))
    table.insert(asteroid_list,BlackHole():setPosition(917143, 136163))
	table.insert(asteroid_list,BlackHole():setPosition(848929, 120250))
    --north north
    table.insert(asteroid_list,Asteroid():setPosition(891278, 15517):setSize(114))
    table.insert(asteroid_list,Asteroid():setPosition(889069, 16718):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(890949, 18180):setSize(124))
    table.insert(asteroid_list,Asteroid():setPosition(889606, -201):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(880343, -1903):setSize(31))
    table.insert(asteroid_list,Asteroid():setPosition(887148, -2470):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(884313, 2634):setSize(383))
    table.insert(asteroid_list,Asteroid():setPosition(889606, 9061):setSize(111))
    table.insert(asteroid_list,Asteroid():setPosition(886392, 10196):setSize(110))
    table.insert(asteroid_list,Asteroid():setPosition(883746, 11330):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(881666, 6415):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(885447, 6793):setSize(115))
    table.insert(asteroid_list,Asteroid():setPosition(889039, 3390):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(883746, -8330):setSize(123))
    table.insert(asteroid_list,Asteroid():setPosition(882611, -4171):setSize(58))
    table.insert(asteroid_list,Asteroid():setPosition(880154, -5305):setSize(85))
    table.insert(asteroid_list,Asteroid():setPosition(865487, -7931):setSize(183))
    table.insert(asteroid_list,Asteroid():setPosition(869757, -9464):setSize(117))
    table.insert(asteroid_list,Asteroid():setPosition(864086, -19294):setSize(130))
    table.insert(asteroid_list,Asteroid():setPosition(867678, -18538):setSize(110))
    table.insert(asteroid_list,Asteroid():setPosition(870702, -18727):setSize(127))
    table.insert(asteroid_list,Asteroid():setPosition(860554, -20763):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(868812, -21940):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(870324, -14190):setSize(189))
    table.insert(asteroid_list,Asteroid():setPosition(870702, -6250):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(865409, -13623):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(863708, -11543):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(865494, -24206):setSize(127))
    table.insert(asteroid_list,Asteroid():setPosition(872798, -23573):setSize(115))
    table.insert(asteroid_list,Asteroid():setPosition(869001, -26477):setSize(125))
    table.insert(asteroid_list,Asteroid():setPosition(873160, -28368):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(879587, -23831):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(864304, -26769):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(875428, 1311):setSize(313))
    table.insert(asteroid_list,Asteroid():setPosition(875050, -3226):setSize(209))
    table.insert(asteroid_list,Asteroid():setPosition(878264, -9086):setSize(114))
    table.insert(asteroid_list,Asteroid():setPosition(874672, -7763):setSize(111))
    table.insert(asteroid_list,Asteroid():setPosition(876751, -14757):setSize(111))
    table.insert(asteroid_list,Asteroid():setPosition(879209, -15135):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(879209, -19672):setSize(120))
    table.insert(asteroid_list,Asteroid():setPosition(875050, -21562):setSize(118))
    table.insert(asteroid_list,Asteroid():setPosition(873727, -16269):setSize(130))
    table.insert(asteroid_list,Asteroid():setPosition(875050, -11165):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(877886, 3579):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(872214, -31770):setSize(56))
    table.insert(asteroid_list,Asteroid():setPosition(875050, -32337):setSize(21))
    table.insert(asteroid_list,Asteroid():setPosition(867678, -31392):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(875806, -37630):setSize(79))
    table.insert(asteroid_list,Asteroid():setPosition(862005, -33616):setSize(212))
    table.insert(asteroid_list,Asteroid():setPosition(878264, -28368):setSize(114))
    table.insert(asteroid_list,Asteroid():setPosition(876184, -5683):setSize(124))
    table.insert(asteroid_list,Asteroid():setPosition(856325, -19851):setSize(484))
    table.insert(asteroid_list,Asteroid():setPosition(858606, -23997):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(856616, -26982):setSize(382))
    table.insert(asteroid_list,Asteroid():setPosition(852884, -21675):setSize(451))
    table.insert(asteroid_list,Asteroid():setPosition(853423, -25780):setSize(110))
    table.insert(asteroid_list,Asteroid():setPosition(849899, -30175):setSize(125))
    table.insert(asteroid_list,Asteroid():setPosition(856284, -29345):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(858896, -29594):setSize(322))
    table.insert(asteroid_list,Asteroid():setPosition(851060, -28433):setSize(119))
	return asteroid_list
end
function createTereshNebulae()
	local nebula_list = {}
	--	Kraylor dragged black hole and nebula close to Teresh 8Jul2023
	table.insert(nebula_list,BlackHole():setPosition(812580, 86993))
--	table.insert(nebula_list,Nebula():setPosition(789277, 103983))
--	table.insert(nebula_list,Nebula():setPosition(792520, 112381))
--	table.insert(nebula_list,Nebula():setPosition(801334, 115541))
	--	Northwest
    table.insert(nebula_list,Nebula():setPosition(707214, 27941))
    table.insert(nebula_list,Nebula():setPosition(704379, 42874))
    table.insert(nebula_list,Nebula():setPosition(694738, 39661))
    table.insert(nebula_list,Nebula():setPosition(700031, 32666))
    table.insert(nebula_list,Nebula():setPosition(690201, 52137))
    table.insert(nebula_list,Nebula():setPosition(697763, 48167))
    table.insert(nebula_list,Nebula():setPosition(709483, 48734))
    table.insert(nebula_list,Nebula():setPosition(723661, 56485))
    table.insert(nebula_list,Nebula():setPosition(718178, 52515))
    --	Northeast
    table.insert(nebula_list,Nebula():setPosition(789889, 37484))
    table.insert(nebula_list,Nebula():setPosition(793717, 46977))
    table.insert(nebula_list,Nebula():setPosition(810254, 38250))
    table.insert(nebula_list,Nebula():setPosition(802445, 42843))
    table.insert(nebula_list,Nebula():setPosition(799535, 35953))
    table.insert(nebula_list,Nebula():setPosition(825259, 41771))
    table.insert(nebula_list,Nebula():setPosition(818522, 38097))
    table.insert(nebula_list,Nebula():setPosition(817910, 47437))
    table.insert(nebula_list,Nebula():setPosition(809029, 48509))
    table.insert(nebula_list,Nebula():setPosition(815000, 55705))
    --	East
	table.insert(nebula_list,Nebula():setPosition(887177, 116787))
    table.insert(nebula_list,Nebula():setPosition(894738, 122648))
    table.insert(nebula_list,Nebula():setPosition(884719, 126617))
    table.insert(nebula_list,Nebula():setPosition(852583, 146655))
    table.insert(nebula_list,Nebula():setPosition(824228, 139472))
    table.insert(nebula_list,Nebula():setPosition(845400, 140984))
    --north north
    table.insert(nebula_list,Nebula():setPosition(888661, 17001))
    table.insert(nebula_list,Nebula():setPosition(884313, 12275))
    table.insert(nebula_list,Nebula():setPosition(884313, 5092))
    table.insert(nebula_list,Nebula():setPosition(869001, -7007))
    table.insert(nebula_list,Nebula():setPosition(871458, -957))
    table.insert(nebula_list,Nebula():setPosition(863519, -10787))
    table.insert(nebula_list,Nebula():setPosition(875995, 5092))
    table.insert(nebula_list,Nebula():setPosition(851988, -9842))
    table.insert(nebula_list,Nebula():setPosition(845371, -12678))
    table.insert(nebula_list,Nebula():setPosition(856146, -12867))
    --towed add-ons
	table.insert(nebula_list,Nebula():setPosition(787568, 51557))
	table.insert(nebula_list,Nebula():setPosition(789826, 148829))
	table.insert(nebula_list,Nebula():setPosition(777844, 153810))
    return nebula_list
end
function createTereshStations()
	local stations = {}
	local nukeAvail = true
	local empAvail = true
	local mineAvail = true
	local homeAvail = true
	local hvliAvail = true
	local tradeFood = true
	local tradeMedicine = true
	local tradeLuxury = true
	--	Bastion
	local bastionZone = squareZone(891524, 130398, "Bastion 3 L49")
	bastionZone:setColor(0,128,0):setLabel("B")
	--[[
	stationBastion = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Bastion 3"):setPosition(891524, 130398):setDescription("Research and Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationBastion:setShortRangeRadarRange(15000)
    stationBastion.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
       	},
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 63,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        sensor_boost_probes = {name = "Spectacle", cost = math.random(16,41), quantity = math.random(1,3), speed = 1000, boost = 10, range = 30},
        hack_repair =			random(1,100)<30,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	dilithium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			filament =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We research the interactions between nebulae and black holes. We mine the asteroids to help support the research.",
    	history = "We started as a dedicated research station. We added mining to supplement the waning academic support. The mineral deposits in the asteroids were rich enough to let us thumb our noses at those academics that thought our research was trivial. Unfortunately, the mineral deposits were valuable enough that we installed a warp jammer to help deter casual piracy (even from nominally friendly transports). The warp jammer was destroyed so many times, we had mines installed around it as yet another deterrent. We renamed our station from Research-91 to Bastion to represent the last bastion of truly independent research, free from government influence",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationBastion:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationBastion:setRepairDocked(false) end
	if random(1,100) <= 12 then stationBastion:setSharesEnergyWithDocked(false) end
	station_names[stationBastion:getCallSign()] = {stationBastion:getSectorName(), stationBastion}
	table.insert(stations,stationBastion)
	--]]
	--	Breadboard
	stationBreadboard = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Breadboard"):setPosition(864105, -24962):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationBreadboard.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 63,
        hack_repair =			random(1,100)<30,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			filament =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine the asteroids and nebulae",
    	history = "We needed the materials for our filament manufacturing business. Now we sell the excess to help pay maintenance expenses",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationBreadboard:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationBreadboard:setRepairDocked(false) end
	if random(1,100) <= 12 then stationBreadboard:setSharesEnergyWithDocked(false) end
	local ship = CpuShip():setFaction("Ghosts"):setTemplate("Defense platform"):setCallSign("BDP"):setPosition(864907, -25468):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationBreadboard:getCallSign()] = {stationBreadboard:getSectorName(), stationBreadboard}
	table.insert(stations,stationBreadboard)
	--	Chektok
	stationChektok = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Chektok"):setPosition(864609, -13224):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationChektok.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100) <= 80,	Mine = true,			Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        probe_launch_repair =	random(1,100) <= 63,
        self_destruct_repair =	random(1,100) <= 34,
        tube_slow_down_repair = random(1,100) <= 41,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "The queen told us to build it",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationChektok:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationChektok:setRepairDocked(false) end
	if random(1,100) <= 12 then stationChektok:setSharesEnergyWithDocked(false) end
	ship = CpuShip():setFaction("Ktlitans"):setTemplate("Defense platform"):setCallSign("CDP"):setPosition(864039, -12488):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationChektok:getCallSign()] = {stationChektok:getSectorName(), stationChektok}
	table.insert(stations,stationChektok)
	--	Delectobev
	stationDelectobev = SpaceStation():setTemplate("Small Station"):setFaction("Exuari"):setCallSign("Delectobev"):setPosition(850126, -29300):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationDelectobev.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100) <= 80,	Mine = true,			Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        probe_launch_repair =	random(1,100) <= 63,
        self_destruct_repair =	random(1,100) <= 34,
        tube_slow_down_repair = random(1,100) <= 41,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "Our station history is classified",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationDelectobev:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationDelectobev:setRepairDocked(false) end
	if random(1,100) <= 12 then stationDelectobev:setSharesEnergyWithDocked(false) end
	ship = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign("DDP"):setPosition(849857, -28475):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationDelectobev:getCallSign()] = {stationDelectobev:getSectorName(), stationDelectobev}
	table.insert(stations,stationDelectobev)
	--	Dristan
--	local dristanZone = squareZone(723186, 65027, "Dristan 2 I41")
--	dristanZone:setColor(51,153,255):setLabel("D")
    stationDristan = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Dristan 2"):setPosition(723186, 65027):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationDristan.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100) <= 80,	Mine = true,			Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        hack_repair =			true,
        scan_repair =			true,
        probe_launch_repair =	random(1,100) <= 63,
        self_destruct_repair =	random(1,100) <= 34,
        tube_slow_down_repair = random(1,100) <= 41,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "The miners here hope to strike it rich with valuable ores on the nearby asteroids. Dristan is the name of the first miner to examine these asteroids for possible mineral extraction",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationDristan:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationDristan:setRepairDocked(false) end
	if random(1,100) <= 12 then stationDristan:setSharesEnergyWithDocked(false) end
	station_names[stationDristan:getCallSign()] = {stationDristan:getSectorName(), stationDristan}
	table.insert(stations,stationDristan)
	--	Fractured Shaft
	local fracturedShaftZone = squareZone(888612, -1885, "Fractured Shaft III E49")
	fracturedShaftZone:setColor(0,128,0):setLabel("F")
	--[[
	stationFracturedShaft = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Fractured Shaft III"):setPosition(888612, -1885):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationFracturedShaft.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100) <= 80,	Mine = true,			Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        probe_launch_repair =	random(1,100) <= 63,
        self_destruct_repair =	random(1,100) <= 34,
        tube_slow_down_repair = random(1,100) <= 41,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "The miners here hope to strike it rich with valuable ores on the nearby asteroids. Unfortunately, we have to fight off some of the competing factions sometimes.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationFracturedShaft:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationFracturedShaft:setRepairDocked(false) end
	if random(1,100) <= 12 then stationFracturedShaft:setSharesEnergyWithDocked(false) end
	ship = CpuShip():setFaction("CUF"):setTemplate("Defense platform"):setCallSign("FDP"):setPosition(888032, -1293):orderStandGround():setScanState("simplescan")
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationFracturedShaft:getCallSign()] = {stationFracturedShaft:getSectorName(), stationFracturedShaft}
	table.insert(stations,stationFracturedShaft)
	--]]
	--	Gangrene Cove
    stationGangreneCove = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Gangrene Cove"):setPosition(880837, 5625):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationGangreneCove.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,			HVLI = random(1,100) <= 80,	Mine = true,			Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			random(1,100) <= 63,
        probe_launch_repair =	random(1,100) <= 63,
        self_destruct_repair =	random(1,100) <= 34,
        tube_slow_down_repair = random(1,100) <= 41,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine asteroids for minerals",
    	history = "The founder had to pay off severe medical bills received from treating rotting limbs. The mining revenues helped with that, hence the name",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationGangreneCove:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationGangreneCove:setRepairDocked(false) end
	if random(1,100) <= 12 then stationGangreneCove:setSharesEnergyWithDocked(false) end
	ship = CpuShip():setFaction("USN"):setTemplate("Defense platform"):setCallSign("GDP"):setPosition(881285, 6008):orderStandGround():setScanState("simplescan")
	setBeamColor(ship)
    table.insert(teresh_defense_platforms,ship)
	station_names[stationGangreneCove:getCallSign()] = {stationGangreneCove:getSectorName(), stationGangreneCove}
	table.insert(stations,stationGangreneCove)
	--	Harriet
	local ursid_x, ursid_y = planet_ursid:getPosition()
    stationHarriet = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Harriet"):setPosition(ursid_x+4500, ursid_y):setDescription("Planetary observatory and traffic coordinator"):setCommsScript(""):setCommsFunction(commsStation)
    stationHarriet:setShortRangeRadarRange(8000)
	update_system:addOrbitTargetUpdate(stationHarriet,planet_ursid,4500,23*2*math.pi,0)
    stationHarriet.comms_data = {
    	friendlyness = 76,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = false,				HVLI = false,				Mine = true,			Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        jump_overcharge =		true,
        probe_launch_repair =	true,
        scan_repair =			true,
        self_destruct_repair =	true,
        fast_probes = {name = "Screamer", cost = math.random(8,15), quantity = math.random(1,5), speed = 4000},
        sensor_boost = {value = 5000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We monitor the geology and magnetic fields of Ursid. We also coordinate travel to and from the surface of Ursid",
    	history = "The station name honors the 19th century Australian natural history illustrators, Harriet and Helena Scott",
	}
	if random(1,100) <= 11 then stationHarriet:setRepairDocked(false) end
	if random(1,100) <= 8 then stationHarriet:setSharesEnergyWithDocked(false) end
	station_names[stationHarriet:getCallSign()] = {stationHarriet:getSectorName(), stationHarriet}
	table.insert(stations,stationHarriet)
	--	Helena
    stationHelena = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Helena"):setPosition(ursid_x-4100, ursid_y):setDescription("Atmospheric monitor and communications providor"):setCommsScript(""):setCommsFunction(commsStation)
    stationHelena:setShortRangeRadarRange(8000)
	update_system:addOrbitTargetUpdate(stationHelena,planet_ursid,4500,23*2*math.pi,180)
    stationHelena.comms_data = {
    	friendlyness = 76,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = false,			Nuke = random(1,100) <= 30,	EMP = false},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair =	true,
        fast_probes = {name = "Mark 3", cost = math.random(3,8), quantity = math.random(1,5), speed = 2000},
        sensor_boost_probes = {name = "Scope", cost = math.random(56,82), quantity = math.random(1,3), speed = 1000, boost = 30, range = 50},
        sensor_boost = {value = 10000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel = 		{quantity = math.random(5,9),	cost = math.random(50,80)},
        			circuit =	{quantity = math.random(4,12),	cost = math.random(62,98)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We monitor and predict weather patterns in the Ursid atmosphere. We also provide communication services for Ursid and nearby stations",
    	history = "The station name honors the 19th century Australian natural history illustrators, Helena and Harriet Scott",
	}
	if random(1,100) <= 14 then stationHelena:setRestocksScanProbes(false) end
	if random(1,100) <= 8 then stationHelena:setSharesEnergyWithDocked(false) end
	station_names[stationHelena:getCallSign()] = {stationHelena:getSectorName(), stationHelena}
	table.insert(stations,stationHelena)
	--	Hepdak
	stationHepdak = SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Hepdak"):setPosition(885114, 11022):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationHepdak.comms_data = {
    	friendlyness = 76,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = false,			Nuke = random(1,100) <= 30,	EMP = false},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        shield_overcharge =		true,
        hack_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair =	true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel = 	{quantity = math.random(5,9),	cost = math.random(50,80)},
        			circuit =	{quantity = math.random(4,12),	cost = math.random(62,98)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We suck the asteroids dry of any valuable minerals they might have",
    	history = "Can't let those humans get all the resources here, so we decided to jump into the mining activities.",
	}
	if random(1,100) <= 14 then stationHepdak:setRestocksScanProbes(false) end
	if random(1,100) <= 8 then stationHepdak:setSharesEnergyWithDocked(false) end
	ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("HDP"):setPosition(885828, 10513):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationHepdak:getCallSign()] = {stationHepdak:getSectorName(), stationHepdak}
	table.insert(stations,stationHepdak)
	--	Jaxteb
	stationJaxteb = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Jaxteb"):setPosition(890502, 16403):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationJaxteb.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 85,	Mine = random(1,100) <=66,	Nuke = random(1,100) <= 30,	EMP = math.random(1,100) <= 47},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.4, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.4, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<65},
        },
        hack_repair =			random(1,100)<54,
        combat_maneuver_repair=	random(1,100)<37,
        scan_repair =			true,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	dilithium = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine the asteroids and nebula",
    	history = "Established to get in on the mining action and to annoy my brother who said it wouild never work",
	}
	if random(1,100) <= 14 then stationJaxteb:setRestocksScanProbes(false) end
	ship = CpuShip():setFaction("Independent"):setTemplate("Defense platform"):setCallSign("JDP"):setPosition(889697, 16515):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationJaxteb:getCallSign()] = {stationJaxteb:getSectorName(), stationJaxteb}
	table.insert(stations,stationJaxteb)
	--	Limeya
	local limeyaZone = squareZone(880811, -3551, "Limeya 3 E49")
	limeyaZone:setColor(51,153,255):setLabel("L")
	--[[
	stationLimeya = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Limeya 3"):setPosition(880811, -3551):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationLimeya.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 85,	Mine = random(1,100) <=66,	Nuke = random(1,100) <= 30,	EMP = math.random(1,100) <= 47},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        hack_repair =			random(1,100)<40,
        combat_maneuver_repair=	random(1,100)<40,
        tube_slow_down_repair =	random(1,100)<40,
        probe_launch_repair =	random(1,100)<40,
        scan_repair =			random(1,100)<40,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine the nearby asteroids and nebulae",
    	history = "The station was named after the founder's daughter",
	}
	if random(1,100) <= 14 then stationLimeya:setRestocksScanProbes(false) end
	ship = CpuShip():setFaction("Arlenians"):setTemplate("Defense platform"):setCallSign("LDP"):setPosition(881119, -4285):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationLimeya:getCallSign()] = {stationLimeya:getSectorName(), stationLimeya}
	table.insert(stations,stationLimeya)
	--]]
	--	Proteus	
	stationProteus = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Proteus"):setPosition(873900, -22901):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationProteus.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 85,	Mine = random(1,100) <=66,	Nuke = random(1,100) <= 30,	EMP = math.random(1,100) <= 47},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        hack_repair =			random(1,100)<40,
        combat_maneuver_repair=	random(1,100)<40,
        tube_slow_down_repair =	random(1,100)<40,
        probe_launch_repair =	random(1,100)<40,
        scan_repair =			random(1,100)<40,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine the nearby asteroids and nebulae",
    	history = "'Like the Greek sea god, Proteus, we will rule this space (eventually)' --Lex Smith, station founder",
	}
	if random(1,100) <= 14 then stationProteus:setRestocksScanProbes(false) end
	ship = CpuShip():setFaction("TSN"):setTemplate("Defense platform"):setCallSign("PDP"):setPosition(874483, -22210):orderStandGround():setScanState("simplescan")
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationProteus:getCallSign()] = {stationProteus:getSectorName(), stationProteus}
	table.insert(stations,stationProteus)
	--	Recon 101
	stationRecon101 = SpaceStation():setTemplate("Medium Station"):setFaction("Human Navy"):setCallSign("Recon 101.2"):setPosition(835171, 39698):setDescription("Recon and mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationRecon101:setShortRangeRadarRange(22000)
    stationRecon101.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 85,	Mine = random(1,100) <=66,	Nuke = random(1,100) <= 30,	EMP = math.random(1,100) <= 47},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        hack_repair =			true,
        combat_maneuver_repair=	true,
        tube_slow_down_repair =	true,
        probe_launch_repair =	true,
        scan_repair =			true,
        fast_probes = {name = "Gogo", cost = math.random(6,11), quantity = math.random(1,5), speed = 3000},
        sensor_boost = {value = 10000, cost = 0},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	platinum = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We watch for approaching enemies and mine the nearby asteroids and nebulae",
    	history = "The station was originally a conglomeration of equipment used as a convenient waypoint on the way to scout for enemies. Now it's become a permanent facility and has added mining to it operational mandate.",
	}
	if random(1,100) <= 14 then stationRecon101:setRestocksScanProbes(false) end
--	local rdpZone = squareZone(836906, 38719, "RDP G46")
--	rdpZone:setColor(0,128,0):setLabel("R")	
	ship = CpuShip():setFaction("Human Navy"):setTemplate("Defense platform"):setCallSign("RDP"):setPosition(836906, 38719):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationRecon101:getCallSign()] = {stationRecon101:getSectorName(), stationRecon101}
	table.insert(stations,stationRecon101)
	--	Solder	
	stationSolder = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Solder"):setPosition(870180, -7941):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationSolder.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 85,	Mine = random(1,100) <=66,	Nuke = random(1,100) <= 30,	EMP = math.random(1,100) <= 47},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<85},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        hack_repair =			random(1,100)<50,
        combat_maneuver_repair=	random(1,100)<50,
        tube_slow_down_repair =	random(1,100)<50,
        probe_launch_repair =	random(1,100)<50,
        scan_repair =			random(1,100)<50,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	platinum = 	{quantity = math.random(5,9),	cost = math.random(50,80)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We mine the nearby asteroids and nebulae",
    	history = "This station was started due to accounting and procurement administrative errors.",
	}
	if random(1,100) <= 14 then stationSolder:setRestocksScanProbes(false) end
	ship = CpuShip():setFaction("Ghosts"):setTemplate("Defense platform"):setCallSign("SDP"):setPosition(870206, -7036):orderStandGround()
	setBeamColor(ship)
	table.insert(teresh_defense_platforms,ship)
	station_names[stationSolder:getCallSign()] = {stationSolder:getSectorName(), stationSolder}
	table.insert(stations,stationSolder)
	return stations
end
function removeTereshColor()
	teresh_color = false
	if teresh_planets ~= nil then
		for _, tp in pairs(teresh_planets) do
			tp:destroy()
		end
	end
	teresh_planets = nil
	if teresh_asteroids ~= nil then
		for _, ta in pairs(teresh_asteroids) do
			ta:destroy()
		end
	end
	teresh_asteroids = nil
	if teresh_nebulae ~= nil then
		for _, tn in pairs(teresh_nebulae) do
			tn:destroy()
		end
	end
	teresh_nebulae = nil
	if teresh_defense_platforms ~= nil then
		for _, tdp in pairs(teresh_defense_platforms) do
			tdp:destroy()
		end
	end
	teresh_defense_platforms = nil
	if teresh_mines ~= nil then
		for _, tm in pairs(teresh_mines) do
			tm:destroy()
		end
	end
	teresh_mines = nil
	if teresh_stations ~= nil then
		for _, ts in pairs(teresh_stations) do
			if not ts.skeleton_station then
				ts:destroy()
			end
		end
	end
	teresh_stations = nil
end
--	Magnasol/Bask
function createBaskPlanets()
	local planet_list = {}
	magnasol_x = 1058938
	magnasol_y = 260657
	planet_magnasol_star = Planet():setPosition(magnasol_x, magnasol_y):setPlanetRadius(2700):setDistanceFromMovementPlane(-1200):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(.6,.6,1):setCallSign("Magnasol")
	planet_magnasol_star:setRadarSignatureInfo(.95,.5,.01)
	table.insert(planet_list,planet_magnasol_star)
	local colburn_angle = random(0,360)
	colburn_radius = 1600
	local colburn_x, colburn_y = vectorFromAngle(colburn_angle,distance(magnasol_x, magnasol_y, 992967, 259826))
	planet_colburn = Planet():setPosition(magnasol_x + colburn_x, magnasol_y + colburn_y):setPlanetRadius(colburn_radius):setDistanceFromMovementPlane(-800):setPlanetCloudTexture("planets/clouds-3.png")
	planet_colburn:setPlanetSurfaceTexture("planets/planet-5.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.3,0.1,0.1)
	planet_colburn:setCallSign("Colburn"):setOrbit(planet_magnasol_star,500):setAxialRotationTime(350)
	table.insert(planet_list,planet_colburn)
	local argyle_x, argyle_y = vectorFromAngle((colburn_angle + random(120,240)) % 360,distance(magnasol_x, magnasol_y, 956076, 260158))
	planet_argyle = Planet():setPosition(magnasol_x + argyle_x, magnasol_y + argyle_y):setPlanetRadius(3200):setDistanceFromMovementPlane(-1000):setPlanetCloudTexture("planets/clouds-2.png")
	planet_argyle:setPlanetSurfaceTexture("planets/planet-4.png"):setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(0.6,0.3,0.1)
	planet_argyle:setCallSign("Argyle"):setOrbit(planet_magnasol_star,5000):setAxialRotationTime(700)
	table.insert(planet_list,planet_argyle)
	local morningstar_x, morningstar_y = vectorFromAngle(random(0,360),3500)
	morningstar_radius = 900
	planet_morningstar_moon = Planet():setPosition(magnasol_x + colburn_x + morningstar_x, magnasol_y + colburn_y + morningstar_y):setPlanetRadius(morningstar_radius):setDistanceFromMovementPlane(-700)
	planet_morningstar_moon:setPlanetSurfaceTexture("planets/moon-3.png")
	planet_morningstar_moon:setCallSign("Morningstar"):setOrbit(planet_colburn,20):setAxialRotationTime(200)
	table.insert(planet_list,planet_morningstar_moon)
	updateMagnasol = updateMagnasolCollision
	return planet_list
end
function createBaskAsteroids()
	local asteroid_list = {}
	table.insert(asteroid_list,Asteroid():setPosition(1028067, 262368):setSize(165))
	table.insert(asteroid_list,Asteroid():setPosition(1024901, 257911):setSize(52))
	table.insert(asteroid_list,Asteroid():setPosition(1021865, 257846):setSize(194))
	table.insert(asteroid_list,Asteroid():setPosition(1018570, 256813):setSize(36))
	table.insert(asteroid_list,Asteroid():setPosition(1027421, 260301):setSize(55))
	table.insert(asteroid_list,Asteroid():setPosition(1022382, 263467):setSize(53))
	table.insert(asteroid_list,Asteroid():setPosition(1023028, 267343):setSize(488))
	table.insert(asteroid_list,Asteroid():setPosition(1013532, 263660):setSize(236))
	table.insert(asteroid_list,Asteroid():setPosition(1023868, 261981):setSize(63))
	table.insert(asteroid_list,Asteroid():setPosition(1024966, 265728):setSize(351))
	table.insert(asteroid_list,Asteroid():setPosition(1024126, 269797):setSize(44))
	table.insert(asteroid_list,Asteroid():setPosition(1021671, 270250):setSize(31))
	table.insert(asteroid_list,Asteroid():setPosition(1021607, 260430):setSize(258))
	table.insert(asteroid_list,Asteroid():setPosition(1016438, 260430):setSize(246))
	table.insert(asteroid_list,Asteroid():setPosition(1013144, 261335):setSize(210))
	table.insert(asteroid_list,Asteroid():setPosition(1019346, 262950):setSize(451))
	table.insert(asteroid_list,Asteroid():setPosition(1014824, 258105):setSize(392))
	table.insert(asteroid_list,Asteroid():setPosition(1016116, 262368):setSize(329))
	table.insert(asteroid_list,Asteroid():setPosition(1027227, 266309):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(1024320, 260172):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(1026064, 268053):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(1021542, 265663):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(1018829, 265921):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(1016762, 264694):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(1015792, 255068):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(1019798, 267666):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(1026064, 263014):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(976478, 265984):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(979125, 264661):setSize(110))
	table.insert(asteroid_list,Asteroid():setPosition(972697, 251996):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(991864, 290964):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(990089, 296041):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(982338, 270143):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(979503, 268631):setSize(114))
	table.insert(asteroid_list,Asteroid():setPosition(995760, 300200):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(990225, 292735):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(979503, 273168):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(984229, 283187):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(977045, 273735):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(976478, 270521):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(984229, 234037):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(975155, 242733):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(983094, 236873):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(981015, 235739):setSize(114))
	table.insert(asteroid_list,Asteroid():setPosition(979503, 242544):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(977612, 250673):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(974588, 250105):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(986497, 289236):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(989144, 289425):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(983283, 230824):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(978746, 233281):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(980637, 230068):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(1010883, 256877):setSize(64))
	table.insert(asteroid_list,Asteroid():setPosition(1009526, 258880):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(1012110, 258686):setSize(23))
	table.insert(asteroid_list,Asteroid():setPosition(1010302, 260883):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(1016503, 259074):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(1019152, 259268):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(1026258, 256942):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(1013919, 255844):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(1021477, 255779):setSize(115))
	--	near Kraylor
	table.insert(asteroid_list,Asteroid():setPosition(1090905, 233504):setSize(18))
	table.insert(asteroid_list,Asteroid():setPosition(1091472, 228589):setSize(221))
	table.insert(asteroid_list,Asteroid():setPosition(1094686, 228778):setSize(326))
	table.insert(asteroid_list,Asteroid():setPosition(1073702, 225943):setSize(177))
	table.insert(asteroid_list,Asteroid():setPosition(1070678, 221973):setSize(220))
	table.insert(asteroid_list,Asteroid():setPosition(1084478, 231803):setSize(478))
	table.insert(asteroid_list,Asteroid():setPosition(1077105, 229157):setSize(526))
	table.insert(asteroid_list,Asteroid():setPosition(1079563, 227455):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(1081453, 224053):setSize(179))
	table.insert(asteroid_list,Asteroid():setPosition(1076916, 225376):setSize(214))
	table.insert(asteroid_list,Asteroid():setPosition(1087124, 229724):setSize(387))
	table.insert(asteroid_list,Asteroid():setPosition(1085612, 225565):setSize(260))
	--	near Arlenian
	table.insert(asteroid_list,Asteroid():setPosition(1056068, 295793):setSize(432))
	table.insert(asteroid_list,Asteroid():setPosition(1056635, 288988):setSize(157))
	table.insert(asteroid_list,Asteroid():setPosition(1057392, 291823):setSize(56))
	table.insert(asteroid_list,Asteroid():setPosition(1050801, 293649):setSize(316))
	table.insert(asteroid_list,Asteroid():setPosition(1052132, 289686):setSize(238))
	--	near Arlenians
	table.insert(asteroid_list,Asteroid():setPosition(1082508, 287871):setSize(343))
	table.insert(asteroid_list,Asteroid():setPosition(1083208, 283520):setSize(81))
	table.insert(asteroid_list,Asteroid():setPosition(1085448, 290375):setSize(193))
	table.insert(asteroid_list,Asteroid():setPosition(1088436, 285577):setSize(124))
	--	near Ghosts
	table.insert(asteroid_list,Asteroid():setPosition(1075228, 292131):setSize(220))
	table.insert(asteroid_list,Asteroid():setPosition(1078576, 290022):setSize(85))
	table.insert(asteroid_list,Asteroid():setPosition(1071383, 289030):setSize(446))
	table.insert(asteroid_list,Asteroid():setPosition(1068654, 292875):setSize(29))
	table.insert(asteroid_list,Asteroid():setPosition(1069274, 291014):setSize(121))
	--	near Ghosts
	table.insert(asteroid_list,Asteroid():setPosition(1034017, 296202):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(1039614, 295623):setSize(68))
	table.insert(asteroid_list,Asteroid():setPosition(1033535, 304598):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(1035754, 298422):setSize(194))
	table.insert(asteroid_list,Asteroid():setPosition(1031315, 298325):setSize(335))
	table.insert(asteroid_list,Asteroid():setPosition(1029289, 302958):setSize(24))
	--	near Ghosts
	table.insert(asteroid_list,Asteroid():setPosition(1086434, 280584):setSize(39))
	table.insert(asteroid_list,Asteroid():setPosition(1084649, 276925):setSize(36))
	table.insert(asteroid_list,Asteroid():setPosition(1087044, 278014):setSize(210))
	table.insert(asteroid_list,Asteroid():setPosition(1087524, 271829):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(1090877, 276141):setSize(334))
	--	near Ktlitans
	table.insert(asteroid_list,Asteroid():setPosition(1078042, 276439):setSize(185))
	table.insert(asteroid_list,Asteroid():setPosition(1078808, 285803):setSize(37))
	table.insert(asteroid_list,Asteroid():setPosition(1075914, 281036):setSize(321))
	table.insert(asteroid_list,Asteroid():setPosition(1078723, 283930):setSize(28))
	table.insert(asteroid_list,Asteroid():setPosition(1075574, 285973):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(1081362, 280696):setSize(468))
	--	near Ktlitans
	table.insert(asteroid_list,Asteroid():setPosition(1045089, 293671):setSize(265))
	table.insert(asteroid_list,Asteroid():setPosition(1046224, 298417):setSize(326))
	table.insert(asteroid_list,Asteroid():setPosition(1050971, 298701):setSize(72))
	table.insert(asteroid_list,Asteroid():setPosition(1041802, 300730):setSize(182))
	--	near Ktlitans
	table.insert(asteroid_list,Asteroid():setPosition(1023656, 293340):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(1021874, 295202):setSize(92))
	table.insert(asteroid_list,Asteroid():setPosition(1021551, 297226):setSize(319))
	table.insert(asteroid_list,Asteroid():setPosition(1028028, 299008):setSize(90))
	table.insert(asteroid_list,Asteroid():setPosition(1027403, 295840):setSize(491))
	--	near Exuari
	table.insert(asteroid_list,Asteroid():setPosition(1049645, 231499):setSize(382))
	table.insert(asteroid_list,Asteroid():setPosition(1053061, 228987):setSize(68))
	table.insert(asteroid_list,Asteroid():setPosition(1050418, 227909):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(1047737, 230092):setSize(71))
	table.insert(asteroid_list,Asteroid():setPosition(1048974, 233175):setSize(266))
	--	near Exuari
	table.insert(asteroid_list,Asteroid():setPosition(1051071, 220116):setSize(186))
	table.insert(asteroid_list,Asteroid():setPosition(1048690, 222736):setSize(379))
	table.insert(asteroid_list,Asteroid():setPosition(1048134, 225911):setSize(76))
	table.insert(asteroid_list,Asteroid():setPosition(1046388, 219243):setSize(127))
	--	near USN
	table.insert(asteroid_list,Asteroid():setPosition(1090764, 237106):setSize(175))
	table.insert(asteroid_list,Asteroid():setPosition(1096024, 242669):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(1095032, 238762):setSize(390))
	table.insert(asteroid_list,Asteroid():setPosition(1098132, 236840):setSize(72))
	--	near TSN
	table.insert(asteroid_list,Asteroid():setPosition(1092876, 273444):setSize(32))
	table.insert(asteroid_list,Asteroid():setPosition(1095706, 278187):setSize(226))
	table.insert(asteroid_list,Asteroid():setPosition(1095985, 275158):setSize(433))
	table.insert(asteroid_list,Asteroid():setPosition(1100192, 271488):setSize(128))
	--	near TSN
	table.insert(asteroid_list,Asteroid():setPosition(994248, 304217):setSize(478))
	table.insert(asteroid_list,Asteroid():setPosition(990093, 301973):setSize(339))
	table.insert(asteroid_list,Asteroid():setPosition(995578, 307375):setSize(61))
	--	near CUF
	table.insert(asteroid_list,Asteroid():setPosition(1015895, 290296):setSize(68))
	table.insert(asteroid_list,Asteroid():setPosition(1016182, 293569):setSize(369))
	table.insert(asteroid_list,Asteroid():setPosition(1013311, 295465):setSize(210))
	table.insert(asteroid_list,Asteroid():setPosition(1019973, 294144):setSize(127))
    --	near CUF
	table.insert(asteroid_list,Asteroid():setPosition(1062928, 299998):setSize(50))
	table.insert(asteroid_list,Asteroid():setPosition(1058231, 299446):setSize(350))
	table.insert(asteroid_list,Asteroid():setPosition(1056942, 303037):setSize(118))
    --	near USN
	table.insert(asteroid_list,Asteroid():setPosition(1112689, 197170):setSize(58))
	table.insert(asteroid_list,Asteroid():setPosition(1113117, 205017):setSize(230))
	table.insert(asteroid_list,Asteroid():setPosition(1118126, 203732):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(1118923, 198904):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(1114680, 200664):setSize(340))
	return asteroid_list
end
function createBaskNebulae()
	local nebula_list = {}
	--southeast blob
	table.insert(nebula_list,Nebula():setPosition(1084296, 275420))
	table.insert(nebula_list,Nebula():setPosition(1075619, 280774))
	table.insert(nebula_list,Nebula():setPosition(1078906, 288622))
	table.insert(nebula_list,Nebula():setPosition(1072388, 290153))
	table.insert(nebula_list,Nebula():setPosition(1084725, 284834))
	table.insert(nebula_list,Nebula():setPosition(1095428, 274483))
    --south blob
	table.insert(nebula_list,Nebula():setPosition(1058626, 299446))
	table.insert(nebula_list,Nebula():setPosition(1054712, 293133))
	table.insert(nebula_list,Nebula():setPosition(1046917, 296625))
	table.insert(nebula_list,Nebula():setPosition(1038732, 300769))
	table.insert(nebula_list,Nebula():setPosition(1029289, 299162))
	table.insert(nebula_list,Nebula():setPosition(1019745, 295545))
    --independent west line
	table.insert(nebula_list,Nebula():setPosition(994089, 303898))
	table.insert(nebula_list,Nebula():setPosition(987742, 292409))
	table.insert(nebula_list,Nebula():setPosition(978505, 269252))
	table.insert(nebula_list,Nebula():setPosition(974327, 248547))
	table.insert(nebula_list,Nebula():setPosition(979597, 241042))
	table.insert(nebula_list,Nebula():setPosition(981673, 232498))
    --central blob
	table.insert(nebula_list,Nebula():setPosition(1023531, 267071))
	table.insert(nebula_list,Nebula():setPosition(1022330, 259626))
	table.insert(nebula_list,Nebula():setPosition(1015554, 255859))
	table.insert(nebula_list,Nebula():setPosition(1012556, 262578))
    --northeast group
	table.insert(nebula_list,Nebula():setPosition(1087727, 229675))
	table.insert(nebula_list,Nebula():setPosition(1046886, 229587))
	table.insert(nebula_list,Nebula():setPosition(1052215, 224462))
	table.insert(nebula_list,Nebula():setPosition(1078106, 225856))
	table.insert(nebula_list,Nebula():setPosition(1095136, 238024))
	table.insert(nebula_list,Nebula():setPosition(1114834, 201049))
	local traveling_nebulae = {}
	for _, neb in ipairs(nebula_list) do
		neb.fixed = true
		local neb_x, neb_y = neb:getPosition()
		if distance_diagnostic then
			print("distance_diagnostic 8 magnasol_x:",magnasol_x,"magnasol_y:",magnasol_y,"neb_x:",neb_x,"neb_y:",neb_y)
		end
		neb.magnasol_dist = distance(magnasol_x, magnasol_y, neb_x, neb_y)
		neb.exit_angle = angleFromVectorNorth(neb_x, neb_y, magnasol_x, magnasol_y)
		neb.right_turn = (neb.exit_angle + 90) % 360
		neb.left_turn = (neb.right_turn + 180) % 360
		local lt_x, lt_y = vectorFromAngleNorth(neb.left_turn,5000)
		neb.left_tangent_x = neb_x + lt_x
		neb.left_tangent_y = neb_y + lt_y
		local rt_x, rt_y = vectorFromAngleNorth(neb.right_turn,5000)
		neb.right_tangent_x = neb_x + rt_x
		neb.right_tangent_y = neb_y + rt_y
		neb.start_angle = angleFromVectorNorth(neb.left_tangent_x, neb.left_tangent_y, magnasol_x, magnasol_y)
		neb.finish_angle = angleFromVectorNorth(neb.right_tangent_x, neb.right_tangent_y, magnasol_x, magnasol_y)
		if neb.finish_angle > neb.start_angle then
			neb.arc = neb.finish_angle - neb.start_angle
		else
			neb.arc = (neb.finish_angle + 360) - neb.start_angle
		end
		local travel_angle = (neb.start_angle + random(0,neb.arc)) % 360
		local travel_distance = random(neb.magnasol_dist,190000)
		if magnasol_nebula_diagnostic then
			travel_distance = 195000
		end
		local tn_x, tn_y = vectorFromAngleNorth(travel_angle,travel_distance)
		local travel_neb = Nebula():setPosition(magnasol_x + tn_x, magnasol_y + tn_y)
		travel_neb.travel_angle = travel_angle
		travel_neb.travel_distance = travel_distance
		travel_neb.arc = neb.arc
		travel_neb.fixed = false
		travel_neb.long_leg = true
		travel_neb.origin = neb
		table.insert(traveling_nebulae,travel_neb)
--		Artifact():setPosition(neb.left_tangent_x, neb.left_tangent_y)
--		Artifact():setPosition(neb.right_tangent_x, neb.right_tangent_y):setRadarTraceColor(255,0,0)
	end
	for _, neb in ipairs(traveling_nebulae) do
		table.insert(nebula_list,neb)
	end
	return nebula_list
end
function createBaskStations()
	bask_defense_platforms = {}
	local stations = {}
	local fast_probe_list = {
		{name = "Mark 3",	cost_lo = 3, cost_hi = 8,	quantity_lo = 1, quantity_hi = 5, speed = 2000},
		{name = "Gogo",		cost_lo = 6, cost_hi = 11,	quantity_lo = 1, quantity_hi = 5, speed = 3000},
		{name = "Screamer", cost_lo = 8, cost_hi = 15,	quantity_lo = 1, quantity_hi = 5, speed = 4000},
	}
	local selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
	local sensor_probe_list = {
		{name = "Spectacle",	cost_lo = 16, cost_hi = 41, quantity_lo = 1, quantity_hi = 3, speed = 1000, boost = 10, range = 30},
		{name = "Binoc",		cost_lo = 37, cost_hi = 52, quantity_lo = 1, quantity_hi = 3, speed = 1000, boost = 20, range = 40},
		{name = "Scope",		cost_lo = 56, cost_hi = 82, quantity_lo = 1, quantity_hi = 3, speed = 1000, boost = 30, range = 50},
	}
	local selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
	local remote_warp_jammer_list = {
		{name = "Snag",		cost_lo = 9, cost_hi = 20, quantity_lo = 1, quantity_hi = 5, speed = 2500, warp_jam_range = 10000},
		{name = "Mire",		cost_lo = 9, cost_hi = 20, quantity_lo = 1, quantity_hi = 5, speed = 2000, warp_jam_range = 15000},
		{name = "Swamp",	cost_lo = 9, cost_hi = 20, quantity_lo = 1, quantity_hi = 5, speed = 1500, warp_jam_range = 20000},
	}
	local selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
	--	Respite
	--		update_system:addOrbitTargetUpdate(stationHarriet,planet_ursid,4500,23*2*math.pi,0)
	stationRespite = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Respite"):setDescription("Obervatory"):setCommsScript(""):setCommsFunction(commsStation)
    stationRespite:setShortRangeRadarRange(5000)
	update_system:addOrbitTargetUpdate(stationRespite,planet_argyle,4500,230*2*math.pi,0)
    stationRespite.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	autodoc =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We study the effects of Magnasol on Argyle",
    	history = "The plants show an unusually high mutation rate. We are trying to determine if it's Magnasol's energy, the streams of exotic material or some other combination that's impacting the ecology.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationRespite:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationRespite:setRepairDocked(false) end
	if random(1,100) <= 12 then stationRespite:setSharesEnergyWithDocked(false) end
	station_names[stationRespite:getCallSign()] = {stationRespite:getSectorName(), stationRespite}
	table.insert(stations,stationRespite)
	--	Element
	--local elementZone = squareZone(976289, 247837, "Element")
	--elementZone:setColor(51,153,255):setLabel("E")
	stationElement = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Element"):setPosition(976289, 247837):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationElement:setShortRangeRadarRange(4000)
    stationElement.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
--        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	dilithium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			filament =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We want the minerals in these asteroids",
    	history = "We've been here for a few months. Mining has been good so far. The heat and radiation from Magnasol is annoying.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationElement:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationElement:setRepairDocked(false) end
	if random(1,100) <= 12 then stationElement:setSharesEnergyWithDocked(false) end
	station_names[stationElement:getCallSign()] = {stationElement:getSectorName(), stationElement}
	table.insert(stations,stationElement)
	--	Forward
	--local forwardZone = squareZone(982338, 233848, "Forward")
	--forwardZone:setColor(51,153,255):setLabel("F")
	stationForward = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Forward"):setPosition(982338, 233848):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationForward:setShortRangeRadarRange(4500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationForward.comms_data = {
    	friendlyness = 74,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,6), 	HVLI = math.random(2,5),	Mine = math.random(2,6),	Nuke = math.random(12,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 70,	HVLI = random(1,100) <= 70,	Mine = random(1,100) <= 50,	Nuke = random(1,100) <= 40,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        sensor_boost_probes = selected_sensor_probe,
        mine_probes = {name = "LDSM 1.3", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 3, mines_required = 5},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<20,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<36,
        probe_launch_repair =	random(1,100)<42,
        scan_repair =			random(1,100)<50,
        self_destruct_repair =	random(1,100)<60,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			autodoc =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We want the minerals in these asteroids and we got here first",
    	history = "We found these asteroids near this strange star with its variant (or deviant depending on who you talk to) energy fluctuations. Now everyone wants a peice of the action",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationForward:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationForward:setRepairDocked(false) end
	if random(1,100) <= 12 then stationForward:setSharesEnergyWithDocked(false) end
	station_names[stationForward:getCallSign()] = {stationForward:getSectorName(), stationForward}
	table.insert(stations,stationForward)
	--	Lizzy
--	local lizzyZone = squareZone(992735, 294340, "Lizzy 2")
--	lizzyZone:setColor(51,153,255):setLabel("L")
	stationLizzy = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Lizzy 2"):setPosition(992735, 294340):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationLizzy:setShortRangeRadarRange(6500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationLizzy.comms_data = {
    	friendlyness = 74,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,5),	Mine = math.random(2,5),	Nuke = math.random(12,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 70,	HVLI = random(1,100) <= 70,	Mine = random(1,100) <= 50,	Nuke = random(1,100) <= 40,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<54,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<32,
        scan_repair =			random(1,100)<57,
        self_destruct_repair =	random(1,100)<20,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	cobalt = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			circuit =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 22, luxury = random(1,100) < 45 },
        public_relations = true,
        general_information = "We are the best looking mining station in the area",
    	history = "The station was set up by a distressed father who lost his daughter in a mining accident. He renamed the station in her memory",
    	idle_defense_fleet = {
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 18 then stationLizzy:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationLizzy:setRepairDocked(false) end
	if random(1,100) <= 12 then stationLizzy:setSharesEnergyWithDocked(false) end
	station_names[stationLizzy:getCallSign()] = {stationLizzy:getSectorName(), stationLizzy}
	table.insert(stations,stationLizzy)
	--	Torch
	--local torchZone = squareZone(1013452, 269943, "Torch")
	--torchZone:setColor(51,153,255):setLabel("T")
	stationTorch = SpaceStation():setTemplate("Large Station"):setFaction("Independent"):setCallSign("Torch"):setPosition(1013452, 269943):setDescription("Mining and Research"):setCommsScript(""):setCommsFunction(commsStation)
    stationTorch:setShortRangeRadarRange(7000)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationTorch.comms_data = {
    	friendlyness = 84,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,5),	Mine = math.random(2,4),	Nuke = math.random(12,19),	EMP = math.random(9,25) },
        weapon_available = 	{Homing = random(1,100) <= 50,	HVLI = random(1,100) <= 40,	Mine = random(1,100) <= 30,	Nuke = random(1,100) <= 40,	EMP = random(1,100) <= 60},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<60},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<50},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<60},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<95},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<90},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<75},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<75},
        },
        fast_probes = selected_fast_probe,
        mine_probes = {name = "LDSM 3.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<64,
        jump_overcharge =		random(1,100)<26,
        probe_launch_repair =	random(1,100)<72,
        scan_repair =			random(1,100)<47,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.8},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.75 },
        goods = {	nickel = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			lifter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 35 },
        public_relations = true,
        general_information = "We mine these asteroids and conduct research on Magnasol",
    	history = "During our research of Magnasol and the minerals that we extracted from nearby mines, we found a highly volatile combination of minerals an Magnasol residue. All that we collected started burning quite brighly. We were unable to extinguish the flame and could not even figure out the process by which the exotic combination was even burning in vacuum. From a distance, the station resembled a torch, so we renamed the station to match.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "MU52 Hornet",
			DF5 = "Phobos T3",
			DF6 = "Nirvana R5A",
			DF7 = "Nirvana R3",
    	},
	}
	if random(1,100) <= 15 then stationTorch:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationTorch:setRepairDocked(false) end
	if random(1,100) <= 12 then stationTorch:setSharesEnergyWithDocked(false) end
	station_names[stationTorch:getCallSign()] = {stationTorch:getSectorName(), stationTorch}
	table.insert(stations,stationTorch)
	--	Spunk
	--local spunkZone = squareZone(977990, 275247, "Spunk")
	--spunkZone:setColor(51,153,255):setLabel("T")
	stationSpunk = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Spunk"):setPosition(977990, 275247):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationSpunk:setShortRangeRadarRange(5500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationSpunk.comms_data = {
    	friendlyness = 84,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "neutral", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,4), 	HVLI = math.random(1,5),	Mine = math.random(3,6),	Nuke = math.random(15,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 50,	Mine = random(1,100) <= 40,	Nuke = random(1,100) <= 50,	EMP = random(1,100) <= 20},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        sensor_boost_probes = selected_sensor_probe,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<55,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<42,
        scan_repair =			random(1,100)<57,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.6 },
        goods = {	gold = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			beam =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 55 },
        public_relations = true,
        general_information = "We mine these asteroids despite the challenges of dealing with the Magnasol radiation",
    	history = "We started this station with minimal resources and minimal protection from the Magnasol heat and radiation. Despite these hurdles, we have successfully expanded our mining operations and are competing nicely with our neighbors for mining gains.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MT52 Hornet",
			DF3 = "MU52 Hornet",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 12 then stationSpunk:setRestocksScanProbes(false) end
	if random(1,100) <= 18 then stationSpunk:setRepairDocked(false) end
	if random(1,100) <= 15 then stationSpunk:setSharesEnergyWithDocked(false) end
	station_names[stationSpunk:getCallSign()] = {stationSpunk:getSectorName(), stationSpunk}
	table.insert(stations,stationSpunk)
	--	Butte
	--local butteZone = squareZone(981204, 262204, "Butte")
	--butteZone:setColor(51,153,255):setLabel("B")
	stationButte = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Butte"):setPosition(981204, 262204):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationButte:setShortRangeRadarRange(5500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationButte.comms_data = {
    	friendlyness = 81,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,4), 	HVLI = math.random(1,5),	Mine = math.random(3,5),	Nuke = math.random(15,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 50,	Mine = random(1,100) <= 80,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 20},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        mine_probes = {name = "LDSM 1.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<55,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<42,
        scan_repair =			random(1,100)<57,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	platinum = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			impulse =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 42, luxury = random(1,100) < 35 },
        public_relations = true,
        general_information = "We're just your friendly neighborhood miners, looking for the next major mineral discovery.",
    	history = "Our mining station is named after the mining town established in the late 1800s on Earth on the North American continent",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 11 then stationButte:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationButte:setRepairDocked(false) end
	if random(1,100) <= 11 then stationButte:setSharesEnergyWithDocked(false) end
	station_names[stationButte:getCallSign()] = {stationButte:getSectorName(), stationButte}
	table.insert(stations,stationButte)
	--	Pillia
--	local pilliaZone = squareZone(1031485, 265802, "Pillia")
--	pilliaZone:setColor(51,153,255):setLabel("P")
	stationPillia = SpaceStation():setTemplate("Medium Station"):setFaction("Arlenians"):setCallSign("Pillia"):setPosition(1031485, 265802):setDescription("Mining and Research"):setCommsScript(""):setCommsFunction(commsStation)
    stationPillia:setShortRangeRadarRange(5500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationPillia.comms_data = {
    	friendlyness = 51,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,4), 	HVLI = math.random(1,5),	Mine = math.random(3,5),	Nuke = math.random(15,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 50,	HVLI = random(1,100) <= 60,	Mine = random(1,100) <= 40,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 20},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<55},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<55},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<55,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<42,
        scan_repair =			random(1,100)<37,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nickel = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			warp =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 42, luxury = random(1,100) < 35 },
        public_relations = true,
        general_information = "The minerals and energy in this area are fascinating to us.",
    	history = "We established this mining and research facility shortly after receiving information about the properties of the asteroids and the energy emanating from Magnolia. Numerous advances in our scientific knowledge have come as a direct result of the research being conducted here.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Cucaracha",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 16 then stationPillia:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationPillia:setRepairDocked(false) end
	if random(1,100) <= 11 then stationPillia:setSharesEnergyWithDocked(false) end
	station_names[stationPillia:getCallSign()] = {stationPillia:getSectorName(), stationPillia}
	table.insert(stations,stationPillia)
	--	Milornden
	--local milorndenZone = squareZone(1054941, 292713, "Milornden")
	--milorndenZone:setColor(51,153,255):setLabel("M")
	stationMilornden = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Milornden"):setPosition(1054941, 292713):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationMilornden:setShortRangeRadarRange(5500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationMilornden.comms_data = {
    	friendlyness = 61,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,4), 	HVLI = math.random(1,5),	Mine = math.random(3,5),	Nuke = math.random(14,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 70,	HVLI = random(1,100) <= 60,	Mine = random(1,100) <= 40,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 20},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),        	
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        sensor_boost_probes = selected_sensor_probe,
        mine_probes = {name = "LDSM 1.3", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 3, mines_required = 5},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<75,
        scan_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<84,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<32,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.3},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.75 },
        goods = {	dilithium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			robotic =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 22, medicine = random(1,100) < 36, luxury = random(1,100) < 45 },
        public_relations = true,
        general_information = "The minerals here are incredible! These asteroids are loaded. This mining facility has yielded the largest supply of exotic metals ever recorded.",
    	history = "This station was established with the second wave of mining stations arriving in the area. By this time, word had spread far and wide about the mining possibilities here.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 11 then stationMilornden:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationMilornden:setRepairDocked(false) end
	if random(1,100) <= 15 then stationMilornden:setSharesEnergyWithDocked(false) end
	station_names[stationMilornden:getCallSign()] = {stationMilornden:getSectorName(), stationMilornden}
	table.insert(stations,stationMilornden)
	--	Arleigna
	--local arleignaZone = squareZone(1083220, 287022, "Arleigna")
	--arleignaZone:setColor(51,153,255):setLabel("A")
	stationArleigna = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Arleigna"):setPosition(1083220, 287022):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationArleigna:setShortRangeRadarRange(5500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationArleigna.comms_data = {
    	friendlyness = 71,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,4), 	HVLI = math.random(1,4),	Mine = math.random(2,5),	Nuke = math.random(14,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 40,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 20},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        hack_repair =			random(1,100)<45,
        scan_repair =			random(1,100)<60,
        tube_slow_down_repair = random(1,100)<74,
        jump_overcharge =		random(1,100)<26,
        probe_launch_repair =	random(1,100)<52,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			lifter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 22, medicine = random(1,100) < 32, luxury = random(1,100) < 55 },
        public_relations = true,
        general_information = "We mine minerals. We also host the occasional dance party",
    	history = "The original sation founders were artisans looking for a more lucrative way of life. They've largely converted over to mining as their primary source of income, but some of their original traditions are still observed.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MT52 Hornet",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 11 then stationArleigna:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationArleigna:setRepairDocked(false) end
	if random(1,100) <= 13 then stationArleigna:setSharesEnergyWithDocked(false) end
	station_names[stationArleigna:getCallSign()] = {stationArleigna:getSectorName(), stationArleigna}
	table.insert(stations,stationArleigna)
	--	Shanghai
	--local shanghaiZone = squareZone(1094040, 239383, "Shanghai")
	--shanghaiZone:setColor(0,128,0):setLabel("S")
	stationShanghai = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Shanghai"):setPosition(1094040, 239383):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationShanghai:setShortRangeRadarRange(6500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationShanghai.comms_data = {
    	friendlyness = 77,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,5),	Mine = math.random(2,6),	Nuke = math.random(14,19),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 40,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 27},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<25,
        scan_repair =			random(1,100)<60,
        tube_slow_down_repair = random(1,100)<74,
        jump_overcharge =		random(1,100)<46,
        probe_launch_repair =	random(1,100)<52,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			transporter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 45 },
        public_relations = true,
        general_information = "We gather energy from Magnasol and mine minerals from the nearby asteroids",
    	history = "We plan to be the primary source of minerals and energy in this region and beyond. Our station is named after the Earth city where the largest volume of cargo shipping occurred during the early 21st century.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MT52 Hornet",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 11 then stationShanghai:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationShanghai:setRepairDocked(false) end
	if random(1,100) <= 11 then stationShanghai:setSharesEnergyWithDocked(false) end
	station_names[stationShanghai:getCallSign()] = {stationShanghai:getSectorName(), stationShanghai}
	table.insert(stations,stationShanghai)
	--	Hai Tac
	--local haitacZone = squareZone(1115305, 200083, "Hai Tac")
	--haitacZone:setColor(0,128,0):setLabel("H")
	stationHaiTac = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Hai Tac"):setPosition(1115305, 200083):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationHaiTac:setShortRangeRadarRange(6000)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationHaiTac.comms_data = {
    	friendlyness = 37,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,6), 	HVLI = math.random(2,6),	Mine = math.random(3,8),	Nuke = math.random(12,16),	EMP = math.random(8,14) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 27},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        sensor_boost_probes = selected_sensor_probe,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<55,
        scan_repair =			random(1,100)<60,
        tube_slow_down_repair = random(1,100)<54,
        jump_overcharge =		random(1,100)<46,
        probe_launch_repair =	random(1,100)<22,
        self_destruct_repair =	random(1,100)<16,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			tractor =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 22, luxury = random(1,100) < 45 },
        public_relations = true,
        general_information = "We mine stuff. Buy from us or else.",
    	history = "Our station is named after the archipelago on Earth, a resting place for weary travelers.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MT52 Hornet",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 31 then stationHaiTac:setRestocksScanProbes(false) end
	if random(1,100) <= 12 then stationHaiTac:setRepairDocked(false) end
	if random(1,100) <= 21 then stationHaiTac:setSharesEnergyWithDocked(false) end
	station_names[stationHaiTac:getCallSign()] = {stationHaiTac:getSectorName(), stationHaiTac}
	table.insert(stations,stationHaiTac)
	--	Promethean
	--local prometheanZone = squareZone(1096902, 274759, "Promethean")
	--prometheanZone:setColor(0,128,0):setLabel("P")
	stationPromethean = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Promethean"):setPosition(1096902, 274759):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationPromethean:setShortRangeRadarRange(6500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationPromethean.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6), 	HVLI = math.random(1,3),	Mine = math.random(2,7),	Nuke = math.random(14,17),	EMP = math.random(8,17) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<55,
        scan_repair =			random(1,100)<60,
        tube_slow_down_repair = random(1,100)<74,
        jump_overcharge =		random(1,100)<46,
        probe_launch_repair =	random(1,100)<32,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			optic =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 26, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We mine the nearby asteroids for exotic minerals, some of which are created as a result of the energy output of Magnasol.",
    	history = "Our station was named after several attempts to establish it resulted in destructive fires. We *will* steal the fire from Magnasol.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "MT52 Hornet",
			DF5 = "Nirvana R5A",
			DF6 = "Cucaracha",
    	},
	}
	if random(1,100) <= 21 then stationPromethean:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationPromethean:setRepairDocked(false) end
	if random(1,100) <= 14 then stationPromethean:setSharesEnergyWithDocked(false) end
	station_names[stationPromethean:getCallSign()] = {stationPromethean:getSectorName(), stationPromethean}
	table.insert(stations,stationPromethean)
	--	Oberon
	--local oberonZone = squareZone(993168, 304300, "Oberon")
	--oberonZone:setColor(0,128,0):setLabel("O")
	stationOberon = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Oberon"):setPosition(993168, 304300):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationOberon:setShortRangeRadarRange(7000)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationOberon.comms_data = {
    	friendlyness = 67,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(14,18),	EMP = math.random(9,17) },
        weapon_available = 	{Homing = random(1,100) <= 55,	HVLI = random(1,100) <= 67,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 50,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<35,
        scan_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<74,
        jump_overcharge =		random(1,100)<66,
        probe_launch_repair =	random(1,100)<22,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	dilithium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			repulsor =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 36, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We are miners by trade, though we several members of our community dabble in other things.",
    	history = "We named our station after the mythical Oberon: handome in bearing, small in stature and king of the fairies. We will tame the Magnasol fairy fire",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5A",
			DF6 = "Cucaracha",
    	},
	}
	if random(1,100) <= 11 then stationOberon:setRestocksScanProbes(false) end
	if random(1,100) <= 18 then stationOberon:setRepairDocked(false) end
	if random(1,100) <= 14 then stationOberon:setSharesEnergyWithDocked(false) end
	station_names[stationOberon:getCallSign()] = {stationOberon:getSectorName(), stationOberon}
	table.insert(stations,stationOberon)
	--	Tall Table
	--local talltableZone = squareZone(1016527, 294144, "Tall Table")
	--talltableZone:setColor(0,128,0):setLabel("T")
	stationTallTable = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Tall Table"):setPosition(1016527, 294144):setDescription("Mining and recreation"):setCommsScript(""):setCommsFunction(commsStation)
    stationTallTable:setShortRangeRadarRange(5500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationTallTable.comms_data = {
    	friendlyness = 87,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,4), 	HVLI = math.random(1,4),	Mine = math.random(1,9),	Nuke = math.random(16,21),	EMP = math.random(8,13) },
        weapon_available = 	{Homing = random(1,100) <= 55,	HVLI = random(1,100) <= 67,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        sensor_boost_probes = selected_sensor_probe,
        hack_repair =			random(1,100)<65,
        scan_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<24,
        jump_overcharge =		random(1,100)<36,
        probe_launch_repair =	random(1,100)<72,
        self_destruct_repair =	random(1,100)<46,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.25},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	tritanium = {quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			nanites =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 16, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We pick the fruits of these asteroids and share the bounty with our neighbors.",
    	history = "We started off as a place to rest and get a drink, but found that the mining paid the bills better. Yet, we still provide accomodations and the occasional meal for travelers.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Nirvana R5A",
			DF6 = "Cucaracha",
    	},
	}
	if random(1,100) <= 11 then stationTallTable:setRestocksScanProbes(false) end
	if random(1,100) <= 13 then stationTallTable:setRepairDocked(false) end
	if random(1,100) <= 12 then stationTallTable:setSharesEnergyWithDocked(false) end
	station_names[stationTallTable:getCallSign()] = {stationTallTable:getSectorName(), stationTallTable}
	table.insert(stations,stationTallTable)
	--	Jealous Juncture
	--local jealousjunctureZone = squareZone(1059157, 298936, "Jealous Juncture")
	--jealousjunctureZone:setColor(0,128,0):setLabel("J")
	stationJealousJuncture = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Jealous Juncture"):setPosition(1059157, 298936):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationJealousJuncture:setShortRangeRadarRange(4500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationJealousJuncture.comms_data = {
    	friendlyness = 67,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6), 	HVLI = math.random(1,5),	Mine = math.random(2,7),	Nuke = math.random(13,16),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 67,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        hack_repair =			random(1,100)<25,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<64,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<42,
        self_destruct_repair =	random(1,100)<76,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel =		{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			communication =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 26, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We harvest minerals, especially the exotic ones resulting from the Magnasol radiation.",
    	history = "When we first arrived there was some contention over this location. Eventually, the other faction moved to a different location, but they still wish they had this location. Based on that history, we named our station Jealous Juncture.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 15 then stationJealousJuncture:setRestocksScanProbes(false) end
	if random(1,100) <= 19 then stationJealousJuncture:setRepairDocked(false) end
	if random(1,100) <= 11 then stationJealousJuncture:setSharesEnergyWithDocked(false) end
	station_names[stationJealousJuncture:getCallSign()] = {stationJealousJuncture:getSectorName(), stationJealousJuncture}
	table.insert(stations,stationJealousJuncture)
	--	Krowtok
	--local krowtokZone = squareZone(1085801, 219705, "Krowtok")
	--krowtokZone:setColor(128,0,0):setLabel("K")
	stationKrowtok = SpaceStation():setTemplate("Medium Station"):setFaction("Kraylor"):setCallSign("Krowtok"):setPosition(1085801, 219705):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationKrowtok:setShortRangeRadarRange(6500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationKrowtok.comms_data = {
    	friendlyness = 47,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,6), 	HVLI = math.random(1,5),	Mine = math.random(2,7),	Nuke = math.random(13,16),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 67,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<50},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<40},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<50},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<80},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<65},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<25,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<64,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<42,
        self_destruct_repair =	random(1,100)<76,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			beam =		{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 36, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "[translated to the common Human trading language] We mine asteroids and destroy our enemies.",
    	history = "[translated to the common Human trading language] Krowtok means 'tooth of the fierce lizard monster.' We give this token as a rite of passage to young adults and for special occasions. This station represents a significant achievement.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Nirvana R5A",
			DF6 = "Cucaracha",
    	},
	}
	if random(1,100) <= 35 then stationKrowtok:setRestocksScanProbes(false) end
	if random(1,100) <= 25 then stationKrowtok:setRepairDocked(false) end
	if random(1,100) <= 11 then stationKrowtok:setSharesEnergyWithDocked(false) end
	station_names[stationKrowtok:getCallSign()] = {stationKrowtok:getSectorName(), stationKrowtok}
	table.insert(stations,stationKrowtok)
	--	Taklor
	--local taklorZone = squareZone(1079114, 234259, "Taklor")
	--taklorZone:setColor(128,0,0):setLabel("T")
	stationTaklor = SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Taklor"):setPosition(1079114, 234259):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationTaklor:setShortRangeRadarRange(4500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationTaklor.comms_data = {
    	friendlyness = 37,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(16,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 75,	HVLI = random(1,100) <= 67,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        sensor_boost_probes = selected_sensor_probe,
        hack_repair =			random(1,100)<25,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<44,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<62,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold =		{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			shield =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 46, medicine = random(1,100) < 32, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "[translated to the common Human trading language] We destroy our enemies and mine asteroids",
    	history = "[translated to the common Human trading language] Taklor means 'talon of the stealthy bird of prey.' This symolizes unwavering ambition against all odds.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Cucaracha",
    	},
	}
	if random(1,100) <= 13 then stationTaklor:setRestocksScanProbes(false) end
	if random(1,100) <= 25 then stationTaklor:setRepairDocked(false) end
	if random(1,100) <= 11 then stationTaklor:setSharesEnergyWithDocked(false) end
	station_names[stationTaklor:getCallSign()] = {stationTaklor:getSectorName(), stationTaklor}
	table.insert(stations,stationTaklor)
	--	Nexus-47
	--local nexus47Zone = squareZone(1072852, 295443, "Nexus-47")
	--nexus47Zone:setColor(128,0,0):setLabel("N")
	stationNexus47 = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Nexus-47"):setPosition(1072852, 295443):setDescription("Mining and coordination"):setCommsScript(""):setCommsFunction(commsStation)
    stationNexus47:setShortRangeRadarRange(5500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationNexus47.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(16,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        hack_repair =			random(1,100)<65,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<44,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<22,
        self_destruct_repair =	random(1,100)<36,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	platinum =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			software =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 27, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We mine for metals and silicates among these asteroids.",
    	history = "This region drew us to it due to its unusual energy combined with ripe mining zones. We coordinate the mining efforts here.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Cucaracha",
    	},
	}
	if random(1,100) <= 13 then stationNexus47:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationNexus47:setRepairDocked(false) end
	if random(1,100) <= 11 then stationNexus47:setSharesEnergyWithDocked(false) end
	station_names[stationNexus47:getCallSign()] = {stationNexus47:getSectorName(), stationNexus47}
	table.insert(stations,stationNexus47)
	--	Source
	--local sourceZone = squareZone(1033617, 301079, "Source")
	--sourceZone:setColor(128,0,0):setLabel("S")
	stationSource = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Source"):setPosition(1033617, 301079):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationSource:setShortRangeRadarRange(6500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationSource.comms_data = {
    	friendlyness = 57,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(16,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 85,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<65,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<44,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<42,
        self_destruct_repair =	random(1,100)<56,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nickel =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			robotic =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 17, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We mine for metals and specialized energy.",
    	history = "We are the source for minerals, energy, code, artificial intelligence and whatever else is needed.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Prador",
    	},
	}
	if random(1,100) <= 13 then stationSource:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationSource:setRepairDocked(false) end
	if random(1,100) <= 11 then stationSource:setSharesEnergyWithDocked(false) end
	station_names[stationSource:getCallSign()] = {stationSource:getSectorName(), stationSource}
	table.insert(stations,stationSource)
	--	Splice
	--local spliceZone = squareZone(1089901, 276132, "Splice")
	--spliceZone:setColor(128,0,0):setLabel("X")
	stationSplice = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Splice"):setPosition(1089901, 276132):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationSplice:setShortRangeRadarRange(7500)
	selected_sensor_probe = sensor_probe_list[math.random(1,#sensor_probe_list + 1)]
	if selected_sensor_probe ~= nil then
		selected_sensor_probe = {name = selected_sensor_probe.name, cost = math.random(selected_sensor_probe.cost_lo,selected_sensor_probe.cost_hi), quantity = math.random(selected_sensor_probe.quantity_lo,selected_sensor_probe.quantity_hi), speed = selected_sensor_probe.speed, boost = selected_sensor_probe.boost, range = selected_sensor_probe.range}
	end
    stationSplice.comms_data = {
    	friendlyness = 67,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(14,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        },
        sensor_boost_probes = selected_sensor_probe,
        hack_repair =			random(1,100)<65,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<26,
        probe_launch_repair =	random(1,100)<42,
        self_destruct_repair =	random(1,100)<56,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.6 },
        goods = {	dilithium =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			android =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 17, medicine = random(1,100) < 12, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "We mine for minerals, energy and exotic metals.",
    	history = "Our directive is to splice into this rich vein of resources.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK8",
			DF5 = "Prador",
    	},
	}
	if random(1,100) <= 23 then stationSplice:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationSplice:setRepairDocked(false) end
	if random(1,100) <= 11 then stationSplice:setSharesEnergyWithDocked(false) end
	station_names[stationSplice:getCallSign()] = {stationSplice:getSectorName(), stationSplice}
	table.insert(stations,stationSplice)
	--	Adephaga
	--local adephagaZone = squareZone(1078260, 277446, "Adephaga")
	--adephagaZone:setColor(128,0,0):setLabel("A")
	stationAdephaga = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Adephaga"):setPosition(1078260, 277446):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationAdephaga:setShortRangeRadarRange(4500)
	selected_remote_warp_jammer = remote_warp_jammer_list[math.random(1,#remote_warp_jammer_list + 1)]
	if selected_remote_warp_jammer ~= nil then
		selected_remote_warp_jammer = {name = selected_remote_warp_jammer.name, cost = math.random(selected_remote_warp_jammer.cost_lo,selected_remote_warp_jammer.cost_hi), quantity = math.random(selected_remote_warp_jammer.quantity_lo,selected_remote_warp_jammer.quantity_hi), speed = selected_remote_warp_jammer.speed, warp_jam_range = selected_remote_warp_jammer.warp_jam_range}
	end
    stationAdephaga.comms_data = {
    	friendlyness = 37,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(14,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = true},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        remote_warp_jammer = selected_remote_warp_jammer,
        hack_repair =			random(1,100)<45,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<34,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<62,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.25},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	tritanium =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			circuit =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 17, medicine = random(1,100) < 32, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "[translated to the common Human trading language] We mine for minerals and energy",
    	history = "[translated to the common Human trading language] The queen directed us to construct this station.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Cucaracha",
    	},
	}
	if random(1,100) <= 13 then stationAdephaga:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationAdephaga:setRepairDocked(false) end
	if random(1,100) <= 11 then stationAdephaga:setSharesEnergyWithDocked(false) end
	station_names[stationAdephaga:getCallSign()] = {stationAdephaga:getSectorName(), stationAdephaga}
	table.insert(stations,stationAdephaga)
	--	Archostemata
	--local archostemataZone = squareZone(1045129, 297646, "Archostemata")
	--archostemataZone:setColor(128,0,0):setLabel("A")
	stationArchostemata = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Archostemata"):setPosition(1045129, 297646):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationArchostemata:setShortRangeRadarRange(5500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationArchostemata.comms_data = {
    	friendlyness = 27,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(14,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<45,
        scan_repair =			random(1,100)<70,
        tube_slow_down_repair = random(1,100)<64,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<32,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt =	{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			filament =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 17, medicine = random(1,100) < 32, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "[translated to the common Human trading language] We mine for minerals and energy.",
    	history = "[translated to the common Human trading language] The queen directed us to construct this station.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Cucaracha",
    	},
	}
	if random(1,100) <= 13 then stationArchostemata:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationArchostemata:setRepairDocked(false) end
	if random(1,100) <= 11 then stationArchostemata:setSharesEnergyWithDocked(false) end
	station_names[stationArchostemata:getCallSign()] = {stationArchostemata:getSectorName(), stationArchostemata}
	table.insert(stations,stationArchostemata)
	--	Coleoptera
	--local coleopteraZone = squareZone(1026057, 295757, "Coleoptera")
	--coleopteraZone:setColor(128,0,0):setLabel("C")
	stationColeoptera = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Coleoptera"):setPosition(1026057, 295757):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
    stationColeoptera:setShortRangeRadarRange(5500)
	selected_fast_probe = fast_probe_list[math.random(1,#fast_probe_list + 1)]
	if selected_fast_probe ~= nil then
		selected_fast_probe = {name = selected_fast_probe.name, cost = math.random(selected_fast_probe.cost_lo,selected_fast_probe.cost_hi), quantity = math.random(selected_fast_probe.quantity_lo,selected_fast_probe.quantity_hi), speed = selected_fast_probe.speed}
	end
    stationColeoptera.comms_data = {
    	friendlyness = 17,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(2,6),	Nuke = math.random(14,19),	EMP = math.random(9,16) },
        weapon_available = 	{Homing = random(1,100) <= 65,	HVLI = random(1,100) <= 57,	Mine = random(1,100) <= 42,	Nuke = random(1,100) <= 20,	EMP = random(1,100) <= 37},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        fast_probes = selected_fast_probe,
        hack_repair =			random(1,100)<45,
        scan_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<64,
        jump_overcharge =		random(1,100)<56,
        probe_launch_repair =	random(1,100)<72,
        self_destruct_repair =	random(1,100)<26,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	nickel =		{quantity = math.random(5,9),	cost = math.random(50,80)}, 
        			transporter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 17, medicine = random(1,100) < 32, luxury = random(1,100) < 25 },
        public_relations = true,
        general_information = "[translated to the common Human trading language] We mine for minerals and energy.",
    	history = "[translated to the common Human trading language] The queen directed us to construct this station.",
    	idle_defense_fleet = {
			DF1 = "Phobos T3",
			DF2 = "MU52 Hornet",
			DF3 = "MT52 Hornet",
			DF4 = "Adder MK5",
			DF5 = "Cucaracha",
    	},
	}
	if random(1,100) <= 13 then stationColeoptera:setRestocksScanProbes(false) end
	if random(1,100) <= 15 then stationColeoptera:setRepairDocked(false) end
	if random(1,100) <= 11 then stationColeoptera:setSharesEnergyWithDocked(false) end
	station_names[stationColeoptera:getCallSign()] = {stationColeoptera:getSectorName(), stationColeoptera}
	table.insert(stations,stationColeoptera)
	--	enemy stations
	stationPegortamex = SpaceStation():setTemplate("Medium Station"):setFaction("Exuari"):setCallSign("Pegortamex"):setPosition(1050906, 230994):setCommsScript(""):setCommsFunction(commsStation)
	table.insert(stations,stationPegortamex)
	stationFetundotak = SpaceStation():setTemplate("Small Station"):setFaction("Exuari"):setCallSign("Fetundotak"):setPosition(1047774, 222642):setCommsScript(""):setCommsFunction(commsStation)
	table.insert(stations,stationFetundotak)
	local sx, sy = stationFetundotak:getPosition()
	local dp_angle = 40
	local fdp_names = {"Spankitomax","Lorpomux","Tifordutox"}
	for i=1,3 do
		local dpx, dpy = vectorFromAngle(dp_angle,2000,true)
		local fdp = CpuShip():setFaction("Exuari"):setTemplate("Defense platform"):setCallSign(fdp_names[i]):setPosition(sx+dpx,sy+dpy):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
		setBeamColor(fdp)
		table.insert(bask_defense_platforms,fdp)
		dp_angle = dp_angle + 120
	end
    return stations
end
function createBaskPatrols()
	bask_patrol_fleets = {}
	local patrol_ships = {}
	local patrol_list = {
		"Kraylor01",
		"Kraylor02",
		"Exuari01",
		"Exuari02",		
		"TSN01",		
		"Ghosts01",		
		"Ktlitans01",		
		"Arlenians01",
		"Ghosts02",
		"CUF01",
		"Arlenians02",
		"Ktlitans02",
		"Ghosts03",
		"Ktlitans03",
		"CUF02",
		"TSN02",
		"Independent01",
		"Independent02",
		"USN01",
		"Independent03",
		"Independent04",
		"Independent05",
		"USN02",
		"Human01",
		"Arlenians03",
		"Independent06",
	}
	for i, patrol_name in ipairs(patrol_list) do
		local patrol = createBaskPatrol(patrol_name)
		if patrol ~= nil then
			table.insert(bask_patrol_fleets,{name=patrol_name,ships=patrol})
			for j, ship in ipairs(patrol) do
				table.insert(patrol_ships,ship)
			end
		end
	end
	return patrol_ships
end
function createBaskPatrol(patrol_name)
	local patrol = {}
	local named_patrol = {
		["Kraylor01"] = {
			faction = "Kraylor",
			station = stationKrowtok,
			leader_template = "Cucaracha",
			follower_template = "K3 Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1092506,	y = 219392},
				{x = 1103038,	y = 238727},
				{x = 1091113,	y = 242182},
				{x = 1076347,	y = 234604},
				{x = 1071172,	y = 228103},
				{x = 1074118,	y = 212371},
			}
		},
		["Kraylor02"] = {
			faction = "Kraylor",
			station = stationTaklor,
			leader_template = "Blockade Runner",
			follower_template = "Fighter",
			formation_shape = "X",
			formation_spacing = 800,
			patrol_points = {
				{x = 1101966,	y = 228740},
				{x = 1094513,	y = 231826},
				{x = 1089045,	y = 231385},
				{x = 1081548,	y = 234781},
				{x = 1084768,	y = 220405},
				{x = 1076389,	y = 218861},
				{x = 1069157,	y = 228651},
				{x = 1081548,	y = 234781},
				{x = 1084768,	y = 220405},
			}
		},
		["Exuari01"] = {
			faction = "Exuari",
			station = stationPegortamex,
			leader_template = "Farco 11",
			follower_template = "Fighter",
			formation_shape = "Aac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1057338,	y = 231554},
				{x = 1039536,	y = 226590},
				{x = 1042845,	y = 221397},
				{x = 1045641,	y = 230470},
				{x = 1051124,	y = 239636},
			}
		},
		["Exuari02"] = {
			faction = "Exuari",
			station = stationFetundotak,
			leader_template = "Cucaracha",
			follower_template = "K2 Fighter",
			formation_shape = "X",
			formation_spacing = 900,
			patrol_points = {
				{x = 1043995,	y = 222961},
				{x = 1057308,	y = 228469},
				{x = 1046246,	y = 216889},
				{x = 1059221,	y = 219319},
				{x = 1050950,	y = 225677},
			}
		},
		["TSN01"] = {
			faction = "TSN",
			station = stationPromethean,
			leader_template = "Farco 5",
			follower_template = "Fighter",
			formation_shape = "Vac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1093564,	y = 280916},
				{x = 1096306,	y = 262811},
				{x = 1107576,	y = 273068},
				{x = 1096659,	y = 272882},
				{x = 1088534,	y = 268706},
				{x = 1092122,	y = 275037},
			}
		},
		["Ghosts01"] = {
			faction = "Ghosts",
			station = stationSplice,
			leader_template = "Cucaracha",
			follower_template = "MT52 Hornet",
			formation_shape = "Vac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1090784,	y = 283754},
				{x = 1089428,	y = 277545},
				{x = 1088936,	y = 268354},
				{x = 1080681,	y = 269981},
				{x = 1089428,	y = 277545},
				{x = 1098471,	y = 281537},
			}
		},
		["Ktlitans01"] = {
			faction = "Ktlitans",
			station = stationAdephaga,
			leader_template = "Ktlitan Destroyer",
			follower_template = "K2 Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1077536,	y = 271763},
				{x = 1081959,	y = 276421},
				{x = 1078749,	y = 280726},
				{x = 1075501,	y = 283740},
				{x = 1069160,	y = 283114},
				{x = 1070373,	y = 275716},
			}
		},
		["Arlenians01"] = {
			faction = "Arlenians",
			station = stationArleigna,
			leader_template = "Farco 5",
			follower_template = "Fighter",
			formation_shape = "Vac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1081462,	y = 285257},
				{x = 1085398,	y = 286227},
				{x = 1089740,	y = 289921},
				{x = 1082837,	y = 295098},
				{x = 1080060,	y = 287899},
			}
		},
		["Ghosts02"] = {
			faction = "Ghosts",
			station = stationNexus47,
			leader_template = "Blockade Runner",
			follower_template = "K3 Fighter",
			formation_shape = "Xac",
			formation_spacing = 800,
			patrol_points = {
				{x = 1067949,	y = 281961},
				{x = 1075024,	y = 288549},
				{x = 1071907,	y = 293239},
				{x = 1074780,	y = 300179},
				{x = 1071907,	y = 293239},
				{x = 1075024,	y = 288549},
			}
		},
		["CUF01"] = {
			faction = "CUF",
			station = stationJealousJuncture,
			leader_template = "Sentinel",
			follower_template = "Fighter",
			formation_shape = "V",
			formation_spacing = 1200,
			patrol_points = {
				{x = 1062095,	y = 291436},
				{x = 1055284,	y = 300037},
				{x = 1065028,	y = 306400},
				{x = 1048374,	y = 308439},
				{x = 1055284,	y = 300037},
			}
		},
		["Arlenians02"] = {
			faction = "Arlenians",
			station = stationMilornden,
			leader_template = "K2 Breaker",
			follower_template = "K2 Fighter",
			formation_shape = "W",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1052609,	y = 302526},
				{x = 1052920,	y = 296486},
				{x = 1054726,	y = 291491},
				{x = 1060987,	y = 288957},
				{x = 1053199,	y = 284783},
				{x = 1054726,	y = 291491},
				{x = 1052920,	y = 296486},
			}
		},
		["Ktlitans02"] = {
			faction = "Ktlitans",
			station = stationArchostemata,
			leader_template = "Ktlitan Destroyer",
			follower_template = "Fighter",
			formation_shape = "X",
			formation_spacing = 800,
			patrol_points = {
				{x = 1041485,	y = 289564},
				{x = 1043207,	y = 297454},
				{x = 1046372,	y = 304692},
				{x = 1043207,	y = 297454},
			}
		},
		["Ghosts03"] = {
			faction = "Ghosts",
			station = stationSource,
			leader_template = "Farco 11",
			follower_template = "K3 Fighter",
			formation_shape = "V",
			formation_spacing = 800,
			patrol_points = {
				{x = 1036085,	y = 306459},
				{x = 1030525,	y = 305917},
				{x = 1032720,	y = 301840},
				{x = 1033804,	y = 298846},
				{x = 1035971,	y = 296337},
				{x = 1034602,	y = 292374},
				{x = 1031836,	y = 295225},
				{x = 1033804,	y = 298846},
			}
		},
		["Ktlitans03"] = {
			faction = "Ktlitans",
			station = stationColeoptera,
			leader_template = "Cucaracha",
			follower_template = "Ktlitan Scout",
			formation_shape = "V",
			formation_spacing = 900,
			patrol_points = {
				{x = 1025358,	y = 304394},
				{x = 1022067,	y = 301754},
				{x = 1024996,	y = 295280},
				{x = 1026588,	y = 292098},
				{x = 1025394,	y = 289385},
				{x = 1030204,	y = 291989},
				{x = 1026588,	y = 292098},
				{x = 1024996,	y = 295280},
			}
		},
		["CUF02"] = {
			faction = "CUF",
			station = stationTallTable,
			leader_template = "Blockade Runner",
			follower_template = "Cucaracha",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1017917,	y = 302639},
				{x = 1013121,	y = 299849},
				{x = 1018147,	y = 293878},
				{x = 1017917,	y = 288091},
				{x = 1022343,	y = 289013},
				{x = 1018147,	y = 293878},
			}
		},
		["TSN02"] = {
			faction = "TSN",
			station = stationOberon,
			leader_template = "Tempest",
			follower_template = "Fighter",
			formation_shape = "Xac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 990516,	y = 311972},
				{x = 987104,	y = 308238},
				{x = 992764,	y = 302246},
				{x = 993735,	y = 296850},
				{x = 998639,	y = 301168},
				{x = 995076,	y = 305832},
			}
		},
		["Independent01"] = {
			faction = "Independent",
			station = stationLizzy,
			leader_template = "Farco 11",
			follower_template = "Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 989893,	y = 291122},
				{x = 981340,	y = 291582},
				{x = 982423,	y = 286440},
				{x = 989738,	y = 286654},
				{x = 991678,	y = 288768},
			}
		},
		["Independent02"] = {
			faction = "Independent",
			station = stationSpunk,
			leader_template = "Ktlitan Destroyer",
			follower_template = "K3 Fighter",
			formation_shape = "Vac",
			formation_spacing = 1000,
			patrol_points = {
				{x = 979617,	y = 279060},
				{x = 972463,	y = 276041},
				{x = 976992,	y = 271972},
				{x = 980733,	y = 271381},
				{x = 983161,	y = 273875},
			}
		},
		["USN01"] = {
			faction = "USN",
			station = stationShanghai,
			leader_template = "Farco 5",
			follower_template = "K2 Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1097700,	y = 246733},
				{x = 1090519,	y = 245350},
				{x = 1095425,	y = 240800},
				{x = 1102428,	y = 241603},
			}
		},
		["Independent03"] = {
			faction = "Independent",
			station = stationButte,
			leader_template = "Cucaracha",
			follower_template = "Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 981242,	y = 261074},
				{x = 971014,	y = 264340},
				{x = 982032,	y = 254040},
			}
		},
		["Independent04"] = {
			faction = "Independent",
			station = stationElement,
			leader_template = "Guard",
			follower_template = "MU52 Hornet",
			formation_shape = "Aac4",
			formation_spacing = 1000,
			patrol_points = {
				{x = 968692,	y = 241948},
				{x = 976885,	y = 246257},
				{x = 982924,	y = 247316},
				{x = 976885,	y = 246257},
			}
		},
		["Independent05"] = {
			faction = "Independent",
			station = stationForward,
			leader_template = "Ktlitan Destroyer",
			follower_template = "K3 Fighter",
			formation_shape = "V",
			formation_spacing = 1000,
			patrol_points = {
				{x = 975403,	y = 228371},
				{x = 979635,	y = 231586},
				{x = 983541,	y = 232481},
				{x = 988952,	y = 231260},
				{x = 983378,	y = 224872},
			}
		},
		["USN02"] = {
			faction = "USN",
			station = stationHaiTac,
			leader_template = "Ktlitan Destroyer",
			follower_template = "K3 Fighter",
			formation_shape = "X",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1107242,	y = 202049},
				{x = 1115063,	y = 203035},
				{x = 1117640,	y = 210139},
				{x = 1110558,	y = 208256},
			}
		},
		["Human01"] = {
			faction = "Human Navy",
			station = stationBask,
			leader_template = "Dreadnought",
			follower_template = "Fighter",
			formation_shape = "X",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1029715,	y = 243974},
				{x = 1028298,	y = 258481},
				{x = 1024781,	y = 250812},
				{x = 1010860,	y = 248370},
			}
		},
		["Arlenians03"] = {
			faction = "Arlenians",
			station = stationPillia,
			leader_template = "Cucaracha",
			follower_template = "K2 Fighter",
			formation_shape = "M",
			formation_spacing = 1000,
			patrol_points = {
				{x = 1030203,	y = 259947},
				{x = 1034208,	y = 265808},
				{x = 1024683,	y = 273428},
				{x = 1029275,	y = 266297},
			}
		},
		["Independent06"] = {
			faction = "Independent",
			station = stationTorch,
			leader_template = "Farco 13",
			follower_template = "MT52 Hornet",
			formation_shape = "X8",
			formation_spacing = 800,
			patrol_points = {
				{x = 1005828,	y = 259751},
				{x = 1007392,	y = 270449},
				{x = 1012374,	y = 273624},
				{x = 1019896,	y = 273331},
				{x = 1016672,	y = 268495},
			}
		},
	}
	if named_patrol[patrol_name] ~= nil and named_patrol[patrol_name].station ~= nil and named_patrol[patrol_name].station:isValid() then
		local leader_ship = ship_template[named_patrol[patrol_name].leader_template].create(named_patrol[patrol_name].faction,named_patrol[patrol_name].leader_template)
		table.insert(patrol,leader_ship)
		leader_ship.patrol_points = named_patrol[patrol_name].patrol_points
		local fleet_prefix = generateCallSignPrefix()
		local start_point = math.random(1,#leader_ship.patrol_points-1)
		local next_point = start_point + 1
		local prebuilt_fleet_x = leader_ship.patrol_points[start_point].x
		local prebuilt_fleet_y = leader_ship.patrol_points[start_point].y
		leader_ship:setPosition(prebuilt_fleet_x, prebuilt_fleet_y)
		local first_patrol_point_x = leader_ship.patrol_points[next_point].x
		local first_patrol_point_y = leader_ship.patrol_points[next_point].y
		local prebuilt_angle = angleFromVectorNorth(first_patrol_point_x,first_patrol_point_y,prebuilt_fleet_x,prebuilt_fleet_y)
		leader_ship:setHeading(prebuilt_angle)
		leader_ship.formation_ships = {}
		for _, form in ipairs(fly_formation[named_patrol[patrol_name].formation_shape]) do
			local ship = ship_template[named_patrol[patrol_name].follower_template].create(named_patrol[patrol_name].faction,named_patrol[patrol_name].follower_template)
			table.insert(patrol,ship)
			local form_x, form_y = vectorFromAngleNorth(prebuilt_angle + form.angle, form.dist * named_patrol[patrol_name].formation_spacing)
			local form_prime_x, form_prime_y = vectorFromAngle(form.angle, form.dist * named_patrol[patrol_name].formation_spacing)
			ship:setPosition(prebuilt_fleet_x + form_x, prebuilt_fleet_y + form_y):setHeading(prebuilt_angle):orderFlyFormation(leader_ship,form_prime_x,form_prime_y)
			ship:setCallSign(generateCallSign(fleet_prefix))
			table.insert(leader_ship.formation_ships,ship)
		end
		leader_ship:orderFlyTowards(first_patrol_point_x,first_patrol_point_y)
		update_system:addPatrol(leader_ship,leader_ship.patrol_points,next_point,5)
		return patrol
	else
		return nil
	end
end
function baskSector()
	bask_color = true
	bask_planets = createBaskPlanets()
	bask_asteroids = createBaskAsteroids()
	bask_stations = createBaskStations()
	bask_patrols = createBaskPatrols()
	bask_nebulae = createBaskNebulae()
	regionStations = bask_stations
	if stationBask ~= nil then
		table.insert(regionStations,stationBask)
	end
	return {destroy=removeBaskColor}
end
function removeBaskColor()
	bask_color = false
	--	planets
	if bask_planets ~= nil then
		for _, bp in pairs(bask_planets) do
			bp:destroy()
		end
	end
	bask_planets = nil
	--	asteroids
	if bask_asteroids ~= nil then
		for _, ba in pairs(bask_asteroids) do
			ba:destroy()
		end
	end
	bask_asteroids = nil
	--	stations
	if bask_stations ~= nil then
		for _, bs in pairs(bask_stations) do
			if bs ~= stationBask then
				bs:destroy()
			end
		end
	end
	bask_stations = nil
	--	defense platforms
	if bask_defense_platforms ~= nil then
		for _, bd in pairs(bask_defense_platforms) do
			bd:destroy()
		end
	end
	bask_defense_platforms = nil
	--	patrols
	if bask_patrols ~= nil then
		for _, bp in pairs(bask_patrols) do
			bp:destroy()
		end
	end
	bask_patrols = nil
	--	nebulae
	if bask_nebulae ~= nil then
		for _, bn in pairs(bask_nebulae) do
			bn:destroy()
		end
	end
	bask_nebulae = nil
end
--- Riptide binary sector
function riptideBinarySector()
	local objects = {}

	local regionCenterX = -740031
	local regionCenterY = 19946

	--- global variable to be accessible in oneoffs.
	riptideAlphaStar = BlackHole():setCallSign("Riptide A*"):setPosition(regionCenterX, regionCenterY):
		setScanningParameters(2, 3):setDescriptions("Unclassified black hole", 
			"Mass: 15.3 M Sol\n"..
			"---\n" ..
			"Stellar remnant locked in a dance with its partner. Likely a remnant of ~20 M☉ dwarf star.\n" ..
			"Friction between gas molecules in the accretion disk causes electric discharges, which has a draining effect on shields.\n" ..
			"Anomaly detected: slightly positive electric charge (+0.01 Coulombs). Normally, black holes are electrically neutral."
			):setScanned(true)
	table.insert(objects, riptideAlphaStar)

	local centerX, centerY = riptideAlphaStar:getPosition()

	local riptideBeta = Planet():setCallSign("Riptide B"):setPosition(centerX, centerY + 6000):
		setPlanetRadius(500):setOrbit(riptideAlphaStar, 30):setAxialRotationTime(10):setPlanetAtmosphereTexture("planets/star-1.png"):setPlanetAtmosphereColor(1, 1, 1):
		setScanningParameters(2, 3):setDescriptions("Unclassified star", 
			"Mass: 0.5 M Sol\n"..
			"---\n" ..
			"A typical white dwarf in a binary system, tidaly locked with its parent Black Hole.\n"
			):setScanned(true)
	table.insert(objects, riptideBeta)

	--- global variables to be accessible in oneoffs.
	riptideGammaOrbitPeriod = 8000
	riptideGammaOrbitRadius = 100000
	riptideGamma = Planet():setCallSign("Riptide C"):setPosition(centerX, centerY + riptideGammaOrbitRadius):
		setPlanetRadius(4000):setOrbit(riptideAlphaStar, riptideGammaOrbitPeriod):setAxialRotationTime(180):
		setPlanetSurfaceTexture("planets/gas-1.png"):
		setPlanetAtmosphereTexture("planets/atmosphere.png"):setPlanetAtmosphereColor(.2,.1,.1):
		setScanningParameters(2, 3):setDescriptions("Unclassified planet", 
			"Planet type: Hypermassive Jupiter\n" ..
			"Mass: 232,000 M Earth\n" ..
			"Surface temp. [K]: 8300\n" ..
			"Composition: 99% Hydrogen, 0.8% Helium, noble gases\n" ..
			"---\n" ..
			"Abnormally large Jupiter. It seems to be feeding the black hole in the center of this system.\n" ..
			"Est. lifetime before planet evaporates completely: ~200,000 years."
			):setScanned(true)
	table.insert(objects, riptideGamma)


	-- r = R cubicRoot(Msmall / 3Mlarge)
	-- Msmall = mGammaInEarhts = 317.8
	-- mSolInEarths = 333000
	-- Mlarge = mAlphaInEarths = 0.5 * mSolInEarths
	local langrange2FromRiptideGamma = riptideGammaOrbitRadius * 0.86
	local anomalyOrbitRadius = riptideGammaOrbitRadius + langrange2FromRiptideGamma
	local spacetimeLens = Planet():setPosition(centerX, centerY + anomalyOrbitRadius):
		setPlanetCloudTexture("./skybox/front.png"):
		setPlanetSurfaceTexture("./skybox/right.png"):
		setAxialRotationTime(360):
		setPlanetRadius(2000):setOrbit(riptideAlphaStar, riptideGammaOrbitPeriod):
		setScanningParameters(3, 4):setDescriptions("Unknown spacetime anomaly", 
			"Type: unknown spacetime anomaly.\n"..
			"---\n" ..
			"Preliminary scans show that this anomaly acts like a spacetime lens of sorts. It acts both in spatial and time directions. " .. 
			"Events taking place in another part of the universe can be seen through it. " ..
			"It is not clear whether the anomaly is traversable. More research is required."
		)
	table.insert(objects, spacetimeLens)

	psamtikStationComms = function(comms_source, comms_target) 
		setCommsMessage("---------------------")
		addCommsReply("Contact",function()
			setCommsMessage("Stand by while connecting")
			commsSwitchToGM()
			addGMMessage(string.format("Player ship %s in %s initiating contact to GM on %s station %s in %s.\nPrompt was %s %s", comms_source:getCallSign(), comms_source:getSectorName(),comms_target:getFaction(),comms_target:getCallSign(),comms_target:getSectorName(),gm_verb,gm_name))
			addCommsReply("Back", commsStation)
		end)
	end
	psamtikStation = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):
		setCallSign("Psamtik"):
		setDescription("An Arlenian station is detected inside the anomaly."):
		setCommsScript(""):setCommsFunction(psamtikStationComms):setScanned(false)
	update_system:addUpdate(psamtikStation, "riptide-icarus wormhole rotation", {
		anomaly=spacetimeLens,
		update=function(self, obj, delta)
			if not obj:isValid() then
				return
			end
			local anX, anY = self.anomaly:getPosition()
			obj:setPosition(anX + 300, anY + 300) -- stay inside the center of anomaly
		end
	})
	table.insert(objects, psamtikStation)


	--- I hand-placed asteroids based on this point, and was too lazy to convert to relative measurements. But let's do it programatically.
	local asteroidsPosDatumX = -50005
	local asteroidsPosDatumY = -290220
	local asteroids = {
		{posX = 7485, posY = -213247, size= 124, type="Asteroid"},
		{posX = -115013, posY = -218045, size= 121, type="Asteroid"},
		{posX = -112653, posY = -212735, size= 129, type="Asteroid"},
		{posX = -122290, posY = -225125, size= 129, type="Asteroid"},
		{posX = -119536, posY = -239480, size= 125, type="Asteroid"},
		{posX = -130287, posY = -230881, size= 122, type="Asteroid"},
		{posX = -130156, posY = -226698, size= 124, type="Asteroid"},
		{posX = -125436, posY = -221978, size= 111, type="Asteroid"},
		{posX = -127610, posY = -228471, size= 120, type="Asteroid"},
		{posX = -127599, posY = -233974, size= 130, type="Asteroid"},
		{posX = -131384, posY = -233590, size= 116, type="Asteroid"},
		{posX = -132070, posY = -234733, size= 121, type="Asteroid"},
		{posX = -136449, posY = -236137, size= 130, type="Asteroid"},
		{posX = -138219, posY = -227681, size= 117, type="Asteroid"},
		{posX = -133499, posY = -227288, size= 112, type="Asteroid"},
		{posX = -137403, posY = -233514, size= 300, type="Asteroid"},
		{posX = -141759, posY = -235744, size= 120, type="Asteroid"},
		{posX = -139595, posY = -252066, size= 124, type="Asteroid"},
		{posX = -141759, posY = -247347, size= 129, type="Asteroid"},
		{posX = -141955, posY = -228468, size= 120, type="Asteroid"},
		{posX = -140222, posY = -240447, size= 129, type="Asteroid"},
		{posX = -140775, posY = -243020, size= 200, type="Asteroid"},
		{posX = -136717, posY = -236485, size= 115, type="Asteroid"},
		{posX = -137825, posY = -242824, size= 121, type="Asteroid"},
		{posX = -138698, posY = -238085, size= 126, type="Asteroid"},
		{posX = -136449, posY = -245970, size= 114, type="Asteroid"},
		{posX = -133499, posY = -232794, size= 116, type="Asteroid"},
		{posX = -133696, posY = -240267, size= 128, type="Asteroid"},
		{posX = -140775, posY = -259146, size= 128, type="Asteroid"},
		{posX = -143673, posY = -252432, size= 125, type="Asteroid"},
		{posX = -146886, posY = -256849, size= 122, type="Asteroid"},
		{posX = -147917, posY = -259875, size= 114, type="Asteroid"},
		{posX = -147308, posY = -247304, size= 129, type="Asteroid"},
		{posX = -148603, posY = -241742, size= 126, type="Asteroid"},
		{posX = -145888, posY = -252263, size= 117, type="Asteroid"},
		{posX = 30406, posY = -242591, size= 110, type="Asteroid"},
		{posX = 29776, posY = -245739, size= 120, type="Asteroid"},
		{posX = 41866, posY = -246243, size= 111, type="Asteroid"},
		{posX = 40355, posY = -248006, size= 600, type="Asteroid"},
		{posX = 41614, posY = -244354, size= 128, type="Asteroid"},
		{posX = 45518, posY = -251784, size= 125, type="Asteroid"},
		{posX = 44637, posY = -252036, size= 124, type="Asteroid"},
		{posX = 42748, posY = -244354, size= 121, type="Asteroid"},
		{posX = 44259, posY = -245865, size= 119, type="Asteroid"},
		{posX = 35947, posY = -244354, size= 500, type="Asteroid"},
		{posX = 34436, posY = -239442, size= 125, type="Asteroid"},
		{posX = 39725, posY = -239694, size= 116, type="Asteroid"},
		{posX = 39599, posY = -237427, size= 115, type="Asteroid"},
		{posX = 36703, posY = -234782, size= 119, type="Asteroid"},
		{posX = 41363, posY = -232642, size= 114, type="Asteroid"},
		{posX = 43000, posY = -236546, size= 115, type="Asteroid"},
		{posX = 14286, posY = -218410, size= 122, type="Asteroid"},
		{posX = 22094, posY = -221559, size= 122, type="Asteroid"},
		{posX = 18064, posY = -215892, size= 300, type="Asteroid"},
		{posX = 23227, posY = -221433, size= 112, type="Asteroid"},
		{posX = 29146, posY = -234657, size= 115, type="Asteroid"},
		{posX = 29272, posY = -234405, size= 128, type="Asteroid"},
		{posX = 26502, posY = -227730, size= 118, type="Asteroid"},
		{posX = 30658, posY = -229871, size= 110, type="Asteroid"},
		{posX = 25872, posY = -236168, size= 400, type="Asteroid"},
		{posX = 24361, posY = -232642, size= 124, type="Asteroid"},
		{posX = 23101, posY = -228612, size= 116, type="Asteroid"},
		{posX = 22724, posY = -234027, size= 111, type="Asteroid"},
		{posX = 36199, posY = -229997, size= 116, type="Asteroid"},
		{posX = 31539, posY = -232390, size= 127, type="Asteroid"},
		{posX = 34436, posY = -235916, size= 110, type="Asteroid"},
		{posX = 35066, posY = -234279, size= 124, type="Asteroid"},
		{posX = 28769, posY = -225967, size= 113, type="Asteroid"},
		{posX = 27761, posY = -231256, size= 130, type="Asteroid"},
		{posX = 45644, posY = -240450, size= 125, type="Asteroid"},
		{posX = 47533, posY = -239316, size= 113, type="Asteroid"},
		{posX = 46274, posY = -245739, size= 111, type="Asteroid"},
		{posX = 38466, posY = -245361, size= 123, type="Asteroid"},
		{posX = 38466, posY = -242717, size= 116, type="Asteroid"},
		{posX = 31791, posY = -238057, size= 121, type="Asteroid"},
		{posX = 30784, posY = -239190, size= 118, type="Asteroid"},
		{posX = 28139, posY = -238435, size= 121, type="Asteroid"},
		{posX = 35821, posY = -237049, size= 113, type="Asteroid"},
		{posX = 46022, posY = -262363, size= 111, type="Asteroid"},
		{posX = 44637, posY = -261104, size= 128, type="Asteroid"},
		{posX = 46148, posY = -256192, size= 112, type="Asteroid"},
		{posX = 46400, posY = -257955, size= 123, type="Asteroid"},
		{posX = 51564, posY = -266393, size= 122, type="Asteroid"},
		{posX = 13610, posY = -216959, size =125, type="VisualAsteroid"}, 
		{posX = -118374, posY = -216156, size =113, type="VisualAsteroid"}, 
		{posX = -134437, posY = -236101, size =122, type="VisualAsteroid"}, 
		{posX = -132027, posY = -231014, size =128, type="VisualAsteroid"}, 
		{posX = -136177, posY = -240518, size =114, type="VisualAsteroid"}, 
		{posX = -126673, posY = -219101, size =115, type="VisualAsteroid"}, 
		{posX = -136980, posY = -239715, size =117, type="VisualAsteroid"}, 
		{posX = -143405, posY = -243597, size =122, type="VisualAsteroid"}, 
		{posX = -150366, posY = -257518, size =116, type="VisualAsteroid"}, 
		{posX = -146350, posY = -261936, size =117, type="VisualAsteroid"}, 
		{posX = -149161, posY = -247077, size =122, type="VisualAsteroid"}, 
		{posX = -148760, posY = -251495, size =111, type="VisualAsteroid"}, 
		{posX = 31413, posY = -243865, size =117, type="VisualAsteroid"}, 
		{posX = 43594, posY = -246274, size =124, type="VisualAsteroid"}, 
		{posX = 38909, posY = -248148, size =118, type="VisualAsteroid"}, 
		{posX = 44531, posY = -257117, size =116, type="VisualAsteroid"}, 
		{posX = 42255, posY = -251629, size =112, type="VisualAsteroid"}, 
		{posX = 43594, posY = -253369, size =111, type="VisualAsteroid"}, 
		{posX = 42523, posY = -241991, size =118, type="VisualAsteroid"}, 
		{posX = 32484, posY = -233825, size =116, type="VisualAsteroid"}, 
		{posX = -146752, posY = -239715, size =122, type="VisualAsteroid"}, 
		{posX = 21641, posY = -224054, size =129, type="VisualAsteroid"}, 
		{posX = 30342, posY = -228070, size =119, type="VisualAsteroid"}, 
		{posX = 35696, posY = -228337, size =127, type="VisualAsteroid"}, 
		{posX = 48413, posY = -241188, size =129, type="VisualAsteroid"}, 
		{posX = 48413, posY = -241188, size =129, type="VisualAsteroid"}, 
	}

	for i=1, #asteroids do
		local a = asteroids[i]
		local relX = asteroids[i].posX - asteroidsPosDatumX
		local relY = asteroids[i].posY - asteroidsPosDatumY
		local absX = centerX + relX
		local absY = centerY + relY
		local as = nil
		if a.type == "Asteroid" then
			as = Asteroid()
		elseif a.type == "VisualAsteroid" then
			as = VisualAsteroid()
		else
			assert(false)
		end
		
		as:setPosition(absX, absY):setSize(a.size)

		local initialOrbitAngle = angleFromVectorNorth(absX, absY, centerX, centerY) - 90
		local orbitRadius = distance(asteroids[i].posX, asteroids[i].posY, asteroidsPosDatumX, asteroidsPosDatumY)
		update_system:addOrbitTargetUpdate(as, riptideAlphaStar, orbitRadius, riptideGammaOrbitPeriod, initialOrbitAngle)
		table.insert(objects, as)
	end


	local riptideDelta = Planet():setCallSign("Riptide D"):setPosition(centerX - riptideGammaOrbitRadius * math.sqrt(3) / 2, centerY + riptideGammaOrbitRadius / 2):
		setPlanetRadius(500):setOrbit(riptideAlphaStar, riptideGammaOrbitPeriod):setAxialRotationTime(60):
		setPlanetSurfaceTexture("planets/moon-1.png"):
		setScanningParameters(2, 3):setDescriptions("Unclassified planet", 
			"Planet type: Planetoid\n" ..
			"Mass: 0.0001 M Earth\n" ..
			"Composition: 91% Fe, 8.5% Ni, traces of rare earth elements\n" ..
			"---\n" ..
			"The largest planetoid in this system, sitting comfortably in a Lagrange point of " .. riptideGamma:getCallSign() .. " - " ..
				riptideAlphaStar:getCallSign() .. " system.\n" ..
			"Anomaly detected: rich deposits of latinum found below the regolith."
			):setScanned(true)
	table.insert(objects, riptideDelta)

	--Riptide Research
    stationHossenfelder = SpaceStation():setTemplate("Small Station"):setFaction("Human Navy"):setCallSign("Hossenfelder"):setDescription("Stellar phenomenon research"):setCommsScript(""):setCommsFunction(commsStation)
	stationHossenfelder:setPosition(centerX - (riptideGammaOrbitRadius * math.sqrt(3) / 2) + 1300, centerY + riptideGammaOrbitRadius / 2)
	update_system:addOrbitTargetUpdate(stationHossenfelder, riptideDelta, 1300, 700, 0)
	stationHossenfelder:setShortRangeRadarRange(8500)
	stationHossenfelder.comms_data = {
    	friendlyness = 77,
        weapons = 			{Homing = "neutral",HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = 3, 		HVLI = math.random(1,4),Mine = math.random(2,7),Nuke = math.random(10,18),	EMP = math.random(7,15) },
        weapon_available = 	{Homing = true,		HVLI = true,			Mine = random(1,100)<50,Nuke = random(1,100)<30,	EMP = random(1,100)<40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        scan_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        sensor_boost = {value = 10000, cost = 20},
        reputation_cost_multipliers = {friend = 1.0, neutral = 3.0},
        max_weapon_refill_amount = {friend = 1.0, neutral = 1.0 },
        goods = {	nickel = 	{quantity = math.random(1,10),	cost = math.random(60,70)},	
        			dilithium =	{quantity = math.random(6,12),	cost = math.random(75,95)},
        		},
        trade = {	food = false, medicine = random(1,100)<=13, luxury = true },
        public_relations = true,
        general_information = "We're here to scan all the interesting planetary bodies and nebulae in the area. The mining operation is incidental",
    	history = "After the wormhole near Speculator was found and this region was identified, several scientists got funding together to construct this station to further our knowledge of all the things flitting about and why they might be behaving in this manner.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "WX-Lindworm",
    	},
	}
	stationHossenfelder:setRestocksScanProbes(random(1,100)<87)
	stationHossenfelder:setRepairDocked(random(1,100)<76)
	stationHossenfelder:setSharesEnergyWithDocked(random(1,100)<92)
	table.insert(objects, stationHossenfelder)
	
	local gravityAcceleration = 500000
	local slowOrbitDegPerSec = 360 / riptideGammaOrbitPeriod
	local fastOrbitDegPerSec = 30

	blackHoleOrbitUpdater = function(obj, centerX, centerY, minSpeed, maxSpeed, minSpeedDistance, maxSpeedDistance, gravityAcceleration)
		if not obj:isValid() then
			return
		end

		-- 1/x decay
		local a = (minSpeed - maxSpeed) * (maxSpeedDistance * minSpeedDistance) / (minSpeedDistance - maxSpeedDistance)
		local b = maxSpeed - a / minSpeedDistance
	
		local currentDistance = distance(obj, centerX, centerY)

		local objX, objY = obj:getPosition()
		local initialAngle = angleFromVectorNorth(objX, objY, centerX, centerY)

		local update_data = {
			startTime = getScenarioTime(),
			centerX = centerX,
			centerY = centerY,
			expectedPosX = objX,
			expectedPosY = objY,
			initialAngle = initialAngle,
			currentDistance = currentDistance,
			minSpeed = minSpeed,
			maxSpeed = maxSpeed,
			minSpeedDistance = minSpeedDistance,
			maxSpeedDistance = maxSpeedDistance,
			a = a,
			b = b,
			gravityAcceleration = gravityAcceleration,
			edit = {
				{name = "currentDistance" , fixedAdjAmount=100},
			},
			update = function (self, obj, delta)

				if self.currentDistance > 2*maxSpeedDistance then
					--- outside sphere of influence
					return
				end
				
				local orbitSpeedDegPerSec = self.a / (self.currentDistance) + self.b
				orbitSpeedDegPerSec = math.min(orbitSpeedDegPerSec, self.maxSpeed)
				orbitSpeedDegPerSec = math.max(orbitSpeedDegPerSec, self.minSpeed)

				local period = 360 / orbitSpeedDegPerSec

				local stime = getScenarioTime()
				
				local newObjX, newObjY = obj:getPosition()
				local orbitDecay = delta * gravityAcceleration / (self.currentDistance)
				if orbitDecay > 0 then
					if orbitDecay > self.maxSpeed then
						orbitDecay = self.maxSpeed
					end
					self.currentDistance = self.currentDistance - orbitDecay

					--- orbit radius changed, reset phase
					self.initialAngle = angleFromVectorNorth(newObjX, newObjY, self.centerX, self.centerY)
					self.startTime = stime - delta --- why subtract delta, see below
				else	
					--- we can't handle orbit decay and external perturbations at the same time (couldn't get it to work)
					local posDeviation = distance(newObjX, newObjY, self.expectedPosX, self.expectedPosY)
					if posDeviation > 0.1 then
						--- orbit radius changed, reset phase
						self.initialAngle = angleFromVectorNorth(newObjX, newObjY, self.centerX, self.centerY)
						self.currentDistance = distance(newObjX, newObjY, self.centerX, self.centerY)
						--- not completely sure why but thanks to subtracting the delta, the orbital movement is "added" onto external perturbations.
						self.startTime = stime - delta 
					end
				end

				if self.currentDistance < 0 then
					self.currentDistance = 0
				end

				local orbitAngleDeg = self.initialAngle + 360 * (stime - self.startTime) / period

				local dx, dy = vectorFromAngleNorth(orbitAngleDeg, self.currentDistance)
				obj:setPosition(centerX + dx, centerY + dy)

				self.expectedPosX = centerX + dx
				self.expectedPosY = centerY + dy
			end
		}
		update_system:addUpdate(obj, "blackhole orbit", update_data)
	end



	riptideToIcarusWormHole = WormHole():setPosition(centerX, centerY - riptideGammaOrbitRadius):
		setScanningParameters(2, 3):setDescriptions("Unexplored wormhole", 
			"Anomaly type: Wormhole\n" ..
			"Leads to: Icarus sector" ..
			"---\n" ..
			"Stabilised space time tunnel leading to somewhere in Icarus system. Its orbit places it in a Lagrange point of " .. riptideGamma:getCallSign() .. " - " ..
				riptideAlphaStar:getCallSign() .. " system.\n"
			):setScanned(true):setTargetPosition(49157, 123520) -- nebula next to Speculator 3
		
	local wormHoleX, wormHoleY = riptideToIcarusWormHole:getPosition()
	local wormHoleInitialOrbitAngle = angleFromVectorNorth(wormHoleX, wormHoleY, centerX, centerY) - 90
	local wormHoleOrbitRadius = distance(wormHoleX, wormHoleY, centerX, centerY)
	blackHoleOrbitUpdater(riptideToIcarusWormHole, centerX, centerY, slowOrbitDegPerSec, fastOrbitDegPerSec, 5000, riptideGammaOrbitRadius, 0)
	update_system:addUpdate(riptideToIcarusWormHole, "riptide-icarus wormhole rotation", {
		update=function(self, obj, delta)
			if not obj:isValid() then
				return
			end
			obj:setRotation(getScenarioTime() * 10)
		end
	})
	table.insert(objects, riptideToIcarusWormHole)

	-- --- For a scenario; comment/remove if not needed
	-- note2: maryCeleste is currently stuck in an alternate reality, where players are Kraylor. One can reach it through Psamitk's spacetime lens.
	-- (Mary Celeste is docked to Transylvania station)
	-- note: maryCeleste is a global variable - so we can remove orbit function in kosaiOneOff
	-- maryCeleste = CpuShip():setFaction("Arlenians"):setCallSign("Mary Celeste"):setTemplate("Equipment Freighter 2"):setCommsFunction(nil):
	-- 	setScanningParameters(2, 3):setPosition(centerX + 2000, centerY + riptideGammaOrbitRadius)
	-- maryCeleste:setRadarSignatureInfo(maryCeleste:getRadarSignatureGravity(), maryCeleste:getRadarSignatureElectrical(), 0)
	-- maryCeleste:setPosition(centerX + 3000, centerY + anomalyOrbitRadius):setJumpDrive(true):orderDock(psamtikStation):setFaction("Human Navy")
	-- table.insert(objects, maryCeleste)

	nebulaRotationAndFrictionUpdater = function(self, obj, delta)
		if not obj:isValid() then
			return
		end
		local nx, ny = obj:getPosition()
		local angle = angleFromVectorNorth(nx, ny, centerX, centerY)
		obj:setRotation(obj.facingAngle + angle) --- keep facing towards the central black hole

		if distance(nx, ny, centerX, centerY) < 25000 and getScenarioTime() > self.nextExplosionAt then
			local shipInFrictionArea = false
			local objs = getObjectsInRadius(centerX, centerY, 30000)
			for i=1, #objs do
				if isObjectType(objs[i],"PlayerSpaceship") or isObjectType(objs[i],"CpuShip") then
					shipInFrictionArea = true
					break
				end
			end

			if shipInFrictionArea then
				self.nextExplosionAt = getScenarioTime() + irandom(0, 10)
			else 
				--- resource optimization (apparently there is a memory leak when spawning explosions)
				-- obviously this isn't a fix, but let's spawn explosions less frequently when "noone is there to see it"
				self.nextExplosionAt = getScenarioTime() + irandom(0, 100)
			end

			local shipInNebula = false
			local objs = obj:getObjectsInRange(5000)
			for i=1, #objs do
				if isObjectType(objs[i],"PlayerSpaceship") or isObjectType(objs[i],"CpuShip") then
					shipInNebula = true
					break
				end
			end
			if not shipInNebula then
				--- lower chance of spawning if no ship in this particular nebula
				if irandom(0, 100) < 70 then
					return
				end
			end

			local size = irandom(100,1000)
			local ee = ElectricExplosionEffect():setPosition(nx + irandom(-2000, 2000), ny + irandom(-2000, 2000)):setSize(irandom(100,1000)):setOnRadar(true)
			local objs = ee:getObjectsInRange(size)
			for i=1, #objs do
				if isObjectType(objs[i],"PlayerSpaceship") or isObjectType(objs[i],"CpuShip") then
					local newShields = {}
					if objs[i]:getShieldsActive() then
						for j=1, objs[i]:getShieldCount() do
							table.insert(newShields, 0.8 * objs[i]:getShieldLevel(j))
						end
						objs[i]:setShields(table.unpack(newShields))
					end
				end
			end
		end
	end

	-- nebulas which have stable orbits
	local amount = 100
	local distMin = 10000
	local distMax = riptideGammaOrbitRadius
	for n=1, amount do
		local angle = random(0, 360)
		local radius = random(distMin, distMax)
		local x = centerX + math.cos(angle / 180 * math.pi) * radius
		local y = centerY + math.sin(angle / 180 * math.pi) * radius
		local neb = Nebula():setPosition(x, y)
		neb.facingAngle = irandom(0, 360)
		blackHoleOrbitUpdater(neb, centerX, centerY, slowOrbitDegPerSec, fastOrbitDegPerSec, 5000, riptideGammaOrbitRadius, 0)
		update_system:addUpdate(neb, "nebula misc", {
			nextExplosionAt=0,
			update=nebulaRotationAndFrictionUpdater
		})
		table.insert(objects, neb)
	end

	--- nebulas which are sucked from red giant
	nebulaSpawner = function(obj)
		local numNebulas = irandom(1, 3)
		for i=1, numNebulas do
			local sx, sy = riptideGamma:getPosition()

			local angleToCenter = angleFromVectorNorth(centerX, centerY, sx, sy)
			local dpx, dpy = vectorFromAngleNorth(angleToCenter, 1000)

			local neb = Nebula():setPosition(sx + dpx + irandom(-500, 500), sy + dpy + irandom(-500, 500))
			neb.facingAngle = irandom(0, 360)

			local thisGravAccel = gravityAcceleration * random(80, 120) -- little bit of jitter so it spreads out nicely
			--- some tweaking here to get a nice spiral
			blackHoleOrbitUpdater(neb, centerX, centerY, slowOrbitDegPerSec, fastOrbitDegPerSec, 10000, riptideGammaOrbitRadius, thisGravAccel)
			update_system:addUpdate(neb, "nebula misc", {
				nextExplosionAt=0,
				update=nebulaRotationAndFrictionUpdater
			})

			table.insert(objects, neb)
			neb:onDestroyed(function(obj, instigator)
				--- remove self from objects
				-- well, not really remove, because it messes up the destroy hook of the region
				-- but set as nil to conserve memory (I hope)
				for i=1, #objects do
					if obj == objects[i] then
						objects[i] = nil
						break
					end
				end
			end)
		end
	end
	update_system:addPeriodicCallback(riptideGamma, nebulaSpawner, 5, 0, 2)

	addGMMessage("[Riptide Binary] starting objects, count=" .. #objects)

	local ret = {
		destroy = function(self)
			addGMMessage("[Riptide Binary] removing objects, count=" .. #self.objects)

			lastCount = #self.objects
			for i=1, #self.objects do
				if self.objects[i] ~= nil then
					self.objects[i]:destroy()
				end
			end
		end,
		objects = objects
	}
	return ret
end
--	Staunch region
function staunchSector()
	staunch_color = true
	staunch_planets = createStaunchPlanets()
	staunch_asteroids = createStaunchAsteroids()
	staunch_phenomenon = createStaunchPhenomenon()
	staunch_defense_platforms = {}
	staunch_stations = createStaunchStations()
	staunch_patrols = createStaunchPatrols()
	updateStaunch = updateStaunchPhenomenon
	regionStations = staunch_stations
	return {destroy=removeStaunchColor}
end
function createStaunchPatrols()
	staunch_patrol_fleets = {}
	local patrol_ships = {}
	local patrol_list = {
		"HumanStaunch01",
		"HumanStaunch02",
		"IndependentWortast01",
		"IndependentWortast02",
		"CUFTrendy01",
		"CUFTrendy02",
		"IndependentKoonts01",
		"IndependentKoonts02",
		"TSNArchon01",
		"TSNArchon02",
		"GhostsInversion01",
		"KtlitansChitin01",
		"GhostsVectoria01",
		"ArleniansLumpid01",
		"ArleniansLumpid02",
		"KtlitansUnira01",
		"USNDalton01",
		"KraylorHorst01",
		"KraylorHorst02",
		"KraylorHorst03",
	}
	for i, patrol_name in ipairs(patrol_list) do
		local patrol = createStaunchPatrol(patrol_name)
		if patrol ~= nil then
			table.insert(staunch_patrol_fleets,{name=patrol_name,ships=patrol})
			for j, ship in ipairs(patrol) do
				table.insert(patrol_ships,ship)
			end
		end
	end
	return patrol_ships
end
function createStaunchPatrol(patrol_name)
	local patrol = {}
	local named_patrol = {
		["HumanStaunch01"] = {
			faction = "Human Navy",
			station = stationStaunch,
			leader_template = "Cucaracha",
			follower_template = "K3 Fighter",
			formation_shape = "V",
			formation_spacing = 500,
			patrol_points = {
				{x = 162783,	y = 728481},
				{x = 217991,	y = 732387},
				{x = 196376,	y = 811294},
				{x = 165908,	y = 761554},
				{x = 144999,	y = 772379},
			},
		},
		["HumanStaunch02"] = {
			faction = "Human Navy",
			station = stationStaunch,
			leader_template = "Nirvana R5A",
			follower_template = "Fighter",
			formation_shape = "X",
			formation_spacing = 600,
			patrol_points = {
				{x = 116428,	y = 795929},
				{x = 107835,	y = 776137},
				{x = 135960,	y = 780304},
			},
		},
		["IndependentWortast01"] = {
			faction = "Independent",
			station = stationWortast,
			leader_template = "Phobos T3",
			follower_template = "MT55 Hornet",
			formation_shape = "V4",
			formation_spacing = 400,
			patrol_points = {
				{x = 111700,	y = 714273},
				{x = 145408,	y = 691024},
				{x = 138320,	y = 729439},
				{x = 118547,	y = 729390},
			},
		},
		["IndependentWortast02"] = {
			faction = "Independent",
			station = stationWortast,
			leader_template = "Phobos T3",
			follower_template = "K2 Fighter",
			formation_shape = "W",
			formation_spacing = 800,
			patrol_points = {
				{x = 107790,	y = 731245},
				{x = 103243,	y = 759400},
				{x = 72462,		y = 765423},
				{x = 88689,		y = 746686},
				{x = 94210,		y = 727281},
			},
		},
		["CUFTrendy01"] = {
			faction = "CUF",
			station = stationTrendy,
			leader_template = "Cucaracha",
			follower_template = "MU52 Hornet",
			formation_shape = "V4",
			formation_spacing = 700,
			patrol_points = {
				{x = 83620,		y = 698563},
				{x = 106462,	y = 700847},
				{x = 109616,	y = 683879},
				{x = 93301,		y = 683118},
			},
		},
		["CUFTrendy02"] = {
			faction = "CUF",
			station = stationTrendy,
			leader_template = "Farco 8",
			follower_template = "Ktlitan Scout",
			formation_shape = "*",
			formation_spacing = 900,
			patrol_points = {
				{x = 81336,		y = 700086},
				{x = 74374,		y = 714009},
				{x = 59908,		y = 705307},
				{x = 76876,		y = 704437},
			},
		},
		["IndependentKoonts01"] = {
			faction = "Independent",
			station = stationKoonts,
			leader_template = "Nirvana R5",
			follower_template = "K3 Fighter",
			formation_shape = "X",
			formation_spacing = 800,
			patrol_points = {
				{x = 12078,		y = 715432},
				{x = 10076,		y = 739088},
				{x = 33857,		y = 715307},
			},
		},
		["IndependentKoonts02"] = {
			faction = "Independent",
			station = stationKoonts,
			leader_template = "Phobos T3",
			follower_template = "Fighter",
			formation_shape = "H",
			formation_spacing = 1000,
			patrol_points = {
				{x = 18272,		y = 707510},
				{x = 7949,		y = 704589},
				{x = 60,		y = 711406},
				{x = 7267,		y = 701570},
			},
		},
		["TSNArchon01"] = {
			faction = "TSN",
			station = stationArchon,
			leader_template = "Nirvana R5A",
			follower_template = "Ktlitan Scout",
			formation_shape = "X8",
			formation_spacing = 1000,
			patrol_points = {
				{x = -18424,	y = 755833},
				{x = -9500,		y = 749644},
				{x = 8059,		y = 762022},
				{x = 1870,		y = 773536},
				{x = -16985,	y = 766627},
			},
		},
		["TSNArchon02"] = {
			faction = "TSN",
			station = stationArchon,
			leader_template = "Farco 11",
			follower_template = "K2 Fighter",
			formation_shape = "V4",
			formation_spacing = 1000,
			patrol_points = {
				{x = -19863,	y = 748493},
				{x = -20583,	y = 765908},
				{x = -34112,	y = 761734},
				{x = -30658,	y = 748349},
			},
		},
		["GhostsInversion01"] = {
			faction = "Ghosts",
			station = stationInversion,
			leader_template = "Phobos T3",
			follower_template = "MT55 Hornet",
			formation_shape = "X8",
			formation_spacing = 600,
			patrol_points = {
				{x = 23088,	y = 789440},
				{x = 2732,	y = 784626},
				{x = 39730,	y = 776924},
			},
		},
		["KtlitansChitin01"] = {
			faction = "Ktlitans",
			station = stationChitin,
			leader_template = "Cucaracha",
			follower_template = "K3 Fighter",
			formation_shape = "*",
			formation_spacing = 700,
			patrol_points = {
				{x = 27154,	y = 801516},
				{x = 38108,	y = 807836},
				{x = 15568,	y = 828479},
			},
		},
		["GhostsVectoria01"] = {
			faction = "Ghosts",
			station = stationVectoria,
			leader_template = "Nirvana R5",
			follower_template = "Ktlitan Scout",
			formation_shape = "X8",
			formation_spacing = 800,
			patrol_points = {
				{x = -20294,	y = 803797},
				{x = -46755,	y = 782230},
				{x = -15764,	y = 796185},
				{x = 3085,		y = 809415},
			},
		},
		["ArleniansLumpid01"] = {
			faction = "Arlenians",
			station = stationLumpid,
			leader_template = "Phobos T3",
			follower_template = "Fighter",
			formation_shape = "V",
			formation_spacing = 500,
			patrol_points = {
				{x = -27725,	y = 823914},
				{x = -27320,	y = 833199},
				{x = -19687,	y = 842970},
				{x = -10870,	y = 826270},
			},
		},
		["ArleniansLumpid02"] = {
			faction = "Arlenians",
			station = stationLumpid,
			leader_template = "Cucaracha",
			follower_template = "K2 Fighter",
			formation_shape = "X",
			formation_spacing = 800,
			patrol_points = {
				{x = -36243,	y = 816483},
				{x = -37330,	y = 824639},
				{x = -68321,	y = 820833},
				{x = -55998,	y = 799810},
			},
		},
		["KtlitansUnira01"] = {
			faction = "Ktlitans",
			station = stationUnira,
			leader_template = "Dreadnought",
			follower_template = "Fighter",
			formation_shape = "*",
			formation_spacing = 1000,
			patrol_points = {
				{x = -12731,	y = 837796},
				{x = 7559,		y = 823671},
				{x = -6117,		y = 843065},
				{x = -28898,	y = 861392},
			},
		},
		["USNDalton01"] = {
			faction = "USN",
			station = stationDalton,
			leader_template = "Phobos T3",
			follower_template = "K3 Fighter",
			formation_shape = "Xac",
			formation_spacing = 500,
			patrol_points = {
				{x = 112636,	y = 829858},
				{x = 119480,	y = 856949},
				{x = 145002,	y = 832710},
			},
		},
		["KraylorHorst01"] = {
			faction = "Kraylor",
			station = stationHorst,
			leader_template = "Nirvana R5",
			follower_template = "Touchy",
			formation_shape = "X",
			formation_spacing = 1000,
			patrol_points = {
				{x = 60444,		y = 865098},
				{x = 45268,		y = 875493},
				{x = 43501,		y = 850754},
			},
		},
		["KraylorHorst02"] = {
			faction = "Kraylor",
			station = stationHorst,
			leader_template = "Dreadnought",
			follower_template = "Fighter",
			formation_shape = "*",
			formation_spacing = 900,
			patrol_points = {
				{x = 68760,		y = 867593},
				{x = 57742,		y = 882353},
				{x = 83832,		y = 880482},
			},
		},
		["KraylorHorst03"] = {
			faction = "Kraylor",
			station = stationHorst,
			leader_template = "Phobos T3",
			follower_template = "K3 Fighter",
			formation_shape = "Vac4",
			formation_spacing = 900,
			patrol_points = {
				{x = 71723,		y = 859765},
				{x = 61180,		y = 829540},
				{x = 73229,		y = 830441},
			},
		},
	}
	if named_patrol[patrol_name] ~= nil and named_patrol[patrol_name].station ~= nil and named_patrol[patrol_name].station:isValid() then
		local leader_ship = ship_template[named_patrol[patrol_name].leader_template].create(named_patrol[patrol_name].faction,named_patrol[patrol_name].leader_template)
		table.insert(patrol,leader_ship)
		leader_ship.patrol_points = named_patrol[patrol_name].patrol_points
		local fleet_prefix = generateCallSignPrefix()
		local start_point = math.random(1,#leader_ship.patrol_points-1)
		local next_point = start_point + 1
		local prebuilt_fleet_x = leader_ship.patrol_points[start_point].x
		local prebuilt_fleet_y = leader_ship.patrol_points[start_point].y
		leader_ship:setPosition(prebuilt_fleet_x, prebuilt_fleet_y)
		local first_patrol_point_x = leader_ship.patrol_points[next_point].x
		local first_patrol_point_y = leader_ship.patrol_points[next_point].y
		local prebuilt_angle = angleFromVectorNorth(first_patrol_point_x,first_patrol_point_y,prebuilt_fleet_x,prebuilt_fleet_y)
		leader_ship:setHeading(prebuilt_angle)
		leader_ship.formation_ships = {}
		for _, form in ipairs(fly_formation[named_patrol[patrol_name].formation_shape]) do
			local ship = ship_template[named_patrol[patrol_name].follower_template].create(named_patrol[patrol_name].faction,named_patrol[patrol_name].follower_template)
			table.insert(patrol,ship)
			local form_x, form_y = vectorFromAngleNorth(prebuilt_angle + form.angle, form.dist * named_patrol[patrol_name].formation_spacing)
			local form_prime_x, form_prime_y = vectorFromAngle(form.angle, form.dist * named_patrol[patrol_name].formation_spacing)
			ship:setPosition(prebuilt_fleet_x + form_x, prebuilt_fleet_y + form_y):setHeading(prebuilt_angle):orderFlyFormation(leader_ship,form_prime_x,form_prime_y)
			ship:setCallSign(generateCallSign(fleet_prefix))
			table.insert(leader_ship.formation_ships,ship)
		end
		leader_ship:orderFlyTowards(first_patrol_point_x,first_patrol_point_y)
		update_system:addPatrol(leader_ship,leader_ship.patrol_points,next_point,5)
		return patrol
	else
		return nil
	end
end
function createStaunchStations()
	staunch_expedition_stations = {}
	staunch_defender_stations = {}
	local stations = {}
    stationArchon = SpaceStation():setTemplate("Medium Station"):setFaction("TSN"):setCallSign("Archon"):setPosition(-20536, 754616)
	stationArchon:setShortRangeRadarRange(8000)
	stationArchon.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,3), 	HVLI = math.random(1,4),	Mine = math.random(2,5),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 70,	Nuke = random(1,100) <= 50,	EMP = random(1,100) <= 60},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<50},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		true,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<70,
        self_destruct_repair =	random(1,100)<20,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	circuit =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We get minerals and remain diligent regarding our enemies",
    	history = "This looked like a place for pretty easy mining and observation",
    	idle_defense_fleet = {
			DF1 = "MT55 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5",
    	},
	}
	if random(1,100) <= 14 then stationArchon:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationArchon:setRepairDocked(false) end
	if random(1,100) <= 12 then stationArchon:setSharesEnergyWithDocked(false) end
	station_names[stationArchon:getCallSign()] = {stationArchon:getSectorName(), stationArchon}
	table.insert(stations,stationArchon)
	table.insert(staunch_expedition_stations,stationArchon)
	table.insert(staunch_defender_stations,stationArchon)
	--	Chitin
    stationChitin = SpaceStation():setTemplate("Huge Station"):setFaction("Ktlitans"):setCallSign("Chitin"):setPosition(30000, 808300)
	station_names[stationChitin:getCallSign()] = {stationChitin:getSectorName(), stationChitin}
	table.insert(stations,stationChitin)
	table.insert(staunch_expedition_stations,stationChitin)
	table.insert(staunch_defender_stations,stationChitin)
	--	Chitin defense platforms and sniper towers
    local cdp1 = CpuShip():setFaction("Ktlitans"):setTemplate("Defense platform"):setCallSign("CDP1"):setPosition(32500, 808300):orderStandGround()
	setBeamColor(cdp1)
	station_names[cdp1:getCallSign()] = {cdp1:getSectorName(), cdp1}
	table.insert(staunch_defense_platforms,cdp1)
    local cdp2 = CpuShip():setFaction("Ktlitans"):setTemplate("Defense platform"):setCallSign("CDP2"):setPosition(27500, 808300):orderStandGround()
	setBeamColor(cdp2)
	station_names[cdp2:getCallSign()] = {cdp2:getSectorName(), cdp2}
	table.insert(staunch_defense_platforms,cdp2)
    local cst1 = sniperTower("Ktlitans")
    cst1:setCallSign("CST1"):setPosition(30000, 805800):orderStandGround()
	setBeamColor(cst1)
	station_names[cst1:getCallSign()] = {cst1:getSectorName(), cst1}
	table.insert(staunch_defense_platforms,cst1)
    local cst2 = sniperTower("Ktlitans")
    cst2:setCallSign("CST2"):setPosition(30000, 810800):orderStandGround()
	setBeamColor(cst2)
	station_names[cst2:getCallSign()] = {cst2:getSectorName(), cst2}
	table.insert(staunch_defense_platforms,cst2)
	--	Dalton
	stationDalton = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Dalton"):setPosition(110418, 831782)
	stationDalton:setShortRangeRadarRange(6000)
	stationDalton.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<30},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		true,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<70,
        self_destruct_repair =	random(1,100)<20,
--		mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	optic =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We get minerals and chill out",
    	history = "This looked like a place for pretty easy pickings",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5",
    	},
	}
	if random(1,100) <= 14 then stationDalton:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationDalton:setRepairDocked(false) end
	if random(1,100) <= 12 then stationDalton:setSharesEnergyWithDocked(false) end
	station_names[stationDalton:getCallSign()] = {stationDalton:getSectorName(), stationDalton}
	table.insert(stations,stationDalton)
	table.insert(staunch_expedition_stations,stationDalton)
	table.insert(staunch_defender_stations,stationDalton)
	--	Horst
	stationHorst = SpaceStation():setTemplate("Medium Station"):setFaction("Kraylor"):setCallSign("Horst"):setPosition(68783, 865202)
	station_names[stationHorst:getCallSign()] = {stationHorst:getSectorName(), stationHorst}
	table.insert(stations,stationHorst)
	table.insert(staunch_expedition_stations,stationHorst)
	table.insert(staunch_defender_stations,stationHorst)
	--	Inversion
	stationInversion = SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("Inversion"):setPosition(21713, 784706)
	station_names[stationInversion:getCallSign()] = {stationInversion:getSectorName(), stationInversion}
	table.insert(stations,stationInversion)
	table.insert(staunch_expedition_stations,stationInversion)
 	table.insert(staunch_defender_stations,stationInversion)
   --	Koonts
    stationKoonts = SpaceStation():setTemplate("Large Station"):setFaction("Independent"):setCallSign("Koonts"):setPosition(10729, 713496)
	stationKoonts:setShortRangeRadarRange(6000)
	stationKoonts.comms_data = {
    	friendlyness = 72,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(2,5), 	HVLI = math.random(1,4),	Mine = math.random(3,7),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<30},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			true,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			true,
        self_destruct_repair =	random(1,100)<20,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	autodoc =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We extract minerals",
    	history = "We located here due to the ready availability of asteroids for mining.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Phobos T3",
			DF5 = "Nirvana R5",
			DF6 = "Nirvana R5",
    	},
	}
	if random(1,100) <= 14 then stationKoonts:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationKoonts:setRepairDocked(false) end
	if random(1,100) <= 12 then stationKoonts:setSharesEnergyWithDocked(false) end
	station_names[stationKoonts:getCallSign()] = {stationKoonts:getSectorName(), stationKoonts}
	table.insert(stations,stationKoonts)
	table.insert(staunch_expedition_stations,stationKoonts)
 	table.insert(staunch_defender_stations,stationKoonts)
	--	Lumpid
    stationLumpid = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Lumpid"):setPosition(-34224, 819847)
	stationLumpid:setShortRangeRadarRange(6000)
	stationLumpid.comms_data = {
    	friendlyness = 54,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = true},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = true},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<30},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<50,
        tube_slow_down_repair = true,
        jump_overcharge =		true,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<70,
        self_destruct_repair =	random(1,100)<20,
        reputation_cost_multipliers = {friend = 1.0, neutral = 2},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We gather minerals and research stellar phenomena",
    	history = "This looked like a good place for mining and research",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5",
    	},
	}
	if random(1,100) <= 14 then stationLumpid:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationLumpid:setRepairDocked(false) end
	if random(1,100) <= 12 then stationLumpid:setSharesEnergyWithDocked(false) end
	station_names[stationLumpid:getCallSign()] = {stationLumpid:getSectorName(), stationLumpid}
	table.insert(stations,stationLumpid)
	table.insert(staunch_expedition_stations,stationLumpid)
 	table.insert(staunch_defender_stations,stationLumpid)
	--	Trendy
	stationTrendy = SpaceStation():setTemplate("Small Station"):setFaction("CUF"):setCallSign("Trendy"):setPosition(79971, 697816):setDescription("Mining and monitoring"):setCommsScript(""):setCommsFunction(commsStation)
	stationTrendy:setShortRangeRadarRange(6000)
	stationTrendy.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<50,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<50,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<70,
        self_destruct_repair =	random(1,100)<20,
--		mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	lifter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We gather minerals from the asteroids and not traffic patterns in the area",
    	history = "We're here primarily for the minerals, but we also get a stipend from the CUF to make periodic reports on civilian and military traffic in the area.",
    	idle_defense_fleet = {
			DF1 = "MU52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationTrendy:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationTrendy:setRepairDocked(false) end
	if random(1,100) <= 12 then stationTrendy:setSharesEnergyWithDocked(false) end
	--	Trendy defense platforms
	local tdp_1 = CpuShip():setFaction("CUF"):setTemplate("Defense platform"):setCallSign("TDP_1"):setPosition(81291, 696715):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(tdp_1)
	station_names[tdp_1:getCallSign()] = {tdp_1:getSectorName(), tdp_1}
	table.insert(staunch_defense_platforms,tdp_1)
	local tdp_2 = CpuShip():setFaction("CUF"):setTemplate("Defense platform"):setCallSign("TDP_2"):setPosition(79036, 699499):orderStandGround():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(tdp_2)
	station_names[tdp_2:getCallSign()] = {tdp_2:getSectorName(), tdp_2}
	table.insert(staunch_defense_platforms,tdp_2)
	station_names[stationTrendy:getCallSign()] = {stationTrendy:getSectorName(), stationTrendy}
	table.insert(stations,stationTrendy)
	table.insert(staunch_expedition_stations,stationTrendy)
 	table.insert(staunch_defender_stations,stationTrendy)
	--	Unira
    stationUnira = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Unira"):setPosition(-9491, 840610)
	station_names[stationUnira:getCallSign()] = {stationUnira:getSectorName(), stationUnira}
	table.insert(stations,stationUnira)
	table.insert(staunch_expedition_stations,stationUnira)
 	table.insert(staunch_defender_stations,stationUnira)
	--	Vectoria
    stationVectoria = SpaceStation():setTemplate("Small Station"):setFaction("Ghosts"):setCallSign("Vectoria"):setPosition(-18651, 800915)
	station_names[stationVectoria:getCallSign()] = {stationVectoria:getSectorName(), stationVectoria}
	table.insert(stations,stationVectoria)
	table.insert(staunch_expedition_stations,stationVectoria)
 	table.insert(staunch_defender_stations,stationVectoria)
	--	Wortast
	stationWortast = SpaceStation():setTemplate("Medium Station"):setFaction("Independent"):setCallSign("Wortast"):setPosition(112296, 730897):setDescription("Mining"):setCommsScript(""):setCommsFunction(commsStation)
	stationWortast:setShortRangeRadarRange(5000)
	stationWortast.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), 	HVLI = math.random(2,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	warp =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We gather minerals from the asteroids",
    	history = "We just came for the minerals. Pickings are pretty good, so we've been growing our station capacity.",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Phobos T3",
			DF4 = "Nirvana R5A",
    	},
	}
	if random(1,100) <= 14 then stationWortast:setRestocksScanProbes(false) end
	if random(1,100) <= 11 then stationWortast:setRepairDocked(false) end
	if random(1,100) <= 12 then stationWortast:setSharesEnergyWithDocked(false) end
	--	Wortast defense platforms
	local wdp1 = CpuShip():setFaction("Independent"):setTemplate("Defense platform"):setCallSign("WDP2"):setPosition(112896, 733538):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(wdp1)
	station_names[wdp1:getCallSign()] = {wdp1:getSectorName(), wdp1}
	table.insert(staunch_defense_platforms,wdp1)
	local wdp2 = CpuShip():setFaction("Independent"):setTemplate("Defense platform"):setCallSign("WDP1"):setPosition(110476, 728574):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(wdp2)
	station_names[wdp2:getCallSign()] = {wdp2:getSectorName(), wdp2}
	table.insert(staunch_defense_platforms,wdp2)
	station_names[stationWortast:getCallSign()] = {stationWortast:getSectorName(), stationWortast}
	table.insert(stations,stationWortast)
	table.insert(staunch_expedition_stations,stationWortast)
 	table.insert(staunch_defender_stations,stationWortast)
    return stations
end
function createStaunchPlanets()
	gizen_x = 50292
	gizen_y = 789498
	planet_gizen = Planet():setPosition(gizen_x, gizen_y):setPlanetRadius(1000):setDistanceFromMovementPlane(-2000.00):setPlanetSurfaceTexture("planets/star-1.png"):setPlanetCloudRadius(1050.00):setPlanetAtmosphereColor(1.0,.9,.9)
	planet_gizen:setCallSign("Gizen")
	local px, py = vectorFromAngle(random(0,360),56409)
	px = px + gizen_x
	py = py + gizen_y
	--	original position x,y: 92074, 751601
	planet_merc = Planet():setPosition(px, py):setPlanetRadius(6000):setDistanceFromMovementPlane(-1000.00):setPlanetSurfaceTexture("planets/planet-2.png"):setPlanetCloudRadius(6300.00)
	planet_merc:setCallSign("Mercenary")
	planet_merc:setOrbit(planet_gizen, 600)	--final: 600, test: 10
	px, py = vectorFromAngle(random(0,360),165884)
	px = px + gizen_x
	py = py + gizen_y
	--	original position x,y: 173959, 678936
	planet_medusa = Planet():setPosition(px, py):setPlanetRadius(21000):setDistanceFromMovementPlane(-6000.00):setPlanetSurfaceTexture("planets/gas-1.png"):setPlanetCloudRadius(22050.00)
	planet_medusa:setCallSign("Medusa")
	planet_medusa:setOrbit(planet_gizen, 3400)	--final: 3400, test: 30
	local ox, oy = vectorFromAngle(random(0,360),33021)
	ox = ox + px
	oy = oy + py
	--	original position x,y: 146932, 697907
	planet_phantom = Planet():setPosition(ox, oy):setPlanetRadius(2000):setDistanceFromMovementPlane(-3000.00):setPlanetSurfaceTexture("planets/moon-1.png"):setPlanetCloudRadius(2100.00)
	planet_phantom:setCallSign("Phantom")
	planet_phantom:setOrbit(planet_medusa, 890)	--final: 890, test: 2
	ox, oy = vectorFromAngle(random(0,360),55376)
	ox = ox + px
	oy = oy + py
	--	original position x,y: 132685, 715854
	planet_gorgon = Planet():setPosition(ox, oy):setPlanetRadius(3000):setDistanceFromMovementPlane(-3000.00):setPlanetSurfaceTexture("planets/moon-3.png"):setPlanetCloudRadius(3150.00)
	planet_gorgon:setOrbit(planet_medusa, 1790)	--final: 1790, test: 3
end
function createStaunchAsteroids()
	local asteroid_list = {}
	table.insert(asteroid_list,Asteroid():setPosition(109764, 732062):setSize(34))
	table.insert(asteroid_list,Asteroid():setPosition(105078, 732816):setSize(230))
	table.insert(asteroid_list,Asteroid():setPosition(106428, 729214):setSize(323))
	table.insert(asteroid_list,Asteroid():setPosition(104312, 727587):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(111473, 727424):setSize(23))
	table.insert(asteroid_list,Asteroid():setPosition(106184, 725471):setSize(321))
	table.insert(asteroid_list,Asteroid():setPosition(112938, 734666):setSize(463))
	table.insert(asteroid_list,Asteroid():setPosition(109677, 736780):setSize(412))
	table.insert(asteroid_list,Asteroid():setPosition(116518, 739305):setSize(522))
	table.insert(asteroid_list,Asteroid():setPosition(116193, 738816):setSize(617))
	table.insert(asteroid_list,Asteroid():setPosition(123354, 748174):setSize(715))
	table.insert(asteroid_list,Asteroid():setPosition(123598, 750616):setSize(828))
	table.insert(asteroid_list,Asteroid():setPosition(114910, 747405):setSize(912))
	table.insert(asteroid_list,Asteroid():setPosition(119448, 744757):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(122784, 744513):setSize(229))
	table.insert(asteroid_list,Asteroid():setPosition(120913, 740851):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(125693, 742489):setSize(325))
	table.insert(asteroid_list,Asteroid():setPosition(126168, 749783):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(123790, 735194):setSize(417))
	table.insert(asteroid_list,Asteroid():setPosition(118345, 732409):setSize(228))
	table.insert(asteroid_list,Asteroid():setPosition(125376, 732657):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(118309, 737352):setSize(513))
	table.insert(asteroid_list,Asteroid():setPosition(117820, 739630):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(124266, 725680):setSize(612))
	table.insert(asteroid_list,Asteroid():setPosition(120618, 726156):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(109113, 729540):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(109520, 726610):setSize(714))
	table.insert(asteroid_list,Asteroid():setPosition(107079, 723600):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(111717, 724983):setSize(16))
	table.insert(asteroid_list,Asteroid():setPosition(114077, 725715):setSize(29))
	table.insert(asteroid_list,Asteroid():setPosition(115786, 730272):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(117211, 736379):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(119350, 722508):setSize(18))
	table.insert(asteroid_list,Asteroid():setPosition(97625, 723301):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(101220, 721321):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(104150, 722379):setSize(114))
	table.insert(asteroid_list,Asteroid():setPosition(103175, 737890):setSize(10))
	table.insert(asteroid_list,Asteroid():setPosition(126168, 763103):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(78029, 701222):setSize(475))
	table.insert(asteroid_list,Asteroid():setPosition(76238, 697804):setSize(119))
	table.insert(asteroid_list,Asteroid():setPosition(87712, 702524):setSize(24))
	table.insert(asteroid_list,Asteroid():setPosition(91130, 714893):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(86166, 707162):setSize(317))
	table.insert(asteroid_list,Asteroid():setPosition(92025, 710010):setSize(121))
	table.insert(asteroid_list,Asteroid():setPosition(84213, 701547):setSize(413))
	table.insert(asteroid_list,Asteroid():setPosition(81284, 703419):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(101589, 710298):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(97965, 713184):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(93978, 706104):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(89909, 707732):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(100406, 716195):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(102441, 718636):setSize(58))
	table.insert(asteroid_list,Asteroid():setPosition(103336, 717985):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(106664, 715214):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(104801, 719368):setSize(48))
	table.insert(asteroid_list,Asteroid():setPosition(104556, 725146):setSize(121))
	table.insert(asteroid_list,Asteroid():setPosition(93978, 714079):setSize(114))
	table.insert(asteroid_list,Asteroid():setPosition(96012, 716683):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(148052, 779754):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(143612, 780547):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(143136, 785304):setSize(54))
	table.insert(asteroid_list,Asteroid():setPosition(139964, 785780):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(139330, 779278):setSize(402))
	table.insert(asteroid_list,Asteroid():setPosition(138379, 783718):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(145673, 776899):setSize(51))
	table.insert(asteroid_list,Asteroid():setPosition(147417, 773411):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(138854, 769764):setSize(24))
	table.insert(asteroid_list,Asteroid():setPosition(143136, 770874):setSize(390))
	table.insert(asteroid_list,Asteroid():setPosition(144405, 767702):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(140599, 789585):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(145197, 791171):setSize(74))
	table.insert(asteroid_list,Asteroid():setPosition(148052, 791964):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(150272, 788792):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(150272, 784511):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(145832, 785145):setSize(211))
	table.insert(asteroid_list,Asteroid():setPosition(142819, 763579):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(142184, 759298):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(138696, 764689):setSize(328))
	table.insert(asteroid_list,Asteroid():setPosition(135207, 763738):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(138537, 773569):setSize(413))
	table.insert(asteroid_list,Asteroid():setPosition(135524, 776424):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(135841, 753113):setSize(617))
	table.insert(asteroid_list,Asteroid():setPosition(136952, 758663):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(119033, 749783):setSize(727))
	table.insert(asteroid_list,Asteroid():setPosition(119033, 754540):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(115861, 718227):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(123314, 719178):setSize(827))
	table.insert(asteroid_list,Asteroid():setPosition(112214, 741062):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(111738, 720606):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(128864, 768812):setSize(925))
	table.insert(asteroid_list,Asteroid():setPosition(130767, 762311):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(133304, 771349):setSize(113))
	table.insert(asteroid_list,Asteroid():setPosition(132194, 766433):setSize(326))
	table.insert(asteroid_list,Asteroid():setPosition(126961, 758981):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(131719, 757078):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(128706, 753589):setSize(420))
	table.insert(asteroid_list,Asteroid():setPosition(126010, 755333):setSize(128))
	table.insert(asteroid_list,Asteroid():setPosition(128706, 744392):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(126486, 737573):setSize(323))
	table.insert(asteroid_list,Asteroid():setPosition(132353, 752320):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(127596, 745819):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(67179, 684292):setSize(65))
	table.insert(asteroid_list,Asteroid():setPosition(62104, 686988):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(60043, 681913):setSize(76))
	table.insert(asteroid_list,Asteroid():setPosition(73046, 682706):setSize(126))
	table.insert(asteroid_list,Asteroid():setPosition(67972, 692221):setSize(31))
	table.insert(asteroid_list,Asteroid():setPosition(68606, 689208):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(70985, 685402):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(76238, 693329):setSize(39))
	table.insert(asteroid_list,Asteroid():setPosition(72332, 695526):setSize(127))
	table.insert(asteroid_list,Asteroid():setPosition(83887, 695444):setSize(500))
	table.insert(asteroid_list,Asteroid():setPosition(67496, 680803):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(89062, 696344):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(73146, 691701):setSize(320))
	table.insert(asteroid_list,Asteroid():setPosition(77215, 689667):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(79982, 693247):setSize(419))
	table.insert(asteroid_list,Asteroid():setPosition(81609, 691457):setSize(115))
	--	Southeast quadrant
	table.insert(asteroid_list,Asteroid():setPosition(64821, 862078):setSize(621))
	table.insert(asteroid_list,Asteroid():setPosition(66597, 860600):setSize(214))
	table.insert(asteroid_list,Asteroid():setPosition(79566, 862266):setSize(18))
	table.insert(asteroid_list,Asteroid():setPosition(75029, 860565):setSize(747))
	table.insert(asteroid_list,Asteroid():setPosition(68980, 869639):setSize(23))
	table.insert(asteroid_list,Asteroid():setPosition(64254, 868883):setSize(129))
	table.insert(asteroid_list,Asteroid():setPosition(62742, 867938):setSize(312))
	table.insert(asteroid_list,Asteroid():setPosition(63876, 867371):setSize(122))
	table.insert(asteroid_list,Asteroid():setPosition(95256, 854138):setSize(32))
	table.insert(asteroid_list,Asteroid():setPosition(86938, 853382):setSize(879))
	table.insert(asteroid_list,Asteroid():setPosition(88860, 853607):setSize(428))
	table.insert(asteroid_list,Asteroid():setPosition(96012, 851302):setSize(24))
	table.insert(asteroid_list,Asteroid():setPosition(93933, 847900):setSize(34))
	table.insert(asteroid_list,Asteroid():setPosition(102628, 841662):setSize(43))
	table.insert(asteroid_list,Asteroid():setPosition(108866, 842040):setSize(943))
	table.insert(asteroid_list,Asteroid():setPosition(102439, 849034):setSize(1123))
	table.insert(asteroid_list,Asteroid():setPosition(110001, 828051):setSize(24))
	table.insert(asteroid_list,Asteroid():setPosition(87505, 857919):setSize(29))
	table.insert(asteroid_list,Asteroid():setPosition(96567, 854035):setSize(329))
	table.insert(asteroid_list,Asteroid():setPosition(115672, 824459):setSize(857))
	table.insert(asteroid_list,Asteroid():setPosition(115861, 832588):setSize(788))
	table.insert(asteroid_list,Asteroid():setPosition(117118, 833769):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(124367, 821246):setSize(34))
	table.insert(asteroid_list,Asteroid():setPosition(122855, 820112):setSize(687))
	table.insert(asteroid_list,Asteroid():setPosition(118546, 837908):setSize(47))
	table.insert(asteroid_list,Asteroid():setPosition(117118, 836909):setSize(229))
	table.insert(asteroid_list,Asteroid():setPosition(116617, 835423):setSize(585))
	table.insert(asteroid_list,Asteroid():setPosition(115548, 834054):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(115483, 822947):setSize(347))
	table.insert(asteroid_list,Asteroid():setPosition(62364, 863023):setSize(117))
	table.insert(asteroid_list,Asteroid():setPosition(67657, 859809):setSize(458))
	table.insert(asteroid_list,Asteroid():setPosition(65199, 859998):setSize(336))
	table.insert(asteroid_list,Asteroid():setPosition(101494, 846198):setSize(116))
	table.insert(asteroid_list,Asteroid():setPosition(74462, 862645):setSize(286))
	table.insert(asteroid_list,Asteroid():setPosition(127581, 817465):setSize(21))
	table.insert(asteroid_list,Asteroid():setPosition(132496, 814440):setSize(37))
	table.insert(asteroid_list,Asteroid():setPosition(127581, 827295):setSize(643))
	table.insert(asteroid_list,Asteroid():setPosition(125502, 822569):setSize(732))
	table.insert(asteroid_list,Asteroid():setPosition(125882, 820960):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(132685, 810282):setSize(13))
	table.insert(asteroid_list,Asteroid():setPosition(106976, 842418):setSize(324))
	table.insert(asteroid_list,Asteroid():setPosition(111135, 836369):setSize(115))
	table.insert(asteroid_list,Asteroid():setPosition(112647, 841851):setSize(417))
	table.insert(asteroid_list,Asteroid():setPosition(114538, 825594):setSize(112))
	table.insert(asteroid_list,Asteroid():setPosition(122666, 822002):setSize(328))
	table.insert(asteroid_list,Asteroid():setPosition(127203, 822002):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(121343, 828051):setSize(218))
	table.insert(asteroid_list,Asteroid():setPosition(88451, 850546):setSize(124))
	table.insert(asteroid_list,Asteroid():setPosition(88640, 852437):setSize(378))
	table.insert(asteroid_list,Asteroid():setPosition(85426, 852437):setSize(118))
	table.insert(asteroid_list,Asteroid():setPosition(103952, 851681):setSize(440))
	table.insert(asteroid_list,Asteroid():setPosition(101872, 850357):setSize(120))
	table.insert(asteroid_list,Asteroid():setPosition(124746, 834856):setSize(331))
	table.insert(asteroid_list,Asteroid():setPosition(118507, 836936):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(107543, 840338):setSize(279))
	table.insert(asteroid_list,Asteroid():setPosition(75785, 863590):setSize(125))
	table.insert(asteroid_list,Asteroid():setPosition(77676, 862077):setSize(366))
	table.insert(asteroid_list,Asteroid():setPosition(56892, 865024):setSize(43))
	--	Southwest quadrant near the star
    table.insert(asteroid_list,Asteroid():setPosition(18628, 801679):setSize(610))
    table.insert(asteroid_list,Asteroid():setPosition(19451, 793894):setSize(15))
    table.insert(asteroid_list,Asteroid():setPosition(22517, 797000):setSize(780))
    table.insert(asteroid_list,Asteroid():setPosition(16585, 795813):setSize(34))
    table.insert(asteroid_list,Asteroid():setPosition(16234, 798261):setSize(32))
    table.insert(asteroid_list,Asteroid():setPosition(16585, 798186):setSize(26))
    table.insert(asteroid_list,Asteroid():setPosition(21331, 800625):setSize(840))
    table.insert(asteroid_list,Asteroid():setPosition(18507, 797427):setSize(940))
    table.insert(asteroid_list,Asteroid():setPosition(19043, 794712):setSize(19))
    table.insert(asteroid_list,Asteroid():setPosition(19502, 794584):setSize(55))
    table.insert(asteroid_list,Asteroid():setPosition(20294, 801964):setSize(32))
    table.insert(asteroid_list,Asteroid():setPosition(19354, 804316):setSize(820))
    table.insert(asteroid_list,Asteroid():setPosition(24329, 796295):setSize(211))
    table.insert(asteroid_list,Asteroid():setPosition(24890, 796346):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(26069, 795915):setSize(322))
    table.insert(asteroid_list,Asteroid():setPosition(24627, 796670):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(25879, 797725):setSize(413))
    table.insert(asteroid_list,Asteroid():setPosition(23537, 801044):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(23111, 801086):setSize(511))
    table.insert(asteroid_list,Asteroid():setPosition(24746, 799506):setSize(26))
    table.insert(asteroid_list,Asteroid():setPosition(24839, 799129):setSize(112))
    table.insert(asteroid_list,Asteroid():setPosition(22132, 799436):setSize(417))
    table.insert(asteroid_list,Asteroid():setPosition(22847, 798252):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(26320, 795452):setSize(311))
    table.insert(asteroid_list,Asteroid():setPosition(23836, 795418):setSize(123))
    table.insert(asteroid_list,Asteroid():setPosition(21954, 794890):setSize(211))
    table.insert(asteroid_list,Asteroid():setPosition(21529, 795154):setSize(11))
    table.insert(asteroid_list,Asteroid():setPosition(21545, 794686):setSize(125))
    table.insert(asteroid_list,Asteroid():setPosition(21852, 795401):setSize(43))
    table.insert(asteroid_list,Asteroid():setPosition(21520, 795605):setSize(327))
    table.insert(asteroid_list,Asteroid():setPosition(21721, 799317):setSize(120))
    table.insert(asteroid_list,Asteroid():setPosition(18864, 795044):setSize(424))
    table.insert(asteroid_list,Asteroid():setPosition(19068, 794175):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(18966, 793716):setSize(513))
    table.insert(asteroid_list,Asteroid():setPosition(16949, 798491):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(21698, 803522):setSize(423))
    table.insert(asteroid_list,Asteroid():setPosition(21529, 803129):setSize(124))
    table.insert(asteroid_list,Asteroid():setPosition(23690, 801325):setSize(328))
    table.insert(asteroid_list,Asteroid():setPosition(23282, 801453):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(21903, 803113):setSize(224))
    table.insert(asteroid_list,Asteroid():setPosition(20013, 801745):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(18101, 805964):setSize(770))
    table.insert(asteroid_list,Asteroid():setPosition(16239, 808769):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(17706, 803986):setSize(329))
    table.insert(asteroid_list,Asteroid():setPosition(19074, 803098):setSize(128))
    table.insert(asteroid_list,Asteroid():setPosition(16898, 795784):setSize(422))
    table.insert(asteroid_list,Asteroid():setPosition(16847, 795503):setSize(129))
    table.insert(asteroid_list,Asteroid():setPosition(19156, 795615):setSize(511))
    table.insert(asteroid_list,Asteroid():setPosition(16463, 798670):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(17969, 798582):setSize(426))
    table.insert(asteroid_list,Asteroid():setPosition(19419, 793374):setSize(368))
    table.insert(asteroid_list,Asteroid():setPosition(20983, 797418):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(20672, 797659):setSize(271))
    table.insert(asteroid_list,Asteroid():setPosition(26193, 797674):setSize(116))
    table.insert(asteroid_list,Asteroid():setPosition(20702, 797163):setSize(389))
    table.insert(asteroid_list,Asteroid():setPosition(19655, 798848):setSize(111))
    table.insert(asteroid_list,Asteroid():setPosition(19419, 799175):setSize(453))
	--	Southwest quadrant
	table.insert(asteroid_list,Asteroid():setPosition(-29763, 819764):setSize(927))
	table.insert(asteroid_list,Asteroid():setPosition(-31900, 832283):setSize(62))
	table.insert(asteroid_list,Asteroid():setPosition(-34954, 837168):setSize(111))
	table.insert(asteroid_list,Asteroid():setPosition(-37397, 834420):setSize(810))
	table.insert(asteroid_list,Asteroid():setPosition(-41671, 839000):setSize(50))
	table.insert(asteroid_list,Asteroid():setPosition(-26710, 813046):setSize(123))
	table.insert(asteroid_list,Asteroid():setPosition(-25488, 839306):setSize(718))
	table.insert(asteroid_list,Asteroid():setPosition(-24572, 843275):setSize(47))
	table.insert(asteroid_list,Asteroid():setPosition(-39534, 845107):setSize(139))
	table.insert(asteroid_list,Asteroid():setPosition(-41061, 842054):setSize(613))
	table.insert(asteroid_list,Asteroid():setPosition(-21213, 806634):setSize(39))
	table.insert(asteroid_list,Asteroid():setPosition(-25488, 807550):setSize(145))
	table.insert(asteroid_list,Asteroid():setPosition(-21519, 812436):setSize(520))
	table.insert(asteroid_list,Asteroid():setPosition(-17549, 809993):setSize(25))
	table.insert(asteroid_list,Asteroid():setPosition(-24878, 821901):setSize(150))
	table.insert(asteroid_list,Asteroid():setPosition(-26099, 830451):setSize(430))
	table.insert(asteroid_list,Asteroid():setPosition(-39229, 831978):setSize(45))
	table.insert(asteroid_list,Asteroid():setPosition(-42893, 834726):setSize(163))
	table.insert(asteroid_list,Asteroid():setPosition(-21213, 820985):setSize(319))
	table.insert(asteroid_list,Asteroid():setPosition(-39534, 820680):setSize(56))
	table.insert(asteroid_list,Asteroid():setPosition(-34954, 845718):setSize(172))
	table.insert(asteroid_list,Asteroid():setPosition(-37397, 842664):setSize(211))
	table.insert(asteroid_list,Asteroid():setPosition(-32206, 815489):setSize(67))
	table.insert(asteroid_list,Asteroid():setPosition(-33427, 824039):setSize(185))
	table.insert(asteroid_list,Asteroid():setPosition(-30374, 840527):setSize(318))
	table.insert(asteroid_list,Asteroid():setPosition(-23351, 817321):setSize(72))
	table.insert(asteroid_list,Asteroid():setPosition(-22435, 827703):setSize(196))
	table.insert(asteroid_list,Asteroid():setPosition(-33732, 828313):setSize(417))
	table.insert(asteroid_list,Asteroid():setPosition(-30068, 837779):setSize(89))
	table.insert(asteroid_list,Asteroid():setPosition(-27320, 833199):setSize(189))
	table.insert(asteroid_list,Asteroid():setPosition(-29152, 826787):setSize(511))
	table.insert(asteroid_list,Asteroid():setPosition(-41366, 827397):setSize(96))
	table.insert(asteroid_list,Asteroid():setPosition(-19687, 842970):setSize(170))
	table.insert(asteroid_list,Asteroid():setPosition(-21824, 836558):setSize(626))
	--	Northwest quadrant
    table.insert(asteroid_list,Asteroid():setPosition( -4634, 713113):setSize(211))
    table.insert(asteroid_list,Asteroid():setPosition( -1549, 716198):setSize(326))
    table.insert(asteroid_list,Asteroid():setPosition(  2147, 711642):setSize(415))
    table.insert(asteroid_list,Asteroid():setPosition(  5532, 715027):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(  7355, 718673):setSize(228))
    table.insert(asteroid_list,Asteroid():setPosition(  8136, 716069):setSize(325))
    table.insert(asteroid_list,Asteroid():setPosition(  2407, 715288):setSize(430))
    table.insert(asteroid_list,Asteroid():setPosition(  5898, 713382):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition(   324, 719194):setSize(215))
    table.insert(asteroid_list,Asteroid():setPosition(  4230, 717892):setSize(323))
    table.insert(asteroid_list,Asteroid():setPosition( -3605, 719077):setSize(418))
    table.insert(asteroid_list,Asteroid():setPosition(  5239, 709000):setSize(123))
    table.insert(asteroid_list,Asteroid():setPosition(   302, 713524):setSize(210))
    table.insert(asteroid_list,Asteroid():setPosition( 12739, 708462):setSize( 21))
    table.insert(asteroid_list,Asteroid():setPosition( 13832, 709798):setSize( 16))
    table.insert(asteroid_list,Asteroid():setPosition( 14402, 707692):setSize(314))
    table.insert(asteroid_list,Asteroid():setPosition( 11779, 706986):setSize(419))
    table.insert(asteroid_list,Asteroid():setPosition( 14906, 711222):setSize( 33))
    table.insert(asteroid_list,Asteroid():setPosition( -9981, 718872):setSize(226))
    table.insert(asteroid_list,Asteroid():setPosition(  6866, 710891):setSize( 25))
    table.insert(asteroid_list,Asteroid():setPosition(  8245, 711013):setSize( 43))
    table.insert(asteroid_list,Asteroid():setPosition(  3509, 713442):setSize( 36))
    table.insert(asteroid_list,Asteroid():setPosition(  5344, 711859):setSize( 22))
    table.insert(asteroid_list,Asteroid():setPosition( -7719, 726070):setSize(750))
    table.insert(asteroid_list,Asteroid():setPosition(-16108, 737925):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(  7697, 708815):setSize( 27))
    table.insert(asteroid_list,Asteroid():setPosition(  9945, 709798):setSize(315))
    table.insert(asteroid_list,Asteroid():setPosition(  9056, 707591):setSize( 38))
    table.insert(asteroid_list,Asteroid():setPosition( 20775, 711758):setSize(427))
    table.insert(asteroid_list,Asteroid():setPosition( 14301, 710818):setSize(117))
    table.insert(asteroid_list,Asteroid():setPosition(-19904, 735458):setSize(620))
    table.insert(asteroid_list,Asteroid():setPosition(-18955, 742290):setSize(119))
    table.insert(asteroid_list,Asteroid():setPosition(  3994, 710406):setSize( 20))
    table.insert(asteroid_list,Asteroid():setPosition(-24034, 750018):setSize(216))
    table.insert(asteroid_list,Asteroid():setPosition(-22371, 751779):setSize(317))
    table.insert(asteroid_list,Asteroid():setPosition( -9845, 733560):setSize(425))
    table.insert(asteroid_list,Asteroid():setPosition( 11174, 707994):setSize( 30))
    table.insert(asteroid_list,Asteroid():setPosition( 10067, 708584):setSize( 16))
    table.insert(asteroid_list,Asteroid():setPosition(  8488, 709434):setSize( 15))
    table.insert(asteroid_list,Asteroid():setPosition( 12010, 709677):setSize( 24))
    table.insert(asteroid_list,Asteroid():setPosition(-21860, 757702):setSize(126))
    table.insert(asteroid_list,Asteroid():setPosition(-25319, 752945):setSize(219))
    table.insert(asteroid_list,Asteroid():setPosition( -4342, 729385):setSize(318))
    table.insert(asteroid_list,Asteroid():setPosition( 12617, 711013):setSize( 35))
    table.insert(asteroid_list,Asteroid():setPosition(  7143, 712275):setSize( 34))
    table.insert(asteroid_list,Asteroid():setPosition( -3605, 721751):setSize(428))
    table.insert(asteroid_list,Asteroid():setPosition( -6690, 716815):setSize(121))
    table.insert(asteroid_list,Asteroid():setPosition(-12860, 721545):setSize(222))
    table.insert(asteroid_list,Asteroid():setPosition(-11832, 727715):setSize(327))
    table.insert(asteroid_list,Asteroid():setPosition(-16357, 730800):setSize(413))
    table.insert(asteroid_list,Asteroid():setPosition(-16974, 727304):setSize(122))
    table.insert(asteroid_list,Asteroid():setPosition( 15031, 712562):setSize( 41))
    table.insert(asteroid_list,Asteroid():setPosition( 17903, 711069):setSize(226))
    table.insert(asteroid_list,Asteroid():setPosition( 19512, 710609):setSize( 42))
    table.insert(asteroid_list,Asteroid():setPosition( 16116, 712129):setSize(325))
    table.insert(asteroid_list,Asteroid():setPosition( 19167, 711528):setSize( 38))
    table.insert(asteroid_list,Asteroid():setPosition( 18592, 712218):setSize( 28))
    table.insert(asteroid_list,Asteroid():setPosition(-23589, 756404):setSize( 26))
    table.insert(asteroid_list,Asteroid():setPosition(-24264, 754499):setSize( 19))
    table.insert(asteroid_list,Asteroid():setPosition(-26791, 758520):setSize(419))
    table.insert(asteroid_list,Asteroid():setPosition(-24269, 745136):setSize(800))
    table.insert(asteroid_list,Asteroid():setPosition(-25968, 755323):setSize(113))
    table.insert(asteroid_list,Asteroid():setPosition(-23157, 753378):setSize( 18))
    table.insert(asteroid_list,Asteroid():setPosition( 17125, 712129):setSize( 17))
    table.insert(asteroid_list,Asteroid():setPosition( -6896, 722985):setSize(217))
--	Nebulae
    table.insert(asteroid_list,Nebula():setPosition(70658, 856823))
    table.insert(asteroid_list,Nebula():setPosition(72220, 864375))
    table.insert(asteroid_list,Nebula():setPosition(77689, 860208))
    table.insert(asteroid_list,Nebula():setPosition(77428, 865417))
    table.insert(asteroid_list,Nebula():setPosition(104425, 843589))
    table.insert(asteroid_list,Nebula():setPosition(17793, 794323))
    table.insert(asteroid_list,Nebula():setPosition(23262, 788333))
    table.insert(asteroid_list,Nebula():setPosition(-18665, 820885))
    table.insert(asteroid_list,Nebula():setPosition(-22572, 815417))
    table.insert(asteroid_list,Nebula():setPosition(-28301, 811771))
    table.insert(asteroid_list,Nebula():setPosition(-34290, 815937))
    table.insert(asteroid_list,Nebula():setPosition(-17363, 759167))
    table.insert(asteroid_list,Nebula():setPosition(-15540, 752396))
    table.insert(asteroid_list,Nebula():setPosition(-17103, 743281))
    table.insert(asteroid_list,Nebula():setPosition(-14499, 731042))
    table.insert(asteroid_list,Nebula():setPosition(-14238, 738333))
    table.insert(asteroid_list,Nebula():setPosition(99564, 719062))
    table.insert(asteroid_list,Nebula():setPosition(96178, 714114))
    table.insert(asteroid_list,Nebula():setPosition(124303, 746146))
    table.insert(asteroid_list,Nebula():setPosition(118053, 742500))
    table.insert(asteroid_list,Nebula():setPosition(121439, 737292))
	return asteroid_list
end
function createStaunchPhenomenon()
	spr_x = 302000
	spr_y = 780000
	local phen_list = {}
	staunch_cheat_top_zone = Zone():setPoints(
		spr_x,			spr_y - 200000,
		spr_x + 36000,	spr_y - 200000,
		spr_x + 36000,	spr_y - 100000,
		spr_x,			spr_y - 100000
	)
	staunch_cheat_bot_zone = Zone():setPoints(
		spr_x,			spr_y + 100000,
		spr_x + 36000,	spr_y + 100000,
		spr_x + 36000,	spr_y + 200000,
		spr_x,			spr_y + 200000
	)
	table.insert(phen_list,staunch_cheat_top_zone)
	table.insert(phen_list,staunch_cheat_bot_zone)
	--[[
	local pbz1 = Zone():setPoints(
		spr_x,			spr_y - 100000,
		spr_x + 8000,	spr_y - 100000,
		spr_x + 8000,	spr_y + 100000,
		spr_x,			spr_y + 100000)
	table.insert(phen_list,pbz1)
	local pbz2 = Zone():setPoints(
		spr_x + 8000,	spr_y - 100000,
		spr_x + 14000,	spr_y - 100000,
		spr_x + 14000,	spr_y + 100000,
		spr_x + 8000,	spr_y + 100000)
	table.insert(phen_list,pbz2)
	local pbz3 = Zone():setPoints(
		spr_x + 14000,	spr_y - 100000,
		spr_x + 18000,	spr_y - 100000,
		spr_x + 18000,	spr_y + 100000,
		spr_x + 14000,	spr_y + 100000)
	table.insert(phen_list,pbz3)
	local pbz4 = Zone():setPoints(
		spr_x + 18000,	spr_y - 100000,
		spr_x + 20000,	spr_y - 100000,
		spr_x + 20000,	spr_y + 100000,
		spr_x + 18000,	spr_y + 100000)
	table.insert(phen_list,pbz4)
	local pbz5 = Zone():setPoints(
		spr_x + 20000,	spr_y - 100000,
		spr_x + 21000,	spr_y - 100000,
		spr_x + 21000,	spr_y + 100000,
		spr_x + 20000,	spr_y + 100000)
	table.insert(phen_list,pbz5)
	local pbz6 = Zone():setPoints(
		spr_x + 21000,	spr_y - 100000,
		spr_x + 24000,	spr_y - 100000,
		spr_x + 24000,	spr_y + 100000,
		spr_x + 21000,	spr_y + 100000)
	table.insert(phen_list,pbz6)
	local pbz7 = Zone():setPoints(
		spr_x + 24000,	spr_y - 100000,
		spr_x + 29000,	spr_y - 100000,
		spr_x + 29000,	spr_y + 100000,
		spr_x + 24000,	spr_y + 100000)
	table.insert(phen_list,pbz7)
	local pbz8 = Zone():setPoints(
		spr_x + 29000,	spr_y - 100000,
		spr_x + 36000,	spr_y - 100000,
		spr_x + 36000,	spr_y + 100000,
		spr_x + 29000,	spr_y + 100000)
	table.insert(phen_list,pbz8)
	--]]
	local pbz1_items = {}
	table.insert(pbz1_items,Asteroid():setPosition(302806, 702933):setSize(630))
	table.insert(pbz1_items,Asteroid():setPosition(308946, 701763):setSize(141))
	table.insert(pbz1_items,Asteroid():setPosition(304268, 710535):setSize(18))
	table.insert(pbz1_items,Asteroid():setPosition(306315, 797085):setSize(558))
	table.insert(pbz1_items,Asteroid():setPosition(305145, 800009):setSize(168))
	table.insert(pbz1_items,Asteroid():setPosition(308361, 687436):setSize(27))
	table.insert(pbz1_items,Asteroid():setPosition(305437, 693576):setSize(771))
	table.insert(pbz1_items,Asteroid():setPosition(302806, 739190):setSize(31))
	table.insert(pbz1_items,Asteroid():setPosition(308069, 744746):setSize(181))
	table.insert(pbz1_items,Asteroid():setPosition(306315, 745038):setSize(894))
	table.insert(pbz1_items,Asteroid():setPosition(303683, 714921):setSize(46))
	table.insert(pbz1_items,Asteroid():setPosition(306899, 723401):setSize(109))
	table.insert(pbz1_items,Asteroid():setPosition(305730, 730711):setSize(412))
	table.insert(pbz1_items,Asteroid():setPosition(303683, 744161):setSize(51))
	table.insert(pbz1_items,Asteroid():setPosition(303683, 742699):setSize(123))
	table.insert(pbz1_items,Asteroid():setPosition(305145, 740652):setSize(935))
	table.insert(pbz1_items,Asteroid():setPosition(305730, 743284):setSize(145))
	table.insert(pbz1_items,Asteroid():setPosition(307192, 742699):setSize(60))
	table.insert(pbz1_items,Asteroid():setPosition(308946, 742991):setSize(350))
	table.insert(pbz1_items,Asteroid():setPosition(306315, 741237):setSize(163))
	table.insert(pbz1_items,Asteroid():setPosition(306607, 789190):setSize(76))
	table.insert(pbz1_items,Asteroid():setPosition(304853, 792114):setSize(277))
	table.insert(pbz1_items,Asteroid():setPosition(304560, 795038):setSize(180))
	table.insert(pbz1_items,Asteroid():setPosition(305730, 785682):setSize(83))
	table.insert(pbz1_items,Asteroid():setPosition(307192, 776325):setSize(393))
	table.insert(pbz1_items,Asteroid():setPosition(304853, 782173):setSize(105))
	table.insert(pbz1_items,Asteroid():setPosition(307192, 794453):setSize(91))
	table.insert(pbz1_items,Asteroid():setPosition(307192, 802348):setSize(414))
	table.insert(pbz1_items,Asteroid():setPosition(304560, 812290):setSize(121))
	table.insert(pbz1_items,Asteroid():setPosition(306022, 807611):setSize(81))
	table.insert(pbz1_items,Asteroid():setPosition(305730, 868138):setSize(530))
	table.insert(pbz1_items,Asteroid():setPosition(302806, 872816):setSize(147))
	table.insert(pbz1_items,Asteroid():setPosition(303391, 866676):setSize(74))
	table.insert(pbz1_items,Asteroid():setPosition(308654, 857611):setSize(653))
	table.insert(pbz1_items,Asteroid():setPosition(308069, 862290):setSize(169))
	table.insert(pbz1_items,Asteroid():setPosition(306899, 865506):setSize(68))
	table.insert(pbz1_items,Asteroid():setPosition(303098, 863459):setSize(774))
	table.insert(pbz1_items,Asteroid():setPosition(303975, 838898):setSize(183))
	table.insert(pbz1_items,Asteroid():setPosition(307777, 837728):setSize(56))
	table.insert(pbz1_items,Asteroid():setPosition(305145, 836266):setSize(895))
	table.insert(pbz1_items,Asteroid():setPosition(308361, 840945):setSize(102))
	table.insert(pbz1_items,Asteroid():setPosition(306315, 838313):setSize(42))
	table.insert(pbz1_items,Asteroid():setPosition(307192, 813752):setSize(911))
	table.insert(pbz1_items,Asteroid():setPosition(306315, 817845):setSize(126))
	table.insert(pbz1_items,Asteroid():setPosition(304560, 835097):setSize(38))
	table.insert(pbz1_items,Asteroid():setPosition(302513, 836266):setSize(443))
	local pbz2_items = {}
	table.insert(pbz2_items,Asteroid():setPosition(314959, 859277):setSize(919))
	table.insert(pbz2_items,Asteroid():setPosition(314666, 855476):setSize(128))
	table.insert(pbz2_items,Asteroid():setPosition(310865, 870973):setSize(24))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 875067):setSize(839))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 852552):setSize(143))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 838517):setSize(32))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 836763):setSize(754))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 824190):setSize(165))
	table.insert(pbz2_items,Asteroid():setPosition(313204, 821266):setSize(49))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 816587):setSize(672))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 817465):setSize(182))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 813079):setSize(57))
	table.insert(pbz2_items,Asteroid():setPosition(313204, 805769):setSize(595))
	table.insert(pbz2_items,Asteroid():setPosition(311158, 801675):setSize(106))
	table.insert(pbz2_items,Asteroid():setPosition(312035, 795242):setSize(63))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 792026):setSize(412))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 746412):setSize(126))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 744658):setSize(73))
	table.insert(pbz2_items,Asteroid():setPosition(312327, 743196):setSize(333))
	table.insert(pbz2_items,Asteroid():setPosition(313204, 741441):setSize(148))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 738810):setSize(84))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 787348):setSize(251))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 784424):setSize(166))
	table.insert(pbz2_items,Asteroid():setPosition(313789, 772143):setSize(94))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 773897):setSize(173))
	table.insert(pbz2_items,Asteroid():setPosition(312620, 770681):setSize(188))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 770388):setSize(89))
	table.insert(pbz2_items,Asteroid():setPosition(313497, 756353):setSize(298))
	table.insert(pbz2_items,Asteroid():setPosition(312035, 754599):setSize(104))
	table.insert(pbz2_items,Asteroid():setPosition(313204, 750798):setSize(70))
	table.insert(pbz2_items,Asteroid():setPosition(311158, 751383):setSize(316))
	table.insert(pbz2_items,Asteroid():setPosition(311742, 748459):setSize(123))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 769219):setSize(63))
	table.insert(pbz2_items,Asteroid():setPosition(311450, 768049):setSize(434))
	table.insert(pbz2_items,Asteroid():setPosition(312912, 767465):setSize(147))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 768634):setSize(56))
	table.insert(pbz2_items,Asteroid():setPosition(313789, 743196):setSize(558))
	table.insert(pbz2_items,Asteroid():setPosition(313789, 722143):setSize(162))
	table.insert(pbz2_items,Asteroid():setPosition(313204, 719511):setSize(43))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 715710):setSize(673))
	table.insert(pbz2_items,Asteroid():setPosition(312327, 716587):setSize(180))
	table.insert(pbz2_items,Asteroid():setPosition(314082, 713956):setSize(34))
	table.insert(pbz2_items,Asteroid():setPosition(314374, 687640):setSize(795))
	table.insert(pbz2_items,Asteroid():setPosition(312035, 687640):setSize(106))
	table.insert(pbz2_items,Asteroid():setPosition(313497, 686763):setSize(20))
	table.insert(pbz2_items,Asteroid():setPosition(313497, 689102):setSize(812))
	table.insert(pbz2_items,Asteroid():setPosition(311742, 682962):setSize(126))
	table.insert(pbz2_items,Asteroid():setPosition(311742, 685301):setSize(17))
	table.insert(pbz2_items,Asteroid():setPosition(313789, 684716):setSize(938))
	local pbz3_items = {}
	table.insert(pbz3_items,Asteroid():setPosition(318175, 704307):setSize(928))
	table.insert(pbz3_items,Asteroid():setPosition(318468, 701383):setSize(132))
	table.insert(pbz3_items,Asteroid():setPosition(317590, 700798):setSize(81))
	table.insert(pbz3_items,Asteroid():setPosition(317428, 797711):setSize(849))
	table.insert(pbz3_items,Asteroid():setPosition(317255, 795985):setSize(156))
	table.insert(pbz3_items,Asteroid():setPosition(318291, 795294):setSize(74))
	table.insert(pbz3_items,Asteroid():setPosition(318637, 870055):setSize(768))
	table.insert(pbz3_items,Asteroid():setPosition(317946, 869019):setSize(170))
	table.insert(pbz3_items,Asteroid():setPosition(318119, 875580):setSize(64))
	table.insert(pbz3_items,Asteroid():setPosition(316392, 873163):setSize(387))
	table.insert(pbz3_items,Asteroid():setPosition(318809, 868328):setSize(196))
	table.insert(pbz3_items,Asteroid():setPosition(318291, 867465):setSize(58))
	table.insert(pbz3_items,Asteroid():setPosition(319155, 866947):setSize(602))
	table.insert(pbz3_items,Asteroid():setPosition(319500, 866084):setSize(116))
	table.insert(pbz3_items,Asteroid():setPosition(317946, 863321):setSize(43))
	table.insert(pbz3_items,Asteroid():setPosition(316392, 852616):setSize(226))
	table.insert(pbz3_items,Asteroid():setPosition(317946, 851235):setSize(138))
	table.insert(pbz3_items,Asteroid():setPosition(317255, 864530):setSize(36))
	table.insert(pbz3_items,Asteroid():setPosition(318637, 864012):setSize(547))
	table.insert(pbz3_items,Asteroid():setPosition(317083, 863667):setSize(156))
	table.insert(pbz3_items,Asteroid():setPosition(318464, 865220):setSize(21))
	table.insert(pbz3_items,Asteroid():setPosition(318982, 864875):setSize(469))
	table.insert(pbz3_items,Asteroid():setPosition(317773, 848473):setSize(170))
	table.insert(pbz3_items,Asteroid():setPosition(316392, 864875):setSize(19))
	table.insert(pbz3_items,Asteroid():setPosition(318637, 842948):setSize(282))
	table.insert(pbz3_items,Asteroid():setPosition(317601, 844502):setSize(191))
	table.insert(pbz3_items,Asteroid():setPosition(318291, 840012):setSize(93))
	table.insert(pbz3_items,Asteroid():setPosition(319327, 837077):setSize(301))
	table.insert(pbz3_items,Asteroid():setPosition(317601, 837941):setSize(117))
	table.insert(pbz3_items,Asteroid():setPosition(318291, 836732):setSize(88))
	table.insert(pbz3_items,Asteroid():setPosition(318291, 835178):setSize(420))
	table.insert(pbz3_items,Asteroid():setPosition(317946, 833969):setSize(137))
	table.insert(pbz3_items,Asteroid():setPosition(318119, 803409):setSize(74))
	table.insert(pbz3_items,Asteroid():setPosition(318464, 802200):setSize(546))
	table.insert(pbz3_items,Asteroid():setPosition(317428, 801510):setSize(158))
	table.insert(pbz3_items,Asteroid():setPosition(317773, 799265):setSize(65))
	table.insert(pbz3_items,Asteroid():setPosition(318809, 805308):setSize(667))
	table.insert(pbz3_items,Asteroid():setPosition(319327, 803582):setSize(170))
	table.insert(pbz3_items,Asteroid():setPosition(317773, 807035):setSize(55))
	table.insert(pbz3_items,Asteroid():setPosition(316565, 802718):setSize(586))
	table.insert(pbz3_items,Asteroid():setPosition(316713, 704014):setSize(197))
	table.insert(pbz3_items,Asteroid():setPosition(317590, 702260):setSize(46))
	table.insert(pbz3_items,Asteroid():setPosition(317691, 774704):setSize(707))
	table.insert(pbz3_items,Asteroid():setPosition(317485, 772222):setSize(119))
	table.insert(pbz3_items,Asteroid():setPosition(318105, 760226):setSize(35))
	table.insert(pbz3_items,Asteroid():setPosition(319553, 762502):setSize(429))
	table.insert(pbz3_items,Asteroid():setPosition(317278, 773256):setSize(139))
	table.insert(pbz3_items,Asteroid():setPosition(318519, 773670):setSize(26))
	table.insert(pbz3_items,Asteroid():setPosition(318312, 773050):setSize(848))
	table.insert(pbz3_items,Asteroid():setPosition(318312, 758365):setSize(156))
	table.insert(pbz3_items,Asteroid():setPosition(318519, 756503):setSize(10))
	table.insert(pbz3_items,Asteroid():setPosition(317278, 756917):setSize(968))
	table.insert(pbz3_items,Asteroid():setPosition(319346, 760847):setSize(170))
	table.insert(pbz3_items,Asteroid():setPosition(318726, 759813):setSize(99))
	table.insert(pbz3_items,Asteroid():setPosition(317071, 757744):setSize(882))
	table.insert(pbz3_items,Asteroid():setPosition(318105, 732098):setSize(198))
	table.insert(pbz3_items,Asteroid():setPosition(316864, 723825):setSize(80))
	table.insert(pbz3_items,Asteroid():setPosition(317898, 724238):setSize(706))
	table.insert(pbz3_items,Asteroid():setPosition(316864, 756503):setSize(119))
	table.insert(pbz3_items,Asteroid():setPosition(319139, 739337):setSize(73))
	table.insert(pbz3_items,Asteroid():setPosition(317071, 735200):setSize(629))
	table.insert(pbz3_items,Asteroid():setPosition(317278, 722170):setSize(132))
	table.insert(pbz3_items,Asteroid():setPosition(317898, 721136):setSize(62))
	table.insert(pbz3_items,Asteroid():setPosition(319139, 720516):setSize(347))
	table.insert(pbz3_items,Asteroid():setPosition(318519, 723411):setSize(151))
	table.insert(pbz3_items,Asteroid():setPosition(317278, 722791):setSize(58))
	table.insert(pbz3_items,Asteroid():setPosition(317898, 722584):setSize(264))
	table.insert(pbz3_items,Asteroid():setPosition(316244, 726720):setSize(178))
	table.insert(pbz3_items,Asteroid():setPosition(316657, 725273):setSize(45))
	table.insert(pbz3_items,Asteroid():setPosition(319553, 719482):setSize(282))
	table.insert(pbz3_items,Asteroid():setPosition(316657, 757124):setSize(195))
	table.insert(pbz3_items,Asteroid():setPosition(316244, 755469):setSize(36))
	table.insert(pbz3_items,Asteroid():setPosition(317590, 685886):setSize(304))
	table.insert(pbz3_items,Asteroid():setPosition(318175, 688517):setSize(119))
	table.insert(pbz3_items,Asteroid():setPosition(319052, 686470):setSize(20))
	table.insert(pbz3_items,Asteroid():setPosition(318175, 683839):setSize(422))
	table.insert(pbz3_items,Asteroid():setPosition(317298, 680915):setSize(135))
	table.insert(pbz3_items,Asteroid():setPosition(318468, 689687):setSize(18))
	table.insert(pbz3_items,Asteroid():setPosition(317883, 692026):setSize(540))
	local pbz4_items = {}
	table.insert(pbz4_items,Asteroid():setPosition(320191, 878951):setSize(111))
	table.insert(pbz4_items,Asteroid():setPosition(321687, 876583):setSize(323))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 874216):setSize(14))
	table.insert(pbz4_items,Asteroid():setPosition(320690, 871225):setSize(135))
	table.insert(pbz4_items,Asteroid():setPosition(320690, 868857):setSize(645))
	table.insert(pbz4_items,Asteroid():setPosition(321188, 867736):setSize(27))
	table.insert(pbz4_items,Asteroid():setPosition(321188, 865742):setSize(159))
	table.insert(pbz4_items,Asteroid():setPosition(320939, 864122):setSize(915))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 862752):setSize(38))
	table.insert(pbz4_items,Asteroid():setPosition(320814, 859886):setSize(162))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 861381):setSize(672))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 859013):setSize(47))
	table.insert(pbz4_items,Asteroid():setPosition(320441, 859387):setSize(184))
	table.insert(pbz4_items,Asteroid():setPosition(320690, 860633):setSize(593))
	table.insert(pbz4_items,Asteroid():setPosition(321437, 860259):setSize(59))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 846677):setSize(119))
	table.insert(pbz4_items,Asteroid():setPosition(321064, 846677):setSize(722))
	table.insert(pbz4_items,Asteroid():setPosition(321562, 847549):setSize(61))
	table.insert(pbz4_items,Asteroid():setPosition(320067, 844185):setSize(135))
	table.insert(pbz4_items,Asteroid():setPosition(320565, 842316):setSize(441))
	table.insert(pbz4_items,Asteroid():setPosition(321562, 838951):setSize(78))
	table.insert(pbz4_items,Asteroid():setPosition(321064, 834341):setSize(157))
	table.insert(pbz4_items,Asteroid():setPosition(321437, 831101):setSize(267))
	table.insert(pbz4_items,Asteroid():setPosition(321188, 823624):setSize(81))
	table.insert(pbz4_items,Asteroid():setPosition(321064, 821506):setSize(172))
	table.insert(pbz4_items,Asteroid():setPosition(320939, 829606):setSize(911))
	table.insert(pbz4_items,Asteroid():setPosition(320814, 819637):setSize(99))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 796335):setSize(185))
	table.insert(pbz4_items,Asteroid():setPosition(321687, 795712):setSize(225))
	table.insert(pbz4_items,Asteroid():setPosition(320814, 795837):setSize(10))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 795089):setSize(177))
	table.insert(pbz4_items,Asteroid():setPosition(320814, 794840):setSize(781))
	table.insert(pbz4_items,Asteroid():setPosition(320191, 793968):setSize(26))
	table.insert(pbz4_items,Asteroid():setPosition(321064, 793843):setSize(193))
	table.insert(pbz4_items,Asteroid():setPosition(320939, 781507):setSize(614))
	table.insert(pbz4_items,Asteroid():setPosition(321562, 780510):setSize(38))
	table.insert(pbz4_items,Asteroid():setPosition(320316, 780634):setSize(129))
	table.insert(pbz4_items,Asteroid():setPosition(321188, 779638):setSize(534))
	table.insert(pbz4_items,Asteroid():setPosition(320939, 762442):setSize(49))
	table.insert(pbz4_items,Asteroid():setPosition(321437, 760323):setSize(145))
	table.insert(pbz4_items,Asteroid():setPosition(320565, 760448):setSize(450))
	table.insert(pbz4_items,Asteroid():setPosition(320565, 754342):setSize(51))
	table.insert(pbz4_items,Asteroid():setPosition(320276, 734291):setSize(162))
	table.insert(pbz4_items,Asteroid():setPosition(321313, 756460):setSize(379))
	table.insert(pbz4_items,Asteroid():setPosition(321437, 754217):setSize(68))
	table.insert(pbz4_items,Asteroid():setPosition(320690, 758828):setSize(189))
	table.insert(pbz4_items,Asteroid():setPosition(321064, 757582):setSize(298))
	table.insert(pbz4_items,Asteroid():setPosition(321562, 764061):setSize(79))
	table.insert(pbz4_items,Asteroid():setPosition(320939, 752597):setSize(119))
	table.insert(pbz4_items,Asteroid():setPosition(320441, 751102):setSize(420))
	table.insert(pbz4_items,Asteroid():setPosition(321409, 734291):setSize(89))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 733725):setSize(133))
	table.insert(pbz4_items,Asteroid():setPosition(321862, 733612):setSize(941))
	table.insert(pbz4_items,Asteroid():setPosition(320729, 734631):setSize(95))
	table.insert(pbz4_items,Asteroid():setPosition(320843, 733385):setSize(150))
	table.insert(pbz4_items,Asteroid():setPosition(321636, 732592):setSize(366))
	table.insert(pbz4_items,Asteroid():setPosition(321409, 683768):setSize(18))
	table.insert(pbz4_items,Asteroid():setPosition(321522, 682975):setSize(174))
	table.insert(pbz4_items,Asteroid():setPosition(321636, 682522):setSize(289))
	table.insert(pbz4_items,Asteroid():setPosition(321182, 681502):setSize(24))
	table.insert(pbz4_items,Asteroid():setPosition(320729, 680709):setSize(194))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 682748):setSize(817))
	table.insert(pbz4_items,Asteroid():setPosition(320843, 683881):setSize(33))
	table.insert(pbz4_items,Asteroid():setPosition(321182, 710162):setSize(122))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 709143):setSize(739))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 708010):setSize(40))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 706537):setSize(143))
	table.insert(pbz4_items,Asteroid():setPosition(321409, 705971):setSize(552))
	table.insert(pbz4_items,Asteroid():setPosition(321182, 711182):setSize(58))
	table.insert(pbz4_items,Asteroid():setPosition(320616, 711748):setSize(161))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 713221):setSize(675))
	table.insert(pbz4_items,Asteroid():setPosition(321636, 685920):setSize(65))
	table.insert(pbz4_items,Asteroid():setPosition(320729, 685920):setSize(186))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 685354):setSize(491))
	table.insert(pbz4_items,Asteroid():setPosition(321069, 684787):setSize(73))
	table.insert(pbz4_items,Asteroid():setPosition(320390, 680370):setSize(116))
	table.insert(pbz4_items,Asteroid():setPosition(320503, 688299):setSize(501))
	table.insert(pbz4_items,Asteroid():setPosition(320956, 687620):setSize(85))
	table.insert(pbz4_items,Asteroid():setPosition(320503, 687166):setSize(118))
	table.insert(pbz4_items,Asteroid():setPosition(321182, 686940):setSize(801))
	table.insert(pbz4_items,Asteroid():setPosition(320050, 684787):setSize(98))
	local pbz5_items = {}
	table.insert(pbz5_items,Asteroid():setPosition(322265, 778412):setSize(200))
	table.insert(pbz5_items,Asteroid():setPosition(322450, 776499):setSize(15))
	table.insert(pbz5_items,Asteroid():setPosition(322450, 771067):setSize(110))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 774215):setSize(420))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 772425):setSize(26))
	table.insert(pbz5_items,Asteroid():setPosition(322635, 757118):setSize(137))
	table.insert(pbz5_items,Asteroid():setPosition(322512, 754834):setSize(442))
	table.insert(pbz5_items,Asteroid():setPosition(322759, 745884):setSize(34))
	table.insert(pbz5_items,Asteroid():setPosition(322265, 756377):setSize(155))
	table.insert(pbz5_items,Asteroid():setPosition(322265, 755636):setSize(262))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 733046):setSize(43))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 724034):setSize(178))
	table.insert(pbz5_items,Asteroid():setPosition(322450, 744835):setSize(422))
	table.insert(pbz5_items,Asteroid():setPosition(322388, 734033):setSize(54))
	table.insert(pbz5_items,Asteroid():setPosition(322512, 724898):setSize(183))
	table.insert(pbz5_items,Asteroid():setPosition(322327, 724466):setSize(303))
	table.insert(pbz5_items,Asteroid():setPosition(322203, 725330):setSize(69))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 723602):setSize(195))
	table.insert(pbz5_items,Asteroid():setPosition(322574, 713356):setSize(413))
	table.insert(pbz5_items,Asteroid():setPosition(322203, 712862):setSize(77))
	table.insert(pbz5_items,Asteroid():setPosition(322512, 714899):setSize(129))
	table.insert(pbz5_items,Asteroid():setPosition(322450, 713788):setSize(434))
	table.insert(pbz5_items,Asteroid():setPosition(322512, 712368):setSize(94))
	table.insert(pbz5_items,Asteroid():setPosition(322730, 797410):setSize(141))
	table.insert(pbz5_items,Asteroid():setPosition(322336, 793375):setSize(329))
	table.insert(pbz5_items,Asteroid():setPosition(322074, 790127):setSize(74))
	table.insert(pbz5_items,Asteroid():setPosition(322500, 787470):setSize(459))
	table.insert(pbz5_items,Asteroid():setPosition(322821, 784585):setSize(165))
	table.insert(pbz5_items,Asteroid():setPosition(322635, 781869):setSize(174))
	table.insert(pbz5_items,Asteroid():setPosition(322582, 871743):setSize(405))
	table.insert(pbz5_items,Asteroid():setPosition(322073, 863160):setSize(73))
	table.insert(pbz5_items,Asteroid():setPosition(322456, 858650):setSize(181))
	table.insert(pbz5_items,Asteroid():setPosition(322456, 850686):setSize(196))
	table.insert(pbz5_items,Asteroid():setPosition(322840, 845216):setSize(13))
	table.insert(pbz5_items,Asteroid():setPosition(322552, 843681):setSize(117))
	table.insert(pbz5_items,Asteroid():setPosition(322456, 842242):setSize(124))
	table.insert(pbz5_items,Asteroid():setPosition(322463, 819056):setSize(437))
	table.insert(pbz5_items,Asteroid():setPosition(322225, 820546):setSize(28))
	table.insert(pbz5_items,Asteroid():setPosition(322821, 820784):setSize(140))
	table.insert(pbz5_items,Asteroid():setPosition(322582, 806127):setSize(401))
	table.insert(pbz5_items,Asteroid():setPosition(322642, 807081):setSize(38))
	table.insert(pbz5_items,Asteroid():setPosition(322285, 806902):setSize(159))
	table.insert(pbz5_items,Asteroid():setPosition(322730, 701363):setSize(260))
	table.insert(pbz5_items,Asteroid():setPosition(322471, 700779):setSize(47))
	table.insert(pbz5_items,Asteroid():setPosition(322536, 699935):setSize(172))
	table.insert(pbz5_items,Asteroid():setPosition(322730, 680983):setSize(211))
	table.insert(pbz5_items,Asteroid():setPosition(322601, 680593):setSize(59))
	table.insert(pbz5_items,Asteroid():setPosition(322601, 699416):setSize(186))
	table.insert(pbz5_items,Asteroid():setPosition(322666, 698896):setSize(315))
	table.insert(pbz5_items,Asteroid():setPosition(322860, 687798):setSize(63))
	table.insert(pbz5_items,Asteroid():setPosition(322795, 687278):setSize(190))
	table.insert(pbz5_items,Asteroid():setPosition(322211, 687149):setSize(225))
	table.insert(pbz5_items,Asteroid():setPosition(322341, 687733):setSize(77))
	table.insert(pbz5_items,Asteroid():setPosition(322276, 700194):setSize(123))
	table.insert(pbz5_items,Asteroid():setPosition(322276, 680204):setSize(227))
	local pbz6_items = {}
	table.insert(pbz6_items,Asteroid():setPosition(324470, 878991):setSize(905))
	table.insert(pbz6_items,Asteroid():setPosition(324787, 876879):setSize(12))
	table.insert(pbz6_items,Asteroid():setPosition(323626, 874134):setSize(112))
	table.insert(pbz6_items,Asteroid():setPosition(324470, 870861):setSize(824))
	table.insert(pbz6_items,Asteroid():setPosition(324787, 864420):setSize(18))
	table.insert(pbz6_items,Asteroid():setPosition(324998, 859774):setSize(134))
	table.insert(pbz6_items,Asteroid():setPosition(324365, 857240):setSize(742))
	table.insert(pbz6_items,Asteroid():setPosition(325315, 836756):setSize(35))
	table.insert(pbz6_items,Asteroid():setPosition(324154, 836334):setSize(150))
	table.insert(pbz6_items,Asteroid():setPosition(324576, 835701):setSize(663))
	table.insert(pbz6_items,Asteroid():setPosition(324154, 834962):setSize(43))
	table.insert(pbz6_items,Asteroid():setPosition(324365, 833589):setSize(175))
	table.insert(pbz6_items,Asteroid():setPosition(323626, 833800):setSize(585))
	table.insert(pbz6_items,Asteroid():setPosition(324787, 839185):setSize(52))
	table.insert(pbz6_items,Asteroid():setPosition(325104, 838763):setSize(197))
	table.insert(pbz6_items,Asteroid():setPosition(324470, 839924):setSize(400))
	table.insert(pbz6_items,Asteroid():setPosition(324470, 837496):setSize(64))
	table.insert(pbz6_items,Asteroid():setPosition(325210, 838024):setSize(113))
	table.insert(pbz6_items,Asteroid():setPosition(325421, 819441):setSize(328))
	table.insert(pbz6_items,Asteroid():setPosition(325315, 818490):setSize(77))
	table.insert(pbz6_items,Asteroid():setPosition(324154, 832533):setSize(137))
	table.insert(pbz6_items,Asteroid():setPosition(323731, 817751):setSize(248))
	table.insert(pbz6_items,Asteroid():setPosition(324259, 816695):setSize(86))
	table.insert(pbz6_items,Asteroid():setPosition(325315, 749015):setSize(154))
	table.insert(pbz6_items,Asteroid():setPosition(324998, 751022):setSize(966))
	table.insert(pbz6_items,Asteroid():setPosition(323520, 750282):setSize(95))
	table.insert(pbz6_items,Asteroid():setPosition(325210, 752500):setSize(172))
	table.insert(pbz6_items,Asteroid():setPosition(323837, 751761):setSize(800))
	table.insert(pbz6_items,Asteroid():setPosition(323520, 777946):setSize(12))
	table.insert(pbz6_items,Asteroid():setPosition(324259, 772561):setSize(181))
	table.insert(pbz6_items,Asteroid():setPosition(324961, 728177):setSize(799))
	table.insert(pbz6_items,Asteroid():setPosition(325512, 728361):setSize(27))
	table.insert(pbz6_items,Asteroid():setPosition(324502, 727718):setSize(111))
	table.insert(pbz6_items,Asteroid():setPosition(325420, 726801):setSize(522))
	table.insert(pbz6_items,Asteroid():setPosition(323860, 727994):setSize(33))
	table.insert(pbz6_items,Asteroid():setPosition(323401, 727627):setSize(132))
	table.insert(pbz6_items,Asteroid():setPosition(324869, 727627):setSize(641))
	table.insert(pbz6_items,Asteroid():setPosition(324686, 726709):setSize(40))
	table.insert(pbz6_items,Asteroid():setPosition(324044, 727260):setSize(154))
	table.insert(pbz6_items,Asteroid():setPosition(324135, 684868):setSize(468))
	table.insert(pbz6_items,Asteroid():setPosition(324686, 683308):setSize(57))
	table.insert(pbz6_items,Asteroid():setPosition(324594, 712578):setSize(172))
	table.insert(pbz6_items,Asteroid():setPosition(324594, 714413):setSize(384))
	table.insert(pbz6_items,Asteroid():setPosition(325145, 717350):setSize(66))
	table.insert(pbz6_items,Asteroid():setPosition(324686, 715515):setSize(199))
	table.insert(pbz6_items,Asteroid():setPosition(324961, 713863):setSize(205))
	table.insert(pbz6_items,Asteroid():setPosition(324787, 811522):setSize(72))
	table.insert(pbz6_items,Asteroid():setPosition(324048, 805609):setSize(113))
	table.insert(pbz6_items,Asteroid():setPosition(325315, 808037):setSize(627))
	table.insert(pbz6_items,Asteroid():setPosition(324576, 800963):setSize(88))
	table.insert(pbz6_items,Asteroid():setPosition(324154, 797901):setSize(135))
	table.insert(pbz6_items,Asteroid():setPosition(325104, 796001):setSize(841))
	table.insert(pbz6_items,Asteroid():setPosition(325421, 794311):setSize(99))
	table.insert(pbz6_items,Asteroid():setPosition(324048, 789349):setSize(157))
	table.insert(pbz6_items,Asteroid():setPosition(325315, 785231):setSize(566))
	table.insert(pbz6_items,Asteroid():setPosition(324259, 780057):setSize(13))
	table.insert(pbz6_items,Asteroid():setPosition(324778, 686336):setSize(178))
	table.insert(pbz6_items,Asteroid():setPosition(323676, 681564):setSize(480))
	table.insert(pbz6_items,Asteroid():setPosition(324411, 709000):setSize(28))
	table.insert(pbz6_items,Asteroid():setPosition(324502, 705054):setSize(199))
	local pbz7_items = {}
	table.insert(pbz7_items,Asteroid():setPosition(330308, 869924):setSize(103))
	table.insert(pbz7_items,Asteroid():setPosition(328400, 867511):setSize(112))
	table.insert(pbz7_items,Asteroid():setPosition(326548, 869980):setSize(129))
	table.insert(pbz7_items,Asteroid():setPosition(328288, 863022):setSize(135))
	table.insert(pbz7_items,Asteroid():setPosition(327166, 872056):setSize(147))
	table.insert(pbz7_items,Asteroid():setPosition(327839, 873234):setSize(151))
	table.insert(pbz7_items,Asteroid():setPosition(330148, 848969):setSize(169))
	table.insert(pbz7_items,Asteroid():setPosition(328717, 843784):setSize(171))
	table.insert(pbz7_items,Asteroid():setPosition(329635, 872000):setSize(188))
	table.insert(pbz7_items,Asteroid():setPosition(329073, 873178):setSize(195))
	table.insert(pbz7_items,Asteroid():setPosition(328456, 873964):setSize(201))
	table.insert(pbz7_items,Asteroid():setPosition(327287, 838777):setSize(217))
	table.insert(pbz7_items,Asteroid():setPosition(327644, 837525):setSize(223))
	table.insert(pbz7_items,Asteroid():setPosition(328360, 834486):setSize(238))
	table.insert(pbz7_items,Asteroid():setPosition(327466, 831446):setSize(242))
	table.insert(pbz7_items,Asteroid():setPosition(329254, 828764):setSize(250))
	table.insert(pbz7_items,Asteroid():setPosition(327644, 826082):setSize(269))
	table.insert(pbz7_items,Asteroid():setPosition(329075, 824115):setSize(274))
	table.insert(pbz7_items,Asteroid():setPosition(328002, 822505):setSize(282))
	table.insert(pbz7_items,Asteroid():setPosition(329254, 820181):setSize(298))
	table.insert(pbz7_items,Asteroid():setPosition(329611, 816605):setSize(307))
	table.insert(pbz7_items,Asteroid():setPosition(328181, 814101):setSize(317))
	table.insert(pbz7_items,Asteroid():setPosition(328360, 810346):setSize(321))
	table.insert(pbz7_items,Asteroid():setPosition(326750, 808201):setSize(336))
	table.insert(pbz7_items,Asteroid():setPosition(328717, 807307):setSize(342))
	table.insert(pbz7_items,Asteroid():setPosition(328538, 805340):setSize(355))
	table.insert(pbz7_items,Asteroid():setPosition(328181, 799439):setSize(360))
	table.insert(pbz7_items,Asteroid():setPosition(329433, 802836):setSize(376))
	table.insert(pbz7_items,Asteroid():setPosition(327466, 802479):setSize(382))
	table.insert(pbz7_items,Asteroid():setPosition(329254, 797293):setSize(399))
	table.insert(pbz7_items,Asteroid():setPosition(327108, 793359):setSize(383))
	table.insert(pbz7_items,Asteroid():setPosition(327466, 794790):setSize(377))
	table.insert(pbz7_items,Asteroid():setPosition(329254, 792644):setSize(362))
	table.insert(pbz7_items,Asteroid():setPosition(329611, 789962):setSize(358))
	table.insert(pbz7_items,Asteroid():setPosition(328181, 790320):setSize(344))
	table.insert(pbz7_items,Asteroid():setPosition(328002, 788532):setSize(331))
	table.insert(pbz7_items,Asteroid():setPosition(328360, 780306):setSize(329))
	table.insert(pbz7_items,Asteroid():setPosition(326312, 759012):setSize(310))
	table.insert(pbz7_items,Asteroid():setPosition(328896, 786744):setSize(308))
	table.insert(pbz7_items,Asteroid():setPosition(328717, 784955):setSize(316))
	table.insert(pbz7_items,Asteroid():setPosition(328002, 782988):setSize(327))
	table.insert(pbz7_items,Asteroid():setPosition(327108, 782094):setSize(339))
	table.insert(pbz7_items,Asteroid():setPosition(330074, 760296):setSize(344))
	table.insert(pbz7_items,Asteroid():setPosition(329707, 761122):setSize(355))
	table.insert(pbz7_items,Asteroid():setPosition(330532, 761214):setSize(369))
	table.insert(pbz7_items,Asteroid():setPosition(328360, 778518):setSize(376))
	table.insert(pbz7_items,Asteroid():setPosition(327287, 777624):setSize(388))
	table.insert(pbz7_items,Asteroid():setPosition(328181, 776730):setSize(394))
	table.insert(pbz7_items,Asteroid():setPosition(328055, 760113):setSize(401))
	table.insert(pbz7_items,Asteroid():setPosition(329156, 758920):setSize(411))
	table.insert(pbz7_items,Asteroid():setPosition(328697, 758736):setSize(420))
	table.insert(pbz7_items,Asteroid():setPosition(328422, 759287):setSize(431))
	table.insert(pbz7_items,Asteroid():setPosition(329615, 760480):setSize(447))
	table.insert(pbz7_items,Asteroid():setPosition(328881, 760388):setSize(454))
	table.insert(pbz7_items,Asteroid():setPosition(329340, 759746):setSize(466))
	table.insert(pbz7_items,Asteroid():setPosition(328330, 736164):setSize(477))
	table.insert(pbz7_items,Asteroid():setPosition(329615, 732494):setSize(489))
	table.insert(pbz7_items,Asteroid():setPosition(328147, 728823):setSize(493))
	table.insert(pbz7_items,Asteroid():setPosition(327046, 758369):setSize(502))
	table.insert(pbz7_items,Asteroid():setPosition(327963, 758645):setSize(519))
	table.insert(pbz7_items,Asteroid():setPosition(327596, 759287):setSize(528))
	table.insert(pbz7_items,Asteroid():setPosition(327229, 739284):setSize(539))
	table.insert(pbz7_items,Asteroid():setPosition(326862, 724878):setSize(547))
	table.insert(pbz7_items,Asteroid():setPosition(328422, 721116):setSize(554))
	table.insert(pbz7_items,Asteroid():setPosition(329868, 700397):setSize(561))
	table.insert(pbz7_items,Asteroid():setPosition(330041, 698671):setSize(575))
	table.insert(pbz7_items,Asteroid():setPosition(329350, 702124):setSize(580))
	table.insert(pbz7_items,Asteroid():setPosition(329868, 696771):setSize(594))
	table.insert(pbz7_items,Asteroid():setPosition(326760, 703160):setSize(606))
	table.insert(pbz7_items,Asteroid():setPosition(327623, 704023):setSize(613))
	table.insert(pbz7_items,Asteroid():setPosition(328659, 703332):setSize(628))
	table.insert(pbz7_items,Asteroid():setPosition(329868, 694354):setSize(632))
	table.insert(pbz7_items,Asteroid():setPosition(329695, 691937):setSize(644))
	table.insert(pbz7_items,Asteroid():setPosition(329350, 689520):setSize(655))
	table.insert(pbz7_items,Asteroid():setPosition(328141, 686412):setSize(668))
	table.insert(pbz7_items,Asteroid():setPosition(327451, 683822):setSize(677))
	table.insert(pbz7_items,Asteroid():setPosition(327504, 701663):setSize(684))
	table.insert(pbz7_items,Asteroid():setPosition(327780, 702581):setSize(692))
	table.insert(pbz7_items,Asteroid():setPosition(328330, 702672):setSize(708))
	table.insert(pbz7_items,Asteroid():setPosition(328055, 701480):setSize(715))
	table.insert(pbz7_items,Asteroid():setPosition(327688, 700837):setSize(721))
	table.insert(pbz7_items,Asteroid():setPosition(327046, 701388):setSize(739))
	table.insert(pbz7_items,Asteroid():setPosition(326770, 702122):setSize(743))
	table.insert(pbz7_items,Asteroid():setPosition(328789, 702214):setSize(751))
	table.insert(pbz7_items,Asteroid():setPosition(328973, 701571):setSize(762))
	table.insert(pbz7_items,Asteroid():setPosition(328422, 700929):setSize(775))
	local pbz8_items = {}
	table.insert(pbz8_items,Asteroid():setPosition(332448, 867895):setSize(111))
	table.insert(pbz8_items,Asteroid():setPosition(332585, 865385):setSize(122))
	table.insert(pbz8_items,Asteroid():setPosition(331901, 866606):setSize(133))
	table.insert(pbz8_items,Asteroid():setPosition(335489, 864850):setSize(114))
	table.insert(pbz8_items,Asteroid():setPosition(334397, 844628):setSize(125))
	table.insert(pbz8_items,Asteroid():setPosition(337041, 844356):setSize(136))
	table.insert(pbz8_items,Asteroid():setPosition(332891, 863882):setSize(117))
	table.insert(pbz8_items,Asteroid():setPosition(334675, 863711):setSize(128))
	table.insert(pbz8_items,Asteroid():setPosition(333886, 864867):setSize(139))
	table.insert(pbz8_items,Asteroid():setPosition(331831, 844976):setSize(110))
	table.insert(pbz8_items,Asteroid():setPosition(333186, 845329):setSize(121))
	table.insert(pbz8_items,Asteroid():setPosition(337238, 842970):setSize(132))
	table.insert(pbz8_items,Asteroid():setPosition(334470, 843230):setSize(113))
	table.insert(pbz8_items,Asteroid():setPosition(335839, 842933):setSize(124))
	table.insert(pbz8_items,Asteroid():setPosition(332469, 841300):setSize(135))
	table.insert(pbz8_items,Asteroid():setPosition(333356, 842383):setSize(116))
	table.insert(pbz8_items,Asteroid():setPosition(334033, 805699):setSize(127))
	table.insert(pbz8_items,Asteroid():setPosition(335348, 805218):setSize(138))
	table.insert(pbz8_items,Asteroid():setPosition(334506, 804100):setSize(119))
	table.insert(pbz8_items,Asteroid():setPosition(336881, 804045):setSize(120))
	table.insert(pbz8_items,Asteroid():setPosition(336730, 805437):setSize(131))
	table.insert(pbz8_items,Asteroid():setPosition(334141, 790204):setSize(112))
	table.insert(pbz8_items,Asteroid():setPosition(334677, 792749):setSize(123))
	table.insert(pbz8_items,Asteroid():setPosition(334916, 791370):setSize(134))
	table.insert(pbz8_items,Asteroid():setPosition(333248, 808123):setSize(115))
	table.insert(pbz8_items,Asteroid():setPosition(333088, 806732):setSize(126))
	table.insert(pbz8_items,Asteroid():setPosition(332860, 789639):setSize(137))
	table.insert(pbz8_items,Asteroid():setPosition(334470, 788844):setSize(118))
	table.insert(pbz8_items,Asteroid():setPosition(333454, 787882):setSize(129))
	table.insert(pbz8_items,Asteroid():setPosition(337110, 747130):setSize(130))
	table.insert(pbz8_items,Asteroid():setPosition(336208, 746059):setSize(111))
	table.insert(pbz8_items,Asteroid():setPosition(337081, 749011):setSize(122))
	table.insert(pbz8_items,Asteroid():setPosition(333595, 730178):setSize(133))
	table.insert(pbz8_items,Asteroid():setPosition(334763, 730949):setSize(114))
	table.insert(pbz8_items,Asteroid():setPosition(336461, 731132):setSize(125))
	table.insert(pbz8_items,Asteroid():setPosition(335493, 732144):setSize(136))
	table.insert(pbz8_items,Asteroid():setPosition(335056, 768005):setSize(117))
	table.insert(pbz8_items,Asteroid():setPosition(335263, 766029):setSize(128))
	table.insert(pbz8_items,Asteroid():setPosition(334178, 766914):setSize(139))
	table.insert(pbz8_items,Asteroid():setPosition(334150, 745172):setSize(110))
	table.insert(pbz8_items,Asteroid():setPosition(333076, 750136):setSize(121))
	table.insert(pbz8_items,Asteroid():setPosition(332480, 766396):setSize(132))
	table.insert(pbz8_items,Asteroid():setPosition(333645, 765619):setSize(113))
	table.insert(pbz8_items,Asteroid():setPosition(334847, 746386):setSize(124))
	table.insert(pbz8_items,Asteroid():setPosition(334178, 747616):setSize(135))
	table.insert(pbz8_items,Asteroid():setPosition(335830, 749639):setSize(116))
	table.insert(pbz8_items,Asteroid():setPosition(334548, 750202):setSize(127))
	table.insert(pbz8_items,Asteroid():setPosition(333865, 748980):setSize(138))
	table.insert(pbz8_items,Asteroid():setPosition(332479, 728277):setSize(119))
	table.insert(pbz8_items,Asteroid():setPosition(332292, 729664):setSize(120))
	table.insert(pbz8_items,Asteroid():setPosition(336008, 769031):setSize(131))
	table.insert(pbz8_items,Asteroid():setPosition(335348, 718961):setSize(112))
	table.insert(pbz8_items,Asteroid():setPosition(335055, 720715):setSize(115))
	table.insert(pbz8_items,Asteroid():setPosition(336225, 723639):setSize(118))
	table.insert(pbz8_items,Asteroid():setPosition(334178, 722762):setSize(110))
	table.insert(pbz8_items,Asteroid():setPosition(335348, 716622):setSize(110))
	table.insert(pbz8_items,Asteroid():setPosition(333008, 718668):setSize(126))
	table.insert(pbz8_items,Asteroid():setPosition(334178, 697908):setSize(122))
	table.insert(pbz8_items,Asteroid():setPosition(333008, 695861):setSize(118))
	table.insert(pbz8_items,Asteroid():setPosition(334763, 694399):setSize(115))
	table.insert(pbz8_items,Asteroid():setPosition(336810, 702586):setSize(129))
	table.insert(pbz8_items,Asteroid():setPosition(335055, 700832):setSize(113))
	table.insert(pbz8_items,Asteroid():setPosition(336810, 707265):setSize(110))
	table.insert(pbz8_items,Asteroid():setPosition(332131, 694107):setSize(114))
	table.insert(pbz8_items,Asteroid():setPosition(335348, 690890):setSize(119))
	table.insert(pbz8_items,Asteroid():setPosition(336517, 694692):setSize(116))
	table.insert(pbz8_items,Asteroid():setPosition(336225, 692060):setSize(123))
	table.insert(pbz8_items,Asteroid():setPosition(335932, 684165):setSize(114))
	table.insert(pbz8_items,Asteroid():setPosition(333593, 682703):setSize(114))
	table.insert(pbz8_items,Asteroid():setPosition(333301, 689428):setSize(124))
	table.insert(pbz8_items,Asteroid():setPosition(335348, 687089):setSize(129))
    table.insert(pbz8_items,Planet():setPosition(335022, 825399):setPlanetRadius(2000):setDistanceFromMovementPlane(-1000.00):setPlanetSurfaceTexture("planets/moon-1.png"):setPlanetCloudRadius(2100.00):setAxialRotationTime(500))
	--	set speed for zone 1 items
	for i,item in ipairs(pbz1_items) do
		item.speed = 20
		item.up = true
		table.insert(phen_list,item)
	end
	--	set speed for zone 2 items
	for i,item in ipairs(pbz2_items) do
		item.speed = 120
		item.up = false
		table.insert(phen_list,item)
	end
	--	set speed for zone 3 items
	for i,item in ipairs(pbz3_items) do
		item.speed = 240
		item.up = true
		table.insert(phen_list,item)
	end
	--	set speed for zone 4 items
	for i,item in ipairs(pbz4_items) do
		item.speed = 40
		item.up = true
		table.insert(phen_list,item)
	end
	--	set speed for zone 5 items
	for i,item in ipairs(pbz5_items) do
		item.speed = 360
		item.up = false
		table.insert(phen_list,item)
	end
	--	set speed for zone 6 items
	for i,item in ipairs(pbz6_items) do
		item.speed = 70
		item.up = false
		table.insert(phen_list,item)
	end
	--	set speed for zone 7 items
	for i,item in ipairs(pbz7_items) do
		item.speed = 30
		item.up = true
		table.insert(phen_list,item)
	end
	--	set speed for zone 8 items
	for i,item in ipairs(pbz8_items) do
		item.speed = 180
		item.up = false
		table.insert(phen_list,item)
	end
	return phen_list
end
function removeStaunchColor()
	staunch_color = false
	if staunch_planets ~= nil then
		for i,sp in pairs(staunch_planets) do
			sp:destroy()
		end
	end
	staunch_planets = nil
	if staunch_asteroids ~= nil then
		for i,sa in pairs(staunch_asteroids) do
			sa:destroy()
		end
	end
	staunch_asteroids = nil
	if staunch_phenomenon ~= nil then
		for i,sp in pairs(staunch_phenomenon) do
			sp:destroy()
		end
	end
	staunch_phenomenon = nil
	if staunch_stations ~= nil then
		for i,ss in pairs(staunch_stations) do
			if ss ~= stationStaunch then
				ss:destroy()
			end
		end
	end
	staunch_stations = nil
	if staunch_defense_platforms ~= nil then
		for i,sdp in ipairs(staunch_defense_platforms) do
			sdp:destroy()
		end
	end
	staunch_defense_platforms = nil
end
--	Glikton region
function gliktonSector()
	glikton_color = true
	glikton_planets = createGliktonPlanets()
	glikton_asteroids = createGliktonAsteroids()
	glikton_holes = createGliktonHoles()
	glikton_nebulae = createGliktonNebulae()
	glikton_mines = createGliktonMines()
	glikton_stations = createGliktonStations()
	regionStations = glikton_stations
	return {destroy=removeGliktonColor}
end
function removeGliktonColor()
	glikton_color = false
	if glikton_planets ~= nil then
		for i,p in ipairs(glikton_planets) do
			p:destroy()
		end
	end
	glikton_planets = nil
	if glikton_asteroids ~= nil then
		for i,a in ipairs(glikton_asteroids) do
			a:destroy()
		end
	end
	glikton_asteroids = nil
	if glikton_holes ~= nil then
		for i,h in ipairs(glikton_holes) do
			h:destroy()
		end
	end
	glikton_holes = nil
	if glikton_nebulae ~= nil then
		for i,n in ipairs(glikton_nebulae) do
			n:destroy()
		end
	end
	glikton_nebulae = nil
	if glikton_mines ~= nil then
		for i,m in ipairs(glikton_mines) do
			m:destroy()
		end
	end
	glikton_mines = nil
	if glikton_stations ~= nil then
		for i,s in ipairs(glikton_stations) do
			s:destroy()
		end
	end
	glikton_stations = nil
end
function createGliktonStations()
	local stations = {}
	--	Atacama
	stationAtacama = SpaceStation():setTemplate("Huge Station"):setFaction("USN"):setCallSign("Atacama"):setPosition(406093, -588588)
	stationAtacama:setDescription("Mining and manufacturing. Early member of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationAtacama:setShortRangeRadarRange(10000)
	stationAtacama.comms_data = {
    	friendlyness = 31,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	filament =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "There are a variety of mineral deposits among these asteroids. We are here to make use of these resources.",
    	history = "We were among the first to survey these asteroids. We quickly set up a mining facility. Once other factions started arriving, we realized that in order to keep the minerals flowing, we needed to set up some kind of agreement among everyone here. We worked with the Human Navy and the CUF to set up the Glikton compact.",
	}
	station_names[stationAtacama:getCallSign()] = {stationAtacama:getSectorName(), stationAtacama}
	table.insert(stations,stationAtacama)
	--	Babylon
	stationBabylon = SpaceStation():setTemplate("Medium Station"):setFaction("CUF"):setCallSign("Babylon"):setPosition(445573, -546094)
	stationBabylon:setDescription("Mining. Participant in Glikton Consortium compact"):setCommsScript(""):setCommsFunction(commsStation)
	stationBabylon:setShortRangeRadarRange(8000)
	stationBabylon.comms_data = {
    	friendlyness = 78,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = true,				Nuke = true,				EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We gather minerals from the asteroids around here.",
    	history = "We were glad to help set up the Glikton Consortium considering the potential for strife without it.",
	}
	station_names[stationBabylon:getCallSign()] = {stationBabylon:getSectorName(), stationBabylon}
	table.insert(stations,stationBabylon)
	--	Bowers
	stationBowers = SpaceStation():setTemplate("Medium Station"):setFaction("Human Navy"):setCallSign("Bowers"):setPosition(381353, -601348)
	stationBowers:setDescription("Mining and manufacturing. Glikton Consortium pact particpant"):setCommsScript(""):setCommsFunction(commsStation)
	stationBowers:setShortRangeRadarRange(9000)
	stationBowers.comms_data = {
    	friendlyness = 83,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	sensor =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We gather minerals from the asteroids. We also make things from these minerals.",
    	history = "We named our station after Eilley Bowers who made a fortune in silver mining on Earth in the late 19th century.",
	}
	station_names[stationBowers:getCallSign()] = {stationBowers:getSectorName(), stationBowers}
	table.insert(stations,stationBowers)
	--	Browstin
	stationBrowstin = SpaceStation():setTemplate("Small Station"):setFaction("Independent"):setCallSign("Browstin"):setPosition(401823, -517708)
	stationBrowstin:setDescription("Mining. Glikton Consortium participant"):setCommsScript(""):setCommsFunction(commsStation)
	stationBrowstin:setShortRangeRadarRange(5000)
	stationBrowstin.comms_data = {
    	friendlyness = 58,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = true,				Nuke = true,				EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	nickel =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine the nearby asteroids",
    	history = "We moved here to take advantage of the plentiful resources",
	}
	station_names[stationBrowstin:getCallSign()] = {stationBrowstin:getSectorName(), stationBrowstin}
	table.insert(stations,stationBrowstin)
	--	Catalyst
	stationCatalyst = SpaceStation():setTemplate("Medium Station"):setFaction("TSN"):setCallSign("Catalyst"):setPosition(377865, -503125)
	stationCatalyst:setDescription("Mining. Part of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationCatalyst:setShortRangeRadarRange(6000)
	stationCatalyst.comms_data = {
    	friendlyness = 88,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 1.3", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 3, mines_required = 5},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	dilithium =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "We are here to stock up on mineral supplies.",
    	history = "The Glikton Consortium is great! It's bailed us out of several sticky situations",
	}
	station_names[stationCatalyst:getCallSign()] = {stationCatalyst:getSectorName(), stationCatalyst}
	table.insert(stations,stationCatalyst)
	--	Chodexitab
	stationChodexitab = SpaceStation():setTemplate("Medium Station"):setFaction("Exuari"):setCallSign("Chodexitab"):setPosition(434375, -486979)
	stationChodexitab:setDescription("Mining. Member of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationChodexitab:setShortRangeRadarRange(5000)
	stationChodexitab.comms_data = {
    	friendlyness = 23,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	robotic =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine the asteroids around here",
    	history = "The resources here help us blow up enemy assets in a humorous way",
	}
	station_names[stationChodexitab:getCallSign()] = {stationChodexitab:getSectorName(), stationChodexitab}
	table.insert(stations,stationChodexitab)
	--	Colorado
	stationColorado = SpaceStation():setTemplate("Small Station"):setFaction("TSN"):setCallSign("Colorado"):setPosition(269515, -566746)
	stationColorado:setDescription("Mining. Part of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationColorado:setShortRangeRadarRange(5000)
	stationColorado.comms_data = {
    	friendlyness = 91,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = true,				EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	cobalt =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "Thar's gold in them thar asteroids (or cobalt, or dilithium)!",
    	history = "We heard about the resources here and we could not let such easy pickings slide by. The Glikton agreement means we don't have to invest as much in defenses.",
	}
	station_names[stationColorado:getCallSign()] = {stationColorado:getSectorName(), stationColorado}
	table.insert(stations,stationColorado)
	--	Fremen
	stationFremen = SpaceStation():setTemplate("Medium Station"):setFaction("CUF"):setCallSign("Fremen"):setPosition(332276, -613882)
	stationFremen:setDescription("Mining. Part of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationFremen:setShortRangeRadarRange(5000)
	stationFremen.comms_data = {
    	friendlyness = 64,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	warp =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 52 },
        public_relations = true,
        general_information = "We gather minerals from the asteroids",
    	history = "We just came for the minerals. Pickings are pretty good, so we've been growing our station capacity.",
	}
	stationFremen:setRestocksScanProbes(random(1,100) > 14)
	stationFremen:setRepairDocked(random(1,100) > 11)
	stationFremen:setSharesEnergyWithDocked(random(1,100) > 12)
	station_names[stationFremen:getCallSign()] = {stationFremen:getSectorName(), stationFremen}
	table.insert(stations,stationFremen)
	--	Harkonex
	stationHarkonex = SpaceStation():setTemplate("Medium Station"):setFaction("Exuari"):setCallSign("Harkonex"):setPosition(408958, -623223)
	stationHarkonex:setDescription("Mining. Glikton Consortium Associate"):setCommsScript(""):setCommsFunction(commsStation)
	stationHarkonex:setShortRangeRadarRange(5000)
	stationHarkonex.comms_data = {
    	friendlyness = 41,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	impulse =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 32, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "We mine minerals from the asteroids. We look for humorous opportunities.",
    	history = "The minerals seemed amusing, especially with all the factions around providing potential avanues for humor. Alas, our humor was not appreciated and we agreed to the Glikton accord.",
	}
	station_names[stationHarkonex:getCallSign()] = {stationHarkonex:getSectorName(), stationHarkonex}
	table.insert(stations,stationHarkonex)
	--	Kivork
	stationKivork = SpaceStation():setTemplate("Medium Station"):setFaction("Kraylor"):setCallSign("Kivork"):setPosition(302866, -580681)
	stationKivork:setDescription("Mining and monitoring. Probationary Glikton Consortium member"):setCommsScript(""):setCommsFunction(commsStation)
	stationKivork:setShortRangeRadarRange(5000)
	stationKivork.comms_data = {
    	friendlyness = 31,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	lifter =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "The asteroids give us minerals that we need",
    	history = "We came to keep watch on the various factions flocking to the region. We joined in the mining after we completed our survey. We briefly but unsuccessfully tried to force the other factions to leave the area. We recently signed the Glikton pact",
	}
	station_names[stationKivork:getCallSign()] = {stationKivork:getSectorName(), stationKivork}
	table.insert(stations,stationKivork)
	--	Kloptak
	stationKloptak = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Kloptak"):setPosition(337484, -600079)
	stationKloptak:setDescription("Mining station. Member of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationKloptak:setShortRangeRadarRange(5000)
	stationKloptak.comms_data = {
    	friendlyness = 34,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "friend",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	jump =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine minerals from the asteroids.",
    	history = "We want the minerals. We're not so sure about the other factions.",
	}
	station_names[stationKloptak:getCallSign()] = {stationKloptak:getSectorName(), stationKloptak}
	table.insert(stations,stationKloptak)
	--	Kraglurt
	stationKraglurt = SpaceStation():setTemplate("Medium Station"):setFaction("Kraylor"):setCallSign("Kraglurt"):setPosition(434115, -515365)
	stationKraglurt:setDescription("Mining and manufacturing. Glikton Consortium associate"):setCommsScript(""):setCommsFunction(commsStation)
	stationKraglurt:setShortRangeRadarRange(7000)
	stationKraglurt.comms_data = {
    	friendlyness = 28,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = true,					HVLI = true,				Mine = true,				Nuke = true,				EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 3.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 3000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	shield =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine asteroids",
    	history = "We came to prevent others from taking all of these resources",
	}
	station_names[stationKraglurt:getCallSign()] = {stationKraglurt:getSectorName(), stationKraglurt}
	table.insert(stations,stationKraglurt)
	--	Laviscounts
	stationLaviscounts = SpaceStation():setTemplate("Small Station"):setFaction("USN"):setCallSign("Laviscounts"):setPosition(466406, -507812)
	stationLaviscounts:setDescription("Mining. Glikton Consortium member"):setCommsScript(""):setCommsFunction(commsStation)
	stationLaviscounts:setShortRangeRadarRange(7000)
	stationLaviscounts.comms_data = {
    	friendlyness = 83,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	platinum =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine the asteroids",
    	history = "The resources gathered here are vital to the USN",
	}
	station_names[stationLaviscounts:getCallSign()] = {stationLaviscounts:getSectorName(), stationLaviscounts}
	table.insert(stations,stationLaviscounts)
	--	Lumandine
	stationLumandine = SpaceStation():setTemplate("Small Station"):setFaction("Arlenians"):setCallSign("Lumandine"):setPosition(402865, -483333)
	stationLumandine:setDescription("Research and mining. Member of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationLumandine:setShortRangeRadarRange(5000)
	stationLumandine.comms_data = {
    	friendlyness = 73,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	gold =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We examine the asteroids and other stellar phenomenon in the region. We also gather minerals.",
    	history = "We seek the origins of this unusual confluence of resources. The resources themselves facilitate this research.",
	}
	station_names[stationLumandine:getCallSign()] = {stationLumandine:getSectorName(), stationLumandine}
	table.insert(stations,stationLumandine)
	--	Packardell
	stationPackardell = SpaceStation():setTemplate("Large Station"):setFaction("Ghosts"):setCallSign("Packardell"):setPosition(377083, -531250)
	stationPackardell:setDescription("Manufacturing and mining. Signatory of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationPackardell:setShortRangeRadarRange(5000)
	stationPackardell.comms_data = {
    	friendlyness = 63,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = true,				Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	transporter =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine minerals from the asteroids and produce goods from them",
    	history = "We saw the resource paradigm shift and aligned with others to get these resources.",
	}
	station_names[stationPackardell:getCallSign()] = {stationPackardell:getSectorName(), stationPackardell}
	table.insert(stations,stationPackardell)
	--	Photovoltaic
	stationPhotovoltaic = SpaceStation():setTemplate("Medium Station"):setFaction("Ghosts"):setCallSign("Photovoltaic"):setPosition(282553, -562452)
	stationPhotovoltaic:setDescription("Mining and manufacturing. Glikton Consortium Participant"):setCommsScript(""):setCommsFunction(commsStation)
	stationPhotovoltaic:setShortRangeRadarRange(5000)
	stationPhotovoltaic.comms_data = {
    	friendlyness = 71,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 1.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	optic =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "The minerals in the asteroids serve our purposes well.",
    	history = "We came to this region as soon as we heard about the resources. The Glikton accord simplifies station management and maintenance.",
	}
	station_names[stationPhotovoltaic:getCallSign()] = {stationPhotovoltaic:getSectorName(), stationPhotovoltaic}
	table.insert(stations,stationPhotovoltaic)
	--	Pichtak
	stationPichtak = SpaceStation():setTemplate("Small Station"):setFaction("Ktlitans"):setCallSign("Pichtak"):setPosition(413021, -539323)
	stationPichtak:setDescription("Mining. Member of Glikton Consortium"):setCommsScript(""):setCommsFunction(commsStation)
	stationPichtak:setShortRangeRadarRange(5000)
	stationPichtak.comms_data = {
    	friendlyness = 38,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 1.3", cost = math.random(45,83), quantity = math.random(1,3), speed = 1000, mine_fetus = 3, mines_required = 5},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	tritanium =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 12, medicine = random(1,100) < 22, luxury = random(1,100) < 32 },
        public_relations = true,
        general_information = "We mine asteroids in the region.",
    	history = "After some encounters with enemy factions, we decided to join the Glikton Consortium to keep the riffraff away",
	}
	station_names[stationPichtak:getCallSign()] = {stationPichtak:getSectorName(), stationPichtak}
	table.insert(stations,stationPichtak)
	--	Virginia
	stationVirginia = SpaceStation():setTemplate("Large Station"):setFaction("Independent"):setCallSign("Virginia"):setPosition(312501, -556984)
	stationVirginia:setDescription("Manufacturing and mining. Early adopter of Glikton Consortium rules"):setCommsScript(""):setCommsFunction(commsStation)
	stationVirginia:setShortRangeRadarRange(8000)
	stationVirginia.comms_data = {
    	friendlyness = 68,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "neutral"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = true},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.1", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 1, mines_required = 1},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	autodoc =	{quantity = math.random(4,11),	cost = math.random(55,120)}, 
        			repulsor =	{quantity = math.random(4,11),	cost = math.random(55,120)},
        			tractor =	{quantity = math.random(4,11),	cost = math.random(55,120)},	},
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "We make stuff out of the minerals we pull from these asteroids",
    	history = "Once we established regular mineral supplies, we turned our attention to making goods from those minerals. The Glikton accord afforded us much needed protection from marauding neighbors",
	}
	station_names[stationVirginia:getCallSign()] = {stationVirginia:getSectorName(), stationVirginia}
	table.insert(stations,stationVirginia)
	--	Willesteria
	stationWillesteria = SpaceStation():setTemplate("Large Station"):setFaction("Arlenians"):setCallSign("Willesteria"):setPosition(393072, -604473)
	stationWillesteria:setDescription("Mining, manufacturing and research. Glikton Consortium Signatory"):setCommsScript(""):setCommsFunction(commsStation)
	stationWillesteria:setShortRangeRadarRange(5000)
	stationWillesteria.comms_data = {
    	friendlyness = 91,
        weapons = 			{Homing = "neutral",			HVLI = "neutral", 			Mine = "neutral",			Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(3,4), 	HVLI = math.random(1,4),	Mine = math.random(2,4),	Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,100) <= 60,	HVLI = random(1,100) <= 80,	Mine = random(1,100) <= 60,	Nuke = random(1,100) <= 30,	EMP = random(1,100) <= 40},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        hack_repair =			random(1,100)<30,
        tube_slow_down_repair = random(1,100)<30,
        jump_overcharge =		random(1,100)<30,
        probe_launch_repair =	random(1,100)<30,
        scan_repair =			random(1,100)<30,
        self_destruct_repair =	random(1,100)<30,
        mine_probes = {name = "LDSM 2.2", cost = math.random(45,83), quantity = math.random(1,3), speed = 2000, mine_fetus = 2, mines_required = 3},	--first number in name is speed, second is fetus
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.8 },
        goods = {	circuit =	{quantity = math.random(4,11),	cost = math.random(55,120)}, },
        trade = {	food = random(1,100) < 32, medicine = random(1,100) < 42, luxury = random(1,100) < 22 },
        public_relations = true,
        general_information = "The minerals in the asteroids are crucial resources for us.",
    	history = "We were here for quite a while before other factions discovered these resources and moved in. We were worried about potential hostilities. We're glad the Glikton agreement is in place.",
	}
	station_names[stationWillesteria:getCallSign()] = {stationWillesteria:getSectorName(), stationWillesteria}
	table.insert(stations,stationWillesteria)
    return stations
end
function createGliktonPlanets()
	local planets = {}
    local star_glikton = Planet()
    	:setPosition(377860, -572943)
    	:setPlanetRadius(1000)
		:setDistanceFromMovementPlane(-2000)
		:setPlanetSurfaceTexture("planets/star-1.png")
		:setPlanetAtmosphereColor(1.0,.9,.9)
    local planet_glikton = Planet()
    	:setPosition(476646, -490235)
    	:setPlanetRadius(5000)
		:setDistanceFromMovementPlane(-2000)
		:setPlanetSurfaceTexture("planets/planet-2.png")
		:setPlanetAtmosphereColor(.75,.85,.23)
    	:setPlanetCloudRadius(5300)
		:setPlanetCloudTexture("./skybox/bottom.png")
    	:setOrbit(star_glikton, 1000)
    table.insert(planets,star_glikton)
    table.insert(planets,planet_glikton)
	local zone_sign = Zone()
	local base_x, base_y = vectorFromAngle(56,10000,true)
	base_x = base_x + 220000
	base_y = base_y - 380000
	local base_left_corner_x, base_left_corner_y = vectorFromAngle(56 + 270,1000,true)
	base_left_corner_x = base_left_corner_x + base_x
	base_left_corner_y = base_left_corner_y + base_y
	local left_inner_arrow_x, left_inner_arrow_y = vectorFromAngle(56,10000,true)
	left_inner_arrow_x = left_inner_arrow_x + base_left_corner_x
	left_inner_arrow_y = left_inner_arrow_y + base_left_corner_y
	local left_outer_arrow_x, left_outer_arrow_y = vectorFromAngle(56 + 270,1000,true)
	left_outer_arrow_x = left_outer_arrow_x + left_inner_arrow_x
	left_outer_arrow_y = left_outer_arrow_y + left_inner_arrow_y
	local arrow_tip_x, arrow_tip_y = vectorFromAngle(56,13000,true)
	arrow_tip_x = arrow_tip_x + base_x
	arrow_tip_y = arrow_tip_y + base_y
	local base_right_corner_x, base_right_corner_y = vectorFromAngle(56 + 90,1000,true)
	base_right_corner_x = base_right_corner_x + base_x
	base_right_corner_y = base_right_corner_y + base_y
	local right_inner_arrow_x, right_inner_arrow_y = vectorFromAngle(56,10000,true)
	right_inner_arrow_x = right_inner_arrow_x + base_right_corner_x
	right_inner_arrow_y = right_inner_arrow_y + base_right_corner_y
	local right_outer_arrow_x, right_outer_arrow_y = vectorFromAngle(56 + 90,1000,true)
	right_outer_arrow_x = right_outer_arrow_x + right_inner_arrow_x
	right_outer_arrow_y = right_outer_arrow_y + right_inner_arrow_y
	zone_sign:setPoints(
		base_left_corner_x, 	base_left_corner_y,
		left_inner_arrow_x, 	left_inner_arrow_y,
		left_outer_arrow_x, 	left_outer_arrow_y,
		arrow_tip_x,			arrow_tip_y,
		right_outer_arrow_x,	right_outer_arrow_y,
		right_inner_arrow_x,	right_inner_arrow_y,
		base_right_corner_x,	base_right_corner_y
	)
	zone_sign:setLabel("Glikton ~200U"):setColor(150,150,40)
	table.insert(planets,zone_sign)
    return planets
end
function createGliktonMines()
	local mines = {}
	table.insert(mines,Mine():setPosition(405656, -485844))
	table.insert(mines,Mine():setPosition(406055, -483318))
	table.insert(mines,Mine():setPosition(408580, -485711))
	table.insert(mines,Mine():setPosition(404327, -486508))
	table.insert(mines,Mine():setPosition(382354, -505027))
	table.insert(mines,Mine():setPosition(381424, -502648))
	table.insert(mines,Mine():setPosition(382561, -501097))
	table.insert(mines,Mine():setPosition(379045, -509163))
	table.insert(mines,Mine():setPosition(380700, -506578))
	table.insert(mines,Mine():setPosition(396107, -517332))
	table.insert(mines,Mine():setPosition(380733, -536190))
	table.insert(mines,Mine():setPosition(382722, -534035))
	table.insert(mines,Mine():setPosition(373770, -536853))
	table.insert(mines,Mine():setPosition(376754, -538014))
	table.insert(mines,Mine():setPosition(402105, -521055))
	table.insert(mines,Mine():setPosition(399520, -520434))
	table.insert(mines,Mine():setPosition(397762, -519090))
	table.insert(mines,Mine():setPosition(404276, -520538))
	table.insert(mines,Mine():setPosition(407921, -539506))
	table.insert(mines,Mine():setPosition(411770, -503918))
	table.insert(mines,Mine():setPosition(411504, -500197))
	table.insert(mines,Mine():setPosition(410685, -537455))
	table.insert(mines,Mine():setPosition(447119, -541233))
	table.insert(mines,Mine():setPosition(440912, -544337))
	table.insert(mines,Mine():setPosition(442666, -542717))
	table.insert(mines,Mine():setPosition(439967, -546226))
	table.insert(mines,Mine():setPosition(417298, -535970))
	table.insert(mines,Mine():setPosition(416211, -535030))
	table.insert(mines,Mine():setPosition(412729, -536190))
	table.insert(mines,Mine():setPosition(427553, -515999))
	table.insert(mines,Mine():setPosition(412966, -501393))
	table.insert(mines,Mine():setPosition(434362, -496475))
	table.insert(mines,Mine():setPosition(429172, -514380))
	table.insert(mines,Mine():setPosition(430656, -513031))
	table.insert(mines,Mine():setPosition(461962, -511142))
	table.insert(mines,Mine():setPosition(461423, -508443))
	table.insert(mines,Mine():setPosition(462232, -505069))
	table.insert(mines,Mine():setPosition(464931, -503450))
	table.insert(mines,Mine():setPosition(433565, -494748))
	table.insert(mines,Mine():setPosition(431438, -492488))
	table.insert(mines,Mine():setPosition(431970, -491027))
	return mines
end
function createGliktonNebulae()
	local nebulae = {}
	table.insert(nebulae,Nebula():setPosition(341651, -609194))
	table.insert(nebulae,Nebula():setPosition(339307, -601902))
	table.insert(nebulae,Nebula():setPosition(335401, -613621))
	table.insert(nebulae,Nebula():setPosition(313425, -555972))
	table.insert(nebulae,Nebula():setPosition(403183, -588431))
	table.insert(nebulae,Nebula():setPosition(376819, -498724))
	table.insert(nebulae,Nebula():setPosition(388277, -515911))
	table.insert(nebulae,Nebula():setPosition(384110, -513047))
	table.insert(nebulae,Nebula():setPosition(366402, -543516))
	table.insert(nebulae,Nebula():setPosition(379944, -507838))
	table.insert(nebulae,Nebula():setPosition(376298, -504974))
	table.insert(nebulae,Nebula():setPosition(411715, -547161))
	table.insert(nebulae,Nebula():setPosition(404683, -545859))
	table.insert(nebulae,Nebula():setPosition(433069, -523463))
	table.insert(nebulae,Nebula():setPosition(435673, -511745))
	table.insert(nebulae,Nebula():setPosition(430725, -518516))
	return nebulae
end
function createGliktonHoles()
	local holes = {}
	table.insert(holes,WormHole():setPosition(358317, -598777):setTargetPosition(431755, -538361))
	table.insert(holes,WormHole():setPosition(288526, -552423):setTargetPosition(408838, -607371))
	table.insert(holes,WormHole():setPosition(417432, -520913):setTargetPosition(288265, -585496))
	table.insert(holes,BlackHole():setPosition(335921, -606850))
	table.insert(holes,BlackHole():setPosition(303647, -586931))
	table.insert(holes,BlackHole():setPosition(402447, -620880))
	table.insert(holes,BlackHole():setPosition(375103, -598744))
	table.insert(holes,BlackHole():setPosition(394895, -597963))
	table.insert(holes,BlackHole():setPosition(276564, -564536))
	table.insert(holes,BlackHole():setPosition(402447, -581296))
	table.insert(holes,BlackHole():setPosition(318231, -560890))
	return holes
end
function createGliktonAsteroids()
	local asteroids = {}
	table.insert(asteroids,Asteroid():setPosition(341864, -602744):setSize(507))
	table.insert(asteroids,Asteroid():setPosition(339622, -598882):setSize(774))
	table.insert(asteroids,Asteroid():setPosition(341491, -610964):setSize(580))
	table.insert(asteroids,Asteroid():setPosition(343608, -608224):setSize(754))
	table.insert(asteroids,Asteroid():setPosition(339124, -600875):setSize(654))
	table.insert(asteroids,Asteroid():setPosition(340992, -610217):setSize(563))
	table.insert(asteroids,Asteroid():setPosition(342612, -607726):setSize(229))
	table.insert(asteroids,Asteroid():setPosition(343733, -606356):setSize(283))
	table.insert(asteroids,Asteroid():setPosition(341989, -609345):setSize(331))
	table.insert(asteroids,Asteroid():setPosition(340245, -611587):setSize(719))
	table.insert(asteroids,Asteroid():setPosition(340619, -602245):setSize(370))
	table.insert(asteroids,Asteroid():setPosition(339498, -599879):setSize(369))
	table.insert(asteroids,Asteroid():setPosition(341740, -605110):setSize(500))
	table.insert(asteroids,Asteroid():setPosition(341740, -603989):setSize(809))
	table.insert(asteroids,Asteroid():setPosition(338750, -601622):setSize(358))
	table.insert(asteroids,Asteroid():setPosition(337380, -601498):setSize(320))
	table.insert(asteroids,Asteroid():setPosition(334889, -614701):setSize(623))
	table.insert(asteroids,Asteroid():setPosition(335761, -614078):setSize(796))
	table.insert(asteroids,Asteroid():setPosition(333021, -616196):setSize(811))
	table.insert(asteroids,Asteroid():setPosition(337380, -613206):setSize(184))
	table.insert(asteroids,Asteroid():setPosition(341117, -612584):setSize(327))
	table.insert(asteroids,Asteroid():setPosition(339373, -613206):setSize(313))
	table.insert(asteroids,Asteroid():setPosition(338377, -612708):setSize(500))
	table.insert(asteroids,Asteroid():setPosition(402887, -590073):setSize(408))
	table.insert(asteroids,Asteroid():setPosition(338128, -613829):setSize(564))
	table.insert(asteroids,Asteroid():setPosition(333768, -612957):setSize(768))
	table.insert(asteroids,Asteroid():setPosition(409917, -583341):setSize(238))
	table.insert(asteroids,Asteroid():setPosition(407832, -585247):setSize(144))
	table.insert(asteroids,Asteroid():setPosition(399670, -589894):setSize(282))
	table.insert(asteroids,Asteroid():setPosition(401160, -590848):setSize(312))
	table.insert(asteroids,Asteroid():setPosition(411049, -584175):setSize(772))
	table.insert(asteroids,Asteroid():setPosition(410632, -585188):setSize(680))
	table.insert(asteroids,Asteroid():setPosition(411109, -586141):setSize(377))
	table.insert(asteroids,Asteroid():setPosition(410572, -587333):setSize(714))
	table.insert(asteroids,Asteroid():setPosition(409143, -586022):setSize(596))
	table.insert(asteroids,Asteroid():setPosition(408666, -584711):setSize(744))
	table.insert(asteroids,Asteroid():setPosition(407832, -586737):setSize(282))
	table.insert(asteroids,Asteroid():setPosition(408070, -587630):setSize(516))
	table.insert(asteroids,Asteroid():setPosition(406164, -586320):setSize(190))
	table.insert(asteroids,Asteroid():setPosition(401100, -586856):setSize(482))
	table.insert(asteroids,Asteroid():setPosition(311431, -559725):setSize(392))
	table.insert(asteroids,Asteroid():setPosition(313698, -557848):setSize(567))
	table.insert(asteroids,Asteroid():setPosition(313285, -554915):setSize(394))
	table.insert(asteroids,Asteroid():setPosition(404079, -588107):setSize(236))
	table.insert(asteroids,Asteroid():setPosition(404555, -586737):setSize(559))
	table.insert(asteroids,Asteroid():setPosition(403364, -587690):setSize(348))
	table.insert(asteroids,Asteroid():setPosition(399849, -587511):setSize(564))
	table.insert(asteroids,Asteroid():setPosition(401815, -588047):setSize(72))
	table.insert(asteroids,Asteroid():setPosition(402947, -588941):setSize(292))
	table.insert(asteroids,Asteroid():setPosition(400564, -588882):setSize(763))
	table.insert(asteroids,Asteroid():setPosition(401279, -589596):setSize(357))
	table.insert(asteroids,Asteroid():setPosition(317060, -554800):setSize(179))
	table.insert(asteroids,Asteroid():setPosition(316004, -554331):setSize(529))
	table.insert(asteroids,Asteroid():setPosition(314206, -554174):setSize(447))
	table.insert(asteroids,Asteroid():setPosition(315535, -555464):setSize(725))
	table.insert(asteroids,Asteroid():setPosition(314558, -555230):setSize(686))
	table.insert(asteroids,Asteroid():setPosition(314167, -556207):setSize(822))
	table.insert(asteroids,Asteroid():setPosition(312565, -559295):setSize(740))
	table.insert(asteroids,Asteroid():setPosition(381602, -534332):setSize(250))
	table.insert(asteroids,Asteroid():setPosition(376695, -536922):setSize(499))
	table.insert(asteroids,Asteroid():setPosition(378876, -536786):setSize(818))
	table.insert(asteroids,Asteroid():setPosition(373424, -534877):setSize(521))
	table.insert(asteroids,Asteroid():setPosition(371243, -535014):setSize(696))
	table.insert(asteroids,Asteroid():setPosition(400985, -522019):setSize(800))
	table.insert(asteroids,Asteroid():setPosition(403995, -521068):setSize(526))
	table.insert(asteroids,Asteroid():setPosition(396549, -514889):setSize(134))
	table.insert(asteroids,Asteroid():setPosition(405263, -520434):setSize(615))
	table.insert(asteroids,Asteroid():setPosition(406847, -541822):setSize(807))
	table.insert(asteroids,Asteroid():setPosition(406372, -543248):setSize(69))
	table.insert(asteroids,Asteroid():setPosition(407481, -537545):setSize(537))
	table.insert(asteroids,Asteroid():setPosition(407164, -539604):setSize(742))
	table.insert(asteroids,Asteroid():setPosition(408114, -540396):setSize(659))
	table.insert(asteroids,Asteroid():setPosition(396866, -519959):setSize(601))
	table.insert(asteroids,Asteroid():setPosition(397024, -518375):setSize(25))
	table.insert(asteroids,Asteroid():setPosition(396549, -516474):setSize(99))
	table.insert(asteroids,Asteroid():setPosition(398450, -517107):setSize(44))
	table.insert(asteroids,Asteroid():setPosition(399718, -516791):setSize(751))
	table.insert(asteroids,Asteroid():setPosition(398609, -515048):setSize(518))
	table.insert(asteroids,Asteroid():setPosition(398609, -518850):setSize(211))
	table.insert(asteroids,Asteroid():setPosition(401144, -520593):setSize(844))
	table.insert(asteroids,Asteroid():setPosition(400193, -519959):setSize(129))
	table.insert(asteroids,Asteroid():setPosition(398767, -520276):setSize(167))
	table.insert(asteroids,Asteroid():setPosition(402252, -520118):setSize(869))
	table.insert(asteroids,Asteroid():setPosition(395282, -518058):setSize(336))
	table.insert(asteroids,Asteroid():setPosition(392113, -517900):setSize(302))
	table.insert(asteroids,Asteroid():setPosition(397183, -522019):setSize(499))
	table.insert(asteroids,Asteroid():setPosition(394331, -518850):setSize(768))
	table.insert(asteroids,Asteroid():setPosition(395123, -520751):setSize(306))
	table.insert(asteroids,Asteroid():setPosition(400193, -521543):setSize(772))
	table.insert(asteroids,Asteroid():setPosition(399718, -522494):setSize(125))
	table.insert(asteroids,Asteroid():setPosition(398609, -525504):setSize(752))
	table.insert(asteroids,Asteroid():setPosition(400985, -523445):setSize(762))
	table.insert(asteroids,Asteroid():setPosition(403362, -522494):setSize(557))
	table.insert(asteroids,Asteroid():setPosition(406530, -519801):setSize(244))
	table.insert(asteroids,Asteroid():setPosition(410649, -536436):setSize(228))
	table.insert(asteroids,Asteroid():setPosition(410174, -537703):setSize(67))
	table.insert(asteroids,Asteroid():setPosition(409857, -538495):setSize(608))
	table.insert(asteroids,Asteroid():setPosition(404154, -519167):setSize(603))
	table.insert(asteroids,Asteroid():setPosition(412709, -535168):setSize(435))
	table.insert(asteroids,Asteroid():setPosition(408748, -539287):setSize(266))
	table.insert(asteroids,Asteroid():setPosition(373969, -537603):setSize(334))
	table.insert(asteroids,Asteroid():setPosition(376422, -538830):setSize(836))
	table.insert(asteroids,Asteroid():setPosition(377104, -536240):setSize(663))
	table.insert(asteroids,Asteroid():setPosition(374787, -536377):setSize(347))
	table.insert(asteroids,Asteroid():setPosition(378739, -537194):setSize(265))
	table.insert(asteroids,Asteroid():setPosition(373151, -535968):setSize(135))
	table.insert(asteroids,Asteroid():setPosition(383919, -534605):setSize(214))
	table.insert(asteroids,Asteroid():setPosition(385691, -532696):setSize(612))
	table.insert(asteroids,Asteroid():setPosition(383374, -532696):setSize(800))
	table.insert(asteroids,Asteroid():setPosition(376013, -536922):setSize(773))
	table.insert(asteroids,Asteroid():setPosition(378194, -538285):setSize(45))
	table.insert(asteroids,Asteroid():setPosition(384737, -531606):setSize(747))
	table.insert(asteroids,Asteroid():setPosition(448513, -542614):setSize(778))
	table.insert(asteroids,Asteroid():setPosition(444711, -542773):setSize(812))
	table.insert(asteroids,Asteroid():setPosition(450731, -540872):setSize(770))
	table.insert(asteroids,Asteroid():setPosition(452791, -541980):setSize(682))
	table.insert(asteroids,Asteroid():setPosition(447880, -539763):setSize(276))
	table.insert(asteroids,Asteroid():setPosition(448513, -540872):setSize(531))
	table.insert(asteroids,Asteroid():setPosition(443602, -542456):setSize(399))
	table.insert(asteroids,Asteroid():setPosition(443127, -541822):setSize(574))
	table.insert(asteroids,Asteroid():setPosition(446137, -541347):setSize(204))
	table.insert(asteroids,Asteroid():setPosition(442018, -542456):setSize(282))
	table.insert(asteroids,Asteroid():setPosition(440750, -544991):setSize(365))
	table.insert(asteroids,Asteroid():setPosition(444553, -540713):setSize(104))
	table.insert(asteroids,Asteroid():setPosition(440275, -542931):setSize(282))
	table.insert(asteroids,Asteroid():setPosition(440275, -545149):setSize(545))
	table.insert(asteroids,Asteroid():setPosition(443760, -543248):setSize(481))
	table.insert(asteroids,Asteroid():setPosition(441859, -544515):setSize(268))
	table.insert(asteroids,Asteroid():setPosition(441226, -547684):setSize(41))
	table.insert(asteroids,Asteroid():setPosition(440117, -548793):setSize(744))
	table.insert(asteroids,Asteroid():setPosition(438849, -546100):setSize(681))
	table.insert(asteroids,Asteroid():setPosition(438057, -544040):setSize(215))
	table.insert(asteroids,Asteroid():setPosition(415244, -533425):setSize(358))
	table.insert(asteroids,Asteroid():setPosition(413501, -534376):setSize(641))
	table.insert(asteroids,Asteroid():setPosition(413818, -535802):setSize(403))
	table.insert(asteroids,Asteroid():setPosition(416986, -537069):setSize(235))
	table.insert(asteroids,Asteroid():setPosition(417145, -537545):setSize(686))
	table.insert(asteroids,Asteroid():setPosition(418412, -534534):setSize(534))
	table.insert(asteroids,Asteroid():setPosition(418095, -536594):setSize(259))
	table.insert(asteroids,Asteroid():setPosition(412233, -535327):setSize(357))
	table.insert(asteroids,Asteroid():setPosition(412075, -536594):setSize(57))
	table.insert(asteroids,Asteroid():setPosition(411283, -534059):setSize(614))
	table.insert(asteroids,Asteroid():setPosition(411441, -537545):setSize(750))
	table.insert(asteroids,Asteroid():setPosition(416511, -535960):setSize(588))
	table.insert(asteroids,Asteroid():setPosition(415085, -535168):setSize(327))
	table.insert(asteroids,Asteroid():setPosition(414451, -537228):setSize(761))
	table.insert(asteroids,Asteroid():setPosition(425902, -514212):setSize(159))
	table.insert(asteroids,Asteroid():setPosition(411997, -502710):setSize(365))
	table.insert(asteroids,Asteroid():setPosition(410983, -501286):setSize(614))
	table.insert(asteroids,Asteroid():setPosition(413702, -501612):setSize(494))
	table.insert(asteroids,Asteroid():setPosition(412614, -503679):setSize(427))
	table.insert(asteroids,Asteroid():setPosition(433533, -496985):setSize(274))
	table.insert(asteroids,Asteroid():setPosition(434477, -495195):setSize(449))
	table.insert(asteroids,Asteroid():setPosition(436259, -498348):setSize(727))
	table.insert(asteroids,Asteroid():setPosition(435347, -496609):setSize(629))
	table.insert(asteroids,Asteroid():setPosition(433397, -495486):setSize(660))
	table.insert(asteroids,Asteroid():setPosition(432302, -495739):setSize(725))
	table.insert(asteroids,Asteroid():setPosition(428626, -513614):setSize(410))
	table.insert(asteroids,Asteroid():setPosition(427789, -514877):setSize(106))
	table.insert(asteroids,Asteroid():setPosition(460871, -509028):setSize(751))
	table.insert(asteroids,Asteroid():setPosition(460395, -508236):setSize(84))
	table.insert(asteroids,Asteroid():setPosition(460237, -509820):setSize(99))
	table.insert(asteroids,Asteroid():setPosition(463247, -512988):setSize(582))
	table.insert(asteroids,Asteroid():setPosition(462455, -511721):setSize(797))
	table.insert(asteroids,Asteroid():setPosition(430469, -515625):setSize(594))
	table.insert(asteroids,Asteroid():setPosition(461663, -506810):setSize(419))
	table.insert(asteroids,Asteroid():setPosition(462930, -507443):setSize(423))
	table.insert(asteroids,Asteroid():setPosition(460712, -507760):setSize(722))
	table.insert(asteroids,Asteroid():setPosition(460395, -506493):setSize(277))
	table.insert(asteroids,Asteroid():setPosition(462930, -508711):setSize(583))
	table.insert(asteroids,Asteroid():setPosition(462772, -503958):setSize(708))
	table.insert(asteroids,Asteroid():setPosition(461346, -504592):setSize(172))
	table.insert(asteroids,Asteroid():setPosition(463722, -503800):setSize(181))
	table.insert(asteroids,Asteroid():setPosition(464831, -504275):setSize(309))
	table.insert(asteroids,Asteroid():setPosition(466257, -502215):setSize(228))
	table.insert(asteroids,Asteroid():setPosition(463089, -505384):setSize(397))
	table.insert(asteroids,Asteroid():setPosition(432737, -494216):setSize(731))
	table.insert(asteroids,Asteroid():setPosition(433281, -492040):setSize(445))
	table.insert(asteroids,Asteroid():setPosition(411309, -498784):setSize(440))
	table.insert(asteroids,Asteroid():setPosition(412723, -499872):setSize(853))
	table.insert(asteroids,Asteroid():setPosition(431758, -491605):setSize(713))
	table.insert(asteroids,Asteroid():setPosition(434368, -493346):setSize(667))
	table.insert(asteroids,Asteroid():setPosition(412505, -501939):setSize(435))
	table.insert(asteroids,Asteroid():setPosition(411091, -502591):setSize(822))
	table.insert(asteroids,Asteroid():setPosition(410874, -504332):setSize(640))
	table.insert(asteroids,Asteroid():setPosition(432410, -489756):setSize(76))
	table.insert(asteroids,Asteroid():setPosition(381465, -533514):setSize(318))
	table.insert(asteroids,Asteroid():setPosition(381874, -535150):setSize(688))
	table.insert(asteroids,Asteroid():setPosition(379557, -535968):setSize(815))
	table.insert(asteroids,Asteroid():setPosition(380784, -537467):setSize(298))
	table.insert(asteroids,Asteroid():setPosition(463089, -510612):setSize(75))
	table.insert(asteroids,Asteroid():setPosition(464198, -512196):setSize(398))
	table.insert(asteroids,Asteroid():setPosition(464356, -503007):setSize(46))
	table.insert(asteroids,Asteroid():setPosition(461504, -511879):setSize(102))
	table.insert(asteroids,Asteroid():setPosition(427865, -512500):setSize(839))
	table.insert(asteroids,Asteroid():setPosition(428646, -510156):setSize(617))
	table.insert(asteroids,Asteroid():setPosition(426562, -510938):setSize(313))
	table.insert(asteroids,Asteroid():setPosition(431510, -512240):setSize(406))
	table.insert(asteroids,Asteroid():setPosition(382283, -505709):setSize(266))
	table.insert(asteroids,Asteroid():setPosition(381602, -505027):setSize(859))
	table.insert(asteroids,Asteroid():setPosition(380920, -503528):setSize(291))
	table.insert(asteroids,Asteroid():setPosition(382147, -501483):setSize(292))
	table.insert(asteroids,Asteroid():setPosition(383919, -501211):setSize(22))
	table.insert(asteroids,Asteroid():setPosition(382692, -508026):setSize(804))
	table.insert(asteroids,Asteroid():setPosition(378876, -508026):setSize(769))
	table.insert(asteroids,Asteroid():setPosition(377785, -508980):setSize(267))
	table.insert(asteroids,Asteroid():setPosition(380375, -509525):setSize(693))
	table.insert(asteroids,Asteroid():setPosition(427345, -516986):setSize(88))
	table.insert(asteroids,Asteroid():setPosition(428385, -519271):setSize(297))
	table.insert(asteroids,Asteroid():setPosition(382420, -500120):setSize(402))
	table.insert(asteroids,Asteroid():setPosition(381193, -497258):setSize(695))
	table.insert(asteroids,Asteroid():setPosition(431105, -490626):setSize(185))
	table.insert(asteroids,Asteroid():setPosition(430779, -493128):setSize(645))
	table.insert(asteroids,Asteroid():setPosition(467683, -501106):setSize(96))
	table.insert(asteroids,Asteroid():setPosition(409271, -484854):setSize(826))
	table.insert(asteroids,Asteroid():setPosition(408590, -488126):setSize(419))
	table.insert(asteroids,Asteroid():setPosition(405046, -489080):setSize(450))
	table.insert(asteroids,Asteroid():setPosition(403955, -485400):setSize(651))
	table.insert(asteroids,Asteroid():setPosition(408453, -486217):setSize(631))
	table.insert(asteroids,Asteroid():setPosition(429787, -513213):setSize(274))
	table.insert(asteroids,Asteroid():setPosition(405727, -487172):setSize(564))
	table.insert(asteroids,Asteroid():setPosition(405864, -484718):setSize(431))
	table.insert(asteroids,Asteroid():setPosition(406681, -485808):setSize(599))
	table.insert(asteroids,Asteroid():setPosition(404909, -484991):setSize(623))
	table.insert(asteroids,Asteroid():setPosition(405864, -482401):setSize(445))
	table.insert(asteroids,Asteroid():setPosition(406000, -481174):setSize(176))
	table.insert(asteroids,Asteroid():setPosition(403819, -487308):setSize(117))
	table.insert(asteroids,Asteroid():setPosition(407090, -483764):setSize(694))
	table.insert(asteroids,Asteroid():setPosition(405591, -483900):setSize(266))
	table.insert(asteroids,Asteroid():setPosition(381738, -503119):setSize(396))
	table.insert(asteroids,Asteroid():setPosition(380784, -502301):setSize(158))
	table.insert(asteroids,Asteroid():setPosition(381738, -506254):setSize(599))
	table.insert(asteroids,Asteroid():setPosition(383101, -505027):setSize(519))
	table.insert(asteroids,Asteroid():setPosition(380648, -504073):setSize(734))
	table.insert(asteroids,Asteroid():setPosition(379966, -506254):setSize(679))
	return asteroids
end
--	Other
function placeTknolgBase()
	if gm_click_mode == "tknolg base" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "tknolg base"
		onGMClick(tknolgBase)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   tknolg base\nGM click mode.",prev_mode))
		end
	end
	changeTerrain()
end
function tknolgBase(x,y)
    stationTknolg = SpaceStation():setTemplate("Medium Station"):setFaction(fleetSpawnFaction):setCallSign("Bio Adaptive Dev Lab"):setPosition(x + 19,y + -4):setCommsFunction(SwitchToGM)
	local ship = nil
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD6"):setPosition(x + 2593,y + 550):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD4"):setPosition(x + -7645,y + 4904):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD1"):setPosition(x + -4889,y + -7667):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD3"):setPosition(x + 4927,y + 7659):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD5"):setPosition(x + -3185,y + -490):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    ship = CpuShip():setFaction(fleetSpawnFaction):setTemplate("Defense platform"):setCallSign("AD2"):setPosition(x + 7682,y + -4912):orderRoaming():setCommsFunction(SwitchToGM):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -1643,y + 8143)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -7179,y + 4590)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 1558,y + -8072)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -4587,y + -7123)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 4574,y + 7112)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -8029,y + -1666)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + -837,y + -755)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 7877,y + 2223)
    WarpJammer():setFaction(fleetSpawnFaction):setPosition(x + 7092,y + -4552)
    Mine():setPosition(x + 2165,y + 8839)
    Mine():setPosition(x + 2625,y + 8715)
    Mine():setPosition(x + 3077,y + 8566)
    Mine():setPosition(x + 3522,y + 8395)
    Mine():setPosition(x + -2085,y + 8849)
    Mine():setPosition(x + -2999,y + 8581)
    Mine():setPosition(x + -3443,y + 8411)
    Mine():setPosition(x + -1619,y + 8947)
    Mine():setPosition(x + -673,y + 9069)
    Mine():setPosition(x + -1147,y + 9021)
    Mine():setPosition(x + -2545,y + 8727)
    Mine():setPosition(x + -197,y + 9093)
    Mine():setPosition(x + 279,y + 9092)
    Mine():setPosition(x + 1699,y + 8939)
    Mine():setPosition(x + 1229,y + 9015)
    Mine():setPosition(x + 755,y + 9066)
    Mine():setPosition(x + -3879,y + 8219)
    Mine():setPosition(x + -4305,y + 8003)
    Mine():setPosition(x + -4717,y + 7766)
    Mine():setPosition(x + -5117,y + 7508)
    Mine():setPosition(x + 3482,y + -8420)
    Mine():setPosition(x + 4342,y + -8012)
    Mine():setPosition(x + -8381,y + 3498)
    Mine():setPosition(x + -8551,y + 3054)
    Mine():setPosition(x + -8701,y + 2601)
    Mine():setPosition(x + 3036,y + -8589)
    Mine():setPosition(x + 2122,y + -8858)
    Mine():setPosition(x + 1656,y + -8956)
    Mine():setPosition(x + 2583,y + -8735)
    Mine():setPosition(x + 1186,y + -9029)
    Mine():setPosition(x + 712,y + -9078)
    Mine():setPosition(x + -241,y + -9100)
    Mine():setPosition(x + -716,y + -9074)
    Mine():setPosition(x + 236,y + -9101)
    Mine():setPosition(x + -1191,y + -9023)
    Mine():setPosition(x + -2127,y + -8848)
    Mine():setPosition(x + -1661,y + -8948)
    Mine():setPosition(x + -2587,y + -8723)
    Mine():setPosition(x + -3483,y + -8403)
    Mine():setPosition(x + -3039,y + -8575)
    Mine():setPosition(x + -6261,y + -6590)
    Mine():setPosition(x + -6597,y + -6252)
    Mine():setPosition(x + -8205,y + -3902)
    Mine():setPosition(x + -8397,y + -3466)
    Mine():setPosition(x + -7213,y + -5527)
    Mine():setPosition(x + -6915,y + -5897)
    Mine():setPosition(x + -6567,y + 6276)
    Mine():setPosition(x + -5875,y + 6930)
    Mine():setPosition(x + -5503,y + 7228)
    Mine():setPosition(x + -6229,y + 6612)
    Mine():setPosition(x + -7493,y + -5140)
    Mine():setPosition(x + -7751,y + -4740)
    Mine():setPosition(x + -7989,y + -4327)
    Mine():setPosition(x + 6299,y + 6582)
    Mine():setPosition(x + 7252,y + 5518)
    Mine():setPosition(x + 6953,y + 5889)
    Mine():setPosition(x + 6635,y + 6244)
    Mine():setPosition(x + 7531,y + 5132)
    Mine():setPosition(x + 6268,y + -6620)
    Mine():setPosition(x + 5913,y + -6938)
    Mine():setPosition(x + 6605,y + -6284)
    Mine():setPosition(x + 5542,y + -7237)
    Mine():setPosition(x + 4755,y + -7774)
    Mine():setPosition(x + 5156,y + -7516)
    Mine():setPosition(x + 3917,y + -8227)
    Mine():setPosition(x + -9079,y + -221)
    Mine():setPosition(x + -9077,y + 256)
    Mine():setPosition(x + -9055,y + -696)
    Mine():setPosition(x + -9007,y + -1170)
    Mine():setPosition(x + -8925,y + 1676)
    Mine():setPosition(x + -9001,y + 1205)
    Mine():setPosition(x + -8825,y + 2141)
    Mine():setPosition(x + -9051,y + 731)
    Mine():setPosition(x + -8713,y + -2568)
    Mine():setPosition(x + -8835,y + -2107)
    Mine():setPosition(x + -8933,y + -1641)
    Mine():setPosition(x + -8567,y + -3021)
    Mine():setPosition(x + 8971,y + 1633)
    Mine():setPosition(x + 9044,y + 1162)
    Mine():setPosition(x + 8873,y + 2099)
    Mine():setPosition(x + 9093,y + 688)
    Mine():setPosition(x + 8435,y + 3458)
    Mine():setPosition(x + 8242,y + 3894)
    Mine():setPosition(x + 7790,y + 4732)
    Mine():setPosition(x + 8027,y + 4319)
    Mine():setPosition(x + 8605,y + 3013)
    Mine():setPosition(x + 8751,y + 2559)
    Mine():setPosition(x + 9117,y + 212)
    Mine():setPosition(x + 9090,y + -740)
    Mine():setPosition(x + 9116,y + -264)
    Mine():setPosition(x + 9039,y + -1214)
    Mine():setPosition(x + 8963,y + -1684)
    Mine():setPosition(x + 8863,y + -2150)
    Mine():setPosition(x + 8418,y + -3507)
    Mine():setPosition(x + 8590,y + -3062)
    Mine():setPosition(x + 8738,y + -2610)
end

-- both these functions are ugly, the lack of a way to get
-- EE to do this in engine is either my foolishness in being unable to figure it out
-- or is a bug in EE
-- openGMComms takes a player ship and force opens a gm comms window
-- returns true if it was able to, flase if relay was already in comms with someone
function openGMComms(player)
	local tmp = Artifact()
	tmp:setCallSign("auto-opened") -- callsign isnt shown to player, try to provide the gm a bit of a hint
	local ret = tmp:openCommsTo(player)
	if ret then
		tmp:setCommsFunction(SwitchToGM)
		player:commandAnswerCommHail(true)
		player:commandSendComm(0)
	end
	tmp:destroy()
	return ret
end
function SwitchToGM ()
    setCommsMessage(" ")
    addCommsReply("hail",function()
    	setCommsMessage("Stand by while connecting")
 		commsSwitchToGM()
    end)
    commsSwitchToGM()
    return true
end
--	****************************************************************  --
--	****				Initial Set Up Player Ships				****  --
--	****************************************************************  --
----------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player  --
----------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SETUP			F	initialSetUp
-- -PLAYER SHIP		F	playerShip
-- +ENGINEERING		F	tweakEngineering
-- +CARGO			F	changePlayerCargo
-- +REPUTATION		F	changePlayerReputation
-- +PLAYER MESSAGE	F	playerMessage
function tweakPlayerShip()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("+By Console",tweakByConsole)
	addGMFunction("+Player Message",playerMessage)
	addGMFunction("get hacked status",singleCPUShipFunction(GMmessageHackedStatus))
	addGMFunction("+Sensors",playerSensors)
	addGMFunction("+Boarders",setBoarders)
	addGMFunction("+Carrier",setPlayerCarrier)
end
function tweakByConsole()
	clearGMFunctions()
	addGMFunction("-Main From Console",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak",tweakPlayerShip)
	addGMFunction("+Engineering",tweakEngineering)
	addGMFunction("+Relay",tweakRelay)
	addGMFunction("+Helm",playerHelm)
	addGMFunction("+Weapons",playerWeapons)
end
function setBoarders()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-From Boarders",tweakPlayerShip)
	local p = playerShipSelected()
	if p ~= nil then
		if boarder_intent == nil then
			boarder_intent = "sabotage"
		end
		if boarder_entry == nil then
			boarder_entry = "random"
		end
		if boarder_competence == nil then
			boarder_competence = "medium"
			boarder_success_chance = 50
		end
		if boarder_speed == nil then
			boarder_speed = 60
		end
		addGMFunction(string.format("+Intent:%s",boarder_intent),setBoarderIntent)
		addGMFunction(string.format("+Entry:%s",boarder_entry),setBoarderEntry)
		addGMFunction(string.format("+Competence:%s",boarder_competence),setBoarderCompetence)
		addGMFunction(string.format("+Speed:%s",boarder_speed),setBoarderSpeed)
		addGMFunction(string.format("Board %s",p:getCallSign()),function()
			if p.security_log == nil then
				p.security_log = {}
			end
			if p.boarding == nil then
				local boarder_entries = {}
				if boarder_entry == "random" then
					local possible_consoles = {
						"Helms",
						"Weapons",
						"Engineering",
						"Science",
						"Relay",
						"Tactical",
						"Engineering+",
						"Operations",
						"Single",
						"DamageControl",
						"PowerManagement",
						"Database",
						"AltRelay",
						"CommsOnly",
						"ShipLog",
					}
					local consoles_in_use = {}
					for i,console in ipairs(possible_consoles) do
						if p:hasPlayerAtPosition(console) then
							table.insert(consoles_in_use,console)
						end
					end
					table.insert(boarder_entries,tableRemoveRandom(consoles_in_use))
					if #consoles_in_use > 0 and random(1,100) < 50 then
						table.insert(boarder_entries,tableRemoveRandom(consoles_in_use))
						if #consoles_in_use > 0 and random(1,100) < 30 then
							table.insert(boarder_entries,tableRemoveRandom(consoles_in_use))
							if #consoles_in_use > 0 and random(1,100) < 25 then
								table.insert(boarder_entries,tableRemoveRandom(consoles_in_use))
								if #consoles_in_use > 0 and random(1,100) < 20 then
									table.insert(boarder_entries,tableRemoveRandom(consoles_in_use))
								end
							end
						end
					end
				else
					table.insert(boarder_entries,boarder_entry)
				end
				p.boarder_entry_button_inform_security = {}
				p.boarder_entry_button_activate_defenses = {}
				p.boarder_entry_message = {}
				local boarder_consoles = ""
				for i,console in ipairs(boarder_entries) do
					p.boarder_entry_button_inform_security[console] = string.format("boarder_entry_button_inform_security_%s",console)
					p:addCustomButton(console,p.boarder_entry_button_inform_security[console],"Inform Security",function()
						string.format("")
						boarderInformSecurity(p,console)
					end,35)
					p.boarder_entry_button_activate_defenses[console] = string.format("boarder_entry_button_activate_defenses_%s",console)
					p:addCustomButton(console,p.boarder_entry_button_activate_defenses[console],"Activate Defenses",function()
						boarderActivateDefenses(p,console)
					end,36)
					p.boarder_entry_message[console] = string.format("boarder_entry_message_%s",console)
					p:addCustomMessage(console,p.boarder_entry_message[console],string.format("INTRUDER ALERT\nInternal sensors have detected non-crew life forms entering %s. You may inform security, activate automated defenses or do nothing",p:getCallSign()))
					if boarder_consoles == "" then
						boarder_consoles = console
					else
						boarder_consoles = string.format("%s, %s",boarder_consoles,console)
					end
				end
				p.boarding = {
					entries = boarder_entries,
					intent = boarder_intent,
					chance = boarder_success_chance,
					done = getScenarioTime() + boarder_speed + random(0,3),
				}
				table.insert(p.security_log,{board_time = getScenarioTime(), egress_time = p.boarding.done, entries = boarder_entries, intent = boarder_intent})
				addGMMessage(string.format("Boarding has started on %s. Notification has gone to the following consoles:\n%s",p:getCallSign(),boarder_consoles))
			else
				addGMMessage(string.format("Boarding already in progress on %s",p:getCallSign()))
			end
			setBoarders()
		end)
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function boarderActivateDefenses(p,console)
	p.boarding.chance = p.boarding.chance - (5/#p.boarding.entries)
	boarderRemoveButtons(p,console)
end
function boarderInformSecurity(p,console)
	p.boarding.chance = p.boarding.chance - (10/#p.boarding.entries)
	boarderRemoveButtons(p,console)
end
function boarderResult(p)
	if p.boarding ~= nil then
		if getScenarioTime() > p.boarding.done then
			local board_roll = random(1,100) * p.security_morale
			if board_roll < p.boarding.chance then
				if p.boarding.intent == "sabotage" then
					local possible_systems = {"reactor", "beamweapons", "missilesystem", "maneuver", "impulse", "warp", "jumpdrive", "frontshield", "rearshield"}
					local sabotageable_systems = {}
					for i,system in ipairs(possible_systems) do
						if system == "beamweapons" then
							if p:getBeamWeaponRange(0) > 1 then
								table.insert(sabotageable_systems,system)
							end
						elseif system == "missilesystem" then
							if p:getWeaponTubeCount() > 0 then
								table.insert(sabotageable_systems,system)
							end
						elseif system == "warp" then
							if p:hasWarpDrive() then
								table.insert(sabotageable_systems,system)
							end
						elseif system == "jumpdrive" then
							if p:hasJumpDrive() then
								table.insert(sabotageable_systems,system)
							end
						elseif system == "rearshield" then
							if p:getShieldCount() > 1 then
								table.insert(sabotageable_systems,system)
							end
						else
							table.insert(sabotageable_systems,system)
						end
					end
					local system_to_sabotage = tableRemoveRandom(sabotageable_systems)
					local damage_amount = .5
					local morale_modifier = .95
					p.security_log[#p.security_log].result = "success"
					if (p.boarding.chance - board_roll) > 20 then
						p.security_log[#p.security_log].result = "smashing success"
						damage_amount = 1
						morale_modifier = .9
						if (p.boarding.chance - board_roll) > 40 then
							damage_amount = 1.5
							morale_modifier = .85
							p.security_log[#p.security_log].result = "devastating success"
						end
					end
					p.security_morale = p.security_morale * morale_modifier
					p:setSystemHealth(system_to_sabotage,math.max(p:getSystemHealth(system_to_sabotage) - damage_amount,-1))
					p.security_log[#p.security_log].result_desc = string.format("Boarding party sabotaged our %s",system_to_sabotage)
				elseif p.boarding.intent == "information" then
					p.security_log[#p.security_log].result = "success"
					local morale_modifier = .95 
					p.security_log[#p.security_log].result_desc = "From the forensic evidence left near our data access points, we believe the boarders obtained information from our systems."
					if (p.boarding.chance - board_roll) > 20 then
						morale_modifier = .9
						p.security_log[#p.security_log].result = "smashing success"
						p.security_log[#p.security_log].result_desc = "The intent of the boarders could not be determined."
					end
					p.security_morale = p.security_morale * morale_modifier
				elseif p.boarding.intent == "benign" then
					p.security_log[#p.security_log].result = "success"
					if benign_successes == nil or #benign_successes < 1 then
						benign_successes = {}
						for i,benign in ipairs(benign_successes_source) do
							table.insert(benign_successes,benign)
						end
					end
					p.security_log[#p.security_log].result_desc = tableRemoveRandom(benign_successes)
				end
			else
				local morale_modifier = 1.05
				if board_roll - p.boarding.chance < 20 then
					p.security_log[#p.security_log].result = "failure"
					p.security_log[#p.security_log].result_desc = "The boarders were repelled."
				else
					p.security_log[#p.security_log].result = "severe failure"
					p.security_log[#p.security_log].result_desc = "The boarders were easily repelled."
					morale_modifier = 1.1
				end
				p.security_morale = math.min(1,p.security_morale * morale_modifier)
			end
			for i,console in ipairs(p.boarding.entries) do
				boarderRemoveButtons(p,console)
			end
			
			p.boarding = nil
		end
	end
end
function outClock(time_stamp)
	if time_stamp == nil then
		return "00:00:00.0"
	end
	if time_stamp >= 60 then
		if time_stamp >= 3600 then
			local hours = math.floor(time_stamp / 3600)
			local minutes = math.floor((time_stamp - (hours * 3600)) / 60)
			local seconds = time_stamp % 60
			return string.format("%02d:%02d:%02.1f",hours,minutes,seconds)
		else
			local minutes = math.floor(time_stamp / 60)
			local seconds = time_stamp % 60
			return string.format("00:%02d:%02.1f",minutes,seconds)
		end
	else
		return string.format("00:00:%02.1f",time_stamp)
	end
end
function securityReport(p,console)
	local list_out = ""
	if p.security_log ~= nil and #p.security_log > 0 then
		for i,log in ipairs(p.security_log) do
			local report_item = string.format("%s: Sensors report intruders to",outClock(log.board_time))
			if #log.entries > 1 then
				for i,entry in ipairs(log.entries) do
					if i == 1 then
						report_item = string.format("%s consoles: %s",report_item,entry)
					else
						report_item = string.format("%s, %s",report_item,entry)
					end
				end
				report_item = report_item .. "."
			else
				report_item = string.format("%s %s.",report_item,log.entries[1])
			end
			if getScenarioTime() > log.egress_time then
				if log.result_desc ~= nil then
					report_item = string.format("%s\n%s: %s",report_item,outClock(log.egress_time),log.result_desc)
				else
					report_item = string.format("%s\n%s: Sensors show intruders still aboard.",report_item,outClock(getScenarioTime()))
				end
			else
				report_item = string.format("%s\n%s: Sensors show intruders still aboard.",report_item,outClock(getScenarioTime()))
			end
			if list_out == "" then
				list_out = report_item
			else
				list_out = string.format("%s\n%s",list_out,report_item)
			end
		end
	else
		list_out = "No security incidents to report."
	end
	local out = string.format("%s\nSecurity morale: %.1f%%",list_out,p.security_morale * 100)
	p.security_report_message = "security_report_message"
	p:addCustomMessage(console,p.security_report_message,out)
end
function boarderRemoveButtons(p,console)
	p:removeCustom(p.boarder_entry_button_inform_security[console])
	p:removeCustom(p.boarder_entry_button_activate_defenses[console])
	p:removeCustom(p.boarder_entry_message[console])
end
function setBoarderEntry()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-From Boarders",tweakPlayerShip)
	addGMFunction("-From Entry",setBoarders)
	local p = playerShipSelected()
	if p ~= nil then
		local entry_point_setting = {
			"random",
			"Helms",
			"Weapons",
			"Engineering",
			"Science",
			"Relay",
			"Tactical",
			"Engineering+",
			"Operations",
			"Single",
			"DamageControl",
			"PowerManagement",
			"Database",
			"AltRelay",
			"CommsOnly",
			"ShipLog",
		}
		for i, entry in ipairs(entry_point_setting) do
			if entry == "random" or p:hasPlayerAtPosition(entry) then
				local button_label = string.format("Entry:%s",entry)
				if boarder_entry == entry then
					button_label = button_label .. "*"
				end
				addGMFunction(button_label,function()
					boarder_entry = entry
					setBoarderEntry()
				end)
			end
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setBoarderSpeed()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-From Boarders",tweakPlayerShip)
	addGMFunction("-From Speed",setBoarders)
	local p = playerShipSelected()
	if p ~= nil then
		local speed_settings = {
			10,
			30,
			60,
			90,
			120,
		}
		for i,speed in ipairs(speed_settings) do
			local button_label = string.format("Speed:%s",speed)
			if boarder_speed == speed then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				boarder_speed = speed
				setBoarderSpeed()
			end)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setBoarderCompetence()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-From Boarders",tweakPlayerShip)
	addGMFunction("-From Competence",setBoarders)
	local p = playerShipSelected()
	if p ~= nil then
		local competence_settings = {
			{desc = "low",		rate = 30},
			{desc = "medium",	rate = 50},
			{desc = "high",		rate = 80},
		}
		for i,competence in ipairs(competence_settings) do
			local button_label = string.format("Competence:%s",competence.desc)
			if boarder_competence == competence.desc then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				boarder_competence = competence.desc
				boarder_success_chance = competence.rate
				setBoarderCompetence()
			end)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setBoarderIntent()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Plyr",initialGMFunctions)
	addGMFunction("-From Boarders",tweakPlayerShip)
	addGMFunction("-From Intent",setBoarders)
	local p = playerShipSelected()
	if p ~= nil then
		local intent_settings = {
			"benign",
			"sabotage",
			"information",
		}
		for i, intent in ipairs(intent_settings) do
			local button_label = string.format("Intent:%s",intent)
			if boarder_intent == intent then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				boarder_intent = intent
				setBoarderIntent()
			end)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function playerHelm()
	clearGMFunctions()
	addGMFunction("-Main Frm Helm",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-By Console",tweakByConsole)
	local p = playerShipSelected()
	if p ~= nil then
		if p:hasSystem("warp") then
			addGMFunction(string.format("+Chg %s",p:getCallSign()),playerHelm)
			addGMFunction(string.format("Warp %i+50=%i",p:getWarpSpeed(),p:getWarpSpeed()+50),function()
				string.format("")
				p:setWarpSpeed(p:getWarpSpeed()+50)
				playerHelm()
			end)
			addGMFunction(string.format("Warp %i-50=%i",p:getWarpSpeed(),p:getWarpSpeed()-50),function()
				string.format("")
				p:setWarpSpeed(p:getWarpSpeed()-50)
				playerHelm()
			end)
		else
			addGMFunction(string.format("Jump %ik+10k=%i",math.floor(p:getJumpDriveCharge()/1000),math.floor(p:getJumpDriveCharge()/1000)+10),function()
				string.format("")
				p:setJumpDriveCharge(p:getJumpDriveCharge() + 10000)
				playerHelm()
			end)
			addGMFunction(string.format("Jump %ik-10k=%i",math.floor(p:getJumpDriveCharge()/1000),math.floor(p:getJumpDriveCharge()/1000)-10),function()
				string.format("")
				p:setJumpDriveCharge(p:getJumpDriveCharge() - 10000)
				playerHelm()
			end)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakByConsole()
	end
end
function playerWeapons()
	clearGMFunctions()
	addGMFunction("-Main Frm Weapons",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-By Console",tweakByConsole)
	local p = playerShipSelected()
	if p ~= nil then
		local button_label = ""
		if p:getWeaponStorageMax("EMP") > 0 then
			button_label = "EMP 3-4"
			if p.trigger_missile ~= nil and p.trigger_missile["E3"] ~= nil then
				button_label = "EMP 3-4*"
			end
			addGMFunction(button_label,function()
				if p.trigger_missile ~= nil then
					if p.trigger_missile["E3"] ~= nil then
						p.trigger_missile["E3"] = nil
						local trigger_count = 0
						for trigger,blob in pairs(p.trigger_missile) do
							if blob ~= nil then
								trigger_count = trigger_count + 1
							end
						end
						if trigger_count == 0 then
							p.trigger_missile = nil
						end
					else
						p.trigger_missile["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	}
					end
				else
					p.trigger_missile = {}
					p.trigger_missile["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	}
				end
				playerWeapons()
			end)
			button_label = "EMP 4-5"
			if p.trigger_missile ~= nil and p.trigger_missile["E4"] ~= nil then
				button_label = "EMP 4-5*"
			end
			addGMFunction(button_label,function()
				if p.trigger_missile ~= nil then
					if p.trigger_missile["E4"] ~= nil then
						p.trigger_missile["E4"] = nil
						local trigger_count = 0
						for trigger,blob in pairs(p.trigger_missile) do
							if blob ~= nil then
								trigger_count = trigger_count + 1
							end
						end
						if trigger_count == 0 then
							p.trigger_missile = nil
						end
					else
						p.trigger_missile["E4"] = {missile = "EMPMissile",	short = 4000, long = 5000,	button_label = "Trigger EMP 4-5u",	order = 2,	}
					end
				else
					p.trigger_missile = {}
					p.trigger_missile["E4"] = {missile = "EMPMissile",	short = 4000, long = 5000,	button_label = "Trigger EMP 4-5u",	order = 2,	}
				end
				playerWeapons()
			end)
		end
		if p:getWeaponStorageMax("Nuke") > 0 then
			local button_label = "Nuke 3-4"
			if p.trigger_missile ~= nil and p.trigger_missile["N3"] ~= nil then
				button_label = "Nuke 3-4*"
			end
			addGMFunction(button_label,function()
				if p.trigger_missile ~= nil then
					if p.trigger_missile["N3"] ~= nil then
						p.trigger_missile["N3"] = nil
						local trigger_count = 0
						for trigger,blob in pairs(p.trigger_missile) do
							if blob ~= nil then
								trigger_count = trigger_count + 1
							end
						end
						if trigger_count == 0 then
							p.trigger_missile = nil
						end
					else
						p.trigger_missile["N3"] = {missile = "Nuke",		short = 3000, long = 4000,	button_label = "Trigger Nuke 3-4u",	order = 3,	}
					end
				else
					p.trigger_missile = {}
					p.trigger_missile["N3"] = {missile = "Nuke",		short = 3000, long = 4000,	button_label = "Trigger Nuke 3-4u",	order = 3,	}
				end
				playerWeapons()
			end)
			button_label = "Nuke 4-5"
			if p.trigger_missile ~= nil and p.trigger_missile["N4"] ~= nil then
				button_label = "Nuke 4-5*"
			end
			addGMFunction(button_label,function()
				if p.trigger_missile ~= nil then
					if p.trigger_missile["N4"] ~= nil then
						p.trigger_missile["N4"] = nil
						local trigger_count = 0
						for trigger,blob in pairs(p.trigger_missile) do
							if blob ~= nil then
								trigger_count = trigger_count + 1
							end
						end
						if trigger_count == 0 then
							p.trigger_missile = nil
						end
					else
						p.trigger_missile["N4"] = {missile = "Nuke",		short = 4000, long = 5000,	button_label = "Trigger Nuke 4-5u",	order = 4,	}
					end
				else
					p.trigger_missile = {}
					p.trigger_missile["N4"] = {missile = "Nuke",		short = 4000, long = 5000,	button_label = "Trigger Nuke 4-5u",	order = 4,	}
				end
				playerWeapons()
			end)
		end
		button_label = "Balance Shield"
		if playerShipStats[p:getTypeName()].balance_shield then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			if playerShipStats[p:getTypeName()].balance_shield then
				playerShipStats[p:getTypeName()].balance_shield = false
			else
				playerShipStats[p:getTypeName()].balance_shield = true
			end
			playerWeapons()
		end)
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakByConsole()
	end
end
function playerSensors()
	clearGMFunctions()
	addGMFunction("-Main Frm Sensors",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction(string.format("%.1f LRS ^ -> %.1f",sensor_impact,sensor_impact + .1),function()
		if sensor_impact + .1 > 2 then
			addGMMessage("Maximum positive sensor impact reached: 2. No action taken")
		else
			sensor_impact = sensor_impact + .1
		end
		playerSensors()
	end)
	addGMFunction(string.format("%.1f LRS V -> %.1f",sensor_impact,sensor_impact - .1),function()
		if sensor_impact - .1 < 0 then
			addGMMessage("Minimum negative sensor impact reached: 0. No action taken")
		else
			sensor_impact = sensor_impact - .1
		end
		playerSensors()
	end)
end
function setPlayerCarrier()
	clearGMFunctions()
	addGMFunction("-Main Frm Carrier",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	local p = playerShipSelected()
	if p ~= nil then
		local button_label = "Carrier N->Y"
		if p.carrier ~= nil and p.carrier then
			button_label = "Carrier Y->N"
		end
		addGMFunction(button_label,function()
			if p.carrier ~= nil and p.carrier then
				p.carrier = false
			else
				p.carrier = true
			end
			setPlayerCarrier()
		end)
		addGMFunction("+Ship Types",setCarrierShipTypes)
		addGMFunction("+Ship Inventory",setCarrierShipInventory)
		if p.carrier_ship_types ~= nil and p.carrier_ship_inventory ~= nil then
			addGMFunction("+Carrier Ordnance",setCarrierOrdnance)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setCarrierOrdnance()
	clearGMFunctions()
	addGMFunction("-Main Frm Carrier",initialGMFunctions)
--	addGMFunction("-Setup",initialSetUp)
--	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Set Carrier",setPlayerCarrier)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_inventory ~= nil or #p.carrier_ship_inventory == 0 then
			local increment_ordnance = {}
			local increment_ordnance_count = 0
			for i,carrier_ship in ipairs(p.carrier_ship_inventory) do
				local current_reputation = p:getReputationPoints()
				local temp_fighter_max_ordnance = {}
				local temp_fighter = carrier_ship_types[carrier_ship.template].create(carrier_ship.template)
				for i,missile_type in ipairs(missile_types) do
					temp_fighter_max_ordnance[missile_type] = temp_fighter:getWeaponStorageMax(missile_type)
				end
				temp_fighter:destroy()
				p:setReputationPoints(current_reputation)
				for i,missile_type in ipairs(missile_types) do
					if increment_ordnance[missile_type] == nil then
						if temp_fighter_max_ordnance[missile_type] ~= nil then
							increment_ordnance[missile_type] = temp_fighter_max_ordnance[missile_type]
							increment_ordnance_count = increment_ordnance_count + 1
						end
					else
						if temp_fighter_max_ordnance[missile_type] ~= nil then
							increment_ordnance[missile_type] = increment_ordnance[missile_type] + temp_fighter_max_ordnance[missile_type]
						end
					end
				end
			end
			if increment_ordnance_count > 0 then
				addGMFunction("Add ordnance set",function()
					for i,missile_type in ipairs(missile_types) do
						if increment_ordnance[missile_type] ~= nil then
							p:setWeaponStorageMax(missile_type,p:getWeaponStorageMax(missile_type) + increment_ordnance[missile_type])
						end
					end
					setCarrierOrdnance()
				end)
				addGMFunction("Fill Ordnance",function()
					for i,missile_type in ipairs(missile_types) do
						p:setWeaponStorage(missile_type,p:getWeaponStorageMax(missile_type))
					end
				end)
				for i,missile_type in ipairs(missile_types) do
					if increment_ordnance[missile_type] ~= nil then
						addGMFunction(string.format("%s +%i to %i",missile_type,increment_ordnance[missile_type],p:getWeaponStorageMax(missile_type)),function()
							p:setWeaponStorageMax(missile_type,p:getWeaponStorageMax(missile_type) + increment_ordnance[missile_type])
							setCarrierOrdnance()
						end)
					end
				end
			else
				addGMMessage(string.format("Carrier %s's fighters have no ordnance restock requirements",p:getCallSign()))
			end
		else
			addGMMessage("No ships in carrier inventory")
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setCarrierShipTypes()
	clearGMFunctions()
	addGMFunction("-Main Frm Carrier",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Set Carrier",setPlayerCarrier)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_types == nil then
			p.carrier_ship_types = {}
			for template,details in pairs(carrier_ship_types) do
				p.carrier_ship_types[template] = {
					carry = details.carry,
					class = details.class,
					create = details.create,
				}
			end
		end
		addGMFunction("+By Class",setCarryByClass)
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setCarryByClass()
	local p = playerShipSelected()
	if p ~= nil then
		local dreadnought_count = 0
		local dreadnought_carry_count = 0
		local corvette_count = 0
		local corvette_carry_count = 0
		local frigate_count = 0
		local frigate_carry_count = 0
		local fighter_count = 0
		local fighter_carry_count = 0
		for template,detail in pairs(p.carrier_ship_types) do
			if detail.class == "Dreadnought" then
				dreadnought_count = dreadnought_count + 1
				if detail.carry then
					dreadnought_carry_count = dreadnought_carry_count + 1
				end
			end
			if detail.class == "Corvette" then
				corvette_count = corvette_count + 1
				if detail.carry then
					corvette_carry_count = corvette_carry_count + 1
				end
			end
			if detail.class == "Frigate" then
				frigate_count = frigate_count + 1
				if detail.carry then
					frigate_carry_count = frigate_carry_count + 1
				end
			end
			if detail.class == "Starfighter" then
				fighter_count = fighter_count + 1
				if detail.carry then
					fighter_carry_count = fighter_carry_count + 1
				end
			end
		end
		clearGMFunctions()
		addGMFunction("-Main Frm Carrier",initialGMFunctions)
		addGMFunction("-Setup",initialSetUp)
		addGMFunction("-Player Ship",playerShip)
		addGMFunction("-Tweak Player",tweakPlayerShip)
		addGMFunction("-Set Carrier",setPlayerCarrier)
		addGMFunction("-Ship Types",setCarrierShipTypes)
		addGMFunction(string.format("+Dreadnought %i/%i",dreadnought_carry_count,dreadnought_count),function()
			setCarryClassSpecified("Dreadnought")
		end)
		addGMFunction(string.format("+Corvette %i/%i",corvette_carry_count,corvette_count),function()
			setCarryClassSpecified("Corvette")
		end)
		addGMFunction(string.format("+Frigate %i/%i",frigate_carry_count,frigate_count),function()
			setCarryClassSpecified("Frigate")
		end)
		addGMFunction(string.format("+Starfighter %i/%i",fighter_carry_count,fighter_count),function()
			setCarryClassSpecified("Starfighter")
		end)
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setCarryClassSpecified(class)
	local p = playerShipSelected()
	if p ~= nil then
		clearGMFunctions()
		addGMFunction("-Carry By Class",setCarryByClass)
		addGMFunction(string.format("All %ss",class),function()
			for template,detail in pairs(p.carrier_ship_types) do
				if detail.class == class then
					detail.carry = true
				end
			end
			setCarryClassSpecified(class)
		end)
		addGMFunction(string.format("No %ss",class),function()
			for template,detail in pairs(p.carrier_ship_types) do
				if detail.class == class then
					detail.carry = false
				end
			end
			setCarryClassSpecified(class)
		end)
		local specified_class_templates = {}
		for template,detail in pairs(p.carrier_ship_types) do
			if detail.class == class then
				table.insert(specified_class_templates,{name = template, carry = detail.carry})
			end
		end
		table.sort(specified_class_templates, function(a,b)
			return a.name < b.name
		end)
		for i,ship in ipairs(specified_class_templates) do
			local button_label = ship.name
			if ship.carry then
				button_label = string.format("%s*",button_label)
			end
			addGMFunction(button_label,function()
				if ship.carry then
					p.carrier_ship_types[ship.name].carry = false
				else
					p.carrier_ship_types[ship.name].carry = true
				end
				setCarryClassSpecified(class)
			end)
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function setCarrierShipInventory()
	clearGMFunctions()
	addGMFunction("-Main Frm Inventory",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Set Carrier",setPlayerCarrier)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_inventory == nil then
			p.carrier_ship_inventory = {}
		end
		if #p.carrier_ship_inventory > 0 then
			addGMFunction(string.format("Show inventory %i",#p.carrier_ship_inventory),function()
				showCarrierShipInventory(p)
			end)
		end
		addGMFunction("+Add Ship",addShipToCarrierInventory)
		addGMFunction("+Del Ship",deleteShipFromCarrierInventory)
		addGMFunction("+Change Ship",changeShipInCarrierInventory)
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function showCarrierShipInventory()
	local p = playerShipSelected()
	if p ~= nil then
		if #p.carrier_ship_inventory > 0 then
			local out = string.format("Carrier inventory report (%i ship):",#p.carrier_ship_inventory)
			if #p.carrier_ship_inventory > 1 then
				out = string.format("Carrier inventory report (%i ships):",#p.carrier_ship_inventory)
			end
			for i,ship in ipairs(p.carrier_ship_inventory) do
				out = string.format("%s\n%s %s Strength:%s State:%s",out,ship.name,ship.template,playerShipStats[ship.template].strength,ship.state)
				if ship.state == "deployed" and (ship.ship == nil or not ship.ship:isValid()) then
					out = string.format("%s (destroyed)",out)
				end
			end
			addGMMessage(out)
		else
			addGMMessage("Inventory empty")
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function addShipToCarrierInventory()
	clearGMFunctions()
	addGMFunction("-Main Frm Add Inv",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Carrier",setPlayerCarrier)
	addGMFunction("-Inventory",setCarrierShipInventory)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_types ~= nil then
			local sorted_carrier_ship_types = {}
			for template, details in pairs(p.carrier_ship_types) do
				if details.carry then
					table.insert(sorted_carrier_ship_types,{name = template, class = details.class})
				end
			end
			table.sort(sorted_carrier_ship_types, function(a,b)
				return a.name < b.name
			end)
			for i,ship in ipairs(sorted_carrier_ship_types) do
				local button_label = ship.name
				if #p.carrier_ship_inventory > 0 then
					for j,carrier_ship in ipairs(p.carrier_ship_inventory) do
						if carrier_ship.template == ship.name then
							button_label = string.format("%s*",button_label)
							break
						end
					end
				end
				addGMFunction(button_label,function()
					local ship_name = tableRemoveRandom(carrier_ship_names[ship.name])
					if ship_name == nil then
						local class_pool = {}
						for ship_type_name,ship_type_details in pairs(p.carrier_ship_types) do
							if ship.class == ship_type_details.class then
								if #carrier_ship_names[ship_type_name] > 0 then
									table.insert(class_pool,ship_type_name)
								end
							end
						end
						local selected_template = tableRemoveRandom(class_pool)
						ship_name = tableRemoveRandom(carrier_ship_names[selected_template])
					end
					table.insert(p.carrier_ship_inventory,{
						class = ship.class, 
						template = ship.name, 
						name = ship_name, 
						state = "aboard", 
						launch_button = string.format("launch_%s",ship_name),
						launch_time = carrier_class_launch_time[ship.class],
					})
					showCarrierShipInventory()
				end)
			end
			if #sorted_carrier_ship_types == 0 then
				addGMMessage("Before you can add ships to the carrier's inventory, you must specify which ship types it can carry. That's the '+Ship Types' button")
			end
		else
			addGMMessage("Before you can add ships to the carrier's inventory, you must specify which ship types it can carry. That's the '+Ship Types' button")
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function deleteShipFromCarrierInventory()
	clearGMFunctions()
	addGMFunction("-Main Frm Del Inv",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Carrier",setPlayerCarrier)
	addGMFunction("-Inventory",setCarrierShipInventory)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_types ~= nil then
			if p.carrier_ship_inventory ~= nil and #p.carrier_ship_inventory > 0 then
				for i,carrier_ship in ipairs(p.carrier_ship_inventory) do
					addGMFunction(string.format("Del %s",carrier_ship.name),function()
						if carrier_ship.state ~= "aboard" then
							if carrier_ship.ship ~= nil and carrier_ship.ship:isValid() then
								addGMMessage(string.format("%s is not aboard and valid. No delete action taken",carrier_ship.name))
							else
								addGMMessage(string.format("%s deleted from carrier ship inventory",carrier_ship.name))
								p.carrier_ship_inventory[i] = p.carrier_ship_inventory[#p.carrier_ship_inventory]
								p.carrier_ship_inventory[#p.carrier_ship_inventory] = nil
								setCarrierShipInventory()
							end
						else
							addGMMessage(string.format("%s deleted from carrier ship inventory",carrier_ship.name))
							p.carrier_ship_inventory[i] = p.carrier_ship_inventory[#p.carrier_ship_inventory]
							p.carrier_ship_inventory[#p.carrier_ship_inventory] = nil
							setCarrierShipInventory()
						end
					end)
				end
			else
				addGMMessage("Before you can delete ships from the carrier's inventory, there has to be an inventory from which you can delete a ship")
				setCarrierShipInventory()
			end
		else
			addGMMessage("Before you can delete ships from the carrier's inventory, you must specify which ship types it can carry. That's the '+Ship Types' button")
			setCarrierShipInventory()
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function changeShipInCarrierInventory()
	clearGMFunctions()
	addGMFunction("-Main Frm Change Inv",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Carrier",setPlayerCarrier)
	addGMFunction("-Inventory",setCarrierShipInventory)
	local p = playerShipSelected()
	if p ~= nil then
		if p.carrier_ship_types ~= nil then
			if p.carrier_ship_inventory ~= nil and #p.carrier_ship_inventory > 0 then
				local change_choices_presented = 0
				for i,carrier_ship in ipairs(p.carrier_ship_inventory) do
					local something_can_change = false
					if carrier_ship.state == "aboard" then
						if carrier_ship.max_health ~= nil then
							something_can_change = true
						elseif carrier_ship.max_ordnance ~= nil then
							for i,missile_type in ipairs(missile_types) do
								if carrier_ship.ordnance_level[missile_type] < carrier_ship.max_ordnance[missile_type] then
									something_can_change = true
								end
							end
						end
					end
					if something_can_change then
						change_choices_presented = change_choices_presented + 1
						addGMFunction(string.format("Change %s",carrier_ship.name),function()
							changeSpecificShipInCarrierInventory(carrier_ship)
						end)
					end
				end
				if change_choices_presented == 0 then
					addGMMessage("No carrier ship change options available at this time")
					setCarrierShipInventory()
				end
			else
				addGMMessage("Before you can change ships in the carrier's inventory, there has to be an inventory of ships")
				setCarrierShipInventory()
			end
		else
			addGMMessage("Before you can change ships in the carrier's inventory, you must specify which ship types it can carry. That's the '+Ship Types' button")
			setCarrierShipInventory()
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function changeSpecificShipInCarrierInventory(carrier_ship)
	clearGMFunctions()
	addGMFunction("-Main Frm Change Inv",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Carrier",setPlayerCarrier)
	addGMFunction("-Inventory",setCarrierShipInventory)
	addGMFunction("-Change Ship",changeShipInCarrierInventory)
	local p = playerShipSelected()
	if p ~= nil then
		if carrier_ship.state == "aboard" then
			local change_options_presented = 0
			if carrier_ship.max_health ~= nil then
				change_options_presented = change_options_presented + 1
				addGMFunction("Max health",function()
					string.format("")
					changeCarrierShipMaxHealth(carrier_ship)
				end)
			end
			if carrier_ship.max_ordnance ~= nil then
				change_options_presented = change_options_presented + 1
				addGMFunction("Ordnance",function()
					string.format("")
					changeCarrierShipOrdnance(carrier_ship)
				end)
			end
			--add rapid refit here
			if change_options_presented == 0 then
				addGMMessage(string.format("Nothing to change for %s",carrier_ship.name))
			end
			addGMFunction(string.format("%s report",carrier_ship.name),function()
				carrierShipReport(carrier_ship)
			end)
		else
			addGMMessage(string.format("Changes can only be made while %s is docked",carrier_ship.name))
			changeShipInCarrierInventory()
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function carrierShipReport(carrier_ship)
	local out = string.format("Report on %s",carrier_ship.name)
	local carrier_name = ""
	local p = playerShipSelected()
	if p ~= nil then
		carrier_name = p:getCallSign()
		out = string.format("%s - a ship in %s's inventory",out,carrier_name)
	end
	out = string.format("%s\nTemplate:%s Strength:%s",out,carrier_ship.template,playerShipStats[carrier_ship.template].strength)
	if carrier_ship.max_health ~= nil then
		out = string.format("%s\nMax health issues:",out)
		local max_health_item_count = 0
		for system,max_health in pairs(carrier_ship.max_health) do
			out = string.format("%s\n    %s %.1f%%",out,system,max_health*100)
			max_health_item_count = max_health_item_count + 1
		end
		if max_health_item_count == 0 then
			out = string.format("%s None",out)
		end
	else
		out = string.format("%s\nNo max health issues to report",out)
	end
	if carrier_ship.max_ordnance ~= nil then
		out = string.format("%s\nOrdnance:",out)
		for i,missile_type in ipairs(missile_types) do
			if carrier_ship.max_ordnance[missile_type] ~= nil then
				if carrier_name ~= "" then
					out = string.format("%s\n    %s %i/%i    Carrier %s: %i/%i",out,missile_type,carrier_ship.ordnance_level[missile_type],carrier_ship.max_ordnance[missile_type],carrier_name,p:getWeaponStorage(missile_type),p:getWeaponStorageMax(missile_type))
				else
					out = string.format("%s\n    %s %i/%i",out,missile_type,carrier_ship.ordnance_level[missile_type],carrier_ship.max_ordnance[missile_type])
				end
			end
		end
	end
	addGMMessage(out)
end
function changeCarrierShipMaxHealth(carrier_ship)
	clearGMFunctions()
	addGMFunction(string.format("-Change %s",carrier_ship.name),function()
		changeSpecificShipInCarrierInventory(carrier_ship)
	end)
	local p = playerShipSelected()
	if p ~= nil then
		if carrier_ship.state == "aboard" then
			if carrier_ship.max_health ~= nil then
				local max_health_item_count = 0
				for system,ship_max_health in pairs(carrier_ship.max_health) do
					max_health_item_count = max_health_item_count + 1
					addGMFunction(string.format("%s %.1f%% Half",system,ship_max_health*100),function()
						ship_max_health = ship_max_health + (1 - ship_max_health)/2
						carrier_ship.max_health[system] = ship_max_health
						changeCarrierShipMaxHealth(carrier_ship)
					end)
					addGMFunction(string.format("%s %.1f%% Fix",system,ship_max_health*100),function()
						carrier_ship.max_health[system] = nil
						changeCarrierShipMaxHealth(carrier_ship)
					end)
				end
				if max_health_item_count == 0 then
					addGMMessage(string.format("No max health changes available for %s",carrier_ship.name))
				end
			else
				addGMMessage(string.format("No max health changes available for %s",carrier_ship.name))
			end
		else
			addGMMessage(string.format("Changes can only be made while %s is docked",carrier_ship.name))
			changeShipInCarrierInventory()
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
function changeCarrierShipOrdnance(carrier_ship)
	clearGMFunctions()
	addGMFunction(string.format("-Change %s",carrier_ship.name),function()
		changeSpecificShipInCarrierInventory(carrier_ship)
	end)
	local p = playerShipSelected()
	if p ~= nil then
		if carrier_ship.state == "aboard" then
			if carrier_ship.max_ordnance ~= nil then
				for i,missile_type in ipairs(missile_types) do
					if carrier_ship.max_ordnance[missile_type] ~= nil and carrier_ship.ordnance_level[missile_type] < carrier_ship.max_ordnance[missile_type] then
						addGMFunction(string.format("+1 %s %i/%i",missile_type,carrier_ship.ordnance_level[missile_type],carrier_ship.max_ordnance[missile_type]),function()
							if p:getWeaponStorage(missile_type) > 0 then
								if carrier_ship.ordnance_level[missile_type] < carrier_ship.max_ordnance[missile_type] then
									p:setWeaponStorage(missile_type,p:getWeaponStorage(missile_type)-1)
									carrier_ship.ordnance_level[missile_type] = carrier_ship.ordnance_level[missile_type] + 1
									changeCarrierShipOrdnance(carrier_ship)
								else
									addGMMessage(string.format("%s is already at maximum %s level",carrier_ship.name,missile_type))
								end
							else
								addGMMessage(string.format("Carrier %s is out of %ss",p:getCallSign(),missile_type))
							end
						end)
						addGMFunction(string.format("Max %s %i/%i",missile_type,carrier_ship.ordnance_level[missile_type],carrier_ship.max_ordnance[missile_type]),function()
							local adjustment_amount = carrier_ship.max_ordnance[missile_type] - carrier_ship.ordnance_level[missile_type]
							if p:getWeaponStorage(missile_type) > adjustment_amount then
								if carrier_ship.ordnance_level[missile_type] < carrier_ship.max_ordnance[missile_type] then
									p:setWeaponStorage(missile_type,p:getWeaponStorage(missile_type) - adjustment_amount)
									carrier_ship.ordnance_level[missile_type] = carrier_ship.max_ordnance[missile_type]
									changeCarrierShipOrdnance(carrier_ship)
								else
									addGMMessage(string.format("%s is already at maximum %s level",carrier_ship.name,missile_type))
								end
							else
								addGMMessage(string.format("Carrier %s only has %i %ss - not enough to maximize %s's stock",p:getCallSign(),p:getWeaponStorage(missile_type),missile_type,carrier_ship.name))
							end
						end)
					end
				end
			end
		else
			addGMMessage(string.format("Changes can only be made while %s is docked",carrier_ship.name))
			changeShipInCarrierInventory()
		end
	else
		addGMMessage("No player ship selected. No action taken.")
		tweakPlayerShip()
	end
end
-----------------------------------------------
--	Initial Set Up > Player Ships > Current  --
-----------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SETUP			F	initialSetUp
-- -PLAYER SHIP		F	playerShip
-- Button to spawn each player ship name
function makePlayerShipActive(ship_name)
	assert(type(ship_name) == "string")
	assert(type(playerShipInfo[ship_name]) == "table")
	playerShipInfo[ship_name]["active"] = "active"
end
function filteredPlayerShipSpawn()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	local sorted = {}
	for name in pairs(playerShipInfo) do table.insert(sorted,name) end
	table.sort(sorted)
	filter_count = 0
	if has_ftl == nil then has_ftl = "No FTL Filter" end
	addGMFunction(has_ftl,function()
		if has_ftl == "No FTL Filter" then
			has_ftl = "Warp*"
		elseif has_ftl == "Warp*" then
			has_ftl = "Jump*"
		elseif has_ftl == "Jump*" then
			has_ftl = "Jump & Warp*"
		elseif has_ftl == "Jump & Warp*" then
			has_ftl = "No FTL Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_ftl ~= "No FTL Filter" then
		filter_count = filter_count + 1
	end
	if has_tractor == nil then has_tractor = "No Tractor Filter" end
	addGMFunction(has_tractor,function()
		if has_tractor == "No Tractor Filter" then
			has_tractor = "Tractor*"
		elseif has_tractor == "Tractor*" then
			has_tractor = "No Tractor*"
		elseif has_tractor == "No Tractor*" then
			has_tractor = "No Tractor Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_tractor ~= "No Tractor Filter" then
		filter_count = filter_count + 1
	end
	if has_mining == nil then has_mining = "No Mining Filter" end
	addGMFunction(has_mining,function()
		if has_mining == "No Mining Filter" then
			has_mining = "Mining*"
		elseif has_mining == "Mining*" then
			has_mining = "No Mining*"
		elseif has_mining == "No Mining*" then
			has_mining = "No Mining Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_mining ~= "No Mining Filter" then
		filter_count = filter_count + 1
	end
	if has_epjam == nil then has_epjam = "No EPJAM Filter" end
	addGMFunction(has_epjam,function()
		if has_epjam == "No EPJAM Filter" then
			has_epjam = "EPJAM*"
		elseif has_epjam == "EPJAM*" then
			has_epjam = "M or L EPJAM*"
		elseif has_epjam == "M or L EPJAM*" then
			has_epjam = "L EPJAM*"
		elseif has_epjam == "L EPJAM*" then
			has_epjam = "No EPJAM*"
		elseif has_epjam == "No EPJAM*" then
			has_epjam = "No EPJAM Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_epjam ~= "No EPJAM Filter" then
		filter_count = filter_count + 1
	end
	if has_patrol_probe == nil then has_patrol_probe = "No Patrol Probe Filter" end
	addGMFunction(has_patrol_probe,function()
		if has_patrol_probe == "No Patrol Probe Filter" then
			has_patrol_probe = "Patrol Probe*"
		elseif has_patrol_probe == "Patrol Probe*" then
			has_patrol_probe = "No Patrol Probe*"
		elseif has_patrol_probe == "No Patrol Probe*" then
			has_patrol_probe = "No Patrol Probe Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_patrol_probe ~= "No Patrol Probe Filter" then
		filter_count = filter_count + 1
	end
	if has_proximity_scan == nil then has_proximity_scan = "No ProxScan Filter" end
	addGMFunction(has_proximity_scan,function()
		if has_proximity_scan == "No ProxScan Filter" then
			has_proximity_scan = "ProxScan*"
		elseif has_proximity_scan == "ProxScan*" then
			has_proximity_scan = "No ProxScan*"
		elseif has_proximity_scan == "No ProxScan*" then
			has_proximity_scan = "No ProxScan Filter"
		end
		filteredPlayerShipSpawn()
	end)
	if has_proximity_scan ~= "No ProxScan Filter" then
		filter_count = filter_count + 1
	end
	if relative_strength_filter == nil then 
		relative_strength_filter = "No RelStrength Filter" 
		relative_strength_cut = 25
		relative_strength_min = relative_strength_cut
		relative_strength_max = relative_strength_cut
		relative_strength_label = "NRF"
	end
	if cargo_filter == nil then 
		cargo_filter = "No Cargo Filter" 
		cargo_cut = 6
		cargo_min = cargo_cut
		cargo_max = cargo_cut
		cargo_label = "NCF"
	end
	if long_sensor_filter == nil then 
		long_sensor_filter = "No Long Sensor Filter" 
		long_sensor_cut = 30
		long_sensor_min = long_sensor_cut
		long_sensor_max = long_sensor_cut
		long_sensor_label = "NSF"
	end
	if probe_filter == nil then 
		probe_filter = "No Probe Filter" 
		probe_cut = 8
		probe_min = probe_cut
		probe_max = probe_cut
		probe_label = "NPF"
	end
	if life_pod_filter == nil then 
		life_pod_filter = "No Life Pod Filter"
		life_pod_cut = 3
		life_pod_min = life_pod_cut
		life_pod_max = life_pod_cut
		life_pod_label = "NLF"
	end
	for _,name in pairs(sorted) do
		if playerShipStats[playerShipInfo[name].typeName].strength > relative_strength_max then
			relative_strength_max = playerShipStats[playerShipInfo[name].typeName].strength
		end
		if playerShipStats[playerShipInfo[name].typeName].strength < relative_strength_min then
			relative_strength_min = playerShipStats[playerShipInfo[name].typeName].strength
		end
		if playerShipStats[playerShipInfo[name].typeName].cargo > cargo_max then
			cargo_max = playerShipStats[playerShipInfo[name].typeName].cargo
		end
		if playerShipStats[playerShipInfo[name].typeName].cargo < cargo_min then
			cargo_min = playerShipStats[playerShipInfo[name].typeName].cargo
		end
		if (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000) > long_sensor_max then
			long_sensor_max = (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000)
		end
		if (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000) < long_sensor_min then
			long_sensor_min = (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000)
		end
		if playerShipStats[playerShipInfo[name].typeName].probes > probe_max then
			probe_max = playerShipStats[playerShipInfo[name].typeName].probes
		end
		if playerShipStats[playerShipInfo[name].typeName].probes < probe_min then
			probe_min = playerShipStats[playerShipInfo[name].typeName].probes
		end
		if playerShipStats[playerShipInfo[name].typeName].pods > life_pod_max then
			life_pod_max = playerShipStats[playerShipInfo[name].typeName].pods
		end
		if playerShipStats[playerShipInfo[name].typeName].pods < life_pod_min then
			life_pod_min = playerShipStats[playerShipInfo[name].typeName].pods
		end
	end
	if relative_strength_filter ~= "No RelStrength Filter" then
		filter_count = filter_count + 1
	end
	if cargo_filter ~= "No Cargo Filter" then
		filter_count = filter_count + 1
	end
	if long_sensor_filter ~= "No Long Sensor Filter" then
		filter_count = filter_count + 1
	end
	if probe_filter ~= "No Probe Filter" then
		filter_count = filter_count + 1
	end
	if life_pod_filter ~= "No Life Pod Filter" then
		filter_count = filter_count + 1
	end
	addGMFunction(string.format("+%s %s %s %s %s",relative_strength_label,cargo_label,long_sensor_label,probe_label,life_pod_label),setCutFilter)
	filteredPlayerShipNames = {}
	for _,name in pairs(sorted) do
		local already_spawned = false
		local player_ships = getActivePlayerShips()
		for _, ship in ipairs(player_ships) do
			if name == ship:getCallSign() then
				already_spawned = true
			end
		end
		if not already_spawned then
			if has_ftl ~= "No FTL Filter" then
	--	playerShipInfo[name]={active = "inactive",spawn = func, typeName = typeName, ftl = ftl}
				if has_ftl == "Warp*" then
					if playerShipInfo[name].ftl == "W" then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_ftl == "Jump*" then
					if playerShipInfo[name].ftl == "J" then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_ftl == "Jump & Warp*" then
					if playerShipInfo[name].ftl == "B" then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if has_tractor ~= "No Tractor Filter" then
				if has_tractor == "Tractor*" then
					if playerShipStats[playerShipInfo[name].typeName].tractor then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_tractor == "No Tractor*" then
					if not playerShipStats[playerShipInfo[name].typeName].tractor then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if has_mining ~= "No Mining Filter" then
				if has_mining == "Mining*" then
					if playerShipStats[playerShipInfo[name].typeName].mining then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_mining == "No Mining*" then
					if not playerShipStats[playerShipInfo[name].typeName].mining then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if has_epjam ~= "No EPJAM Filter" then
				if has_epjam == "EPJAM*" then
					if playerShipStats[playerShipInfo[name].typeName].epjam > 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_epjam == "M or L EPJAM*" then
					if playerShipStats[playerShipInfo[name].typeName].epjam > 1 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_epjam == "L EPJAM*" then
					if playerShipStats[playerShipInfo[name].typeName].epjam > 2 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_epjam == "No EPJAM*" then
					if playerShipStats[playerShipInfo[name].typeName].epjam == 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if has_patrol_probe ~= "No Patrol Probe Filter" then
				if has_patrol_probe == "Patrol Probe*" then
					if playerShipStats[playerShipInfo[name].typeName].patrol_probe > 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_patrol_probe == "No Patrol Probe*" then
					if playerShipStats[playerShipInfo[name].typeName].patrol_probe == 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if has_proximity_scan ~= "No ProxScan Filter" then
				if has_proximity_scan == "ProxScan*" then
					if playerShipStats[playerShipInfo[name].typeName].prox_scan > 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif has_proximity_scan == "No ProxScan*" then
					if playerShipStats[playerShipInfo[name].typeName].prox_scan == 0 then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if relative_strength_filter ~= "No RelStrength Filter" then
				if relative_strength_filter == "Less" then
					if playerShipStats[playerShipInfo[name].typeName].strength < relative_strength_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif relative_strength_filter == "More" then
					if playerShipStats[playerShipInfo[name].typeName].strength > relative_strength_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if cargo_filter ~= "No Cargo Filter" then
				if cargo_filter == "Less" then
					if playerShipStats[playerShipInfo[name].typeName].cargo < cargo_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif cargo_filter == "More" then
					if playerShipStats[playerShipInfo[name].typeName].cargo > cargo_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if long_sensor_filter ~= "No Long Sensor Filter" then
				if long_sensor_filter == "Less" then
					if (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000) < long_sensor_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif long_sensor_filter == "More" then
					if (playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000) > long_sensor_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if probe_filter ~= "No Probe Filter" then
				if probe_filter == "Less" then
					if playerShipStats[playerShipInfo[name].typeName].probes < probe_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif probe_filter == "More" then
					if playerShipStats[playerShipInfo[name].typeName].probes > probe_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
			if life_pod_filter ~= "No Life Pod Filter" then
				if life_pod_filter == "Less" then
					if playerShipStats[playerShipInfo[name].typeName].pods < life_pod_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				elseif life_pod_filter == "More" then
					if playerShipStats[playerShipInfo[name].typeName].pods > life_pod_cut then
						if filteredPlayerShipNames[name] == nil then
							filteredPlayerShipNames[name] = 0
						end
						filteredPlayerShipNames[name] = filteredPlayerShipNames[name] + 1
					end
				end
			end
		end
	end
	local matching_player_ship_count = 0
	for name,match in pairs(filteredPlayerShipNames) do
		if filteredPlayerShipNames[name] == filter_count then
			matching_player_ship_count = matching_player_ship_count + 1
		end
	end
	addGMFunction(string.format("List %i Matches",matching_player_ship_count),filteredPlayerShipSpawnList)
end
function setCutFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	local button_label = "+Relative Strength"
	if relative_strength_filter == "No RelStrength Filter" then
		button_label = "+No RelStrength Filter"
	elseif relative_strength_filter == "Less" then
		button_label = string.format("%s < %i",button_label,relative_strength_cut)
	elseif relative_strength_filter == "More" then
		button_label = string.format("%s > %i",button_label,relative_strength_cut)
	end
	addGMFunction(button_label,setRelativeStrengthFilter)
	button_label = "+Cargo Filter"
	if cargo_filter == "No Cargo Filter" then
		button_label = "+No Cargo Filter"
	elseif cargo_filter == "Less" then
		button_label = string.format("%s < %i",button_label,cargo_cut)
	elseif cargo_filter == "More" then
		button_label = string.format("%s > %i",button_label,cargo_cut)
	end
	addGMFunction(button_label,setCargoFilter)
	button_label = "+Long Sensor Filter"
	if long_sensor_filter == "No Long Sensor Filter" then
		button_label = "+No Long Sensor Filter"
	elseif long_sensor_filter == "Less" then
		button_label = string.format("%s < %i",button_label,long_sensor_cut)
	elseif long_sensor_filter == "More" then
		button_label = string.format("%s > %i",button_label,long_sensor_cut)
	end
	addGMFunction(button_label,setLongSensorFilter)
	button_label = "+Probe Filter"
	if probe_filter == "No Probe Filter" then
		button_label = "+No Probe Filter"
	elseif probe_filter == "Less" then
		button_label = string.format("%s < %i",button_label,probe_cut)
	elseif probe_filter == "More" then
		button_label = string.format("%s > %i",button_label,probe_cut)
	end
	addGMFunction(button_label,setProbeFilter)
	button_label = "+Life Pod Filter"
	if life_pod_filter == "No Life Pod Filter" then
		button_label = "+No Life Pod Filter"
	elseif life_pod_filter == "Less" then
		button_label = string.format("%s < %i",button_label,life_pod_cut)
	elseif life_pod_filter == "More" then
		button_label = string.format("%s > %i",button_label,life_pod_cut)
	end
	addGMFunction(button_label,setLifePodFilter)
end
function setLifePodFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	addGMFunction("-From Life Pod",setCutFilter)
	local button_label = "No Life Pod Filter"
	if life_pod_filter == "No Life Pod Filter" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		life_pod_filter = "No Life Pod Filter"
		life_pod_label = "NLF"
		setLifePodFilter()
	end)
	button_label = string.format("Less than %i",life_pod_cut)
	if life_pod_filter == "Less" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		life_pod_filter = "Less"
		life_pod_label = string.format("L<%i",life_pod_cut)
		setLifePodFilter()
	end)
	button_label = string.format("More than %i",life_pod_cut)
	if life_pod_filter == "More" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		life_pod_filter = "More"
		life_pod_label = string.format("L>%i",life_pod_cut)
		setLifePodFilter()
	end)
	if life_pod_cut > life_pod_min then
		addGMFunction(string.format("Set cut to %i",life_pod_cut - 1),function()
			life_pod_cut = life_pod_cut - 1
			if life_pod_filter == "Less" then
				life_pod_label = string.format("L<%i",life_pod_cut)
			end
			if life_pod_filter == "More" then
				life_pod_label = string.format("L>%i",life_pod_cut)
			end
			setLifePodFilter()
		end)
	end
	if life_pod_cut < life_pod_max then
		addGMFunction(string.format("Set cut to %i",life_pod_cut + 1),function()
			life_pod_cut = life_pod_cut + 1
			if life_pod_filter == "Less" then
				life_pod_label = string.format("L<%i",life_pod_cut)
			end
			if life_pod_filter == "More" then
				life_pod_label = string.format("L>%i",life_pod_cut)
			end
			setLifePodFilter()
		end)
	end
end
function setProbeFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	addGMFunction("-From Probe",setCutFilter)
	local button_label = "No Probe Filter"
	if probe_filter == "No Probe Filter" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		probe_filter = "No Probe Filter"
		probe_label = "NPF"
		setProbeFilter()
	end)
	button_label = string.format("Less than %i",probe_cut)
	if probe_filter == "Less" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		probe_filter = "Less"
		probe_label = string.format("P<%i",probe_cut)
		setProbeFilter()
	end)
	button_label = string.format("More than %i",probe_cut)
	if probe_filter == "More" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		probe_filter = "More"
		probe_label = string.format("P>%i",probe_cut)
		setProbeFilter()
	end)
	if probe_cut > probe_min then
		addGMFunction(string.format("Set cut to %i",probe_cut - 1),function()
			probe_cut = probe_cut - 1
			if probe_filter == "Less" then
				probe_label = string.format("P<%i",probe_cut)
			end
			if probe_filter == "More" then
				probe_label = string.format("P>%i",probe_cut)
			end
			setProbeFilter()
		end)
	end
	if probe_cut < probe_max then
		addGMFunction(string.format("Set cut to %i",probe_cut + 1),function()
			probe_cut = probe_cut + 1
			if probe_filter == "Less" then
				probe_label = string.format("P<%i",probe_cut)
			end
			if probe_filter == "More" then
				probe_label = string.format("P>%i",probe_cut)
			end
			setProbeFilter()
		end)
	end
end
function setLongSensorFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	addGMFunction("-From Long Sensor",setCutFilter)
	local button_label = "No Long Sensor Filter"
	if long_sensor_filter == "No Long Sensor Filter" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		long_sensor_filter = "No Long Sensor Filter"
		long_sensor_label = "NSF"
		setLongSensorFilter()
	end)
	button_label = string.format("Less than %i",long_sensor_cut)
	if long_sensor_filter == "Less" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		long_sensor_filter = "Less"
		long_sensor_label = string.format("S<%i",long_sensor_cut)
		setLongSensorFilter()
	end)
	button_label = string.format("More than %i",long_sensor_cut)
	if long_sensor_filter == "More" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		long_sensor_filter = "More"
		long_sensor_label = string.format("S>%i",long_sensor_cut)
		setLongSensorFilter()
	end)
	if long_sensor_cut > long_sensor_min then
		addGMFunction(string.format("Set cut to %i",long_sensor_cut - 1),function()
			long_sensor_cut = long_sensor_cut - 1
			if long_sensor_filter == "Less" then
				long_sensor_label = string.format("S<%i",long_sensor_cut)
			end
			if long_sensor_filter == "More" then
				long_sensor_label = string.format("S>%i",long_sensor_cut)
			end
			setLongSensorFilter()
		end)
	end
	if long_sensor_cut < long_sensor_max then
		addGMFunction(string.format("Set cut to %i",long_sensor_cut + 1),function()
			long_sensor_cut = long_sensor_cut + 1
			if long_sensor_filter == "Less" then
				long_sensor_label = string.format("S<%i",long_sensor_cut)
			end
			if long_sensor_filter == "More" then
				long_sensor_label = string.format("S>%i",long_sensor_cut)
			end
			setLongSensorFilter()
		end)
	end
end
function setCargoFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	addGMFunction("-From Cargo",setCutFilter)
	local button_label = "No Cargo Filter"
	if cargo_filter == "No Cargo Filter" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		cargo_filter = "No Cargo Filter"
		cargo_label = "NCF"
		setCargoFilter()
	end)
	button_label = string.format("Less than %i",cargo_cut)
	if cargo_filter == "Less" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		cargo_filter = "Less"
		cargo_label = string.format("C<%i",cargo_cut)
		setCargoFilter()
	end)
	button_label = string.format("More than %i",cargo_cut)
	if cargo_filter == "More" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		cargo_filter = "More"
		cargo_label = string.format("C>%i",cargo_cut)
		setCargoFilter()
	end)
	if cargo_cut > cargo_min then
		addGMFunction(string.format("Set cut to %i",cargo_cut - 1),function()
			cargo_cut = cargo_cut - 1
			if cargo_filter == "Less" then
				cargo_label = string.format("C<%i",cargo_cut)
			end
			if cargo_filter == "More" then
				cargo_label = string.format("C>%i",cargo_cut)
			end
			setCargoFilter()
		end)
	end
	if cargo_cut < cargo_max then
		addGMFunction(string.format("Set cut to %i",cargo_cut + 1),function()
			cargo_cut = cargo_cut + 1
			if cargo_filter == "Less" then
				cargo_label = string.format("C<%i",cargo_cut)
			end
			if cargo_filter == "More" then
				cargo_label = string.format("C>%i",cargo_cut)
			end
			setCargoFilter()
		end)
	end
end
function setRelativeStrengthFilter()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	addGMFunction("-From Relative Strength",setCutFilter)
	local button_label = "No RelStrength Filter"
	if relative_strength_filter == "No RelStrength Filter" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		relative_strength_filter = "No RelStrength Filter"
		relative_strength_label = "NRF"
		setRelativeStrengthFilter()
	end)
	button_label = string.format("Less than %i",relative_strength_cut)
	if relative_strength_filter == "Less" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		relative_strength_filter = "Less"
		relative_strength_label = string.format("R<%i",relative_strength_cut)
		setRelativeStrengthFilter()
	end)
	button_label = string.format("More than %i",relative_strength_cut)
	if relative_strength_filter == "More" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		relative_strength_filter = "More"
		relative_strength_label = string.format("R>%i",relative_strength_cut)
		setRelativeStrengthFilter()
	end)
	if relative_strength_cut > relative_strength_min then
		addGMFunction(string.format("Set cut to %i",relative_strength_cut - 1),function()
			relative_strength_cut = relative_strength_cut - 1
			if relative_strength_filter == "Less" then
				relative_strength_label = string.format("R<%i",relative_strength_cut)
			end
			if relative_strength_filter == "More" then
				relative_strength_label = string.format("R>%i",relative_strength_cut)
			end
			setRelativeStrengthFilter()
		end)
	end
	if relative_strength_cut < relative_strength_max then
		addGMFunction(string.format("Set cut to %i",relative_strength_cut + 1),function()
			relative_strength_cut = relative_strength_cut + 1
			if relative_strength_filter == "Less" then
				relative_strength_label = string.format("R<%i",relative_strength_cut)
			end
			if relative_strength_filter == "More" then
				relative_strength_label = string.format("R>%i",relative_strength_cut)
			end
			setRelativeStrengthFilter()
		end)
	end
end
function filteredPlayerShipSpawnList()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Set Filters",filteredPlayerShipSpawn)
	local sorted = {}
	for name in pairs(playerShipInfo) do table.insert(sorted,name) end
	table.sort(sorted)
	local matching_player_ship_count = 0
	for name,match in pairs(filteredPlayerShipNames) do
		if filteredPlayerShipNames[name] == filter_count then
			matching_player_ship_count = matching_player_ship_count + 1
		end
	end
	if matching_player_ship_count == 0 then
		if filter_count == 0 or matching_player_ship_count == 0 then
			addGMMessage("No filter specified or no matching player ships found. Transferring you to the normal player ship spawn section")
			spawnPlayerShip()
		else
			addGMMessage("No player ships matched your filter criteria. You need to change your selected filters and try again")
			filteredPlayerShipSpawn()
		end
	else
		for _,name in pairs(sorted) do
			if filteredPlayerShipNames[name] ~= nil then
				if filteredPlayerShipNames[name] == filter_count then
					local strength = playerShipStats[playerShipInfo[name].typeName].strength
					local lrs = playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000
					addGMFunction(string.format("%i%s%i %s",strength,playerShipInfo[name].ftl,lrs,name), function()
						playerShipInfo[name]["spawn"]()
						playerShipInfo[name]["active"] = "inactive"
						filteredPlayerShipSpawn()
					end)
				end
			end
		end
	end
end
function spawnPlayerShip()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
--	addGMFunction("-Setup",initialSetUp)
--	addGMFunction("-Player Ship",playerShip)
	addGMFunction("Ship Button Info",function()
		addGMMessage("The player ship buttons have the following info before each name:\nrelative strength number,\nA letter describing the faster than light drive:\n   J = Jump   W = Warp   B = Both   N = Neither\n and a number for the long range scan range.\n\nSwitch between active player ships and scrapped player ships by using the buttons labeled --Active Ships-- and --Scrapped Ships--")
	end)
	local sorted = {}
	local active_ship_count = 0
	for name, details in pairs(playerShipInfo) do
		if details.active == "active" then
			active_ship_count = active_ship_count + 1
		end
		table.insert(sorted,name) 
	end
	table.sort(sorted)
	if active_player_ship then
		if active_ship_count < 5 then
			addGMFunction("-Setup",initialSetUp)
		end
		if active_ship_count < 6 then
			addGMFunction("-Player Ship",playerShip)
		end
		addGMFunction("--Active Ships--",function()
			active_player_ship = false
			spawnPlayerShip()
		end)
		for _,name in pairs(sorted) do
			if playerShipInfo[name]["active"] == "active" then
				local strength = playerShipStats[playerShipInfo[name].typeName].strength
				local lrs = playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000
				addGMFunction(string.format("%i%s%i %s",strength,playerShipInfo[name].ftl,lrs,name), function()
					playerShipInfo[name]["spawn"]()
					playerShipInfo[name]["active"] = "inactive"
					spawnPlayerShip()
				end)
			end
		end
		addGMFunction("--Active Ships--",function()
			active_player_ship = false
			spawnPlayerShip()
		end)
	else
		addGMFunction("-Setup",initialSetUp)
		addGMFunction("-Player Ship",playerShip)
		addGMFunction("--Scrapped Ships--",function()
			active_player_ship = true
			spawnPlayerShip()
		end)
		for _,name in pairs(sorted) do
			if playerShipInfo[name]["active"] == "inactive" then
				local strength = playerShipStats[playerShipInfo[name].typeName].strength
				local lrs = playerShipStats[playerShipInfo[name].typeName].long_range_radar / 1000
				addGMFunction(string.format("%i%s%i %s",strength,playerShipInfo[name].ftl,lrs,name),playerShipInfo[name]["spawn"])
			end
		end
		addGMFunction("--Scrapped Ships--",function()
			active_player_ship = true
			spawnPlayerShip()
		end)
	end
end
--------------------------------------------------------
--	Initial Set Up > Player Ships > Teleport Players  --
--------------------------------------------------------
-- -MAIN			   FD*	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIPS		F	playerShip
-- TO ICARUS			F	inline
-- TO KENTAR			F	inline
function teleportPlayers()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ships",playerShip)
	addGMFunction("To Icarus",function()
		for _,p in next, getActivePlayerShips() do
			p:setPosition(0,0)
		end
		addGMMessage("Players teleported to Icarus")
	end)
	addGMFunction("To Kentar",function()
		for _,p in next, getActivePlayerShips() do
			p:setPosition(250000,250000)
		end
		addGMMessage("Players teleported to Kentar")
	end)
	addGMFunction("To Lafrina",function()
		for _,p in next, getActivePlayerShips() do
			p:setPosition(-237666,296975)
		end
		addGMMessage("Players teleported to Lafrina")
	end)
	addGMFunction("To Astron",function()
		for _,p in next, getActivePlayerShips() do
			p:setPosition(460500, 320500)
		end
		addGMMessage("Players teleported to Astron")
	end)
end
--	********************************************************************************  --
--	****				Initial Set Up Player Ships Tweak Player				****  --
--	********************************************************************************  --
------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Engineering  --
------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIP			F	playerShip
-- -TWEAK PLAYER		F	tweakPlayerShip
-- +COOLANT				F	changePlayerCoolant
-- +REPAIR CREW			F	changePlayerRepairCrew
-- +MAX SYSTEM			F	changePlayerMaxSystem
-- +BEAM HEAT/ENERGY	F	changePlayerBeams
-- SHIELDS DEGRADE		F	shieldsDegrade
-- SHIELDS REGEN		F	shieldsRegen
-- BLEED ENERGY			F	bleedEnergy
-- RESTORE ENERGY		F	restoreEnergy
function tweakEngineering()
	clearGMFunctions()
	addGMFunction("-Main Frm Engineer",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-By Console",tweakByConsole)
	addGMFunction("+Coolant",changePlayerCoolant)
	addGMFunction("+Repair Crew",changePlayerRepairCrew)
	addGMFunction("+Max System",changePlayerMaxSystem)
	addGMFunction("+Beam heat/energy",changePlayerBeams)
	addGMFunction("+Degrade/Bleed",shieldEnergyDegradeBleed)
end
function shieldEnergyDegradeBleed()
	clearGMFunctions()
	addGMFunction("-Main Frm Engineer",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-By Console",tweakByConsole)
	addGMFunction("-Engineering",tweakEngineering)
	addGMFunction("shields degrade",shieldsDegrade)
	addGMFunction("shields regen",shieldsRegen)
	addGMFunction("bleed energy",bleedEnergy)
	addGMFunction("restore energy",restoreEnergy)
end
function playerShipSelected()
	local selected_player = getPlayerShip(-1)
	local object_list = getGMSelection()
	local selected_matches_player = false
	for i=1,#object_list do
		local current_selected_object = object_list[i]
		local players = getActivePlayerShips()
		for pidx, p in ipairs(players) do
			if p ~= nil and p:isValid() then
				if p == current_selected_object then
					selected_matches_player = true
					selected_player = p
					break
				end
			end
		end
		if selected_matches_player then
			break
		end
	end
	if selected_matches_player then
		return selected_player
	end
	return nil
end
------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay  --
------------------------------------------------------------------
-- -MAIN FRM TWK RLY	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIP			F	playerShip
-- -TWEAK PLAYER		F	tweakPlayerShip
-- +CARGO				F	changePlayerCargo
-- +REPUTATION			F	changePlayerReputation
-- +WAYPOINT			F	addWaypoint
function tweakRelay()
	clearGMFunctions()
	addGMFunction("-Main Frm Twk Rly",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-By Console",tweakByConsole)
	addGMFunction("+Cargo",changePlayerCargo)
	addGMFunction("+Reputation",changePlayerReputation)
	addGMFunction("+Waypoint",addWaypoint)
	addGMFunction("+Specialty Probes",playerSpecialtyProbes)
end
---------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Player Message  --
---------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM PLYR MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIP			F	playerShip
-- -TWEAK PLAYER		F	tweakPlayerShip
-- +CONSOLE MESSAGE		F	playerConsoleMessage
-- +SHIP LOG MSG		F	playerShipLogMessage
function playerMessage()
	clearGMFunctions()
	addGMFunction("-Main from plyr msg",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak player",tweakPlayerShip)
	addGMFunction("+Console Message",playerConsoleMessage)
	addGMFunction("+Ship Log Msg",playerShipLogMessage)
	addGMFunction("+Hail Message",playerHailMessage)
end
----------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Console Message  --
----------------------------------------------------------------------
-- Button text	   FD*	Related Function(s)
-- -MAIN FROM CNSL MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- +SELECT MSG OBJ		F	changeMessageObject
function playerConsoleMessage()
	clearGMFunctions()
	addGMFunction("-Main From Cnsl Msg",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	changeMessageObjectCaller = playerConsoleMessage
	if message_object == nil then
		addGMFunction("+Select Msg Obj",changeMessageObject)
	else
		addGMFunction("+Change Msg Obj",changeMessageObject)
		local p = playerShipSelected()
		if p ~= nil then
			addGMFunction("+Send to console",sendPlayerConsoleMessage)
		else
			addGMFunction("+Select Player",playerConsoleMessage)
		end
	end
end
function changeMessageObject()
	local object_list = getGMSelection()
	if object_list ~= nil then
		if #object_list == 1 then
			message_object = object_list[1]
			addGMMessage(string.format("Object in %s selected to pass messages to player console.\nplace message in unscanned description field",message_object:getSectorName()))
			changeMessageObjectCaller()
		else
			addGMMessage("Select only one object to use to pass messages via its description field. No action taken")
			changeMessageObjectCaller()
		end
	else
		addGMMessage("Select an object to use to pass messages via its description field. No action taken")
		changeMessageObjectCaller()
	end 
end
-----------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Ship Log Message  --
-----------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FROM SHIP MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -PLAYER MESSAGE		F	playerMessage
-- +SRC:UNKNOWN			D	playerMessageSource
-- +SELECT MSG OBJ		D	changeMessageObject
-- +PSHIP:ALL			D	setPlayerShipMessageDestination
-- +COLOR:MAGENTA		D	setPlayerShipLogMessageColor
-- PREVIEW				F	inline
-- SEND					F	inline
function playerShipLogMessage()
	clearGMFunctions()
	addGMFunction("-Main From Ship Msg",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	if player_message_source == nil then
		player_message_source = "Unknown"
	end
	if type(player_message_source) == "string" then
		addGMFunction(string.format("+Src:%s",player_message_source),playerMessageSource)
	else
		addGMFunction(string.format("+Src:%s",player_message_source:getCallSign()),playerMessageSource)
	end
	changeMessageObjectCaller = playerShipLogMessage
	if message_object == nil then
		addGMFunction("+Select Msg Obj",changeMessageObject)
	else
		addGMFunction("+Change Msg Obj",changeMessageObject)
	end
	if player_ship_message_destination == nil then
		player_ship_message_destination = "All"
	end
	local button_label = "+pShip"
	if type(player_ship_message_destination) == "string" then
		button_label = button_label .. ":All"
	else
		button_label = string.format("%s:%s",button_label,player_ship_message_destination:getCallSign())
	end
	set_player_ship_message_destination_caller = playerShipLogMessage
	addGMFunction(button_label,setPlayerShipMessageDestination)
	addGMFunction(string.format("+Color:%s",color_list[player_ship_log_message_color]),setPlayerShipLogMessageColor)
	addGMFunction("Preview",function()
		local preview_message = "Clicking send will send the following message:"
		if message_object ~= nil then
			preview_message = string.format("%s\n%s",preview_message,message_object:getDescription())
			preview_message = preview_message .. "\nIdentified as coming from"
			if type(player_message_source) == "string" then
				if message_source_object ~= nil then
					local source = message_source_object:getDescription()
					if source ~= nil then
						player_message_source = source
					end
				end
				preview_message = string.format("%s\n%s",preview_message,player_message_source)
			else
				preview_message = string.format("%s\n%s in sector %s",preview_message,player_message_source:getCallSign(),player_message_source:getSectorName())
			end
			if type(player_ship_message_destination) == "string" then
				preview_message = string.format("%s\nTo all player ship logs",preview_message)
			else
				preview_message = string.format("%s\nTo %s's ship log",preview_message,player_ship_message_destination:getCallSign())
			end
			preview_message = string.format("%s\nIn this color: %s",preview_message,color_list[player_ship_log_message_color])
		else
			preview_message = preview_message .. "\nno message because no message object has been selected"
		end
		addGMMessage(preview_message)
	end)
	addGMFunction("Send",function()
		local ship_log_message = ""
		if type(player_message_source) == "string" then
			if message_source_object ~= nil then
				local source = message_source_object:getDescription()
				if source ~= nil then
					player_message_source = source
				end
			end
			ship_log_message = string.format("[%s] %s",player_message_source,message_object:getDescription())
		else
			ship_log_message = string.format("[%s in %s] %s",player_message_source:getCallSign(),player_message_source:getSectorName(),message_object:getDescription())
		end
		if type(player_ship_message_destination) == "string" then
			local players = getActivePlayerShips()
			for pidx, p in ipairs(players) do
				if p ~= nil and p:isValid() then
					p:addToShipLog(ship_log_message,player_ship_log_message_color)
				end
			end
		else
			player_ship_message_destination:addToShipLog(ship_log_message,player_ship_log_message_color)
		end
		local confirmation_message = string.format("Message...\n%s\nsent to\n",ship_log_message)
		if type(player_ship_message_destination) == "string" then
			confirmation_message = string.format("%sAll player ships colored in %s",confirmation_message,color_list[player_ship_log_message_color])
		else
			confirmation_message = string.format("%s%s colored in %s",confirmation_message,player_ship_message_destination:getCallSign(),color_list[player_ship_log_message_color])
		end
		addGMMessage(confirmation_message)
	end)
end
function playerHailMessage()
	clearGMFunctions()
	addGMFunction("-Main From Hail Msg",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	if player_message_source == nil or type(player_message_source) == "string" then
		addGMFunction("+Source",playerMessageObjectSource)
	else
		addGMFunction(string.format("+Src:%s",player_message_source:getCallSign()),playerMessageObjectSource)
	end
	changeMessageObjectCaller = playerHailMessage
	if message_object == nil then
		addGMFunction("+Select Msg Obj",changeMessageObject)
	else
		addGMFunction("+Change Msg Obj",changeMessageObject)
	end
	if player_ship_message_destination == nil then
		player_ship_message_destination = "All"
	end
	local button_label = "+pShip"
	if type(player_ship_message_destination) == "string" then
		button_label = button_label .. ":All"
	else
		button_label = string.format("%s:%s",button_label,player_ship_message_destination:getCallSign())
	end
	set_player_ship_message_destination_caller = playerHailMessage
	addGMFunction(button_label,setPlayerShipMessageDestination)
	addGMFunction("Preview",function()
		local preview_message = "Clicking send will send the following message:"
		if message_object ~= nil then
			preview_message = string.format("%s\n%s",preview_message,message_object:getDescription())
			preview_message = preview_message .. "\nIdentified as coming from"
			if player_message_source == nil or type(player_message_source) == "string" then
				preview_message = preview_message .. "\nNobody (message will not go out). You need to select a message source"
			else
				preview_message = string.format("%s\n%s in sector %s",preview_message,player_message_source:getCallSign(),player_message_source:getSectorName())
			end
			if type(player_ship_message_destination) == "string" then
				preview_message = string.format("%s\nTo all player ships",preview_message)
			else
				preview_message = string.format("%s\nTo %s",preview_message,player_ship_message_destination:getCallSign())
			end
		else
			preview_message = preview_message .. "\nNo message because no message object has been selected"
		end
		addGMMessage(preview_message)
	end)
	addGMFunction("Send",function()
		local hail_message = ""
		if player_message_source == nil or type(player_message_source) == "string" then
			addGMMessage("You need to select a message source. No action taken")
			return
		else
			hail_message = string.format("[Sector %s] %s",player_message_source:getSectorName(),message_object:getDescription())
		end
		if type(player_ship_message_destination) == "string" then
			local players = getActivePlayerShips()
			for pidx, p in ipairs(players) do
				if p ~= nil and p:isValid() then
					player_message_source:sendCommsMessage(p,hail_message)
				end
			end
		else
			player_message_source:sendCommsMessage(player_ship_message_destination,hail_message)
		end
		local confirmation_message = string.format("Message...\n%s\nsent to\n",hail_message)
		if type(player_ship_message_destination) == "string" then
			confirmation_message = string.format("%sAll player ships",confirmation_message)
		else
			confirmation_message = string.format("%s%s",confirmation_message,player_ship_message_destination:getCallSign())
		end
		addGMMessage(confirmation_message)
	end)
end
function playerMessageObjectSource()
	clearGMFunctions()
	addGMFunction("-Main Frm Msg Src",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	addGMFunction("-Hail Message",playerHailMessage)
	local stations_and_ships = {}
	for _, station in pairs(regionStations) do
		if station ~= nil and station:isValid() then
			table.insert(stations_and_ships,{object=station,name=station:getCallSign()})
		end
	end
	if region_ships ~= nil then
		for _, ship in pairs(region_ships) do
			if ship ~= nil and ship:isValid() then
				table.insert(stations_and_ships,{object=ship,name=ship:getCallSign()})
			end
		end
	end
	for _, station in pairs(skeleton_stations) do
		if station ~= nil and station:isValid() then
			table.insert(stations_and_ships,{object=station,name=station:getCallSign()})
		end
	end
	table.sort(stations_and_ships,function(a,b)
		return a.name < b.name
	end)
	for _,item in ipairs(stations_and_ships) do
		button_label = item.name
		if type(player_message_source) == "table" and player_message_source == item.object then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			player_message_source = item.object
			playerMessageObjectSource()
		end)
	end
end
--	********************************************************************************************  --
--	****				Initial Set Up Player Ships Tweak Player Engineering				****  --
--	********************************************************************************************  --
-------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Engineering > Beam Heat/Energy  --
-------------------------------------------------------------------------------------
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIP			F	playerShip
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -ENGINEERING			F	tweakEngineering
-- BEAM HEAT +			D	inline
-- BEAM HEAT -			D	inline
-- BEAM ENERGY +		D	inline
-- BEAM ENERGY - 		D	inline
function changePlayerBeams()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Engineering",tweakEngineering)
	local p = playerShipSelected()
	local button_label = "Beam Heat +"
	if p ~= nil then
		button_label = string.format("%.2f Beam Heat +",p:getBeamWeaponHeatPerFire(0))
	end
	addGMFunction(button_label,function()
		local p = playerShipSelected()
		if p ~= nil then
			if p:getBeamWeaponRange(0) > 0 then
				local beam_index = 0
				repeat
					p:setBeamWeaponHeatPerFire(beam_index,p:getBeamWeaponHeatPerFire(beam_index)*1.2)
					beam_index = beam_index + 1
				until(p:getBeamWeaponRange(beam_index) < 1)
			else
				addGMMessage("Selected ship has no beams. No action taken")
			end
		else
			addGMMessage("No player ship selected. No action taken.")
		end
		changePlayerBeams()
	end)
	button_label = "Beam Heat -"
	if p ~= nil then
		button_label = string.format("%.2f Beam Heat -",p:getBeamWeaponHeatPerFire(0))
	end
	addGMFunction(button_label,function()
		local p = playerShipSelected()
		if p ~= nil then
			if p:getBeamWeaponRange(0) > 0 then
				local beam_index = 0
				repeat
					p:setBeamWeaponHeatPerFire(beam_index,p:getBeamWeaponHeatPerFire(beam_index)*.8)
					beam_index = beam_index + 1
				until(p:getBeamWeaponRange(beam_index) < 1)
			else
				addGMMessage("Selected ship has no beams. No action taken")
			end
		else
			addGMMessage("No player ship selected. No action taken.")
		end
		changePlayerBeams()
	end)
	button_label = "Beam Energy +"
	if p ~= nil then
		button_label = string.format("%.2f Beam Energy +",p:getBeamWeaponEnergyPerFire(0))
	end
	addGMFunction(button_label,function()
		local p = playerShipSelected()
		if p ~= nil then
			if p:getBeamWeaponRange(0) > 0 then
				local beam_index = 0
				repeat
					p:setBeamWeaponEnergyPerFire(beam_index,p:getBeamWeaponEnergyPerFire(beam_index)*1.1)
					beam_index = beam_index + 1
				until(p:getBeamWeaponRange(beam_index) < 1)
			else
				addGMMessage("Selected ship has no beams. No action taken")
			end
		else
			addGMMessage("No player ship selected. No action taken.")
		end
		changePlayerBeams()
	end)
	button_label = "Beam Energy -"
	if p ~= nil then
		button_label = string.format("%.2f Beam Energy -",p:getBeamWeaponEnergyPerFire(0))
	end
	addGMFunction(button_label,function()
		local p = playerShipSelected()
		if p ~= nil then
			if p:getBeamWeaponRange(0) > 0 then
				local beam_index = 0
				repeat
					p:setBeamWeaponEnergyPerFire(beam_index,p:getBeamWeaponEnergyPerFire(beam_index)*.9)
					beam_index = beam_index + 1
				until(p:getBeamWeaponRange(beam_index) < 1)
			else
				addGMMessage("Selected ship has no beams. No action taken")
			end
		else
			addGMMessage("No player ship selected. No action taken.")
		end
		changePlayerBeams()
	end)
end
----------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Engineering > Coolant  --
----------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- ADD 1.0 COOLANT		D	inline (add coolant to selected player ship)
-- REMOVE 1.0 COOLANT	D	inline (remove coolant from selected player ship)
-- 1.0 - 0.5 = 0.5		D	inline (decrease coolant change value)
-- 1.0 + 0.5 = 1.5		D	inline (increase coolant change value)
function changePlayerCoolant()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Engineering",tweakEngineering)
	addGMFunction(string.format("Add %.1f coolant",coolant_amount), function()
		local p = playerShipSelected()
		if p ~= nil then
			local coolant_reason_given = false
			p:setMaxCoolant(p:getMaxCoolant() + coolant_amount)
			addGMMessage(string.format("%.1f coolant added to %s for a new total of %.1f coolant",coolant_amount,p:getCallSign(),p:getMaxCoolant()))
			for i=1,#regionStations do
				if p:isDocked(regionStations[i]) then
					p:wrappedAddCustomMessage("Engineering","coolant_bonus_message",string.format("A kind-hearted quartermaster on %s donated some coolant to your coolant supply",regionStations[i]:getCallSign()))
					coolant_reason_given = true
					break
				end
			end
			if not coolant_reason_given then
				p:wrappedAddCustomMessage("Engineering","coolant_bonus_message","Additional coolant was added. It was missed during the last inventory cycle")
			end
		else
			addGMMessage("No player selected. No action taken")
		end
		changePlayerCoolant()
	end)
	addGMFunction(string.format("Remove %.1f coolant",coolant_amount), function()
		local p = playerShipSelected()
		if p ~= nil then
			local coolant_reason_given = false
			p:setMaxCoolant(p:getMaxCoolant() - coolant_amount)
			addGMMessage(string.format("%.1f coolant removed from %s for a new total of %.1f coolant",coolant_amount,p:getCallSign(),p:getMaxCoolant()))
			for i=1,#regionStations do
				if p:isDocked(regionStations[i]) then
					p:wrappedAddCustomMessage("Engineering","coolant_loss_message",string.format("Station docking fees for %s were paid for in coolant",regionStations[i]:getCallSign()))
					coolant_reason_given = true
					break
				end
			end
			if not coolant_reason_given then
				p:wrappedAddCustomMessage("Engineering","coolant_loss_message","Coolant was lost due to a malfunctioning system. You corrected the problem before it got any worse")
			end
		else
			addGMMessage("No player selected. No action taken")
		end
		changePlayerCoolant()
	end)
	if coolant_amount > .5 then
		addGMFunction(string.format("%.1f - %.1f = %.1f",coolant_amount,.5,coolant_amount-.5),function()
			coolant_amount = coolant_amount - .5
			changePlayerCoolant()
		end)
	end
	if coolant_amount < 10 then
		addGMFunction(string.format("%.1f + %.1f = %.1f",coolant_amount,.5,coolant_amount+.5),function()
			coolant_amount = coolant_amount + .5
			changePlayerCoolant()
		end)
	end
end
--------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Engineering > Repair Crew  --
--------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- ADD REPAIR CREW		F	inline
-- REMOVE REPAIR CREW	F	inline
function changePlayerRepairCrew()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Engineering",tweakEngineering)
	addGMFunction("Add repair crew", function()
		local p = playerShipSelected()
		if p ~= nil then
			local crew_reason_given = false
			p:setRepairCrewCount(p:getRepairCrewCount()+1)
			addGMMessage(string.format("1 repair crew added to %s for a new total of %i repair crew",p:getCallSign(),p:getRepairCrewCount()))
			for i=1,#regionStations do
				if p:isDocked(regionStations[i]) then
					p:wrappedAddCustomMessage("Engineering","added_repair_crew_message",string.format("A volunteer from station %s has boarded to work as one of your repair crew",regionStations[i]:getCallSign()))
					crew_reason_given = true
					break
				end
			end
			if not crew_reason_given then
				p:wrappedAddCustomMessage("Engineering","added_repair_crew_message","A crew member from a different department has completed training and has transferred to your repair crew")
			end
		else
			addGMMessage("No player selected. No action taken")
		end
		changePlayerRepairCrew()
	end)
	addGMFunction("Remove repair crew", function()
		local p = playerShipSelected()
		if p ~= nil then
			local crew_reason_given = false
			if p:getRepairCrewCount() > 0 then
				p:setRepairCrewCount(p:getRepairCrewCount()-1)
				addGMMessage(string.format("1 repair crew removed from %s for a new total of %i repair crew",p:getCallSign(),p:getRepairCrewCount()))
				for i=1,#regionStations do
					if p:isDocked(regionStations[i]) then
						p:wrappedAddCustomMessage("Engineering","removed_repair_crew_message",string.format("One of your repair crew has disembarked on to station %s claiming his work contract has been fulfilled",regionStations[i]:getCallSign()))
						crew_reason_given = true
						break
					end
				end
				if not crew_reason_given then
					p:wrappedAddCustomMessage("Engineering","removed_repair_crew_message","One of your repair crew has become debilitatingly ill and can no longer conduct any repairs")
				end
			end
		else
			addGMMessage("No player selected. No action taken")
		end
		changePlayerRepairCrew()
	end)
end
-------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Engineering > Max System  --
-------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -FROM MAX SYSTEM		F	tweakPlayerShip
-- +REACTOR 1.00		D	changePlayerMaxReactor
-- +BEAM 1.00			D	changePlayerMaxBeam
-- +MISSILE 1.00		D	changePlayerMaxMissile
-- +MANEUVER 1.00		D	changePlayerMaxManeuver
-- +IMPULSE 1.00		D	changePlayerMaxImpulse
-- +WARP 1.00			D	changePlayerMaxWarp
-- +JUMP 1.00			D	changePlayerMaxJump
-- +FRONT SHIELD 1.00	D	changePlayerMaxFrontShield
-- +REAR SHIELD 1.00	D	changePlayerMaxRearShield
function changePlayerMaxSystem()
	clearGMFunctions()
	addGMFunction("-From Max System",tweakEngineering)
	local p = playerShipSelected()
	if p ~= nil then
		string.format("")	--necessary to have global reference for Serious Proton engine
		addGMFunction(string.format("+Reactor %.2f",p:getSystemHealthMax("reactor")),changePlayerMaxReactor)
		addGMFunction(string.format("+Beam %.2f",p:getSystemHealthMax("beamweapons")),changePlayerMaxBeam)
		addGMFunction(string.format("+Missile %.2f",p:getSystemHealthMax("missilesystem")),changePlayerMaxMissile)
		addGMFunction(string.format("+Maneuver %.2f",p:getSystemHealthMax("maneuver")),changePlayerMaxManeuver)
		addGMFunction(string.format("+Impulse %.2f",p:getSystemHealthMax("impulse")),changePlayerMaxImpulse)
		addGMFunction(string.format("+Warp %.2f",p:getSystemHealthMax("warp")),changePlayerMaxWarp)
		addGMFunction(string.format("+Jump %.2f",p:getSystemHealthMax("jumpdrive")),changePlayerMaxJump)
		addGMFunction(string.format("+Front Shield %.2f",p:getSystemHealthMax("frontshield")),changePlayerMaxFrontShield)
		addGMFunction(string.format("+Rear Shield %.2f",p:getSystemHealthMax("rearshield")),changePlayerMaxRearShield)
	else
		addGMFunction("+Select Player",changePlayerMaxSystem)
	end
end
--	********************************************************************************************  --
--	****				Initial Set Up Player Ships Tweak Player Tweak Relay				****  --
--	********************************************************************************************  --
--------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Cargo  --
--------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM CARGO		F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- +REMOVE CARGO		F	removeCargo
-- +ADD MINERAL			F	addMineralCargo
-- +ADD COMPONENT		F	addComponentCargo
function changePlayerCargo()
	clearGMFunctions()
	addGMFunction("-Main from Cargo",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Tweak Relay",tweakRelay)
	addGMFunction("+Remove Cargo",removeCargo)
	addGMFunction("+Add Mineral",addMineralCargo)
	addGMFunction("+Add Component",addComponentCargo)
	addGMFunction("+Add Arbitrary",addArbitraryCargo)
end
-------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Reputation  --
-------------------------------------------------------------------------------
-- Button text	   FD*	Related Function(s)
-- -MAIN FROM REP	F	initialGMFunctions
-- -SETUP			F	initialSetUp
-- -TWEAK PLAYER	F	tweakPlayerShip
-- ADD ONE REP n	D	inline
-- ADD FIVE REP n	D	inline
-- ADD TEN REP n	D	inline
-- DEL ONE REP n	D	inline
-- DEL FIVE REP n	D	inline
-- DEL TEN REP n	D	inline
function changePlayerReputation()
	clearGMFunctions()
	addGMFunction("-Main From Rep",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Tweak Relay",tweakRelay)
	local p = playerShipSelected()
	if p ~= nil then
		local current_rep = math.floor(p:getReputationPoints())
		addGMFunction(string.format("Add one rep %i",current_rep),function()
			p:addReputationPoints(1)
			changePlayerReputation()
		end)
		addGMFunction(string.format("Add five rep %i",current_rep),function()
			p:addReputationPoints(5)
			changePlayerReputation()
		end)
		addGMFunction(string.format("Add ten rep %i",current_rep),function()
			p:addReputationPoints(10)
			changePlayerReputation()
		end)
		if current_rep > 0 then
			addGMFunction(string.format("Del one rep %i",current_rep),function()
				p:takeReputationPoints(1)
				changePlayerReputation()
			end)
		end
		if current_rep > 5 then
			addGMFunction(string.format("Del five rep %i",current_rep),function()
				p:takeReputationPoints(5)
				changePlayerReputation()
			end)
		end
		if current_rep > 10 then
			addGMFunction(string.format("Del ten rep %i",current_rep),function()
				p:takeReputationPoints(10)
				changePlayerReputation()
			end)
		end
	else
		addGMMessage("No player selected. No action taken. No reputation options presented")
		tweakRelay()
	end
end
-----------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Waypoint  --
-----------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM WAYPOINT	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -PLAYER SHIP			F	playerShip
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -TWEAK RELAY			F	tweakRelay
function addWaypoint()
	clearGMFunctions()
	addGMFunction("-Main From Waypoint",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Tweak Relay",tweakRelay)
	if gm_click_mode == "add waypoint" then
		addGMFunction(">Add Waypoint<",clickForWaypoint)
	else
		addGMFunction("Add Waypoint",clickForWaypoint)
	end
end
function clickForWaypoint()
	if gm_click_mode == "add waypoint" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "add waypoint"
		onGMClick(gmClickZoneWaypoint)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   add waypoint\nGM click mode.",prev_mode))
		end
	end
	addWaypoint()
end
function gmClickZoneWaypoint(x,y)
	local selected_list = getGMSelection()
	local players_selected = {}
	for _, obj in ipairs(selected_list) do
		if isObjectType(obj,"PlayerSpaceship") then
			table.insert(players_selected,obj)
		end
	end
	local player_list = ""
	if #players_selected > 0 then
		for _, p in ipairs(players_selected) do
			p:commandAddWaypoint(x,y)
			player_list = player_list .. " " .. p:getCallSign()
		end
	else
		local players = getActivePlayerShips()
		for pidx, p in ipairs(players) do
			if p ~= nil and p:isValid() then
				p:commandAddWaypoint(x,y)
				player_list = player_list .. " " .. p:getCallSign()
			end
		end
	end
	addGMMessage(string.format("Waypoint added to:\n%s",player_list))
end
function playerSpecialtyProbes()
	clearGMFunctions()
	addGMFunction("-Main From Specialty",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Player Ship",playerShip)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Tweak Relay",tweakRelay)
	addGMFunction("+Fast Probes",playerFastProbes)
	addGMFunction("+Sensor Boost Probes",playerSensorBoostProbes)
	addGMFunction("+Warp Jammer Probes",playerWarpJammerProbes)
	addGMFunction("+Observatory Probes",playerObservatoryProbes)
end
function setObservatoryProbeRange()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	addGMFunction("-From Range",playerObservatoryProbes)
	for name,range in pairs(observatory_probe_ranges) do
		local button_label = string.format("%s: %s",name,range)
		if name == observatory_probe_range then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			observatory_probe_range = name
			setObservatoryProbeRange()
		end)
	end
end
function setObservatoryProbeShield()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	addGMFunction("-From Shield",playerObservatoryProbes)
	for name,strength in pairs(observatory_probe_shields) do
		local button_label = string.format("%s: %s",name,strength)
		if name == observatory_probe_shield then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			observatory_probe_shield = name
			setObservatoryProbeShield()
		end)
	end
end
function setObservatoryProbeHull()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	addGMFunction("-From Hull",playerObservatoryProbes)
	for name,strength in pairs(observatory_probe_hull_list) do
		local button_label = string.format("%s: %s",name,strength)
		if name == observatory_probe_hull then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			observatory_probe_hull = name
			setObservatoryProbeHull()
		end)
	end
end
function playerObservatoryProbes()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	local selected_list = getGMSelection()
	local players_selected = {}
	for _, obj in ipairs(selected_list) do
		if isObjectType(obj,"PlayerSpaceship") then
			table.insert(players_selected,obj)
		end
	end
	local player_list = ""
	if #players_selected == 0 then
		players_selected = getActivePlayerShips()	--select them all
	end
	if #players_selected > 0 then
		addGMFunction("Refresh Probe Button",function()
			for _, p in ipairs(players_selected) do
				refreshSpecialProbeButton(p)
			end
		end)
		if observatory_probe_range == nil then
			observatory_probe_range = "Medium"
		end
		if observatory_probe_shield == nil then
			observatory_probe_shield = "Medium"
		end
		if observatory_probe_hull == nil then
			observatory_probe_hull = "Medium"
		end
		addGMFunction(string.format("+Obs Range: %s",observatory_probe_ranges[observatory_probe_range]),setObservatoryProbeRange)
		addGMFunction(string.format("+Obs Shield: %s",observatory_probe_shields[observatory_probe_shield]),setObservatoryProbeShield)
		addGMFunction(string.format("+Obs Hull: %s",observatory_probe_hull_list[observatory_probe_hull]),setObservatoryProbeHull)
		for i, p in ipairs(players_selected) do
			local probe_count = 0
			local matching_index = 0
			if p.probe_type_list ~= nil then
				if #p.probe_type_list > 0 then
					for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
						if probe_type_item.name == "Observatory" then
							probe_count = p.probe_type_list[probe_type_index].count
							matching_index = probe_type_index
							break
						end
					end
				end
			end
			addGMFunction(string.format("%s %s %i+1=%i",p:getCallSign(),"Observatory",probe_count,probe_count+1),function()
				string.format("")
				if p.probe_type_list == nil then
					p.probe_type_list = {}
					table.insert(p.probe_type_list,{name = "standard", count = -1})
				end
				if matching_index > 0 then
					p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count + 1
				else
					table.insert(p.probe_type_list,{name = "Observatory", count = 1, speed = 1000, range = observatory_probe_ranges[observatory_probe_range] * 1000, shield = observatory_probe_shields[observatory_probe_shield], hull = observatory_probe_hull_list[observatory_probe_hull]})
				end
				local probe_type_name = "Observatory"
				local docked_station = p:getDockedWith() 
				if docked_station ~= nil then
					local probe_message_options = {
						string.format("One of the younger members of the crew on %s provided you with a %s type probe kit as part of an educational assignment.",docked_station:getCallSign(),probe_type_name),
						string.format("A maintenance technician on %s gave you an extra %s type probe kit.",docked_station:getCallSign(),probe_type_name),
						string.format("You received a semi-automated thank you gift from %s: a %s type probe kit.",docked_station:getCallSign(),probe_type_name),
					}
					local probe_message = tableSelectRandom(probe_message_options)
					p.probe_message_relay = "probe_message_relay"
					p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
					p.probe_message_ops = "probe_message_ops"
					p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
				else
					local undocked_probe_message_options = {
						string.format("A member of the engineering techincal crew fabricated a %s type probe kit and added it to your inventory.",probe_type_name),
						string.format("Ensign Goody Pop took the remains of a replicator failure and created a %s type probe kit for you.",probe_type_name),
						string.format("From the leftovers of a failed academic science project, a crewmember was able to fabricate a %s type probe kit.",probe_type_name),
					}
					local probe_message = tableSelectRandom(undocked_probe_message_options)
					p.probe_message_relay = "probe_message_relay"
					p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
					p.probe_message_ops = "probe_message_ops"
					p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
				end
				p.probe_type = "standard"
				cycleProbeType(p,probe_type_name)
				p.probe_type_button = "probe_type_button"
				p:addCustomButton("Relay",p.probe_type_button,"Probes: standard",function()
					string.format("")
					cycleProbeType(p)
				end,10)
				p.probe_type_button_ops = "probe_type_button_ops"
				p:addCustomButton("Operations",p.probe_type_button_ops,"Probes: standard",function()
					string.format("")
					cycleProbeType(p)
				end,10)
				playerObservatoryProbes()
			end)
		end
	else
		addGMMessage("No players. No action taken")
	end
end
function playerWarpJammerProbes()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	local selected_list = getGMSelection()
	local players_selected = {}
	for _, obj in ipairs(selected_list) do
		if isObjectType(obj,"PlayerSpaceship") then
			table.insert(players_selected,obj)
		end
	end
	local player_list = ""
	if #players_selected == 0 then
		players_selected = getActivePlayerShips()	--select them all
	end
	if #players_selected > 0 then
		addGMFunction("Refresh Probe Button",function()
			for _, p in ipairs(players_selected) do
				refreshSpecialProbeButton(p)
			end
		end)
		local warp_jammer_probe_type_names = {
			"Snag",
			"Mire",
			"Swamp",
		}
		local warp_jammer_details = {
			["Snag"] = {speed = 2500, range = 10000},
			["Mire"] = {speed = 2000, range = 15000},
			["Swamp"] = {speed = 1500, range = 20000},
		}
		for i, p in ipairs(players_selected) do
			for j, probe_type_name in ipairs(warp_jammer_probe_type_names) do
				local probe_count = 0
				local matching_index = 0
				if p.probe_type_list ~= nil then
					if #p.probe_type_list > 0 then
						for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
							if probe_type_item.name == probe_type_name then
								matching_index = probe_type_index
								break
							end
						end
						if matching_index > 0 then
							probe_count = p.probe_type_list[matching_index].count
						end
					end
				end
				if probe_count > 0 then
					addGMFunction(string.format("%s %s %i-1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count-1),function()
						string.format("")
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count - 1
						cycleProbeType(p)
						local docked_station = p:getDockedWith()
						if docked_station ~= nil then
							local probe_message_options = {
								string.format("%s station personnel conducting routine inspections discovered that one of your %s type probe kits was faulty, removing the defective kit before it could damage %s",docked_station:getCallSign(),probe_type_name,p:getCallSign()),
								string.format("Automated inventory validation systems on %s corrected your inventory on % type probe kits. Your systems showed you had one more than physically present.",docked_station:getCallSign(),probe_type_name),
								string.format("%s introduced a docking fee protocol. After some quick negotiation, you agreed to exchange a %s type probe kit for the fee.",docked_station:getCallSign(),probe_type_name),
							}
							local probe_message = probe_message_options[math.random(1,#probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						else
							local undocked_probe_message_options = {
								string.format("A member of the engineering team just sent you an apologetic message. It seems that while conducting maintenance on a nearby system, they accidentally destroyed one of your %s type probe kits.",probe_type_name),
								string.format("The warranty just expired on one of your %s type probe kits. Rather than risk damage to %s, automated systems have removed the potentially hazardous device.",probe_type_name,p:getCallSign()),
								string.format("Recent engine activity has inadvertently damaged one of the %s type probe kits. The technicians have removed the damaged device for safety purposes.",probe_type_name),
							}
							local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						end
						playerWarpJammerProbes()
					end)
				end
				addGMFunction(string.format("%s %s %i+1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count+1),function()
					string.format("")
					if p.probe_type_list == nil then
						p.probe_type_list = {}
						table.insert(p.probe_type_list,{name = "standard", count = -1})
					end
					if matching_index > 0 then
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count + 1
					else
						table.insert(p.probe_type_list,{name = probe_type_name, count = 1, speed = warp_jammer_details[probe_type_name].speed, warp_jam_range = warp_jammer_details[probe_type_name].range})
					end
					local docked_station = p:getDockedWith() 
					if docked_station ~= nil then
						local probe_message_options = {
							string.format("One of the younger members of the crew on %s provided you with a %s type probe kit as part of an educational assignment.",docked_station:getCallSign(),probe_type_name),
							string.format("A maintenance technician on %s gave you an extra %s type probe kit.",docked_station:getCallSign(),probe_type_name),
							string.format("You received a semi-automated thank you gift from %s: a %s type probe kit.",docked_station:getCallSign(),probe_type_name),
						}
						local probe_message = probe_message_options[math.random(1,#probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					else
						local undocked_probe_message_options = {
							string.format("A member of the engineering techincal crew fabricated a %s type probe kit and added it to your inventory.",probe_type_name),
							string.format("Ensign Goody Pop took the remains of a replicator failure and created a %s type probe kit for you.",probe_type_name),
							string.format("From the leftovers of a failed academic science project, a crewmember was able to fabricate a %s type probe kit.",probe_type_name),
						}
						local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					end
					p.probe_type = "standard"
					cycleProbeType(p,probe_type_name)
					p.probe_type_button = "probe_type_button"
					p:addCustomButton("Relay",p.probe_type_button,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					p.probe_type_button_ops = "probe_type_button_ops"
					p:addCustomButton("Operations",p.probe_type_button_ops,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					playerWarpJammerProbes()
				end)
			end
		end
	else
		addGMMessage("No players. No action taken")
	end
end
function playerSensorBoostProbes()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	local selected_list = getGMSelection()
	local players_selected = {}
	for _, obj in ipairs(selected_list) do
		if isObjectType(obj,"PlayerSpaceship") then
			table.insert(players_selected,obj)
		end
	end
	local player_list = ""
	if #players_selected == 0 then
		players_selected = getActivePlayerShips()	--select them all
	end
	if #players_selected > 0 then
		addGMFunction("Refresh Probe Button",function()
			for _, p in ipairs(players_selected) do
				refreshSpecialProbeButton(p)
			end
		end)
		local sensor_boost_probe_type_names = {
			"Spectacle",
			"Binoc",
			"Scope",
		}
		local sensor_boost_details = {
			["Spectacle"] = {speed = 1000, range = 30, boost = 10},
			["Binoc"] = {speed = 1000, range = 40, boost = 20},
			["Scope"] = {speed = 1000, range = 50, boost = 30},
		}
		for _, p in ipairs(players_selected) do
			for _, probe_type_name in ipairs(sensor_boost_probe_type_names) do
				local probe_count = 0
				local matching_index = 0
				if p.probe_type_list ~= nil then
					if #p.probe_type_list > 0 then
						for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
							if probe_type_item.name == probe_type_name then
								matching_index = probe_type_index
								break
							end
						end
						if matching_index > 0 then
							probe_count = p.probe_type_list[matching_index].count
						end
					end
				end
				if probe_count > 0 then
					addGMFunction(string.format("%s %s %i-1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count-1),function()
						string.format("")
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count - 1
						cycleProbeType(p)
						local docked_station = p:getDockedWith()
						if docked_station ~= nil then
							local probe_message_options = {
								string.format("%s station personnel conducting routine inspections discovered that one of your %s type probe kits was faulty, removing the defective kit before it could damage %s",docked_station:getCallSign(),probe_type_name,p:getCallSign()),
								string.format("Automated inventory validation systems on %s corrected your inventory on % type probe kits. Your systems showed you had one more than physically present.",docked_station:getCallSign(),probe_type_name),
								string.format("%s introduced a docking fee protocol. After some quick negotiation, you agreed to exchange a %s type probe kit for the fee.",docked_station:getCallSign(),probe_type_name),
							}
							local probe_message = probe_message_options[math.random(1,#probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						else
							local undocked_probe_message_options = {
								string.format("A member of the engineering team just sent you an apologetic message. It seems that while conducting maintenance on a nearby system, they accidentally destroyed one of your %s type probe kits.",probe_type_name),
								string.format("The warranty just expired on one of your %s type probe kits. Rather than risk damage to %s, automated systems have removed the potentially hazardous device.",probe_type_name,p:getCallSign()),
								string.format("Recent engine activity has inadvertently damaged one of the %s type probe kits. The technicians have removed the damaged device for safety purposes.",probe_type_name),
							}
							local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						end
						playerSensorBoostProbes()
					end)
				end
				addGMFunction(string.format("%s %s %i+1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count+1),function()
					string.format("")
					if p.probe_type_list == nil then
						p.probe_type_list = {}
						table.insert(p.probe_type_list,{name = "standard", count = -1})
					end
					if matching_index > 0 then
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count + 1
					else
						table.insert(p.probe_type_list,{name = probe_type_name, count = 1, speed = sensor_boost_details[probe_type_name].speed, boost = sensor_boost_details[probe_type_name].boost, range = sensor_boost_details[probe_type_name].range})
					end
					local docked_station = p:getDockedWith() 
					if docked_station ~= nil then
						local probe_message_options = {
							string.format("One of the younger members of the crew on %s provided you with a %s type probe kit as part of an educational assignment.",docked_station:getCallSign(),probe_type_name),
							string.format("A maintenance technician on %s gave you an extra %s type probe kit.",docked_station:getCallSign(),probe_type_name),
							string.format("You received a semi-automated thank you gift from %s: a %s type probe kit.",docked_station:getCallSign(),probe_type_name),
						}
						local probe_message = probe_message_options[math.random(1,#probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					else
						local undocked_probe_message_options = {
							string.format("A member of the engineering techincal crew fabricated a %s type probe kit and added it to your inventory.",probe_type_name),
							string.format("Ensign Goody Pop took the remains of a replicator failure and created a %s type probe kit for you.",probe_type_name),
							string.format("From the leftovers of a failed academic science project, a crewmember was able to fabricate a %s type probe kit.",probe_type_name),
						}
						local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					end
					p.probe_type = "standard"
					cycleProbeType(p,probe_type_name)
					p.probe_type_button = "probe_type_button"
					p:addCustomButton("Relay",p.probe_type_button,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					p.probe_type_button_ops = "probe_type_button_ops"
					p:addCustomButton("Operations",p.probe_type_button_ops,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					playerSensorBoostProbes()
				end)
			end
		end
	else
		addGMMessage("No players. No action taken")
	end
end
function playerFastProbes()
	clearGMFunctions()
	addGMFunction("-Specialty Probes",playerSpecialtyProbes)
	local selected_list = getGMSelection()
	local players_selected = {}
	for _, obj in ipairs(selected_list) do
		if isObjectType(obj,"PlayerSpaceship") then
			table.insert(players_selected,obj)
		end
	end
	local player_list = ""
	if #players_selected == 0 then
		players_selected = getActivePlayerShips()	--select them all
	end
	if #players_selected > 0 then
		addGMFunction("Refresh Probe Button",function()
			for _, p in ipairs(players_selected) do
				refreshSpecialProbeButton(p)
			end
		end)
		local fast_probe_type_names = {
			"Mark 3",
			"Gogo",
			"Screamer",
		}
		local fast_probe_speeds = {
			["Mark 3"] = 2000,
			["Gogo"] = 3000,
			["Screamer"] = 4000,
		}
		for _, p in ipairs(players_selected) do
			for _, probe_type_name in ipairs(fast_probe_type_names) do
				local probe_count = 0
				local matching_index = 0
				if p.probe_type_list ~= nil then
					if #p.probe_type_list > 0 then
						for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
							if probe_type_item.name == probe_type_name then
								matching_index = probe_type_index
								break
							end
						end
						if matching_index > 0 then
							probe_count = p.probe_type_list[matching_index].count
						end
					end
				end
				if probe_count > 0 then
					addGMFunction(string.format("%s %s %i-1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count-1),function()
						string.format("")
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count - 1
						cycleProbeType(p)
						local docked_station = p:getDockedWith()
						if docked_station ~= nil then
							local probe_message_options = {
								string.format("%s station personnel conducting routine inspections discovered that one of your %s type probe kits was faulty, removing the defective kit before it could damage %s",docked_station:getCallSign(),probe_type_name,p:getCallSign()),
								string.format("Automated inventory validation systems on %s corrected your inventory on % type probe kits. Your systems showed you had one more than physically present.",docked_station:getCallSign(),probe_type_name),
								string.format("%s introduced a docking fee protocol. After some quick negotiation, you agreed to exchange a %s type probe kit for the fee.",docked_station:getCallSign(),probe_type_name),
							}
							local probe_message = probe_message_options[math.random(1,#probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						else
							local undocked_probe_message_options = {
								string.format("A member of the engineering team just sent you an apologetic message. It seems that while conducting maintenance on a nearby system, they accidentally destroyed one of your %s type probe kits.",probe_type_name),
								string.format("The warranty just expired on one of your %s type probe kits. Rather than risk damage to %s, automated systems have removed the potentially hazardous device.",probe_type_name,p:getCallSign()),
								string.format("Recent engine activity has inadvertently damaged one of the %s type probe kits. The technicians have removed the damaged device for safety purposes.",probe_type_name),
							}
							local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
							p.probe_message_relay = "probe_message_relay"
							p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
							p.probe_message_ops = "probe_message_ops"
							p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
						end
						playerFastProbes()
					end)
				end
				addGMFunction(string.format("%s %s %i+1=%i",p:getCallSign(),probe_type_name,probe_count,probe_count+1),function()
					string.format("")
					if p.probe_type_list == nil then
						p.probe_type_list = {}
						table.insert(p.probe_type_list,{name = "standard", count = -1})
					end
					if matching_index > 0 then
						p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count + 1
					else
						table.insert(p.probe_type_list,{name = probe_type_name, count = 1, speed = fast_probe_speeds[probe_type_name]})
					end
					local docked_station = p:getDockedWith() 
					if docked_station ~= nil then
						local probe_message_options = {
							string.format("One of the younger members of the crew on %s provided you with a %s type probe kit as part of an educational assignment.",docked_station:getCallSign(),probe_type_name),
							string.format("A maintenance technician on %s gave you an extra %s type probe kit.",docked_station:getCallSign(),probe_type_name),
							string.format("You received a semi-automated thank you gift from %s: a %s type probe kit.",docked_station:getCallSign(),probe_type_name),
						}
						local probe_message = probe_message_options[math.random(1,#probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					else
						local undocked_probe_message_options = {
							string.format("A member of the engineering techincal crew fabricated a %s type probe kit and added it to your inventory.",probe_type_name),
							string.format("Ensign Goody Pop took the remains of a replicator failure and created a %s type probe kit for you.",probe_type_name),
							string.format("From the leftovers of a failed academic science project, a crewmember was able to fabricate a %s type probe kit.",probe_type_name),
						}
						local probe_message = undocked_probe_message_options[math.random(1,#undocked_probe_message_options)]
						p.probe_message_relay = "probe_message_relay"
						p:addCustomMessage("Relay",p.probe_message_relay,probe_message)
						p.probe_message_ops = "probe_message_ops"
						p:addCustomMessage("Operations",p.probe_message_ops,probe_message)
					end
					p.probe_type = "standard"
					cycleProbeType(p,probe_type_name)
					p.probe_type_button = "probe_type_button"
					p:addCustomButton("Relay",p.probe_type_button,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					p.probe_type_button_ops = "probe_type_button_ops"
					p:addCustomButton("Operations",p.probe_type_button_ops,"Probes: standard",function()
						string.format("")
						cycleProbeType(p)
					end,10)
					playerFastProbes()
				end)
			end
		end
	else
		addGMMessage("No players. No action taken")
	end
end
--	************************************************************************************************  --
--	****				Initial Set Up Player Ships Tweak Player Tweak Relay Cargo				****  --
--	************************************************************************************************  --
-----------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Cargo > Remove Cargo  --
-----------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -CARGO FROM DEL		F	changePlayerCargo
-- One button for each type of cargo in the selected player ship
function removeCargo()
	clearGMFunctions()
	addGMFunction("-Cargo From Del",changePlayerCargo)
	local p = playerShipSelected()
	if p ~= nil then
		if p.goods ~= nil then
			local cargo_found = false
			for good, good_quantity in pairs(p.goods) do
				if good_quantity > 0 then
					cargo_found = true
					addGMFunction(good,function()
						p.goods[good] = p.goods[good] - 1
						p.cargo = p.cargo + 1
						addGMMessage(string.format("one %s removed",good))
						removeCargo()
					end)
				end
			end
			if not cargo_found then
				addGMMessage("selected player has no cargo to delete")
				changePlayerCargo()
			end
		else
			addGMMessage("selected player has no cargo to delete")
			changePlayerCargo()
		end
	else
		addGMMessage("No player selected. No action taken")
		changePlayerCargo()
	end
end
----------------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Cargo > Add Mineral Cargo  --
----------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -CARGO FROM ADD		F	changePlayerCargo
-- One button for each mineral cargo type
function addMineralCargo()
	clearGMFunctions()
	addGMFunction("-Cargo From Add",changePlayerCargo)
	local p = playerShipSelected()
	if p ~= nil then
		for _, good in pairs(mineralGoods) do
			addGMFunction(good,function()
				if p.cargo > 0 then
					if p.goods == nil then
						p.goods = {}
					end
					if p.goods[good] == nil then
						p.goods[good] = 0
					end
					p.goods[good] = p.goods[good] + 1
					p.cargo = p.cargo - 1
					addGMMessage(string.format("one %s added",good))
				else
					addGMMessage("Insufficient cargo space")
					changePlayerCargo()
					return
				end
				addMineralCargo()			
			end)
		end
	else
		addGMMessage("No player selected. No action taken")
		changePlayerCargo()
	end
end
------------------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Tweak Relay > Cargo > Add Component Cargo  --
------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -CARGO FROM ADD		F	changePlayerCargo
-- One button for each component cargo type
function addComponentCargo()
	clearGMFunctions()
	addGMFunction("-Cargo From Add",changePlayerCargo)
	local p = playerShipSelected()
	if p ~= nil then
		for _, good in pairs(componentGoods) do
			addGMFunction(good,function()
				if p.cargo > 0 then
					if p.goods == nil then
						p.goods = {}
					end
					if p.goods[good] == nil then
						p.goods[good] = 0
					end
					p.goods[good] = p.goods[good] + 1
					p.cargo = p.cargo - 1
					addGMMessage(string.format("one %s added",good))
				else
					addGMMessage("Insufficient cargo space")
				end
				addComponentCargo()			
			end)
		end
	else
		addGMMessage("No player selected. No action taken")
	end
end
function addArbitraryCargo()
	clearGMFunctions()
	addGMFunction("-Main from Arbitrary",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Tweak Relay",tweakRelay)
	addGMFunction("-Cargo From Arbitrary",changePlayerCargo)
	if cargo_source_object == nil then
		addGMFunction("+Sel Src Cargo Obj",changeCargoSourceObject)
	else
		if cargo_source_object:isValid() then
			addGMFunction("+Chg Src Cargo Obj",changeCargoSourceObject)
		else
			addGMFunction("+Sel Src Cargo Obj",changeCargoSourceObject)
		end
	end
	if player_to_get_cargo == nil then
		addGMFunction("+Select Cargo Player",function()
			local p = playerShipSelected()
			if p ~= nil then
				player_to_get_cargo = p
			else
				addGMMessage("No player selected. No action taken")
			end
			addArbitraryCargo()
		end)
	else
		local button_label = "+Select Cargo Player"
		if player_to_get_cargo:isValid() then
			button_label = string.format("+Chg %s",player_to_get_cargo:getCallSign())
		end
		addGMFunction(button_label,function()
			local p = playerShipSelected()
			if p ~= nil then
				player_to_get_cargo = p
			else
				addGMMessage("No player selected. No action taken")
			end
			addArbitraryCargo()
		end)
	end
	if player_to_get_cargo ~= nil and player_to_get_cargo:isValid() and cargo_source_object ~= nil and cargo_source_object:isValid() then
		addGMFunction("Test Selections",function()
			local out = "Clicking the Add Cargo button will cause cargo of type"
			addGMMessage(string.format("Clicking the Add Cargo button will cause cargo of type\n%s\nto be added to player ship\n%s",cargo_source_object:getDescription(),player_to_get_cargo:getCallSign()))
			addArbitraryCargo()
		end)
		addGMFunction("Add Cargo",function()
			local p = player_to_get_cargo
			local good = cargo_source_object:getDescription()
			if p.cargo > 0 then
				if p.goods == nil then
					p.goods = {}
				end
				if p.goods[good] == nil then
					p.goods[good] = 0
				end
				p.goods[good] = p.goods[good] + 1
				p.cargo = p.cargo - 1
				addGMMessage(string.format("one %s added",good))
			else
				addGMMessage("Insufficient cargo space")
			end
		end)
	end
end
function changeCargoSourceObject()
	local object_list = getGMSelection()
	if object_list ~= nil then
		if #object_list == 1 then
			cargo_source_object = object_list[1]
			local source = cargo_source_object:getDescription()
			if source ~= nil then
				player_cargo_name_source = source
			end
			addGMMessage(string.format("Object in %s selected to identify cargo name source.\nplace cargo name text in unscanned description field",cargo_source_object:getSectorName()))
		else
			addGMMessage("Select only one object to use to identify cargo name source via its unscanned description field. No action taken")
		end
	else
		addGMMessage("Select an object to use to identify cargo name source via its unscanned description field. No action taken")
	end 
	addArbitraryCargo()
end
--	************************************************************************************************  --
--	****				Initial Set Up Player Ships Tweak Player Ship Log Message				****  --
--	************************************************************************************************  --
----------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Ship Log Message > Message Source  --
----------------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FROM SHIP MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -PLAYER MESSAGE		F	playerMessage
-- -SHIP LOG MSG		F	playerShipLogMessage
-- UNKNOWN				*	inline
-- +INPUT				D*	inputMessageSource
-- List of stations and ships, inline function for each
function playerMessageSource()
	clearGMFunctions()
	addGMFunction("-Main Frm Msg Src",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	addGMFunction("-Ship Log Msg",playerShipLogMessage)
	local button_label = "Unknown"
	if type(player_message_source) == "string" and player_message_source == "Unknown" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		player_message_source = "Unknown"
		playerMessageSource()
	end)
	button_label = "+Input"
	if type(player_message_source) == "string" and player_message_source ~= "Unknown" then
		button_label = string.format("+%s*",player_message_source)
	end
	addGMFunction(button_label,inputMessageSource)
	local stations_and_ships = {}
	for _, station in pairs(regionStations) do
		if station ~= nil and station:isValid() then
			table.insert(stations_and_ships,{object=station,name=station:getCallSign()})
		end
	end
	if region_ships ~= nil then
		for _, ship in pairs(region_ships) do
			if ship ~= nil and ship:isValid() then
				table.insert(stations_and_ships,{object=ship,name=ship:getCallSign()})
			end
		end
	end
	for _, station in pairs(skeleton_stations) do
		if station ~= nil and station:isValid() then
			table.insert(stations_and_ships,{object=station,name=station:getCallSign()})
		end
	end
	table.sort(stations_and_ships,function(a,b)
		return a.name < b.name
	end)
	for _,item in ipairs(stations_and_ships) do
		button_label = item.name
		if type(player_message_source) == "table" and player_message_source == item.object then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			player_message_source = item.object
			playerMessageSource()
		end)
	end
end
------------------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Ship Log Message > Message Source > Input  --
------------------------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FROM SHIP MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -PLAYER MESSAGE		F	playerMessage
-- -SHIP LOG MSG		F	playerShipLogMessage
-- -MSG SOURCE			F	playerMessageSource
-- +SEL SRC MSG OBJ		D	changeMessageSourceObject
function inputMessageSource()
	clearGMFunctions()
	addGMFunction("-Main Frm Input Src",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	addGMFunction("-Ship Log Msg",playerShipLogMessage)
	addGMFunction("-Msg Source",playerMessageSource)
	if message_source_object == nil then
		addGMFunction("+Sel Src Msg Obj",changeMessageSourceObject)
	else
		addGMFunction("+Chg Src Msg Obj",changeMessageSourceObject)
	end
end
function changeMessageSourceObject()
	local object_list = getGMSelection()
	if object_list ~= nil then
		if #object_list == 1 then
			message_source_object = object_list[1]
			local source = message_source_object:getDescription()
			if source ~= nil then
				player_message_source = source
			end
			addGMMessage(string.format("Object in %s selected to identify message source.\nplace message source text in description field",message_source_object:getSectorName()))
		else
			addGMMessage("Select only one object to use to identify message source via its description field. No action taken")
		end
	else
		addGMMessage("Select an object to use to identify message source via its description field. No action taken")
	end 
end
-------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Ship Log Message > Color  --
-------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FROM SHIP MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -PLAYER MESSAGE		F	playerMessage
-- -PLYR SHP LOG MSG	F	playerShipLogMessage
-- List of colors		D*	inline per color
function setPlayerShipLogMessageColor()
	clearGMFunctions()
	addGMFunction("-Main From Ship Msg",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	addGMFunction("-Plyr Shp Log Msg",playerShipLogMessage)
	for id, name in pairs(color_list) do
		local button_label = name
		if id == player_ship_log_message_color then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			player_ship_log_message_color = id
			setPlayerShipLogMessageColor()
		end)
	end
end
-------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Ship Log Message > Destination  --
-------------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FROM SHIP MSG	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -PLAYER MESSAGE		F	playerMessage
-- -PLYR SHIP LOG MSG	F	playerShipLogMessage
-- ALL					*	inline
-- Player ship list		*	inline per ship
function setPlayerShipMessageDestination()
	clearGMFunctions()
	addGMFunction("-Main Frm Msg Dstn",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Player Message",playerMessage)
	if set_player_ship_message_destination_caller == playerShipLogMessage then
		addGMFunction("-Plyr Ship Log Msg",playerShipLogMessage)
	else
		addGMFunction("-Plyr Hail Msg",playerHailMessage)
	end
	local button_label = "All"
	if type(player_ship_message_destination) == "string" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		player_ship_message_destination = "All"
		setPlayerShipMessageDestination()
	end)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			button_label = p:getCallSign()
			if type(player_ship_message_destination) == "table" and p == player_ship_message_destination then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				player_ship_message_destination = p
				setPlayerShipMessageDestination()
			end)
		end
	end
end
----------------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Console Message > Send to console  --
----------------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM CONSOLE	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MESSAGE				F	playerConsoleMessage
-- HELM					F	inline
-- WEAPONS				F	inline
-- ENGINEERING			F	inline
-- SCIENCE				F	inline
-- RELAY				F	inline
function sendPlayerConsoleMessage()
	clearGMFunctions()
	addGMFunction("-Main Frm Console",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Message",playerConsoleMessage)
	addGMFunction("Helm",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Helms",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to helm console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Weapons",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Weapons",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to weapons console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Engineering",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Engineering",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to engineering console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Science",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Science",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to science console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Relay",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Relay",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Relay console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Tactical",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Tactical",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Tactical console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Operations",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Operations",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Operations console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Engineering Plus",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Engineering+",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Engineering Plus console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Strategic Map",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("altRelay",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Strategic Map console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Power Management",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("PowerManagement",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Power Management console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Damage Control",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("DamageControl",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Damage Control console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Ship Log",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("ShipLog",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Ship Log console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
	addGMFunction("Database",function()
		local p = playerShipSelected()
		if p ~= nil then
			local console_message = "console_message"
			p:addCustomMessage("Database",console_message,message_object:getDescription())
			addGMMessage(string.format("Message sent to Database console on %s:\n%s",p:getCallSign(),message_object:getDescription()))
		else
			addGMMessage("Player ship not selected. No action taken")
		end
		sendPlayerConsoleMessage()
	end)
end
----------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Reactor  --
----------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM REACTOR	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxReactor()
	clearGMFunctions()
	addGMFunction("-Main Frm Reactor",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("reactor") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("reactor"),p:getSystemHealthMax("reactor") + .05),function()
				p:setSystemHealthMax("reactor",p:getSystemHealthMax("reactor") + .05)
				changePlayerMaxReactor()
			end)
		end
		if p:getSystemHealthMax("reactor") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("reactor"),p:getSystemHealthMax("reactor") - .05),function()
				p:setSystemHealthMax("reactor",p:getSystemHealthMax("reactor") - .05)
				changePlayerMaxReactor()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxReactor)
	end
end
-------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Beam  --
-------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM BEAM		F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxBeam()
	clearGMFunctions()
	addGMFunction("-Main Frm Beam",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("beamweapons") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("beamweapons"),p:getSystemHealthMax("beamweapons") + .05),function()
				p:setSystemHealthMax("beamweapons",p:getSystemHealthMax("beamweapons") + .05)
				changePlayerMaxBeam()
			end)
		end
		if p:getSystemHealthMax("beamweapons") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("beamweapons"),p:getSystemHealthMax("beamweapons") - .05),function()
				p:setSystemHealthMax("beamweapons",p:getSystemHealthMax("beamweapons") - .05)
				changePlayerMaxBeam()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxBeam)
	end
end
----------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Missile  --
----------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM MISSILE	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxMissile()
	clearGMFunctions()
	addGMFunction("-Main Frm Missile",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("missilesystem") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("missilesystem"),p:getSystemHealthMax("missilesystem") + .05),function()
				p:setSystemHealthMax("missilesystem",p:getSystemHealthMax("missilesystem") + .05)
				changePlayerMaxMissile()
			end)
		end
		if p:getSystemHealthMax("missilesystem") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("missilesystem"),p:getSystemHealthMax("missilesystem") - .05),function()
				p:setSystemHealthMax("missilesystem",p:getSystemHealthMax("missilesystem") - .05)
				changePlayerMaxMissile()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxMissile)
	end
end
------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Maneuver  --
------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM MANEUVER	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxManeuver()
	clearGMFunctions()
	addGMFunction("-Main Frm Maneuver",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("maneuver") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("maneuver"),p:getSystemHealthMax("maneuver") + .05),function()
				p:setSystemHealthMax("maneuver",p:getSystemHealthMax("maneuver") + .05)
				changePlayerMaxManeuver()
			end)
		end
		if p:getSystemHealthMax("maneuver") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("maneuver"),p:getSystemHealthMax("maneuver") - .05),function()
				p:setSystemHealthMax("maneuver",p:getSystemHealthMax("maneuver") - .05)
				changePlayerMaxManeuver()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxManeuver)
	end
end
----------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Impulse  --
----------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM IMPULSE	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxImpulse()
	clearGMFunctions()
	addGMFunction("-Main Frm Impulse",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("impulse") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("impulse"),p:getSystemHealthMax("impulse") + .05),function()
				p:setSystemHealthMax("impulse",p:getSystemHealthMax("impulse") + .05)
				changePlayerMaxImpulse()
			end)
		end
		if p:getSystemHealthMax("impulse") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("impulse"),p:getSystemHealthMax("impulse") - .05),function()
				p:setSystemHealthMax("impulse",p:getSystemHealthMax("impulse") - .05)
				changePlayerMaxImpulse()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxImpulse)
	end
end
-------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Warp  --
-------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM WARP		F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxWarp()
	clearGMFunctions()
	addGMFunction("-Main Frm Warp",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("warp") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("warp"),p:getSystemHealthMax("warp") + .05),function()
				p:setSystemHealthMax("warp",p:getSystemHealthMax("warp") + .05)
				changePlayerMaxWarp()
			end)
		end
		if p:getSystemHealthMax("warp") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("warp"),p:getSystemHealthMax("warp") + .05),function()
				p:setSystemHealthMax("warp",p:getSystemHealthMax("warp") - .05)
				changePlayerMaxWarp()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxWarp)
	end
end
-------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Jump  --
-------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM JUMP		F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxJump()
	clearGMFunctions()
	addGMFunction("-Main Frm Jump",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("jumpdrive") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("jumpdrive"),p:getSystemHealthMax("jumpdrive") + .05),function()
				p:setSystemHealthMax("jumpdrive",p:getSystemHealthMax("jumpdrive") + .05)
				changePlayerMaxJump()
			end)
		end
		if p:getSystemHealthMax("jumpdrive") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("jumpdrive"),p:getSystemHealthMax("jumpdrive") - .05),function()
				p:setSystemHealthMax("jumpdrive",p:getSystemHealthMax("jumpdrive") - .05)
				changePlayerMaxJump()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxJump)
	end
end
---------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Front Shield  --
---------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM F.SHIELD	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxFrontShield()
	clearGMFunctions()
	addGMFunction("-Main Frm F.Shield",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("frontshield") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("frontshield"),p:getSystemHealthMax("frontshield") + .05),function()
				p:setSystemHealthMax("frontshield",p:getSystemHealthMax("frontshield") + .05)
				changePlayerMaxFrontShield()
			end)
		end
		if p:getSystemHealthMax("frontshield") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("frontshield"),p:getSystemHealthMax("frontshield") - .05),function()
				p:setSystemHealthMax("frontshield",p:getSystemHealthMax("frontshield") - .05)
				changePlayerMaxFrontShield()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxFrontShield)
	end
end
--------------------------------------------------------------------------------
--	Initial Set Up > Player Ships > Tweak Player > Max System  > Rear Shield  --
--------------------------------------------------------------------------------
-- Button text		   FD*	Related Function(s)
-- -MAIN FRM R.SHIELD	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -TWEAK PLAYER		F	tweakPlayerShip
-- -MAX SYSTEM			F	changePlayerMaxSystem
-- V FROM 1.00 TO 0.95	D	inline
function changePlayerMaxRearShield()
	clearGMFunctions()
	addGMFunction("-Main Frm R.Shield",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Tweak Player",tweakPlayerShip)
	addGMFunction("-Max System",changePlayerMaxSystem)
	local p = playerShipSelected()
	if p ~= nil then
		if p:getSystemHealthMax("rearshield") < 1 then
			addGMFunction(string.format("^ From %.2f to %.2f",p:getSystemHealthMax("rearshield"),p:getSystemHealthMax("rearshield") + .05),function()
				p:setSystemHealthMax("rearshield",p:getSystemHealthMax("rearshield") + .05)
				changePlayerMaxRearShield()
			end)
		end
		if p:getSystemHealthMax("rearshield") > -1 then
			addGMFunction(string.format("V From %.2f to %.2f",p:getSystemHealthMax("rearshield"),p:getSystemHealthMax("rearshield") - .05),function()
				p:setSystemHealthMax("rearshield",p:getSystemHealthMax("rearshield") - .05)
				changePlayerMaxRearShield()
			end)
		end
	else
		addGMFunction("+Select Player",changePlayerMaxRearShield)
	end
end
--	****************************************************************
--	****				Initial Set Up Player Ships				****  --
--	****************************************************************
----------------------------------------------------
--	Support the creation of various player ships  --
----------------------------------------------------
--	Models with specific weapons emplacements: 
--		Atlantis			battleship_destroyer_1_upgraded
--			4 beams (negative, positive, negative, positive)
--			2 tubes (negative then positive)
--		Phobos				AtlasHeavyFighter
--			2 beams (positive then negative)
--			3 tubes (positive then negative then rear for mine)
--		Hornet				WespeScout
--			2 beams (positive then negative)
--		Player Cruiser		battleship_destroyer_5_upgraded	
--			2 beams (negative then positive)
--			2 tubes (centered, but -Z values)
--		Player Misslie Cr.	space_cruiser_4
--			2 tubes (negative then positive)
--		Player Fighter		small_fighter_1
--			1 beam (centered, but negative z)
--		Striker				dark_fighter_6
--			2 beams (negative then positive)
--		ZX-Lindworm			LindwurmFighter
--			3 tubes (center, positive, negative)
--		(none)				space_frigate_6
--			2 beams (negative then positive)
--			2 tubes (centered but negative z)
--		(none) Corsair DX	battleship_destroyer_2_upgraded
--			6 beams (neg, pos, neg, pos, neg, pos)
--		Blockade Runner		battleship_destroyer_3_upgraded
--			4 beams (pos, neg, pos, neg)
--		Starhammer			battleship_destroyer_4_upgraded
--			2 beams (neg, pos)
--			2 tubes (neg, pos)
--		Battlestation		Ender Battlecruiser
--			12 beams (2neg, 2pos, 2neg, 2pos, 2neg, 2pos)	
--		Adder				AdlerLongRangeScout
--			3 beams (centered, pos, neg
--			1 tube (centered, positive z)
function createPlayerShipAmbition()
	--first version destroyed 1Feb2020, version 2 reduced hull strength
	playerAmbition = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Ambition")
	setBeamColor(playerAmbition)
	playerAmbition:setTypeName("Phobos T2")
	playerAmbition:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerAmbition:setHullMax(150)							--weaker hull (vs 200)
	playerAmbition:setHull(150)
	playerAmbition:setJumpDrive(true)						--jump drive (vs none)
	playerAmbition.max_jump_range = 25000					--shorter than typical (vs 50)
	playerAmbition.min_jump_range = 2000					--shorter than typical (vs 5)
	playerAmbition:setJumpDriveRange(playerAmbition.min_jump_range,playerAmbition.max_jump_range)
	playerAmbition:setJumpDriveCharge(playerAmbition.max_jump_range)
--                 				   Arc, Dir, Range, CycleTime, Dmg
	playerAmbition:setBeamWeapon(0, 10,  15,  1200,         8, 6)	--uncrossed (vs crossed)
	playerAmbition:setBeamWeapon(1, 10, -15,  1200,         8, 6)
--										 Arc, Dir, Rotate speed
	playerAmbition:setBeamWeaponTurret(0, 90,  15, .2)		--slow turret beams
	playerAmbition:setBeamWeaponTurret(1, 90, -15, .2)
	playerAmbition:setWeaponTubeCount(4)					--one more tube (vs 3)
	playerAmbition:setWeaponTubeDirection(0,0)				--straight (vs angled)
	playerAmbition:setWeaponTubeDirection(1,0)				--straight (vs angled)
	playerAmbition:setWeaponTubeDirection(2,0)				--forward (vs rear)
	playerAmbition:setWeaponTubeDirection(3,180)			--rear (vs none)
	playerAmbition:setWeaponTubeExclusiveFor(0,"HVLI")		--only HVLI (vs any)
	playerAmbition:setWeaponTubeExclusiveFor(1,"HVLI")		--only HVLI (vs any)
	playerAmbition:setWeaponTubeExclusiveFor(2,"HVLI")
	playerAmbition:setWeaponTubeExclusiveFor(3,"Mine")
	playerAmbition:weaponTubeAllowMissle(2,"Homing")
	playerAmbition:weaponTubeAllowMissle(2,"Nuke")
	playerAmbition:weaponTubeAllowMissle(2,"EMP")
	playerAmbition:setTubeSize(0,"small")					--small (vs normal)
	playerAmbition:setTubeSize(1,"small")					--small (vs normal)
	playerAmbition:setTubeLoadTime(2, 15)					--slower (vs 10)
	playerAmbition:setTubeLoadTime(3, 20)					--slower (vs 10)
	playerAmbition:setWeaponStorageMax("Homing",6)			--reduce homing storage (vs 10)
	playerAmbition:setWeaponStorage("Homing",6)
	playerAmbition:setSystemCoolantRate("reactor",		1.3)	--more (vs 1.2)
	playerAmbition:setSystemCoolantRate("beamweapons",	1.1)	--less (vs 1.2)
	playerAmbition:setSystemCoolantRate("maneuver",		1.05)	--less (vs 1.2)
	playerAmbition:setSystemCoolantRate("impulse",		1.1)	--less (vs 1.2)
	playerAmbition:setSystemCoolantRate("frontshield",	1.05)	--less (vs 1.2)
	playerAmbition:setSystemCoolantRate("rearshield",	1.15)	--less (vs 1.2)
	playerAmbition:setSystemPowerRate("reactor",		0.40)	--more (vs 0.30)
	playerAmbition:setSystemPowerRate("beamweapons",	0.275)	--less (vs 0.30)
	playerAmbition:setSystemPowerRate("maneuver",		0.225)	--less (vs 0.30)
	playerAmbition:setSystemPowerRate("impulse",		0.25)	--less (vs 0.30)
	playerAmbition:setSystemPowerRate("frontshield",	0.225)	--less (vs 0.30)
	playerAmbition:setSystemPowerRate("rearshield",		0.325)	--more (vs 0.30)
	playerAmbition:onTakingDamage(playerShipDamage)
	playerAmbition:addReputationPoints(50)
	return playerAmbition
end
function createPlayerShipAnvil()
	playerAnvil = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Anvil")
	setBeamColor(playerAnvil)
	playerAnvil:setTypeName("Deimos")
	playerAnvil:setWarpDrive(true)						--warp drive (vs none)
	playerAnvil:setWarpSpeed(450)
	playerAnvil:setShieldsMax(150, 80)					--asymmetric shields (vs 100, 100)
	playerAnvil:setShields(150, 80)
	playerAnvil:setHullMax(180)							--weaker hull (vs 200)
	playerAnvil:setHull(180)
	playerAnvil:setRotationMaxSpeed(15)					--faster spin (vs 10)
	playerAnvil:setAcceleration(30,25)					--faster (vs 20/20)
	playerAnvil:setImpulseMaxSpeed(80,72)				--slower reverse impulse (vs 80)
--                 				 Arc, Dir, Range,   CycleTime,  Damage
	playerAnvil:setBeamWeapon(0,  60,  20,	1200, 		  4.5,	5.5)	--narrower (vs 90), faster (vs 8), weaker (vs 6)
	playerAnvil:setBeamWeapon(1,  60, -20,	1200, 		  4.5,	5.5)	
	playerAnvil:setBeamWeapon(2,  10,   0,	1500, 		    6,	2.5)
--										Arc,  Dir, Rotate speed
	playerAnvil:setBeamWeaponTurret(2,	160,    0,			1)	
	playerAnvil:setWeaponTubeCount(6)					--more (vs 3)
	playerAnvil:setWeaponTubeDirection(0,  4)			--right with more angle (vs left -1)
	playerAnvil:setWeaponTubeDirection(1, -4)			--left with more angle (vs right 1)
	playerAnvil:setTubeSize(0,"large")					--large (vs medium)
	playerAnvil:setTubeSize(1,"large")					--large (vs medium)
	playerAnvil:setWeaponTubeExclusiveFor(0,"Homing")	--homing only (vs any)
	playerAnvil:setWeaponTubeExclusiveFor(1,"Homing")	--homing only (vs any)
	playerAnvil:setTubeLoadTime(0,20)					--slower (vs 10)
	playerAnvil:setTubeLoadTime(1,20)					--slower (vs 10)
	playerAnvil:setWeaponTubeDirection(2,   0)			--forward (vs rear)
	playerAnvil:setTubeSize(2,"small")					--small (vs medium)
	playerAnvil:setTubeLoadTime(2,8)					--faster (vs 10)
	playerAnvil:setWeaponTubeExclusiveFor(2,"EMP")		--EMP only (vs mine)
	playerAnvil:setWeaponTubeDirection(3,  90)			
	playerAnvil:setWeaponTubeDirection(4, -90)
	playerAnvil:setWeaponTubeExclusiveFor(3,"HVLI")
	playerAnvil:weaponTubeAllowMissle(3,"Homing")
	playerAnvil:weaponTubeAllowMissle(3,"Nuke")
	playerAnvil:weaponTubeAllowMissle(3,"EMP")
	playerAnvil:setWeaponTubeExclusiveFor(4,"HVLI")
	playerAnvil:weaponTubeAllowMissle(4,"Homing")
	playerAnvil:weaponTubeAllowMissle(4,"Nuke")
	playerAnvil:weaponTubeAllowMissle(4,"EMP")
	playerAnvil:setWeaponTubeDirection(5,180)
	playerAnvil:setWeaponTubeExclusiveFor(5,"Mine")
	playerAnvil:setTubeLoadTime(5,15)					--slower (vs 10)
	playerAnvil:setWeaponStorageMax("EMP", 6)			--more (vs 3)
	playerAnvil:setWeaponStorage("EMP", 6)
	playerAnvil:onTakingDamage(playerShipDamage)
	playerAnvil:addReputationPoints(50)
	return playerAnvil
end
function createPlayerShipArgonaut()
	playerArgonaut = PlayerSpaceship():setTemplate("Nautilus"):setFaction("Human Navy"):setCallSign("Argonaut")
	setBeamColor(playerArgonaut)
	playerArgonaut:setTypeName("Nusret")
	playerArgonaut.max_jump_range = 25000					--shorter than typical (vs 50)
	playerArgonaut.min_jump_range = 2500					--shorter than typical (vs 5)
	playerArgonaut:setJumpDriveRange(playerArgonaut.min_jump_range,playerArgonaut.max_jump_range)
	playerArgonaut:setJumpDriveCharge(playerArgonaut.max_jump_range)
	playerArgonaut:setShieldsMax(100, 100)					--stronger shields (vs 60, 60)
	playerArgonaut:setShields(100, 100)
	playerArgonaut:setWeaponTubeDirection(0,-60)			--front left facing (vs back)
	playerArgonaut:setWeaponTubeDirection(1, 60)			--front right facing (vs back)
	playerArgonaut:setWeaponTubeExclusiveFor(0,"Homing")	--Homing only (vs Mine)
	playerArgonaut:setWeaponTubeExclusiveFor(1,"Homing")	--Homing only (vs Mine)
	playerArgonaut:setWeaponStorageMax("Homing",8)			--more homing (vs 0)
	playerArgonaut:setWeaponStorage("Homing", 8)				
	playerArgonaut:setWeaponStorageMax("Mine",8)			--fewer mines (vs 12)
	playerArgonaut:setWeaponStorage("Mine", 8)				
	playerArgonaut:onTakingDamage(playerShipDamage)
	playerArgonaut:addReputationPoints(50)
	return playerArgonaut
end
function createPlayerShipArwine()
	--destroyed 14Dec2019
	playerArwine = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Arwine")
	setBeamColor(playerArwine)
	playerArwine:setTypeName("Pacu")
	playerArwine:setRepairCrewCount(6)						--more repair crew (vs 2)
	playerArwine.max_jump_range = 25000						--shorter than typical (vs 50)
	playerArwine.min_jump_range = 2000						--shorter than typical (vs 5)
	playerArwine:setJumpDriveRange(playerArwine.min_jump_range,playerArwine.max_jump_range)
	playerArwine:setJumpDriveCharge(playerArwine.max_jump_range)
	playerArwine:setImpulseMaxSpeed(70)						--faster impulse max (vs 40)
	playerArwine:setHullMax(150)							--stronger hull (vs 120)
	playerArwine:setHull(150)
	playerArwine:setShieldsMax(150,150)						--stronger shields (vs 70, 70)
	playerArwine:setShields(150,150)
	playerArwine:setBeamWeapon(0, 10, 0, 1200.0, 4.0, 4)	--one beam (vs 0)
	playerArwine:setBeamWeaponTurret(0, 80, 0, .3)			--slow turret
	playerArwine:setWeaponTubeCount(7)						--one fewer mine tube, but EMPs added
	playerArwine:setWeaponTubeDirection(6, 180)				--mine tube points straight back
	playerArwine:setWeaponTubeExclusiveFor(0,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(1,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(2,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(3,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(4,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(5,"HVLI")
	playerArwine:setWeaponTubeExclusiveFor(6,"Mine")
	playerArwine:weaponTubeAllowMissle(1,"Homing")
	playerArwine:weaponTubeAllowMissle(1,"EMP")
	playerArwine:weaponTubeAllowMissle(1,"Nuke")
	playerArwine:weaponTubeAllowMissle(4,"Homing")
	playerArwine:weaponTubeAllowMissle(4,"EMP")
	playerArwine:weaponTubeAllowMissle(4,"Nuke")
	playerArwine:setWeaponStorageMax("EMP",4)				--more EMPs (vs 0)
	playerArwine:setWeaponStorage("EMP", 4)					
	playerArwine:setWeaponStorageMax("Nuke",4)				--fewer Nukes (vs 6)
	playerArwine:setWeaponStorage("Nuke", 4)				
	playerArwine:setSystemCoolantRate("reactor",		1.3)	--more (vs 1.2)
	playerArwine:setSystemCoolantRate("beamweapons",	1.15)	--less (vs 1.2)
	playerArwine:setSystemCoolantRate("missilesystem",	1.0)	--less (vs 1.2)
	playerArwine:setSystemCoolantRate("maneuver",		1.15)	--less (vs 1.2)
	playerArwine:setSystemCoolantRate("impulse",		1.35)	--more (vs 1.2) pump is here
	playerArwine:setSystemCoolantRate("frontshield",	1.3)	--more (vs 1.2)
	playerArwine:setSystemCoolantRate("rearshield",		1.0)	--less (vs 1.2)
	playerArwine:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerArwine:setSystemPowerRate("beamweapons",		0.275)	--less (vs 0.30)
	playerArwine:setSystemPowerRate("missilesystem",	0.2)	--less (vs 0.30)
	playerArwine:setSystemPowerRate("maneuver",			0.275)	--less (vs 0.30)
	playerArwine:setSystemPowerRate("impulse",			0.375)	--more (vs 0.30)
	playerArwine:setSystemPowerRate("jumpdrive",		0.325)	--more (vs 0.30)
	playerArwine:setSystemPowerRate("frontshield",		0.35)	--more (vs 0.30)
	playerArwine:setSystemPowerRate("rearshield",		0.2)	--less (vs 0.30)
	playerArwine:onTakingDamage(playerShipDamage)
	playerArwine:addReputationPoints(50)
	return playerArwine
end
function createPlayerShipBarracuda()
	--destroyed 8feb2020
	--clone of Headhunter
	playerBarracuda = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Barracuda")
	setBeamColor(playerBarracuda)
	playerBarracuda:setTypeName("Redhook")
	playerBarracuda:setRepairCrewCount(4)						--more repair crew (vs 2)
	playerBarracuda.max_jump_range = 30000						--shorter than typical (vs 50)
	playerBarracuda.min_jump_range = 3000						--shorter than typical (vs 5)
	playerBarracuda:setJumpDriveRange(playerBarracuda.min_jump_range,playerBarracuda.max_jump_range)
	playerBarracuda:setJumpDriveCharge(playerBarracuda.max_jump_range)
	playerBarracuda:setSystemPowerFactor("jumpdrive",4)			--more efficient (vs 5)
	playerBarracuda:setHullMax(140)								--stronger hull (vs 120)
	playerBarracuda:setHull(140)
	playerBarracuda:setShieldsMax(120, 120)						--stronger shields (vs 70, 70)
	playerBarracuda:setShields(120, 120)
	playerBarracuda:setBeamWeapon(0, 10, 0, 1000.0, 4.0, 4)		--one beam (vs 0)
	playerBarracuda:setBeamWeaponTurret(0, 80, 0, .5)			--slow turret 
	playerBarracuda:setWeaponTubeCount(7)						--one fewer mine tube, but EMPs added
	playerBarracuda:setWeaponTubeDirection(6, 180)				--mine tube points straight back
	playerBarracuda:setWeaponTubeExclusiveFor(0,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(1,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(2,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(3,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(4,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(5,"HVLI")
	playerBarracuda:setWeaponTubeExclusiveFor(6,"Mine")
	playerBarracuda:setTubeSize(0,"small")						--small (vs large)
	playerBarracuda:setTubeSize(3,"small")						--small (vs large)
	playerBarracuda:setTubeLoadTime(0, 10)						--faster (vs 15)
	playerBarracuda:setTubeLoadTime(3, 10)						--faster (vs 15)
	playerBarracuda:setTubeLoadTime(2, 20)						--slower (vs 15)
	playerBarracuda:setTubeLoadTime(5, 20)						--slower (vs 15)
	playerBarracuda:weaponTubeAllowMissle(1,"Homing")
	playerBarracuda:weaponTubeAllowMissle(1,"EMP")
	playerBarracuda:weaponTubeAllowMissle(1,"Nuke")
	playerBarracuda:weaponTubeAllowMissle(4,"Homing")
	playerBarracuda:weaponTubeAllowMissle(4,"EMP")
	playerBarracuda:weaponTubeAllowMissle(4,"Nuke")
	playerBarracuda:setWeaponStorageMax("Mine",6)				--fewer mines (vs 8)
	playerBarracuda:setWeaponStorage("Mine", 6)				
	playerBarracuda:setWeaponStorageMax("EMP",6)				--more EMPs (vs 0)
	playerBarracuda:setWeaponStorage("EMP", 6)					
	playerBarracuda:setWeaponStorageMax("Nuke",4)				--fewer Nukes (vs 6)
	playerBarracuda:setWeaponStorage("Nuke", 4)				
	playerBarracuda:onTakingDamage(playerShipDamage)
	playerBarracuda:addReputationPoints(50)
	return playerBarracuda
end
function createPlayerShipBlaire()
	playerBlaire = PlayerSpaceship():setTemplate("Maverick"):setFaction("Human Navy"):setCallSign("Blaire")
	setBeamColor(playerBlaire)
	playerBlaire:setTypeName("Kludge")
	playerBlaire:setMaxEnergy(1130)						--more maximum energy (vs 1000)
	playerBlaire:setEnergy(1130)							
	playerBlaire:setShieldsMax(160, 80)					--weaker shields (vs 160, 160)
	playerBlaire:setShields(100, 100)
	playerBlaire:setWarpSpeed(250)						--slower (vs 800)
	playerBlaire:setJumpDrive(true)						--jump drive (vs none)
	playerBlaire.max_jump_range = 18000					--shorter than typical (vs 50)
	playerBlaire.min_jump_range = 2000					--shorter than typical (vs 5)
	playerBlaire:setJumpDriveRange(playerBlaire.min_jump_range,playerBlaire.max_jump_range)
	playerBlaire:setJumpDriveCharge(playerBlaire.max_jump_range)
	playerBlaire:setRepairCrewCount(7)					--more repair crew (vs 4)
--                  		    Arc,   Dir,  Range, CycleTime, Dmg
	playerBlaire:setBeamWeapon(0, 10,   25, 1000.0,       6.0, 6)	--shorter (vs 2000), turreted, angled (vs 0)
	playerBlaire:setBeamWeapon(1, 34,   55,  500.0,       4.0, 8)	--shorter (vs 1500), angled (vs -20), faster (vs 6)
	playerBlaire:setBeamWeapon(2, 70, -120,  800.0,       6.0, 6)	--shorter (vs 1500), angled (vs 20), weaker (vs 8)
	playerBlaire:setBeamWeapon(3, 0, 0, 0, 0, 0)					--remove beams			
	playerBlaire:setBeamWeapon(4, 0, 0, 0, 0, 0)	
	playerBlaire:setBeamWeapon(5, 0, 0, 0, 0, 0)	
--									   Arc, Dir, Rotate speed
	playerBlaire:setBeamWeaponTurret(0, 50,  20, .2)
	playerBlaire:setWeaponTubeDirection(0, -11)			--angled (vs-90)
	playerBlaire:setWeaponTubeDirection(1,-23)			--angled (vs 90)
	playerBlaire:setWeaponTubeDirection(2,174)			--angled (vs 180)
	playerBlaire:setTubeSize(0,"small")					--small (vs medium)
	playerBlaire:setTubeLoadTime(1,6)					--faster (vs 8)
	playerBlaire:setTubeLoadTime(2,20)					--slower (vs 8)
	playerBlaire:setWeaponStorageMax("Homing", 3)		--less (vs 6)
	playerBlaire:setWeaponStorage("Homing", 3)				
	playerBlaire:setWeaponStorageMax("Nuke", 0)			--less (vs 2)
	playerBlaire:setWeaponStorage("Nuke", 0)				
	playerBlaire:setWeaponStorageMax("HVLI", 17)		--more (vs 10)
	playerBlaire:setWeaponStorage("HVLI", 17)				
	playerBlaire:onTakingDamage(playerShipDamage)
	playerBlaire:addReputationPoints(50)
	return playerBlaire
end
function createPlayerShipBlazon()
	--ship destroyed 24Aug2019
	playerBlazon = PlayerSpaceship():setTemplate("Striker"):setFaction("Human Navy"):setCallSign("Blazon")
	setBeamColor(playerBlazon)
	playerBlazon:setTypeName("Stricken")
	playerBlazon:setRepairCrewCount(2)
	playerBlazon:setImpulseMaxSpeed(105)					-- up from default of 45
	playerBlazon:setRotationMaxSpeed(35)					-- up from default of 15
	playerBlazon:setShieldsMax(80,50)						-- up from 50, 30
	playerBlazon:setShields(80,50)							-- up from 50, 30
	playerBlazon:setBeamWeaponTurret(0,60,-15,2)			-- 60: narrower than default 100, 
	playerBlazon:setBeamWeaponTurret(1,60, 15,2)			-- 2: slower than default 6
	playerBlazon:setBeamWeapon(2,20,0,1200,6,5)				-- add forward facing beam
	playerBlazon:setWeaponTubeCount(3)						-- add tubes
	playerBlazon:setTubeLoadTime(0,10)
	playerBlazon:setTubeLoadTime(1,10)
	playerBlazon:setTubeLoadTime(2,15)
	playerBlazon:setWeaponTubeDirection(0,-60)
	playerBlazon:setWeaponTubeDirection(1,60)
	playerBlazon:setWeaponTubeDirection(2,180)
	playerBlazon:weaponTubeDisallowMissle(0,"Mine")
	playerBlazon:weaponTubeDisallowMissle(1,"Mine")
	playerBlazon:setWeaponTubeExclusiveFor(2,"Mine")
	playerBlazon:setWeaponStorageMax("Homing",6)
	playerBlazon:setWeaponStorage("Homing",6)
	playerBlazon:setWeaponStorageMax("EMP",2)
	playerBlazon:setWeaponStorage("EMP",2)
	playerBlazon:setWeaponStorageMax("Nuke",2)
	playerBlazon:setWeaponStorage("Nuke",2)
	playerBlazon:setWeaponStorageMax("Mine",4)
	playerBlazon:setWeaponStorage("Mine",4)
	playerBlazon:onTakingDamage(playerShipDamage)
	playerBlazon:addReputationPoints(50)
	return playerBlazon
end
function createPlayerShipBling()
	playerGadfly = PlayerSpaceship():setTemplate("Player Fighter"):setFaction("Human Navy"):setCallSign("Bling")
	setBeamColor(playerGadfly)
	playerGadfly:setTypeName("Gadfly")
	playerGadfly:setHullMax(120)						--stronger (vs 60)
	playerGadfly:setHull(120)
	playerGadfly:setShieldsMax(100,70)					--stronger shields (vs 40)
	playerGadfly:setShields(100,70)
	playerGadfly:setJumpDrive(true)						--jump drive (vs none)
	playerGadfly.max_jump_range = 15000					--shorter than typical (vs 50)
	playerGadfly.min_jump_range = 2000					--shorter than typical (vs 5)
	playerGadfly:setJumpDriveRange(playerGadfly.min_jump_range,playerGadfly.max_jump_range)
	playerGadfly:setJumpDriveCharge(playerGadfly.max_jump_range)
--                  			 Arc, Dir, Range, CycleTime, Dmg
	playerGadfly:setBeamWeapon(0, 50, 	0, 900.0, 		4.0, 9)		--wider (vs 40), shorter (vs 1), faster (vs 6)
	playerGadfly:setBeamWeapon(1,  0,	0,	   0,		  0, 0)		--fewer (vs 2)
	playerGadfly:setWeaponTubeCount(3)					--more (vs 0)
	playerGadfly:setWeaponTubeDirection(2, 180)
	playerGadfly:setTubeSize(0,"small")
	playerGadfly:setTubeLoadTime(0,5)
	playerGadfly:setWeaponTubeExclusiveFor(0,"HVLI")
	playerGadfly:setTubeLoadTime(1,10)
	playerGadfly:setWeaponTubeExclusiveFor(1,"Nuke")
	playerGadfly:weaponTubeAllowMissle(1,"EMP")
	playerGadfly:setTubeSize(2,"large")
	playerGadfly:setTubeLoadTime(2,15)
	playerGadfly:setWeaponTubeExclusiveFor(2,"Homing")
	playerGadfly:setWeaponStorageMax("Homing", 4)		--more (vs 0)
	playerGadfly:setWeaponStorage("Homing", 4)				
	playerGadfly:setWeaponStorageMax("Nuke", 2)			--more (vs 0)
	playerGadfly:setWeaponStorage("Nuke", 2)				
	playerGadfly:setWeaponStorageMax("EMP", 2)			--more (vs 0)
	playerGadfly:setWeaponStorage("EMP", 2)				
	playerGadfly:setWeaponStorageMax("HVLI", 6)			--more (vs 0)
	playerGadfly:setWeaponStorage("HVLI", 6)				
	playerGadfly:onTakingDamage(playerShipDamage)
	playerGadfly:addReputationPoints(50)
	return playerGadfly
end
function createPlayerShipClaw()
	playerRaven = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Claw")
	setBeamColor(playerRaven)
	playerRaven:setTypeName("Raven")
	playerRaven:setJumpDrive(false)						
	playerRaven:setWarpDrive(true)						--warp drive (vs jump)
	playerRaven:setWarpSpeed(300)
	playerRaven:setShieldsMax(120, 120)					--stronger shields (vs 80, 80)
	playerRaven:setShields(120, 120)
	playerRaven:setHullMax(160)							--weaker hull (vs 200)
	playerRaven:setHull(160)
--                 				 Arc, Dir, Range,   CycleTime,  Damage
	playerRaven:setBeamWeapon(0,  10, -90,	 900, 			6,	10)	--left (vs front) shorter (vs 1000)
	playerRaven:setBeamWeapon(1,  10,  90,	 900, 			6,	10)	--right (vs front) shorter (vs 1000)
--										Arc,  Dir, Rotate speed
	playerRaven:setBeamWeaponTurret(0,	 90,  -90,			1)	
	playerRaven:setBeamWeaponTurret(1,	 90,   90,			1)	
	playerRaven:setWeaponTubeCount(6)					--more (vs 3)
	playerRaven:setWeaponTubeDirection(0, -30)			--more angled (vs -5)
	playerRaven:setWeaponTubeDirection(1,  30)			--more angled (vs 5)
	playerRaven:setTubeSize(0,"small")					--small (vs medium)
	playerRaven:setTubeSize(1,"small")					--small (vs medium)
	playerRaven:setWeaponTubeExclusiveFor(0,"Nuke")		--Nuke only (vs all but mine)
	playerRaven:setWeaponTubeExclusiveFor(1,"Nuke")		--Nuke only (vs all but mine)
	playerRaven:setWeaponTubeDirection(2, -60)			
	playerRaven:setWeaponTubeDirection(3,  60)
	playerRaven:setTubeSize(2,"small")
	playerRaven:setTubeSize(3,"small")
	playerRaven:setWeaponTubeExclusiveFor(2,"EMP")
	playerRaven:setWeaponTubeExclusiveFor(3,"EMP")
	playerRaven:setTubeLoadTime(4, 12)					--slower (vs 8)
	playerRaven:setTubeSize(4,"large")
	playerRaven:setWeaponTubeExclusiveFor(4,"Homing")
	playerRaven:setWeaponTubeDirection(5, 180)
	playerRaven:setTubeLoadTime(5, 10)					--slower (vs 8)
	playerRaven:setWeaponTubeExclusiveFor(5,"Mine")
	playerRaven:setWeaponStorageMax("Homing",8)			--less (vs 12)
	playerRaven:setWeaponStorage("Homing",8)
	playerRaven:setWeaponStorageMax("EMP",4)			--less (vs 6)
	playerRaven:setWeaponStorage("EMP",4)
	playerRaven:setWeaponStorageMax("Mine",6)			--less (vs 8)
	playerRaven:setWeaponStorage("Mine",6)
	playerRaven:onTakingDamage(playerShipDamage)
	playerRaven:addReputationPoints(50)
	return playerRaven
end
function createPlayerShipCobra()
	playerCobra = PlayerSpaceship():setTemplate("Striker"):setFaction("Human Navy"):setCallSign("Cobra")
	setBeamColor(playerCobra)
	playerCobra:setTypeName("Striker LX")
	playerCobra:setRepairCrewCount(3)						--more (vs 2)
	playerCobra:setShieldsMax(100,100)						--stronger shields (vs 50, 30)
	playerCobra:setShields(100,100)
	playerCobra:setHullMax(100)								--weaker hull (vs 120)
	playerCobra:setHull(100)
	playerCobra:setMaxEnergy(600)							--more maximum energy (vs 500)
	playerCobra:setEnergy(600)
	playerCobra:setJumpDrive(true)
	playerCobra.max_jump_range = 20000						--shorter than typical (vs 50)
	playerCobra.min_jump_range = 2000						--shorter than typical (vs 5)
	playerCobra:setJumpDriveRange(playerCobra.min_jump_range,playerCobra.max_jump_range)
	playerCobra:setJumpDriveCharge(playerCobra.max_jump_range)
	playerCobra:setImpulseMaxSpeed(65)						--faster impulse max (vs 45)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerCobra:setBeamWeapon(0,  10, -15,	1100, 		6.0, 	6.5)	--shorter (vs 1200) more damage (vs 6.0)
	playerCobra:setBeamWeapon(1,  10,  15,	1100, 		6.0,	6.5)
--									   Arc, Dir, Rotate speed
	playerCobra:setBeamWeaponTurret(0, 100, -15, .2)		--slower turret speed (vs 6)
	playerCobra:setBeamWeaponTurret(1, 100,  15, .2)
	playerCobra:setWeaponTubeCount(2)						--more tubes (vs 0)
	playerCobra:setWeaponTubeDirection(0,180)				
	playerCobra:setWeaponTubeDirection(1,180)
	playerCobra:setWeaponStorageMax("Homing",4)
	playerCobra:setWeaponStorage("Homing", 4)	
	playerCobra:setWeaponStorageMax("Nuke",2)	
	playerCobra:setWeaponStorage("Nuke", 2)	
	playerCobra:setWeaponStorageMax("EMP",3)	
	playerCobra:setWeaponStorage("EMP", 3)		
	playerCobra:setWeaponStorageMax("Mine",3)	
	playerCobra:setWeaponStorage("Mine", 3)	
	playerCobra:setWeaponStorageMax("HVLI",6)	
	playerCobra:setWeaponStorage("HVLI", 6)	
	playerCobra:setLongRangeRadarRange(20000)				--shorter longer range sensors (vs 30000)
	playerCobra.normal_long_range_radar = 20000
	playerCobra:setShortRangeRadarRange(4000)				--shorter short range sensors (vs 5000)
	playerCobra:onTakingDamage(playerShipDamage)
	playerCobra:addReputationPoints(50)
	return playerCobra
end
function createPlayerShipCrux()
	playerMantis = PlayerSpaceship():setTemplate("Player Missile Cr."):setFaction("Human Navy"):setCallSign("Crux")
	setBeamColor(playerMantis)
	playerMantis:setTypeName("Mantis")
--                  			  Arc, Dir,  Range, CycleTime, Dmg
	playerMantis:setBeamWeapon(0,  60, -15,	1000.0,			6, 4)	--two beams (vs none)
	playerMantis:setBeamWeapon(1,  60,  15,	1000.0,			6, 4)
	playerMantis:setWeaponTubeCount(5)					--fewer (vs 7)
	playerMantis:setWeaponTubeExclusiveFor(0,"HVLI")	--HVLI only
	playerMantis:setWeaponTubeExclusiveFor(1,"HVLI")	--HVLI only
	playerMantis:setTubeSize(0,"small")					--small (vs medium)
	playerMantis:setTubeSize(1,"small")					--small (vs medium)
	playerMantis:setTubeLoadTime(0, 5)					--faster (vs 8)
	playerMantis:setTubeLoadTime(1, 5)					--faster (vs 8)
	playerMantis:setWeaponTubeDirection(2,-90)			--left (vs right)
	playerMantis:setWeaponTubeDirection(4,180)			--rear (vs left)
	playerMantis:weaponTubeAllowMissle(2,"EMP")			--allow EMP (vs Homing only)
	playerMantis:weaponTubeAllowMissle(2,"Nuke")		--allow Nuke (vs Homing only)
	playerMantis:weaponTubeAllowMissle(3,"EMP")			--allow EMP (vs Homing only)
	playerMantis:weaponTubeAllowMissle(3,"Nuke")		--allow Nuke (vs Homing only)
	playerMantis:setWeaponTubeExclusiveFor(4,"Mine")	--Mine only (vs Homing)
	playerMantis:setWeaponStorageMax("HVLI", 12)	
	playerMantis:setWeaponStorage("HVLI",    12)	
	playerMantis:setWeaponStorageMax("Homing",8)
	playerMantis:setWeaponStorage("Homing",   8)	
	playerMantis:setWeaponStorageMax("EMP",   6)
	playerMantis:setWeaponStorage("EMP",      6)	
	playerMantis:setWeaponStorageMax("Nuke",  3)
	playerMantis:setWeaponStorage("Nuke",     3)	
	playerMantis:setWeaponStorageMax("Mine",  3)
	playerMantis:setWeaponStorage("Mine",     3)	
	playerMantis.turbo_torpedo_type = {"EMPMissile"}
	playerMantis.turbo_torp_factor = 3
	playerMantis.turbo_torp_charge_interval = 60
	playerMantis:setSystemCoolantRate("reactor",		1.25)	--more (vs 1.2)
	playerMantis:setSystemCoolantRate("beamweapons",	1.3)	--more (vs 1.2)
	playerMantis:setSystemCoolantRate("maneuver",		1.2)	--same (vs 1.2)
	playerMantis:setSystemCoolantRate("warp",			1.3)	--more (vs 1.2)
	playerMantis:setSystemCoolantRate("impulse",		1.15)	--less (vs 1.2)
	playerMantis:setSystemCoolantRate("missilesystem",	1.25)	--more (vs 1.2)
	playerMantis:setSystemCoolantRate("frontshield",	1)		--less (vs 1.2)
	playerMantis:setSystemCoolantRate("rearshield",		1.1)	--less (vs 1.2)
	playerMantis:setSystemPowerRate("reactor",		0.3)	--same (vs 0.30)
	playerMantis:setSystemPowerRate("warp",			0.35)	--more (vs 0.30)
	playerMantis:setSystemPowerRate("beamweapons",	0.3)	--same (vs 0.30)
	playerMantis:setSystemPowerRate("maneuver",		0.25)	--less (vs 0.30)
	playerMantis:setSystemPowerRate("impulse",		0.3)	--same (vs 0.30)
	playerMantis:setSystemPowerRate("missilesystem",0.35)	--more (vs 0.30)
	playerMantis:setSystemPowerRate("frontshield",	0.225)	--less (vs 0.30)
	playerMantis:setSystemPowerRate("rearshield",	0.225)	--less (vs 0.30)
	playerMantis:onTakingDamage(playerShipDamage)
	playerMantis:addReputationPoints(50)
	return playerMantis
end
function createPlayerShipDarkstar()
	playerDarkstar = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Darkstar")
	setBeamColor(playerDarkstar)
	playerDarkstar:setTypeName("Destroyer IV")
	playerDarkstar.max_jump_range = 28000					--shorter (vs 50)
	playerDarkstar.min_jump_range = 3000					--shorter (vs 5)
	playerDarkstar:setJumpDriveRange(playerDarkstar.min_jump_range,playerDarkstar.max_jump_range)
	playerDarkstar:setJumpDriveCharge(playerDarkstar.max_jump_range)
	playerDarkstar:setShieldsMax(100, 100)					--stronger shields (vs 80, 80)
	playerDarkstar:setShields(100, 100)
	playerDarkstar:setHullMax(100)							--weaker hull (vs 200)
	playerDarkstar:setHull(100)
	playerDarkstar:setBeamWeapon(0, 40, -10, 1000.0, 5, 6)	--narrower (40 vs 90), faster (5 vs 6), weaker (6 vs 10)
	playerDarkstar:setBeamWeapon(1, 40,  10, 1000.0, 5, 6)
	playerDarkstar:setWeaponTubeDirection(0,-60)			--left -60 (vs -5)
	playerDarkstar:setWeaponTubeDirection(1, 60)			--right 60 (vs 5)
	playerDarkstar:setWeaponStorageMax("Homing",6)			--less (vs 12)
	playerDarkstar:setWeaponStorage("Homing", 6)				
	playerDarkstar:setWeaponStorageMax("Nuke",2)			--fewer (vs 4)
	playerDarkstar:setWeaponStorage("Nuke", 2)				
	playerDarkstar:setWeaponStorageMax("EMP",3)				--fewer (vs 6)
	playerDarkstar:setWeaponStorage("EMP", 3)				
	playerDarkstar:setWeaponStorageMax("Mine",4)			--fewer (vs 8)
	playerDarkstar:setWeaponStorage("Mine", 4)				
	playerDarkstar:setWeaponStorageMax("HVLI",6)			--more (vs 0)
	playerDarkstar:setWeaponStorage("HVLI", 6)				
	playerDarkstar:onTakingDamage(playerShipDamage)
	playerDarkstar:addReputationPoints(50)
	return playerDarkstar
end
function createPlayerShipDevon()
	playerWombat = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Devon")
	setBeamColor(playerWombat)
	--aka Devon or Farrah or Shannon
	playerWombat:setTypeName("Wombat")
	playerWombat:setHullMax(140)							--stronger hull (vs 75)
	playerWombat:setHull(140)
	playerWombat:setShieldsMax(160, 120)					--stronger shields (vs 40)
	playerWombat:setShields(160, 120)
	playerWombat:setRepairCrewCount(4)						--more repair crew (vs 1)
	playerWombat:setWarpDrive(true)							--add warp (vs none)
	playerWombat:setWarpSpeed(400)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerWombat:setBeamWeapon(0, 10, -20, 900.0,		4.0, 3)		--extra beam (vs 1@ 700 6.0, 2)
	playerWombat:setBeamWeapon(1, 10,  20, 900.0,		4.0, 3)	
--										Arc,	Dir, Rotate speed
	playerWombat:setBeamWeaponTurret( 0, 80,	-20, .3)
	playerWombat:setBeamWeaponTurret( 1, 80, 	 20, .3)
	playerWombat:setWeaponTubeCount(5)						--more (vs 3)
	playerWombat:setWeaponTubeDirection(0, 180)				
	playerWombat:setWeaponTubeDirection(1, 180)				
	playerWombat:setWeaponTubeDirection(2, 180)				
	playerWombat:setWeaponTubeDirection(3, 180)
	playerWombat:setWeaponTubeDirection(4, 180)
	playerWombat:setWeaponTubeExclusiveFor(0,"HVLI")
	playerWombat:setWeaponTubeExclusiveFor(1,"HVLI")
	playerWombat:weaponTubeAllowMissle(1,"Homing")
	playerWombat:setTubeSize(2,"large")						--large (vs small)
	playerWombat:setTubeLoadTime(2,15)						--slower load time (vs 10)
	playerWombat:setTubeLoadTime(0,5)						--faster load time (vs 10)
	playerWombat:setTubeLoadTime(1,5)						--faster load time (vs 10)
	playerWombat:setWeaponTubeExclusiveFor(2,"HVLI")
	playerWombat:weaponTubeAllowMissle(2,"Homing")
	playerWombat:setWeaponTubeExclusiveFor(3,"HVLI")
	playerWombat:weaponTubeAllowMissle(3,"EMP")
	playerWombat:weaponTubeAllowMissle(3,"Nuke")
	playerWombat:setWeaponTubeExclusiveFor(4,"Mine")
	playerWombat:setWeaponStorageMax("Mine",3)				--more (vs 0)
	playerWombat:setWeaponStorage("Mine",   3)				
	playerWombat:setWeaponStorageMax("EMP",3)				--more (vs 0)
	playerWombat:setWeaponStorage("EMP",   3)				
	playerWombat:setWeaponStorageMax("Nuke",2)				--more (vs 0)
	playerWombat:setWeaponStorage("Nuke",   2)				
	playerWombat:setWeaponStorageMax("Homing",8)			--more (vs 3)
	playerWombat:setWeaponStorage("Homing",   8)				
	playerWombat:onTakingDamage(playerShipDamage)
	playerWombat:addReputationPoints(50)
	return playerWombat
end
function createPlayerShipEagle()
	playerEagle = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Eagle")
	setBeamColor(playerEagle)
	playerEagle:setTypeName("Era")
	playerEagle:setRotationMaxSpeed(15)									--faster spin (vs 10)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerEagle:setBeamWeapon(0,  10,   0,	1200, 		6.0, 	6.0)	--1 turret, 1 rear (vs 2 rear)
	playerEagle:setBeamWeapon(1,  80, 180,	1200, 		6.0,	6.0)
--										Arc,  Dir, Rotate speed
	playerEagle:setBeamWeaponTurret(0,	300,    0,			 .5)		--slow turret
	playerEagle:setShieldsMax(70, 100)									--stronger rear shields (vs 70, 70)
	playerEagle:setShields(70, 100)
	playerEagle:setLongRangeRadarRange(50000)							--longer long range sensors (vs 30000)
	playerEagle.normal_long_range_radar = 50000
	playerEagle:onTakingDamage(playerShipDamage)
	playerEagle:addReputationPoints(50)
	return playerEagle
end
function createPlayerShipEndeavor()
	playerEndeavor = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Endeavor")
	setBeamColor(playerEndeavor)
	playerEndeavor:setTypeName("Bermuda")
	playerEndeavor:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerEndeavor:setImpulseMaxSpeed(70)					--slower impulse max (vs 90)
	playerEndeavor:setAcceleration(30)						--faster acceleration (vs 20)
	playerEndeavor:setMaxEnergy(800)						--less maximum energy (vs 1000)
	playerEndeavor:setEnergy(800)
	playerEndeavor:setHullMax(150)							--weaker hull (vs 250)
	playerEndeavor:setHull(150)							
	playerEndeavor:setShieldsMax(150,150)					--weaker shields (vs 200)
	playerEndeavor:setShields(150,150)
	playerEndeavor.max_jump_range = 35000					--shorter than typical (vs 50)
	playerEndeavor.min_jump_range = 3500					--shorter than typical (vs 5)
	playerEndeavor:setJumpDriveRange(playerEndeavor.min_jump_range,playerEndeavor.max_jump_range)
	playerEndeavor:setJumpDriveCharge(playerEndeavor.max_jump_range)
	playerEndeavor:setBeamWeaponEnergyPerFire(0,playerEndeavor:getBeamWeaponEnergyPerFire(0)*3)		--triple power use
	playerEndeavor:setBeamWeaponHeatPerFire(0,playerEndeavor:getBeamWeaponHeatPerFire(0)*3)			--triple heat
	playerEndeavor:setBeamWeaponEnergyPerFire(1,playerEndeavor:getBeamWeaponEnergyPerFire(1)*3)		--triple power use
	playerEndeavor:setBeamWeaponHeatPerFire(1,playerEndeavor:getBeamWeaponHeatPerFire(1)*3)			--triple heat
	playerEndeavor:setWeaponTubeCount(3)					--fewer (vs 5)
	playerEndeavor:setWeaponTubeDirection(1,  90)
	playerEndeavor:setWeaponTubeDirection(2, 180)
	playerEndeavor:setWeaponTubeExclusiveFor(2,"Mine")
	playerEndeavor:onTakingDamage(playerShipDamage)
	playerEndeavor:addReputationPoints(50)
	return playerEndeavor
end
function createPlayerShipEnola()
	playerEnola = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Enola")
	setBeamColor(playerEnola)
	playerEnola:setTypeName("Fray")
	playerEnola:setWarpDrive(false)						--no warp drive (vs warp)
	playerEnola:setShieldsMax(100, 200)					--stronger rear shields (vs 160, 160)
	playerEnola:setShields(100, 200)
	playerEnola:setJumpDrive(true)						--jump drive (vs warp)
	playerEnola.max_jump_range = 20000					--shorter than typical (vs 50)
	playerEnola.min_jump_range = 2000					--shorter than typical (vs 5)
	playerEnola:setJumpDriveRange(playerEnola.min_jump_range,playerEnola.max_jump_range)
	playerEnola:setJumpDriveCharge(playerEnola.max_jump_range)
--                  			Arc, Dir, Range, CycleTime, Dmg
	playerEnola:setBeamWeapon(0, 10,   0, 900.0, 	   6.0,   4)	--3 beams (vs 2), shorter (vs 1000)
	playerEnola:setBeamWeapon(1, 10, -90, 900.0, 	   6.0,   4)	--less damage (vs 5)
	playerEnola:setBeamWeapon(2, 10,  90, 900.0, 	   6.0,   4)	--wider overall coverage, split overlap
--										Arc,  Dir, Rotate speed
	playerEnola:setBeamWeaponTurret(0,	110,    0,			 .3)	--slow turret
	playerEnola:setBeamWeaponTurret(1,	 90,  -90,			 .3)		
	playerEnola:setBeamWeaponTurret(2,	 90,   90,			 .3)		
	playerEnola:setWeaponTubeCount(4)					--fewer (vs 6)
	playerEnola:setWeaponTubeDirection(0, 180)			--all tubes face back (vs 3 front, 2 sides and 1 back)
	playerEnola:setWeaponTubeDirection(1, 180)
	playerEnola:setWeaponTubeDirection(2, 180)
	playerEnola:setWeaponTubeDirection(3, 180)
	playerEnola:setWeaponTubeExclusiveFor(1,"Homing")	
	playerEnola:weaponTubeAllowMissle(1,"EMP")			--Medium tube only for Homing or EMP (vs HVLI)
	playerEnola:setWeaponTubeExclusiveFor(2,"Nuke")		--Large tube only for nuke (vs HVLI)
	playerEnola:setWeaponTubeExclusiveFor(3,"Mine")
	playerEnola:setWeaponStorageMax("HVLI", 12)			--fewer (vs 24)
	playerEnola:setWeaponStorage("HVLI", 12)				
	playerEnola:setWeaponStorageMax("Homing",5)			--fewer (vs 8)
	playerEnola:setWeaponStorage("Homing", 5)				
	playerEnola:setWeaponStorageMax("EMP", 4)			--fewer (vs 6)
	playerEnola:setWeaponStorage("EMP", 4)				
	playerEnola:setWeaponStorageMax("Nuke", 2)			--fewer (vs 4)
	playerEnola:setWeaponStorage("Nuke", 2)				
	playerEnola:setWeaponStorageMax("Mine", 3)			--fewer (vs 6)
	playerEnola:setWeaponStorage("Mine", 3)				
	playerEnola:onTakingDamage(playerShipDamage)
	playerEnola:addReputationPoints(50)
	return playerEnola
end
function createPlayerShipEspadon()
	playerOrca = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Espadon")
	setBeamColor(playerOrca)
	playerOrca:setTypeName("Orca")
	playerOrca:setBeamWeapon(0, 0,  0,	 0,		 0, 0)
	playerOrca:setBeamWeapon(1, 0,  0,	 0,		 0, 0)
	playerOrca:onTakingDamage(playerShipDamage)
	playerOrca:addReputationPoints(50)
	return playerOrca	
end
function createPlayerShipFalcon()
	playerFalcon = PlayerSpaceship():setTemplate("Nautilus"):setFaction("Human Navy"):setCallSign("Falcon")
	setBeamColor(playerFalcon)
	playerFalcon:setTypeName("Eldridge")
	playerFalcon:setShieldsMax(100, 100)				--stronger shields (vs 60, 60)
	playerFalcon:setShields(100, 100)
	playerFalcon:setJumpDrive(false)					--no jump drive
	playerFalcon:setWarpDrive(true)						--warp drive (vs jump)
	playerFalcon:setWarpSpeed(400)						
	playerFalcon:setWeaponTubeDirection(0,0)			--front facing (vs back)
	playerFalcon:setWeaponTubeDirection(1,0)			--front facing (vs back)
	playerFalcon:setWeaponTubeExclusiveFor(0,"Homing")	--Homing only (vs Mine)
	playerFalcon:setWeaponTubeExclusiveFor(1,"Homing")	--Homing only (vs Mine)
	playerFalcon:setWeaponTubeExclusiveFor(2,"Mine")	--Mine only (vs any)
	playerFalcon:setWeaponStorageMax("Homing",12)		--more homing (vs 0)
	playerFalcon:setWeaponStorage("Homing", 12)				
	playerFalcon:setTubeLoadTime(2,20)					--slower (vs 10)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerFalcon:setBeamWeapon(0,  10, -90,	1200, 		6.0, 	6.0)	--broadside beams (vs forward, overlapping)	
	playerFalcon:setBeamWeapon(1,  10,  90,	1200, 		6.0,	6.0)
--										Arc,  Dir, Rotate speed
	playerFalcon:setBeamWeaponTurret(0,	 90,  -90,			 .3)		--slow turret
	playerFalcon:setBeamWeaponTurret(1,	 90,   90,			 .3)
	playerFalcon:onTakingDamage(playerShipDamage)
	playerFalcon:addReputationPoints(50)
	return playerFalcon
end
function createPlayerShipFist()
	playerInterlock = PlayerSpaceship():setTemplate("Repulse"):setFaction("Human Navy"):setCallSign("Fist")
	setBeamColor(playerInterlock)
	playerInterlock:setTypeName("Interlock")
	playerInterlock:setHullMax(250)							--stronger hull (vs 120)
	playerInterlock:setHull(250)
	playerInterlock:setShieldsMax(120, 120)					--stronger shields (vs 80, 80)
	playerInterlock:setShields(120, 120)
	playerInterlock.max_jump_range = 35000					--shorter than typical (vs 50)
	playerInterlock.min_jump_range = 3500					--shorter than typical (vs 5)
	playerInterlock:setJumpDriveRange(playerInterlock.min_jump_range,playerInterlock.max_jump_range)
	playerInterlock:setJumpDriveCharge(playerInterlock.max_jump_range)
--                 				 	 Arc, Dir, Range,   CycleTime,  Damage
	playerInterlock:setBeamWeapon(0,  10,   0,	 900, 			6,	6)	--front (vs right) shorter (vs 1200) stronger (vs 5)
	playerInterlock:setBeamWeapon(1,  10, 180,	 900, 			6,	4)	--rear (vs left) shorter (vs 1200) weaker (vs 5)
	playerInterlock:setBeamWeapon(2, 110, -35,	 300, 			6,	10)	--additional strong, short, front, wide
	playerInterlock:setBeamWeapon(3, 110,  35,	 300, 			6,	10)	--additional strong, short, front, wide
	playerInterlock:setBeamWeapon(4,  60, -20,	 600, 			6,	8)	--additional strong, medium, front
	playerInterlock:setBeamWeapon(5,  60,  20,	 600, 			6,	8)	--additional strong, medium, front
--											Arc,  Dir, Rotate speed
	playerInterlock:setBeamWeaponTurret(0,	100,    0,			1)		--slower turrets (vs 5)
	playerInterlock:setBeamWeaponTurret(1,	180,  180,			1)		
	playerInterlock:setWeaponTubeCount(3)					--more (vs 2)
	playerInterlock:setWeaponTubeDirection(0, -90)
	playerInterlock:setTubeSize(0,"large")
	playerInterlock:weaponTubeDisallowMissle(0,"Mine")	
	playerInterlock:setWeaponTubeDirection(1,  90)
	playerInterlock:setTubeSize(1,"large")
	playerInterlock:weaponTubeDisallowMissle(1,"Mine")	
	playerInterlock:setWeaponTubeDirection(2, 180)
	playerInterlock:setWeaponTubeExclusiveFor(2,"Mine")		--mine only
	playerInterlock:setWeaponStorageMax("Mine", 4)			--more mines (vs 0)
	playerInterlock:setWeaponStorage("Mine", 4)				
	playerInterlock:onTakingDamage(playerShipDamage)
	playerInterlock:addReputationPoints(50)
	return playerInterlock
end
function createPlayerShipFlaire()
	playerPeacock = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Flaire")
	setBeamColor(playerPeacock)
	playerPeacock:setTypeName("Peacock")
	playerPeacock:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerPeacock:setImpulseMaxSpeed(75)				--slower impulse max (vs 90)
	playerPeacock:setRotationMaxSpeed(9)				--slower spin (vs 10)
	playerPeacock:setShieldsMax(120,100)				--stronger (vs 80,80)
	playerPeacock:setShields(120,100)
	playerPeacock.max_jump_range = 30000				--shorter than typical (vs 50)
	playerPeacock.min_jump_range = 3000					--shorter than typical (vs 5)
	playerPeacock:setJumpDriveRange(playerPeacock.min_jump_range,playerPeacock.max_jump_range)
	playerPeacock:setJumpDriveCharge(playerPeacock.max_jump_range)
--                 				   Arc, Dir, Range, CycleTime, Damage
	playerPeacock:setBeamWeapon(0,  10, -45,   800,			2,	2)	--4 light fast beams (vs 2 heavy)
	playerPeacock:setBeamWeapon(1,  10,  45,   800,			2,	2)
	playerPeacock:setBeamWeapon(2,  10, -15,  1000,			2,	2)
	playerPeacock:setBeamWeapon(3,  10,  15,  1000,			2,	2)
--										   Arc, Dir, Rotate speed
	playerPeacock:setBeamWeaponTurret(0,	60,	-45,	 .4)
	playerPeacock:setBeamWeaponTurret(1,	60,	 45,	 .4)
	playerPeacock:setBeamWeaponTurret(2,	60,	-15,	 .8)
	playerPeacock:setBeamWeaponTurret(3,	60,	 15,	 .8)
	playerPeacock:setWeaponTubeCount(5)					--5 add broadside (vs 3)
	playerPeacock:setWeaponTubeDirection(2,-90)			--left (vs rear)
	playerPeacock:setWeaponTubeDirection(3,90)			--right
	playerPeacock:setWeaponTubeDirection(4,180)			--rear
	playerPeacock:setWeaponTubeExclusiveFor(0,"Homing")	--homing only (vs any)
	playerPeacock:setWeaponTubeExclusiveFor(1,"Homing")	--homing only (vs any)
	playerPeacock:setWeaponTubeExclusiveFor(2,"EMP")	--EMP only (vs mine)
	playerPeacock:setWeaponTubeExclusiveFor(3,"Nuke")	--Nuke only
	playerPeacock:setWeaponTubeExclusiveFor(4,"Mine")	--mine only
	playerPeacock:setTubeSize(0,"small")				--small (vs normal)
	playerPeacock:setTubeSize(1,"small")				--small (vs normal)
	playerPeacock:setTubeLoadTime(0,5)					--faster (vs default 8)
	playerPeacock:setTubeLoadTime(1,5)					--faster (vs default 8)
	playerPeacock:setTubeLoadTime(4,12)					--slower (vs default 8)
	playerPeacock:setWeaponStorageMax("Homing",16)		--more (vs 12)
	playerPeacock:setWeaponStorage("Homing", 16)
	playerPeacock:setWeaponStorageMax("Nuke",3)			--less (vs 4)
	playerPeacock:setWeaponStorage("Nuke", 3)
	playerPeacock:setWeaponStorageMax("EMP",5)			--less (vs 6)
	playerPeacock:setWeaponStorage("EMP", 5)
	playerPeacock:setSystemCoolantRate("reactor",		1.275)	--more (vs 1.2)
	playerPeacock:setSystemCoolantRate("beamweapons",	1.2)	--same (vs 1.2)
	playerPeacock:setSystemCoolantRate("maneuver",		1.15)	--less (vs 1.2)
	playerPeacock:setSystemCoolantRate("jumpdrive",		1.275)	--more (vs 1.2)
	playerPeacock:setSystemCoolantRate("impulse",		1.175)	--less (vs 1.2)
	playerPeacock:setSystemCoolantRate("missilesystem",	1.225)	--more (vs 1.2)
	playerPeacock:setSystemCoolantRate("frontshield",	1.25)	--more (vs 1.2)
	playerPeacock:setSystemCoolantRate("rearshield",	1.2)	--same (vs 1.2)
	playerPeacock:setSystemPowerRate("reactor",		0.375)	--more (vs 0.30)
	playerPeacock:setSystemPowerRate("jumpdrive",	0.35)	--more (vs 0.30)
	playerPeacock:setSystemPowerRate("beamweapons",	0.25)	--less (vs 0.30)
	playerPeacock:setSystemPowerRate("maneuver",	0.2)	--less (vs 0.30)
	playerPeacock:setSystemPowerRate("impulse",		0.225)	--less (vs 0.30)
	playerPeacock:setSystemPowerRate("missilesystem",0.275)	--less (vs 0.30)
	playerPeacock:setSystemPowerRate("frontshield",	0.325)	--more (vs 0.30)
	playerPeacock:setSystemPowerRate("rearshield",	0.3)	--same (vs 0.30)
	playerPeacock:onTakingDamage(playerShipDamage)
	playerPeacock:addReputationPoints(50)
	return playerPeacock
end
function createPlayerShipFlipper()
	playerFlipper = PlayerSpaceship():setTemplate("Player Missile Cr."):setFaction("Human Navy"):setCallSign("Flipper")
	setBeamColor(playerFlipper)
	playerFlipper:setTypeName("Midian")
	playerFlipper:setRadarTrace("cruiser.png")	--different radar trace
	playerFlipper:setWarpSpeed(320)
--                  				Arc, Dir, Range, CycleTime, Dmg
	playerFlipper:setBeamWeapon(0,   50, -20,  1000, 	     6, 4)	--beams (vs none)
	playerFlipper:setBeamWeapon(1,   50,  20,  1000, 	     6, 4)
	playerFlipper:setBeamWeapon(2,   10, 180,  1000, 	     6, 2)
--									     Arc, Dir, Rotate speed
	playerFlipper:setBeamWeaponTurret(2, 220, 180, .3)
	playerFlipper:setWeaponTubeCount(5)					--fewer (vs 7)
	playerFlipper:setWeaponTubeDirection(0,-2)			--angled (vs front)
	playerFlipper:setWeaponTubeDirection(1, 2)			--angled (vs front)
	playerFlipper:setWeaponTubeDirection(2,-90)			--left (vs right)
	playerFlipper:setWeaponTubeDirection(4,180)			--rear (vs left)
	playerFlipper:setTubeSize(0,"small")				--small vs medium
	playerFlipper:setTubeSize(1,"small")				--small vs medium
	playerFlipper:setWeaponTubeExclusiveFor(0,"Homing")	--homing only
	playerFlipper:setWeaponTubeExclusiveFor(1,"Homing")	--homing only
	playerFlipper:setWeaponTubeExclusiveFor(2,"HVLI")
	playerFlipper:setWeaponTubeExclusiveFor(3,"HVLI")
	playerFlipper:setWeaponTubeExclusiveFor(4,"Mine")
	playerFlipper:weaponTubeAllowMissle(2,"EMP")
	playerFlipper:weaponTubeAllowMissle(3,"EMP")
	playerFlipper:weaponTubeAllowMissle(2,"Nuke")
	playerFlipper:weaponTubeAllowMissle(3,"Nuke")
	playerFlipper:setTubeLoadTime(2,12)
	playerFlipper:setTubeLoadTime(3,12)
	playerFlipper:setTubeLoadTime(4,15)
	playerFlipper:setWeaponStorageMax("Homing",16)		--less (vs 30)
	playerFlipper:setWeaponStorage("Homing",   16)				
	playerFlipper:setWeaponStorageMax("Nuke",   2)		--less (vs 8)
	playerFlipper:setWeaponStorage("Nuke",      2)				
	playerFlipper:setWeaponStorageMax("EMP",    5)		--less (vs 10)
	playerFlipper:setWeaponStorage("EMP",       5)				
	playerFlipper:setWeaponStorageMax("Mine",   8)		--less (vs 12)
	playerFlipper:setWeaponStorage("Mine",      8)				
	playerFlipper:setWeaponStorageMax("HVLI",  16)		--more (vs 0)
	playerFlipper:setWeaponStorage("HVLI",     16)
	playerFlipper.smallHomingOnly = true
	playerFlipper:onTakingDamage(playerShipDamage)
	playerFlipper:addReputationPoints(50)
	return playerFlipper
end
function createPlayerShipFlorentine()
	playerSafari = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Florentine")
	setBeamColor(playerSafari)
	playerSafari:setTypeName("Safari")
	playerSafari:setShieldsMax(150, 90)					--stronger front, weaker rear (vs 70, 70)
	playerSafari:setShields(150, 90)
--                 			      Arc, Dir, Range, CycleTime, Damage
	playerSafari:setBeamWeapon(0,  10,   0,	1200, 		5.0, 	7.0)	--1 forward, 1 turret (vs 2 rear)
	playerSafari:setBeamWeapon(1,  60,   0,	1000, 		6.0,    6.0)	--shorter (vs 1200)
	playerSafari:setBeamWeapon(2,  40,   0,	 800, 		8.0,   12.0)	--extra beam
--										Arc,  Dir, Rotate speed
	playerSafari:setBeamWeaponTurret(0,	 80,    0,			 .4)		--slow turret
	playerSafari:setBeamWeaponDamageType(0,"emp")
	playerSafari:setBeamWeaponDamageType(1,"kinetic")
	playerSafari:setWeaponTubeCount(3)									--more (vs 1)
	playerSafari:setWeaponTubeDirection(0, -90)							--left (vs rear)
	playerSafari:setWeaponTubeDirection(1,  90)							--right (vs none)
	playerSafari:setWeaponTubeDirection(2, 180)							--rear (vs none)
	playerSafari:setWeaponTubeExclusiveFor(0,"HVLI")					--HVLI only (vs any)
	playerSafari:setWeaponTubeExclusiveFor(1,"HVLI")					--HVLI only (vs none)
	playerSafari:setWeaponTubeExclusiveFor(2,"Mine")					--Mine only (vs none)
	playerSafari:setTubeSize(0,"small")									--small (vs medium)
	playerSafari:setTubeSize(1,"small")									--small (vs none)
	playerSafari:setTubeLoadTime(0,8)									--faster (vs 20)
	playerSafari:setTubeLoadTime(1,8)									--faster (vs none)
	playerSafari:setWeaponStorageMax("Homing", 0)						--less (vs 3)
	playerSafari:setWeaponStorage("Homing", 0)
	playerSafari:setWeaponStorageMax("Nuke", 0)							--less (vs 1)
	playerSafari:setWeaponStorage("Nuke", 0)
	playerSafari:setWeaponStorageMax("HVLI", 20)						--more (vs 5)
	playerSafari:setWeaponStorage("HVLI", 20)
	playerSafari:setWeaponStorageMax("Mine", 4)							--more (vs 1)
	playerSafari:setWeaponStorage("Mine", 4)
	playerSafari:onTakingDamage(playerShipDamage)
	playerSafari:addReputationPoints(50)
	return playerSafari
end
function createPlayerShipGabble()
	playerGabble = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Gabble")
	setBeamColor(playerGabble)
	playerGabble:setTypeName("Squid")
	playerGabble:setRepairCrewCount(5)					--more repair crew (vs 2)
	playerGabble:setShieldsMax(120, 120)				--stronger shields (vs 70, 70)
	playerGabble:setShields(120, 120)
	playerGabble.max_jump_range = 20000					--shorter than typical (vs 50)
	playerGabble.min_jump_range = 2000					--shorter than typical (vs 5)
	playerGabble:setJumpDriveRange(playerGabble.min_jump_range,playerGabble.max_jump_range)
	playerGabble:setJumpDriveCharge(playerGabble.max_jump_range)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerGabble:setBeamWeapon(0, 10,	0,	1000,		4,		4)		--one beam (vs 0)
--									   Arc,	  Dir, Rotate speed
	playerGabble:setBeamWeaponTurret(0,	80,		0,		1)		--slow turret 
	playerGabble:setWeaponTubeDirection(0,0)					--forward facing (vs left)
	playerGabble:setWeaponTubeDirection(3,0)					--forward facing (vs right)
	playerGabble:setWeaponTubeExclusiveFor(2,"Homing")			--homing only (vs HVLI)
	playerGabble:setWeaponTubeExclusiveFor(5,"Homing")			--homing only (vs HVLI)
	playerGabble:setWeaponTubeExclusiveFor(0,"HVLI")			--HVLI only (vs Homing + HVLI)
	playerGabble:setWeaponTubeExclusiveFor(3,"HVLI")			--HVLI only (vs Homing + HVLI)
	playerGabble:weaponTubeDisallowMissle(1,"Mine")				--no sideways mines
	playerGabble:weaponTubeDisallowMissle(4,"Mine")				--no sideways mines
	playerGabble:setWeaponStorageMax("Homing",8)				--fewer Homing (vs 12)
	playerGabble:setWeaponStorage("Homing", 8)				
	playerGabble:setWeaponStorageMax("Mine",6)					--fewer mines (vs 8)
	playerGabble:setWeaponStorage("Mine", 6)				
	playerGabble:setWeaponStorageMax("EMP",4)					--more EMPs (vs 0)
	playerGabble:setWeaponStorage("EMP", 4)					
	playerGabble:setWeaponStorageMax("Nuke",4)					--fewer Nukes (vs 6)
	playerGabble:setWeaponStorage("Nuke", 4)				
	playerGabble:setLongRangeRadarRange(25000)					--shorter long range sensors (vs 30000)
	playerGabble.normal_long_range_radar = 25000
	playerGabble:onTakingDamage(playerShipDamage)
	playerGabble:addReputationPoints(50)
	return playerGabble
end
function createPlayerShipGeorge()
	playerRodent = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("George")
	setBeamColor(playerRodent)
	playerRodent:setTypeName("Rodent")
	playerRodent:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerRodent:setJumpDrive(true)
	playerRodent.max_jump_range = 37000					--shorter than typical (vs 50)
	playerRodent.min_jump_range = 4000					--shorter than typical (vs 5)
	playerRodent:setJumpDriveRange(playerRodent.min_jump_range,playerRodent.max_jump_range)
	playerRodent:setJumpDriveCharge(playerRodent.max_jump_range)
	playerRodent:setShieldsMax(100,50)					--weaker rear (vs 100,100)
	playerRodent:setShields(100,50)
	playerRodent:setHullMax(150)						--weaker hull (vs 200)
	playerRodent:setHull(150)
--                  			  Arc, Dir,   Range, CycleTime, Dmg
	playerRodent:setBeamWeapon(0,  60, -15,	1200.0,			8, 5)		--narrower (vs 90), weaker (vs 6)
	playerRodent:setBeamWeapon(1,  60,  15,	1200.0,			8, 5)		
	playerRodent:setBeamWeapon(2,  10,	 0,	 600.0,			8, 3)		--add turret front & sides
	playerRodent:setBeamWeapon(3,  10, 180,	 500.0,			8, 4)		--add turret rear & sides
--										Arc,  Dir, Rotate speed
	playerRodent:setBeamWeaponTurret(2,	270,  	0,			 .4)		--slow turret
	playerRodent:setBeamWeaponTurret(3,	270,  180,			 .4)
	playerRodent:setWeaponTubeCount(5)					--more (vs 3)
	playerRodent:setWeaponTubeDirection(0, 0)			--straight (vs -1)
	playerRodent:setTubeLoadTime(0,8)					--faster (vs 10)
	playerRodent:setTubeSize(0,"small")					--small (vs medium)
	playerRodent:setWeaponTubeExclusiveFor(0,"HVLI")	--only HVLI (vs any)
	playerRodent:weaponTubeAllowMissle(0,"Homing")
	playerRodent:setWeaponTubeDirection(1, 0)			--straight (vs 1)
	playerRodent:setTubeLoadTime(1,8)					--faster (vs 10)
	playerRodent:setTubeSize(1,"small")					--small (vs medium)
	playerRodent:setWeaponTubeExclusiveFor(1,"HVLI")	--only HVLI & Homing (vs any)
	playerRodent:weaponTubeAllowMissle(1,"Homing")
	playerRodent:setWeaponTubeDirection(3, -90)			--left (vs 0)
	playerRodent:setWeaponTubeExclusiveFor(3,"EMP")		--only EMP & Nuke (vs any)
	playerRodent:weaponTubeAllowMissle(3,"Nuke")
	playerRodent:setWeaponTubeDirection(4, 90)			--left (vs 0)
	playerRodent:setWeaponTubeExclusiveFor(4,"EMP")		--only EMP & Nuke (vs any)
	playerRodent:weaponTubeAllowMissle(4,"Nuke")
	playerRodent:setTubeLoadTime(4,20)					--slower (vs 10)
	playerRodent:setTubeSize(4,"large")					--large (vs medium)
	playerRodent:setWeaponTubeDirection(2, 180)			--rear (vs 0)
	playerRodent:setWeaponTubeExclusiveFor(2,"Mine")	--only Mine (vs any)
	playerRodent:setTubeLoadTime(2,15)					--slower (vs 10)
	playerRodent:setSystemCoolantRate("reactor",		1.35)	--more (vs 1.2)
	playerRodent:setSystemCoolantRate("beamweapons",	1.2)	--same (vs 1.2)
	playerRodent:setSystemCoolantRate("maneuver",		1.1)	--less (vs 1.2)
	playerRodent:setSystemCoolantRate("jumpdrive",		1.25)	--more (vs 1.2)
	playerRodent:setSystemCoolantRate("impulse",		1.15)	--less (vs 1.2)
	playerRodent:setSystemCoolantRate("missilesystem",	1.25)	--more (vs 1.2)
	playerRodent:setSystemCoolantRate("frontshield",	1.1)	--less (vs 1.2)
	playerRodent:setSystemCoolantRate("rearshield",		1.2)	--same (vs 1.2)
	playerRodent:setSystemPowerRate("reactor",		0.40)	--more (vs 0.30)
	playerRodent:setSystemPowerRate("jumpdrive",	0.3)	--same (vs 0.30)
	playerRodent:setSystemPowerRate("beamweapons",	0.275)	--less (vs 0.30)
	playerRodent:setSystemPowerRate("maneuver",		0.225)	--less (vs 0.30)
	playerRodent:setSystemPowerRate("impulse",		0.25)	--less (vs 0.30)
	playerRodent:setSystemPowerRate("missilesystem",0.3)	--same (vs 0.30)
	playerRodent:setSystemPowerRate("frontshield",	0.225)	--less (vs 0.30)
	playerRodent:setSystemPowerRate("rearshield",	0.325)	--more (vs 0.30)
	playerRodent:onTakingDamage(playerShipDamage)
	playerRodent:addReputationPoints(50)
	return playerRodent
end
function createPlayerShipGorn()
	playerGorn = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Gorn")
	setBeamColor(playerGorn)
	playerGorn:setTypeName("Proto-Atlantis")
	playerGorn:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerGorn.max_jump_range = 30000					--shorter than typical (vs 50)
	playerGorn.min_jump_range = 3000					--shorter than typical (vs 5)
	playerGorn:setJumpDriveRange(playerGorn.min_jump_range,playerGorn.max_jump_range)
	playerGorn:setJumpDriveCharge(playerGorn.max_jump_range)
	playerGorn:setBeamWeaponEnergyPerFire(0,playerGorn:getBeamWeaponEnergyPerFire(0)*3)		--triple power use
	playerGorn:setBeamWeaponHeatPerFire(0,playerGorn:getBeamWeaponHeatPerFire(0)*3)			--triple heat
	playerGorn:setBeamWeaponEnergyPerFire(1,playerGorn:getBeamWeaponEnergyPerFire(1)*3)		--triple power use
	playerGorn:setBeamWeaponHeatPerFire(1,playerGorn:getBeamWeaponHeatPerFire(1)*3)			--triple heat
	playerGorn:setWeaponTubeExclusiveFor(0,"HVLI")		--HVLI only (vs all but Mine)
	playerGorn:setWeaponTubeExclusiveFor(1,"Homing")	--Homing only (vs all but Mine)
	playerGorn:setWeaponTubeExclusiveFor(2,"HVLI")		--HVLI only (vs all but Mine)
	playerGorn:setWeaponTubeExclusiveFor(3,"Homing")	--Homing only (vs all but Mine)
	playerGorn:setWeaponStorageMax("EMP",0)				--fewer (vs 6)
	playerGorn:setWeaponStorage("EMP", 0)				
	playerGorn:setWeaponStorageMax("Nuke",0)			--fewer (vs 4)
	playerGorn:setWeaponStorage("Nuke", 0)	
	playerGorn:setLongRangeRadarRange(28000)			--shorter longer range sensors (vs 30000)
	playerGorn.normal_long_range_radar = 28000
	playerGorn:onTakingDamage(playerShipDamage)
	playerGorn:addReputationPoints(50)
	return playerGorn
end
function createPlayerShipGuinevere()
	playerGuinevere = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Guinevere")
	setBeamColor(playerGuinevere)
	playerGuinevere:setTypeName("Caretaker")
	playerGuinevere:setWarpDrive(false)						--no warp drive (vs warp)
	playerGuinevere:setJumpDrive(true)						--jump drive (vs warp)
	playerGuinevere.max_jump_range = 40000					--shorter than typical (vs 50)
	playerGuinevere.min_jump_range = 4000					--shorter than typical (vs 5)
	playerGuinevere:setJumpDriveRange(playerGuinevere.min_jump_range,playerGuinevere.max_jump_range)
	playerGuinevere:setJumpDriveCharge(playerGuinevere.max_jump_range)
	playerGuinevere:setShieldsMax(100, 100)					--weaker shields (vs 160, 160)
--                  			 Arc, Dir, Range, CycleTime, Dmg
	playerGuinevere:setBeamWeapon(0, 80, -90, 900.0, 		5.0,   6)	--side beams (vs forward), faster (vs 6)
	playerGuinevere:setBeamWeapon(1, 80,  90, 900.0, 		5.0,   6)	
	playerGuinevere:setWeaponTubeCount(4)					--fewer (vs 6)
	playerGuinevere:setWeaponTubeExclusiveFor(1,"EMP")		--normal sized tube allow EMPs and Nukes (vs HVLI)
	playerGuinevere:weaponTubeAllowMissle(1,"Nuke")
	playerGuinevere:setWeaponTubeExclusiveFor(2,"Homing")	--large tube for homing (vs HVLI)
	playerGuinevere:setWeaponTubeExclusiveFor(3,"Mine")
	playerGuinevere:setWeaponTubeDirection(3, 180)
	playerGuinevere:setWeaponStorageMax("Homing",6)			--fewer (vs 8)
	playerGuinevere:setWeaponStorage("Homing", 6)				
	playerGuinevere:setWeaponStorageMax("EMP",3)			--fewer (vs 6)
	playerGuinevere:setWeaponStorage("EMP", 3)				
	playerGuinevere:setWeaponStorageMax("Nuke",2)			--fewer (vs 4)
	playerGuinevere:setWeaponStorage("Nuke", 2)				
	playerGuinevere:setWeaponStorageMax("Mine",3)			--fewer (vs 6)
	playerGuinevere:setWeaponStorage("Mine", 3)				
	playerGuinevere:onTakingDamage(playerShipDamage)
	playerGuinevere:addReputationPoints(50)
	return playerGuinevere
end
function createPlayerShipHalberd()
	--destroyed 29Feb2020
	playerHalberd = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Halberd")
	setBeamColor(playerHalberd)
	playerHalberd:setTypeName("Proto-Atlantis")
	playerHalberd:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerHalberd:setImpulseMaxSpeed(70)				--slower impulse max (vs 90)
	playerHalberd:setRotationMaxSpeed(14)				--faster spin (vs 10)
	playerHalberd.max_jump_range = 30000				--shorter than typical (vs 50)
	playerHalberd.min_jump_range = 3000					--shorter than typical (vs 5)
	playerHalberd:setJumpDriveRange(playerHalberd.min_jump_range,playerHalberd.max_jump_range)
	playerHalberd:setJumpDriveCharge(playerHalberd.max_jump_range)
	playerHalberd:setHullMax(230)						--weaker hull (vs 250)
	playerHalberd:setHull(230)							
--                 				 Arc, Dir, Range, CycleTime, Dmg
	playerHalberd:setBeamWeapon(0, 5, -10,  1500,       6.0, 8)		--narrower turreted beams
	playerHalberd:setBeamWeapon(1, 5,  10,  1500,       6.0, 8)		--vs arc:100, dir:-20
--									    Arc, Dir, Rotate speed
	playerHalberd:setBeamWeaponTurret(0, 70, -10, .25)
	playerHalberd:setBeamWeaponTurret(1, 70,  10, .25)

	playerHalberd:setWeaponTubeDirection(0,-45)			--front left facing (vs left)
	playerHalberd:setWeaponTubeDirection(1, 45)			--front right facing (vs left)
	playerHalberd:setWeaponTubeDirection(2,-90)			--left facing (vs right)
	playerHalberd:setWeaponTubeExclusiveFor(0,"HVLI")	--HVLI or Homing (vs all but Mine)
	playerHalberd:setWeaponTubeExclusiveFor(1,"HVLI")	--HVLI or Homing (vs all but Mine)
	playerHalberd:weaponTubeAllowMissle(0,"Homing")
	playerHalberd:weaponTubeAllowMissle(1,"Homing")
	playerHalberd:setWeaponTubeExclusiveFor(2,"Nuke")	--Nuke only (vs all but Mine)
	playerHalberd:setWeaponTubeExclusiveFor(3,"EMP")	--EMP only (vs all but Mine)
	playerHalberd:onTakingDamage(playerShipDamage)
	playerHalberd:addReputationPoints(50)
	return playerHalberd
end
function createPlayerShipHeadhunter()
	playerHeadhunter = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Headhunter")
	setBeamColor(playerHeadhunter)
	playerHeadhunter:setTypeName("Redhook")
	playerHeadhunter:setRepairCrewCount(4)							--more repair crew (vs 2)
	playerHeadhunter.max_jump_range = 25000							--shorter than typical (vs 50)
	playerHeadhunter.min_jump_range = 2500							--shorter than typical (vs 5)
	playerHeadhunter:setJumpDriveRange(playerHeadhunter.min_jump_range,playerHeadhunter.max_jump_range)
	playerHeadhunter:setJumpDriveCharge(playerHeadhunter.max_jump_range)
	playerHeadhunter:setHullMax(140)								--stronger hull (vs 120)
	playerHeadhunter:setHull(140)
	playerHeadhunter:setShieldsMax(100, 100)						--stronger shields (vs 70, 70)
	playerHeadhunter:setShields(100, 100)
--                 				 	 Arc, Dir, Range, CycleTime, Dmg
	playerHeadhunter:setBeamWeapon(0, 10,   0,  1000,		4.0, 4)	--one beam (vs 0)
--									    	Arc, Dir, Rotate speed
	playerHeadhunter:setBeamWeaponTurret(0, 120,   0, 1)			
	playerHeadhunter:setWeaponTubeCount(6)							--two fewer tubes, EMPS added, one front tube, 2 broadsides: medium and large, rear mine tube
	playerHeadhunter:setWeaponTubeDirection(0,   0):setTubeSize(0,"small" ):setTubeLoadTime(0, 6):setWeaponTubeExclusiveFor(0,"HVLI")
	playerHeadhunter:setWeaponTubeDirection(1, -90):setTubeSize(1,"medium"):setTubeLoadTime(1, 8):setWeaponTubeExclusiveFor(1,"HVLI"):weaponTubeAllowMissle(1,"Homing"):weaponTubeAllowMissle(1,"EMP"):weaponTubeAllowMissle(1,"Nuke")
	playerHeadhunter:setWeaponTubeDirection(2, -90):setTubeSize(2,"large" ):setTubeLoadTime(2,12):setWeaponTubeExclusiveFor(2,"HVLI")
	playerHeadhunter:setWeaponTubeDirection(3,  90):setTubeSize(3,"medium"):setTubeLoadTime(3, 8):setWeaponTubeExclusiveFor(3,"HVLI"):weaponTubeAllowMissle(3,"Homing"):weaponTubeAllowMissle(3,"EMP"):weaponTubeAllowMissle(3,"Nuke")
	playerHeadhunter:setWeaponTubeDirection(4,  90):setTubeSize(4,"large" ):setTubeLoadTime(4,12):setWeaponTubeExclusiveFor(4,"HVLI")
	playerHeadhunter:setWeaponTubeDirection(5, 180):setTubeSize(5,"medium"):setTubeLoadTime(5,10):setWeaponTubeExclusiveFor(5,"Mine")
	playerHeadhunter:setWeaponStorageMax("Mine",6)					--fewer mines (vs 8)
	playerHeadhunter:setWeaponStorage(   "Mine",6)				
	playerHeadhunter:setWeaponStorageMax("EMP", 4)					--more EMPs (vs 0)
	playerHeadhunter:setWeaponStorage(   "EMP", 4)					
	playerHeadhunter:setWeaponStorageMax("Nuke",4)					--fewer Nukes (vs 6)
	playerHeadhunter:setWeaponStorage(   "Nuke",4)				
	playerHeadhunter:onTakingDamage(playerShipDamage)
	playerHeadhunter:addReputationPoints(50)
	return playerHeadhunter
end
function createPlayerShipHearken()
	playerHearken = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Hearken")
	setBeamColor(playerHearken)
	playerHearken:setTypeName("Redhook")
	playerHearken:setImpulseMaxSpeed(70,85)					--faster impulse max (vs 60)
	playerHearken:setRepairCrewCount(5)						--more repair crew (vs 2)
	playerHearken.max_jump_range = 30000					--shorter than typical (vs 50)
	playerHearken.min_jump_range = 3000						--shorter than typical (vs 5)
	playerHearken:setJumpDriveRange(playerHearken.min_jump_range,playerHearken.max_jump_range)
	playerHearken:setJumpDriveCharge(playerHearken.max_jump_range)
	playerHearken:setHullMax(180)							--stronger hull (vs 120)
	playerHearken:setHull(180)
	playerHearken:setShieldsMax(120, 120)					--stronger shields (vs 70, 70)
	playerHearken:setShields(120, 120)
--                 				  Arc,Dir,	Range, CycleTime, Dmg
	playerHearken:setBeamWeapon(0, 10,	0,	 1000,		 4.0, 4.5)	--one beam (vs 0)
--										Arc,  Dir, Rotate speed
	playerHearken:setBeamWeaponTurret(0, 80,	0, .5)				--slow turret 
	playerHearken:setWeaponTubeCount(7)						--one fewer mine tube, but EMPs added
	playerHearken:setWeaponTubeDirection(6, 180)			--mine tube points straight back
	playerHearken:setWeaponTubeExclusiveFor(0,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(1,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(2,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(3,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(4,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(5,"HVLI")
	playerHearken:setWeaponTubeExclusiveFor(6,"Mine")
	playerHearken:weaponTubeAllowMissle(0,"Homing")
	playerHearken:weaponTubeAllowMissle(3,"Homing")
	playerHearken:weaponTubeAllowMissle(1,"EMP")
	playerHearken:weaponTubeAllowMissle(4,"EMP")
	playerHearken:setWeaponStorageMax("EMP",4)				--more EMPs (vs 0)
	playerHearken:setWeaponStorage("EMP", 4)					
	playerHearken:setWeaponStorageMax("Nuke",0)				--fewer Nukes (vs 6)
	playerHearken:setWeaponStorage("Nuke", 0)				
	playerHearken:setSystemCoolantRate("reactor",		1.15)	--less (vs 1.2)
	playerHearken:setSystemCoolantRate("jumpdrive",		1.3)	--more (vs 1.2)
	playerHearken:setSystemCoolantRate("beamweapons",	0.95)	--less (vs 1.2)
	playerHearken:setSystemCoolantRate("maneuver",		1.2)	--same (vs 1.2)
	playerHearken:setSystemCoolantRate("impulse",		1.2)	--same (vs 1.2)
	playerHearken:setSystemCoolantRate("frontshield",	1.2)	--same (vs 1.2)
	playerHearken:setSystemCoolantRate("rearshield",	1.05)	--less (vs 1.2)
	playerHearken:setSystemCoolantRate("missilesystem",	1.05)	--less (vs 1.2)
	playerHearken:setSystemPowerRate("reactor",			0.375)	--more (vs 0.30)
	playerHearken:setSystemPowerRate("beamweapons",		0.275)	--less (vs 0.30)
	playerHearken:setSystemPowerRate("jumpdrive",		0.35)	--more (vs 0.30)
	playerHearken:setSystemPowerRate("maneuver",		0.3)	--same (vs 0.30)
	playerHearken:setSystemPowerRate("impulse",			0.4)	--more (vs 0.30)
	playerHearken:setSystemPowerRate("frontshield",		0.35)	--more (vs 0.30)
	playerHearken:setSystemPowerRate("rearshield",		0.225)	--less (vs 0.30)	
	playerHearken:setSystemPowerRate("missilesystem",	0.225)	--less (vs 0.30)	
	playerHearken:onTakingDamage(playerShipDamage)
	playerHearken:addReputationPoints(50)
	return playerHearken
end
function createPlayerShipHrothgar()
	playerNusret = PlayerSpaceship():setTemplate("Nautilus"):setFaction("Human Navy"):setCallSign("Beowulf")
	setBeamColor(playerNusret)
	--aka Beowulf
	playerNusret:setTypeName("Nusret")
	playerNusret:setHullMax(150)						--stronger hull (vs 100)
	playerNusret:setHull(150)
	playerNusret:setShieldsMax(100, 100)				--stronger shields (vs 60, 60)
	playerNusret:setShields(100, 100)
	playerNusret:setRepairCrewCount(6)					--more repair crew (vs 4)
	playerNusret.max_jump_range = 25000					--shorter than typical (vs 50)
	playerNusret.min_jump_range = 2500						--shorter than typical (vs 5)
	playerNusret:setJumpDriveRange(playerNusret.min_jump_range,playerNusret.max_jump_range)
	playerNusret:setJumpDriveCharge(playerNusret.max_jump_range)
--                 			      Arc, Dir, Range, CycleTime, Damage
	playerNusret:setBeamWeapon(0,  10, -35,	1000, 		6.0, 	6.0)	
	playerNusret:setBeamWeapon(1,  10,  35,	1000, 		6.0,    6.0)	
	playerNusret:setBeamWeapon(2,  40,	 0,	 500,		8.0,	9.0)	--additional short, slow, stronger beam
--										Arc,  Dir, Rotate speed
	playerNusret:setBeamWeaponTurret(0,	 90,  -35,			 .4)		--slow turret
	playerNusret:setBeamWeaponTurret(1,	 90,   35,			 .4)
	playerNusret:setTubeLoadTime(2,8)					--faster (vs 10)
	playerNusret:setWeaponTubeDirection(0,-60)			--front left facing (vs back)
	playerNusret:setWeaponTubeDirection(1, 60)			--front right facing (vs back)
	playerNusret:setWeaponTubeExclusiveFor(0,"Homing")	--Homing only (vs Mine)
	playerNusret:setWeaponTubeExclusiveFor(1,"Homing")	--Homing only (vs Mine)
	playerNusret:setWeaponStorageMax("Homing",8)		--more homing (vs 0)
	playerNusret:setWeaponStorage("Homing", 8)				
	playerNusret:setWeaponStorageMax("Mine",8)			--fewer mines (vs 12)
	playerNusret:setWeaponStorage("Mine", 8)				
	playerNusret:setSystemCoolantRate("reactor",		1.25)	--more (vs 1.2)
	playerNusret:setSystemCoolantRate("jumpdrive",		1.15)	--less (vs 1.2)
	playerNusret:setSystemCoolantRate("beamweapons",	1.25)	--more (vs 1.2)
	playerNusret:setSystemCoolantRate("maneuver",		1.2)	--same (vs 1.2)
	playerNusret:setSystemCoolantRate("impulse",		0.9)	--less (vs 1.2)
	playerNusret:setSystemCoolantRate("frontshield",	0.95)	--less (vs 1.2)
	playerNusret:setSystemCoolantRate("rearshield",		0.95)	--less (vs 1.2)
	playerNusret:setSystemCoolantRate("missilesystem",	1.2)	--same (vs 1.2)
	playerNusret:setSystemPowerRate("reactor",			0.4)	--more (vs 0.30)
	playerNusret:setSystemPowerRate("beamweapons",		0.35)	--more (vs 0.30)
	playerNusret:setSystemPowerRate("jumpdrive",		0.35)	--more (vs 0.30)
	playerNusret:setSystemPowerRate("maneuver",			0.325)	--more (vs 0.30)
	playerNusret:setSystemPowerRate("impulse",			0.275)	--less (vs 0.30)
	playerNusret:setSystemPowerRate("frontshield",		0.3)	--same (vs 0.30)
	playerNusret:setSystemPowerRate("rearshield",		0.3)	--same (vs 0.30)	
	playerNusret:setSystemPowerRate("missilesystem",	0.375)	--more (vs 0.30)	
	playerNusret:onTakingDamage(playerShipDamage)
	playerNusret:addReputationPoints(50)
	return playerNusret
end
function createPlayerShipHummer()
	playerHummer = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Hummer")
	setBeamColor(playerHummer)
	playerHummer:setTypeName("XR-Lindworm")
	playerHummer:setRepairCrewCount(3)			--more repair crew (vs 1)
	playerHummer:setWarpDrive(true)				--warp drive (vs none)
	playerHummer:setWarpSpeed(320)
	playerHummer:setShieldsMax(100,30)			--stronger front, weaker rear (vs 40)
	playerHummer:setShields(100,30)
	playerHummer:setHullMax(120)				--stronger (vs 75)
	playerHummer:setHull(120)							
	playerHummer:setWeaponTubeCount(6)			--more (vs 3)
	playerHummer:setWeaponTubeExclusiveFor(0,"HVLI")
	playerHummer:setWeaponTubeExclusiveFor(3,"EMP")
	playerHummer:setWeaponTubeExclusiveFor(4,"EMP")
	playerHummer:setWeaponTubeExclusiveFor(5,"Mine")
	playerHummer:setWeaponTubeDirection(1,3)	--angled (vs 1)
	playerHummer:setWeaponTubeDirection(2,-3)	--angled (vs -1)
	playerHummer:setWeaponTubeDirection(3,-90)
	playerHummer:setWeaponTubeDirection(4,90)
	playerHummer:setWeaponTubeDirection(5,180)
	playerHummer:weaponTubeAllowMissle(1,"Homing")
	playerHummer:weaponTubeAllowMissle(2,"Homing")
	playerHummer:weaponTubeAllowMissle(3,"Nuke")
	playerHummer:weaponTubeAllowMissle(4,"Nuke")
	playerHummer:setWeaponStorageMax("Homing",8)--more (vs 3)
	playerHummer:setWeaponStorage("Homing", 8)				
	playerHummer:setWeaponStorageMax("Nuke",2)	--more Nukes (vs 0)
	playerHummer:setWeaponStorage("Nuke", 2)				
	playerHummer:setWeaponStorageMax("EMP",3)	--more EMPs (vs 0)
	playerHummer:setWeaponStorage("EMP", 3)
	playerHummer:setWeaponStorageMax("Mine",2)	--more (vs 0)
	playerHummer:setWeaponStorage("Mine", 2)
	playerHummer:setTubeLoadTime(3,15)
	playerHummer:setTubeLoadTime(4,15)
	playerHummer:setTubeLoadTime(5,25)
--	playerHummer:setSystemHeatRate("reactor",		.5)	--more (vs .05) Lingling	
	playerHummer:onTakingDamage(playerShipDamage)
	playerHummer:addReputationPoints(50)
	return playerHummer
end
function createPlayerShipInk()
	playerInk = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Ink")
	setBeamColor(playerInk)
	playerInk:setTypeName("Squid")
	playerInk:setRepairCrewCount(5)					--more repair crew (vs 2)
	playerInk:setShieldsMax(100, 100)				--stronger shields (vs 70, 70)
	playerInk:setShields(100, 100)
	playerInk:setHullMax(130)						--stronger (vs 120)
	playerInk:setHull(130)							
	playerInk.max_jump_range = 20000				--shorter than typical (vs 50)
	playerInk.min_jump_range = 2000					--shorter than typical (vs 5)
	playerInk:setJumpDriveRange(playerInk.min_jump_range,playerInk.max_jump_range)
	playerInk:setJumpDriveCharge(playerInk.max_jump_range)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerInk:setBeamWeapon(0, 10,	0,	1000,		4,		4)		--one beam (vs 0)
--									   Arc,	  Dir, Rotate speed
	playerInk:setBeamWeaponTurret(0,	80,		0,		1)			--slow turret 
	playerInk:setWeaponTubeDirection(0,0)					--forward facing (vs left)
	playerInk:setWeaponTubeDirection(3,0)					--forward facing (vs right)
	playerInk:setTubeLoadTime(0,12)							--slower (vs 8)
	playerInk:setTubeLoadTime(3,12)							--slower (vs 8)
	playerInk:setWeaponTubeExclusiveFor(2,"Homing")			--homing only (vs HVLI)
	playerInk:setWeaponTubeExclusiveFor(5,"Homing")			--homing only (vs HVLI)
	playerInk:setTubeLoadTime(2,10)							--slower (vs 8)
	playerInk:setTubeLoadTime(5,10)							--slower (vs 8)
	playerInk:setTubeLoadTime(6,15)							--slower (vs 8)
	playerInk:setTubeLoadTime(7,15)							--slower (vs 8)
	playerInk:setWeaponTubeExclusiveFor(0,"HVLI")			--HVLI only (vs Homing + HVLI)
	playerInk:setWeaponTubeExclusiveFor(3,"HVLI")			--HVLI only (vs Homing + HVLI)
	playerInk:weaponTubeDisallowMissle(1,"Mine")			--no sideways mines
	playerInk:weaponTubeDisallowMissle(4,"Mine")			--no sideways mines
	playerInk:setWeaponStorageMax("HVLI",10)				--fewer HVLI (vs 20)
	playerInk:setWeaponStorage("HVLI", 10)				
	playerInk:setWeaponStorageMax("Homing",10)				--fewer Homing (vs 12)
	playerInk:setWeaponStorage("Homing", 10)				
	playerInk:setWeaponStorageMax("Mine",6)					--fewer mines (vs 8)
	playerInk:setWeaponStorage("Mine", 6)				
	playerInk:setWeaponStorageMax("EMP",4)					--more EMPs (vs 0)
	playerInk:setWeaponStorage("EMP", 4)					
	playerInk:setWeaponStorageMax("Nuke",4)					--fewer Nukes (vs 6)
	playerInk:setWeaponStorage("Nuke", 4)				
	playerInk:setLongRangeRadarRange(25000)					--shorter long range sensors (vs 30000)
	playerInk.normal_long_range_radar = 25000
--	playerInk:setSystemHeatRate("reactor",		.5)	--more (vs .05) Lingling	
	playerInk:onTakingDamage(playerShipDamage)
	playerInk:addReputationPoints(50)
	return playerInk
end
function createPlayerShipJarvis()
	playerJarvis = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Jarvis")
	setBeamColor(playerJarvis)
	playerJarvis:setTypeName("Butler")
	playerJarvis:setImpulseMaxSpeed(70)						--slower impulse max (vs 80)
	playerJarvis:setWarpSpeed(400)							--slower (vs 750)
	playerJarvis:setHullMax(100)							--weaker hull (vs 160)
	playerJarvis:setHull(100)
	playerJarvis:setShieldsMax(100, 100)					--weaker shields (vs 160, 160)
--                  			 Arc, Dir, Range, CycleTime, Dmg
	playerJarvis:setBeamWeapon(0, 10, -60, 900.0, 		6.0,   6)	--left, right, overlap beams (vs forward)
	playerJarvis:setBeamWeapon(1, 10,  60, 900.0, 		6.0,   6)	
--										Arc, Dir, Rotate speed
	playerJarvis:setBeamWeaponTurret(0, 140, -60, .6)		--slow turret beams
	playerJarvis:setBeamWeaponTurret(1, 140,  60, .6)
	playerJarvis:setWeaponTubeCount(4)						--fewer (vs 6)
	playerJarvis:setWeaponTubeExclusiveFor(0,"Nuke")		--small sized tube nuke only (vs HVLI)
	playerJarvis:setWeaponTubeExclusiveFor(1,"EMP")			--normal sized tube EMP only (vs HVLI)
	playerJarvis:setWeaponTubeExclusiveFor(3,"Homing")		--homing only
	playerJarvis:setWeaponTubeDirection(3, 180)				--on rear tube
	playerJarvis:setWeaponStorageMax("Homing",4)			--fewer (vs 8)
	playerJarvis:setWeaponStorage("Homing", 4)				
	playerJarvis:setWeaponStorageMax("EMP",4)				--fewer (vs 6)
	playerJarvis:setWeaponStorage("EMP", 4)				
	playerJarvis:setWeaponStorageMax("Nuke",3)				--fewer (vs 4)
	playerJarvis:setWeaponStorage("Nuke", 3)				
	playerJarvis:setWeaponStorageMax("Mine",0)				--fewer (vs 6)
	playerJarvis:setWeaponStorage("Mine", 0)				
	playerJarvis:setSystemCoolantRate("reactor",		1.35)	--more (vs 1.2)
	playerJarvis:setSystemCoolantRate("warp",			1.25)	--more (vs 1.2)
	playerJarvis:setSystemCoolantRate("beamweapons",	1.1)	--less (vs 1.2)
	playerJarvis:setSystemCoolantRate("maneuver",		1.05)	--less (vs 1.2)
	playerJarvis:setSystemCoolantRate("impulse",		0.75)	--less (vs 1.2)
	playerJarvis:setSystemCoolantRate("frontshield",	1.15)	--less (vs 1.2)
	playerJarvis:setSystemCoolantRate("rearshield",		1.4)	--more (vs 1.2)
	playerJarvis:setSystemCoolantRate("missilesystem",	0.8)	--less (vs 1.2)
	playerJarvis:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerJarvis:setSystemPowerRate("beamweapons",		0.325)	--more (vs 0.30)
	playerJarvis:setSystemPowerRate("warp",				0.35)	--more (vs 0.30)
	playerJarvis:setSystemPowerRate("maneuver",			0.275)	--less (vs 0.30)
	playerJarvis:setSystemPowerRate("impulse",			0.075)	--less (vs 0.30)
	playerJarvis:setSystemPowerRate("frontshield",		0.25)	--less (vs 0.30)
	playerJarvis:setSystemPowerRate("rearshield",		0.375)	--more (vs 0.30)	
	playerJarvis:setSystemPowerRate("missilesystem",	0.075)	--less (vs 0.30)	
	playerJarvis:onTakingDamage(playerShipDamage)
	playerJarvis:addReputationPoints(50)
	return playerJarvis
end
function createPlayerShipJeeves()
	playerJeeves = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Jeeves")
	setBeamColor(playerJeeves)
	playerJeeves:setTypeName("Butler")
	playerJeeves:setWarpSpeed(400)							--slower (vs 750)
	playerJeeves:setHullMax(100)							--weaker hull (vs 160)
	playerJeeves:setHull(100)
	playerJeeves:setShieldsMax(100, 100)					--weaker shields (vs 160, 160)
--                  			 Arc, Dir, Range, CycleTime, Dmg
	playerJeeves:setBeamWeapon(0, 80, -90, 900.0, 		6.0,   6)	--side beams (vs forward)
	playerJeeves:setBeamWeapon(1, 80,  90, 900.0, 		6.0,   6)	
	playerJeeves:setWeaponTubeCount(4)						--fewer (vs 6)
	playerJeeves:setWeaponTubeExclusiveFor(1,"EMP")			--normal sized tube allow EMPs and Nukes (vs HVLI)
	playerJeeves:weaponTubeAllowMissle(1,"Nuke")
	playerJeeves:setWeaponTubeExclusiveFor(2,"Homing")		--large tube for homing (vs HVLI)
	playerJeeves:setWeaponTubeExclusiveFor(3,"Mine")
	playerJeeves:setWeaponTubeDirection(3, 180)
	playerJeeves:setWeaponStorageMax("Homing",6)			--fewer (vs 8)
	playerJeeves:setWeaponStorage("Homing", 6)				
	playerJeeves:setWeaponStorageMax("EMP",3)				--fewer (vs 6)
	playerJeeves:setWeaponStorage("EMP", 3)				
	playerJeeves:setWeaponStorageMax("Nuke",2)				--fewer (vs 4)
	playerJeeves:setWeaponStorage("Nuke", 2)				
	playerJeeves:setWeaponStorageMax("Mine",3)				--fewer (vs 6)
	playerJeeves:setWeaponStorage("Mine", 3)				
	playerJeeves:onTakingDamage(playerShipDamage)
	playerJeeves:addReputationPoints(50)
	return playerJeeves
end
function createPlayerShipKindling()
	playerKindling = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Kindling")
	setBeamColor(playerKindling)
	playerKindling:setTypeName("Phoenix")
	playerKindling.max_jump_range = 28000					--shorter than typical (vs 50)
	playerKindling.min_jump_range = 3000					--shorter than typical (vs 5)
	playerKindling:setJumpDriveRange(playerKindling.min_jump_range,playerKindling.max_jump_range)
	playerKindling:setJumpDriveCharge(playerKindling.max_jump_range)
	playerKindling:setShieldsMax(130, 95)					--stronger shields (vs 80, 80)
	playerKindling:setShields(130, 95)
	playerKindling:setHullMax(100)							--weaker hull (vs 200)
	playerKindling:setHull(100)
	playerKindling:setWeaponTubeDirection(0,-90)			--left -60 (vs -5)
	playerKindling:setWeaponTubeDirection(1, 90)			--right 60 (vs 5)
	playerKindling:setWeaponStorageMax("Homing",6)			--less (vs 12)
	playerKindling:setWeaponStorage("Homing", 6)				
	playerKindling:setWeaponStorageMax("Nuke",1)			--fewer (vs 4)
	playerKindling:setWeaponStorage("Nuke", 1)				
	playerKindling:setWeaponStorageMax("EMP",1)				--fewer (vs 6)
	playerKindling:setWeaponStorage("EMP", 1)				
	playerKindling:setWeaponStorageMax("Mine",2)			--fewer (vs 8)
	playerKindling:setWeaponStorage("Mine", 2)				
	playerKindling:setWeaponStorageMax("HVLI",10)			--more (vs 0)
	playerKindling:setWeaponStorage("HVLI", 10)				
	playerKindling:setLongRangeRadarRange(25000)
	playerKindling.normal_long_range_radar = 25000
	playerKindling:onTakingDamage(playerShipDamage)
	playerKindling:addReputationPoints(50)
	local update_data = {
		update = function (self, obj, delta)
				-- in a small sign of mercy to players they get their best beams at 90% max heat rather than burning hotel
				-- it would be kind of cool to give extra damage or something, but given how long ships last this probably wont be seen
				local heat=extraMath.clamp(obj:getSystemHeat("beamweapons"),0,0.90)
				heat=heat/0.90 -- scale to that 0.90 = 1
				obj:setBeamWeapon(0, extraMath.lerp(120,15,heat), extraMath.lerp(-90,5,heat), extraMath.lerp(500,1250,heat), 6, 8)
				obj:setBeamWeapon(1, extraMath.lerp(120,15,heat), extraMath.lerp(90,-5,heat), extraMath.lerp(500,1250,heat), 6, 8)
			end
	}
	update_system:addUpdate(playerKindling,"dynamic kindling beams",update_data)
	return playerKindling
end
function createPlayerShipKnick()
	playerKnick = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Knick")
	setBeamColor(playerKnick)
	playerKnick:setTypeName("Glass Cannon")
	playerKnick:setTubeSize(0, "large")
	playerKnick:setTubeSize(1, "large")
	playerKnick:setTubeSize(2, "large")
	playerKnick:onTakingDamage(playerShipDamage)
	playerKnick:addReputationPoints(50)
	return playerKnick
end
function createPlayerShipLancelot()
	playerLancelot = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Lancelot")
	setBeamColor(playerLancelot)
	playerLancelot:setTypeName("Noble")
	playerLancelot:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerLancelot:setMaxEnergy(800)						--less maximum energy (vs 1000)
	playerLancelot:setEnergy(800)							
	playerLancelot:setShieldsMax(150, 80)					--stronger front shield (vs 80, 80)
	playerLancelot:setShields(150, 80)
	playerLancelot.max_jump_range = 30000					--shorter than typical (vs 50)
	playerLancelot.min_jump_range = 3000					--shorter than typical (vs 5)
	playerLancelot:setJumpDriveRange(playerLancelot.min_jump_range,playerLancelot.max_jump_range)
	playerLancelot:setJumpDriveCharge(playerLancelot.max_jump_range)
--                 				   Arc, Dir, Range, CycleTime, Dmg
	playerLancelot:setBeamWeapon(0, 60, -30,  1000,         6, 8)	--4 beams (vs 2)
	playerLancelot:setBeamWeapon(1, 60,  30,  1000,         6, 8)	--weaker (vs 10 dmg)
	playerLancelot:setBeamWeapon(2, 30, -10,  1000,         6, 8)	
	playerLancelot:setBeamWeapon(3, 30,  10,  1000,         6, 8)	--narrower (vs 90 degrees)
	playerLancelot:setBeamWeaponEnergyPerFire(0,playerLancelot:getBeamWeaponEnergyPerFire(0)*3)
	playerLancelot:setBeamWeaponHeatPerFire(0,playerLancelot:getBeamWeaponHeatPerFire(0)*3)
	playerLancelot:setBeamWeaponEnergyPerFire(1,playerLancelot:getBeamWeaponEnergyPerFire(1)*3)
	playerLancelot:setBeamWeaponHeatPerFire(1,playerLancelot:getBeamWeaponHeatPerFire(1)*3)
	playerLancelot:setBeamWeaponEnergyPerFire(2,playerLancelot:getBeamWeaponEnergyPerFire(2)*3)
	playerLancelot:setBeamWeaponHeatPerFire(2,playerLancelot:getBeamWeaponHeatPerFire(2)*3)
	playerLancelot:setBeamWeaponEnergyPerFire(3,playerLancelot:getBeamWeaponEnergyPerFire(3)*3)
	playerLancelot:setBeamWeaponHeatPerFire(3,playerLancelot:getBeamWeaponHeatPerFire(3)*3)
	playerLancelot:setWeaponTubeCount(5)					--more (vs 3)
	playerLancelot:setWeaponTubeDirection(0,-3)				--1st tube points less left (vs -5)
	playerLancelot:setWeaponTubeDirection(1, 3)				--2nd tube points less right (vs 5)
	playerLancelot:setWeaponTubeDirection(2,-90)			--3rd tube points left (vs rear)
	playerLancelot:setWeaponTubeDirection(3, 90)			--4th tube points right (vs none)
	playerLancelot:setWeaponTubeDirection(4,180)			--5th tube points to the rear (vs none)
	playerLancelot:setTubeSize(0,"small")					--left front HVLI tube smaller
	playerLancelot:setTubeSize(2,"large")					--left broadside larger
	playerLancelot:setTubeLoadTime(0,6)						--left front HVLI tube faster
	playerLancelot:setTubeLoadTime(2,20)					--left broadside slower
	playerLancelot:setTubeLoadTime(4,15)					--rear mining tube slower
	playerLancelot:setWeaponTubeExclusiveFor(0,"HVLI")		--only HVLI
	playerLancelot:setWeaponTubeExclusiveFor(1,"HVLI")		--only HVLI
	playerLancelot:setWeaponTubeExclusiveFor(2,"Homing")	--only Homing, Nuke, EMP
	playerLancelot:weaponTubeAllowMissle(2,"Nuke")
	playerLancelot:weaponTubeAllowMissle(2,"EMP")
	playerLancelot:setWeaponTubeExclusiveFor(3,"Homing")	--only Homing, Nuke, EMP
	playerLancelot:weaponTubeAllowMissle(3,"Nuke")
	playerLancelot:weaponTubeAllowMissle(3,"EMP")
	playerLancelot:setWeaponTubeExclusiveFor(4,"Mine")		--only mine
	playerLancelot:setWeaponStorageMax("HVLI", 8)			--more (vs 0)
	playerLancelot:setWeaponStorage("HVLI", 8)				
	playerLancelot:setCombatManeuver(250,200)				--less (vs 400,250)
	playerLancelot:onTakingDamage(playerShipDamage)
	playerLancelot:addReputationPoints(50)
	return playerLancelot
end
function createPlayerShipMagnum()
	playerMagnum = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Magnum")
	setBeamColor(playerMagnum)
	playerMagnum:setTypeName("Focus")
	playerMagnum:setImpulseMaxSpeed(70)						--slower (vs 80)
	playerMagnum:setRotationMaxSpeed(20)					--faster spin (vs 15)
	playerMagnum:setWarpDrive(false)						--no warp
	playerMagnum:setJumpDrive(true)							--jump drive
	playerMagnum.max_jump_range = 25000					--shorter than typical (vs 50)
	playerMagnum.min_jump_range = 2500						--shorter than typical (vs 5)
	playerMagnum:setJumpDriveRange(playerMagnum.min_jump_range,playerMagnum.max_jump_range)
	playerMagnum:setJumpDriveCharge(playerMagnum.max_jump_range)
	playerMagnum:setHullMax(100)							--weaker hull (vs 160)
	playerMagnum:setHull(100)
	playerMagnum:setShieldsMax(120, 120)					--weaker shields (vs 160, 160)
	playerMagnum:setShields(120, 120)
	playerMagnum:setBeamWeapon(0, 60, -20, 1000.0, 6.0, 5)	--narrower (vs 70)
	playerMagnum:setBeamWeapon(1, 60,  20, 1000.0, 6.0, 5)	
	playerMagnum:setWeaponTubeCount(4)						--fewer (vs 6)
	playerMagnum:weaponTubeAllowMissle(2,"Homing")
	playerMagnum:weaponTubeAllowMissle(2,"EMP")
	playerMagnum:weaponTubeAllowMissle(2,"Nuke")
	playerMagnum:setWeaponTubeExclusiveFor(3,"Mine")
	playerMagnum:setWeaponTubeDirection(3, 180)
	playerMagnum:setWeaponStorageMax("EMP",2)				--fewer (vs 6)
	playerMagnum:setWeaponStorage("EMP", 2)				
	playerMagnum:setWeaponStorageMax("Nuke",2)				--fewer (vs 4)
	playerMagnum:setWeaponStorage("Nuke", 2)	
	playerMagnum.turbo_torpedo_type = {"Nuke","HomingMissile"}
	playerMagnum.turbo_torp_factor = 3
	playerMagnum.turbo_torp_charge_interval = 90
	playerMagnum:onTakingDamage(playerShipDamage)
	playerMagnum:addReputationPoints(50)
	return playerMagnum
end
function createPlayerShipMixer()
	playerAmalgam = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Mixer")
	setBeamColor(playerAmalgam)
	playerAmalgam:setTypeName("Amalgam")
	playerAmalgam:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerAmalgam.max_jump_range = 40000				--shorter (vs 50)
	playerAmalgam.min_jump_range = 4000					--shorter (vs 5)
	playerAmalgam:setJumpDriveRange(playerAmalgam.min_jump_range,playerAmalgam.max_jump_range)
	playerAmalgam:setJumpDriveCharge(playerAmalgam.max_jump_range)
	playerAmalgam:setImpulseMaxSpeed(80)				--slower (vs 90)
	playerAmalgam:setRotationMaxSpeed(8)				--slower (vs 10)
	playerAmalgam:setShieldsMax(150,150)				--weaker shields (vs 200)
	playerAmalgam:setShields(150,150)
--								  Arc, Dir, Range, CycleTime, Dmg
	playerAmalgam:setBeamWeapon(0, 90, -20,  1200,         6, 8)	--narrower (vs 100), shorter (vs 1500)
	playerAmalgam:setBeamWeapon(1, 90,  20,  1200,         6, 8)	--narrower (vs 100), shorter (vs 1500)
	playerAmalgam:setBeamWeapon(2, 10, -60,  1000,         4, 6)	--additional beam
	playerAmalgam:setBeamWeapon(3, 10,  60,  1000,         4, 6)	--additional beam
--											Arc,  Dir, Rotate speed
	playerAmalgam:setBeamWeaponTurret(2,	 60,  -60,			.6)
	playerAmalgam:setBeamWeaponTurret(3,	 60,   60,			.6)
	playerAmalgam:setWeaponTubeCount(4)					--2 fewer broadside, 1 extra mine (vs 5)
	playerAmalgam:setWeaponTubeDirection(1, 90)			--mine tube points right (vs left)
	playerAmalgam:setWeaponTubeDirection(2, 180)		--mine tube points back (vs right)
	playerAmalgam:setWeaponTubeDirection(3, 180)		--mine tube points back (vs right)
	playerAmalgam:setWeaponTubeExclusiveFor(0,"Homing")	--homing only (vs any)
	playerAmalgam:setWeaponTubeExclusiveFor(1,"Homing")	--homing only (vs any)
	playerAmalgam:setWeaponTubeExclusiveFor(2,"Mine")	--mine only (vs any)
	playerAmalgam:setWeaponTubeExclusiveFor(3,"Mine")	--mine only (vs any)
	playerAmalgam:setTubeLoadTime(2,16)					--rear tube slower (vs 8)
	playerAmalgam:setTubeLoadTime(3,16)					--rear tube slower (vs 8)
	playerAmalgam:setTubeSize(0,"large")				--left tube large (vs normal)
	playerAmalgam:setTubeSize(1,"large")				--right tube large (vs normal)
	playerAmalgam:setWeaponStorageMax("Homing", 16)		--more (vs 12)
	playerAmalgam:setWeaponStorage("Homing", 16)				
	playerAmalgam:setWeaponStorageMax("Nuke", 0)		--less (vs 4)
	playerAmalgam:setWeaponStorage("Nuke", 0)				
	playerAmalgam:setWeaponStorageMax("Mine", 10)		--more (vs 8)
	playerAmalgam:setWeaponStorage("Mine", 10)				
	playerAmalgam:setWeaponStorageMax("EMP", 0)			--less (vs 6)
	playerAmalgam:setWeaponStorage("EMP", 0)				
	playerAmalgam:setWeaponStorageMax("HVLI", 0)		--less (vs 20)
	playerAmalgam:setWeaponStorage("HVLI", 0)
--	playerAmalgam:setSystemHeatRate("reactor",		.5)	--more (vs .05) Lingling	
	playerAmalgam:onTakingDamage(playerShipDamage)
	playerAmalgam:addReputationPoints(50)
	return playerAmalgam
end
function createPlayerShipManxman()
	playerManxman = PlayerSpaceship():setTemplate("Nautilus"):setFaction("Human Navy"):setCallSign("Manxman")
	setBeamColor(playerManxman)
	playerManxman:setTypeName("Nusret")
	playerManxman.max_jump_range = 30000				--shorter than typical (vs 50)
	playerManxman.min_jump_range = 3000					--shorter than typical (vs 5)
	playerManxman:setJumpDriveRange(playerManxman.min_jump_range,playerManxman.max_jump_range)
	playerManxman:setJumpDriveCharge(playerManxman.max_jump_range)
	playerManxman:setWeaponTubeCount(5)					--more (vs 3)
	playerManxman:setWeaponTubeDirection(0,  0)			--front (vs back)
	playerManxman:setWeaponTubeDirection(1,-90)			--left facing (vs back)
	playerManxman:setWeaponTubeDirection(2, 90)			--right facing (vs back)
	playerManxman:setWeaponTubeDirection(3,180)
	playerManxman:setWeaponTubeDirection(4,180)
	playerManxman:setTubeSize(0,"small")				--small (vs medium)
	playerManxman:setTubeSize(3,"large")
	playerManxman:setWeaponTubeExclusiveFor(0,"Homing")	--Homing only (vs Mine)
	playerManxman:setWeaponTubeExclusiveFor(1,"Homing")	--Homing only (vs Mine)
	playerManxman:setWeaponTubeExclusiveFor(2,"Homing")	--Homing only (vs Mine)
	playerManxman:setWeaponTubeExclusiveFor(3,"Homing")
	playerManxman:setWeaponTubeExclusiveFor(4,"Mine")
	playerManxman:setTubeLoadTime(0,5)					--faster (vs 10)
	playerManxman:setTubeLoadTime(3,20)					--slower (vs 10)
	playerManxman:setWeaponStorageMax("Homing",8)		--more homing (vs 0)
	playerManxman:setWeaponStorage("Homing", 8)				
	playerManxman:setWeaponStorageMax("Mine",8)			--fewer mines (vs 12)
	playerManxman:setWeaponStorage("Mine", 8)				
	playerManxman:onTakingDamage(playerShipDamage)
	playerManxman:addReputationPoints(50)
	return playerManxman
end
function createPlayerShipMortar()
	playerMortar = PlayerSpaceship():setTemplate("Player Missile Cr."):setFaction("Human Navy"):setCallSign("Grad")
	setBeamColor(playerMortar)
	playerMortar:setTypeName("Mortar")
	playerMortar:setRadarTrace("laser.png")
	playerMortar:setHullMax(160)						--weaker hull (vs 200)
	playerMortar:setHull(160)
	playerMortar:setShieldsMax(160,160)					--stronger shields (vs 110,70)
	playerMortar:setShields(160,160)
	playerMortar:setImpulseMaxSpeed(80)					--faster impulse max (vs 60)
	playerMortar:setRotationMaxSpeed(15)				--faster spin (vs 8)
	playerMortar:setAcceleration(40,40)					--faster (vs 15)
	playerMortar:setCombatManeuver(400,250)				--changed vs (450,150)
--                  			  Arc, Dir,Range, CycleTime,  Dmg
	playerMortar:setBeamWeapon(0,  60, -15,	1500,		6.0,	6):setBeamWeaponDamageType(0,"emp")
	playerMortar:setBeamWeapon(1,  60,  15,	1500,		6.0,	6):setBeamWeaponDamageType(0,"emp")
	playerMortar:setBeamWeapon(2,  60, -15,	1000,		6.0,	6):setBeamWeaponDamageType(0,"kinetic")
	playerMortar:setBeamWeapon(3,  60,  15,	1000,		6.0,	6):setBeamWeaponDamageType(0,"kinetic")
	playerMortar:setBeamWeapon(4,  60, -15,	 500,		6.0,	6)
	playerMortar:setBeamWeapon(5,  60,  15,	 500,		6.0,	6)
	playerMortar:setWeaponTubeCount(3)					--fewer (vs 7)
	playerMortar:setWeaponTubeDirection(0, -90):setTubeSize(0,"medium"):setTubeLoadTime(0, 8):setWeaponTubeExclusiveFor(0,"HVLI"):weaponTubeAllowMissle(0,"Homing"):weaponTubeAllowMissle(0,"EMP"):weaponTubeAllowMissle(0,"Nuke")
	playerMortar:setWeaponTubeDirection(1,  90):setTubeSize(1,"medium"):setTubeLoadTime(1, 8):setWeaponTubeExclusiveFor(1,"HVLI"):weaponTubeAllowMissle(1,"Homing"):weaponTubeAllowMissle(1,"EMP"):weaponTubeAllowMissle(1,"Nuke")
	playerMortar:setWeaponTubeDirection(2, 180):setTubeSize(2,"medium"):setTubeLoadTime(2, 8):setWeaponTubeExclusiveFor(2,"Mine")
	playerMortar:setWeaponStorageMax("HVLI",	10)			--more (vs 0)
	playerMortar:setWeaponStorage(   "HVLI",	10)				
	playerMortar:setWeaponStorageMax("Homing",	6)			--fewer (vs 30)
	playerMortar:setWeaponStorage(   "Homing",	6)				
	playerMortar:setWeaponStorageMax("Mine",	2)			--fewer (vs 12)
	playerMortar:setWeaponStorage(   "Mine",	2)				
	playerMortar:setWeaponStorageMax("EMP", 	4)			--fewer (vs 10)
	playerMortar:setWeaponStorage(   "EMP", 	4)					
	playerMortar:setWeaponStorageMax("Nuke",	2)			--fewer (vs 8)
	playerMortar:setWeaponStorage(   "Nuke",	2)				
	playerMortar:onTakingDamage(playerShipDamage)
	playerMortar:addReputationPoints(50)
	return playerMortar
end
function createPlayerShipNarsil()
	--experimental
	playerNarsil = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Narsil")
	setBeamColor(playerNarsil)
	playerNarsil:setTypeName("Proto-Atlantis 2")
	playerNarsil:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerNarsil:setImpulseMaxSpeed(70)					--slower impulse max (vs 90)
	playerNarsil:setRotationMaxSpeed(14)				--faster spin (vs 10)
	playerNarsil:setJumpDrive(false)					--no Jump
	playerNarsil:setWarpDrive(true)						--add warp
	playerNarsil:setHullMax(200)						--weaker hull (vs 250)
	playerNarsil:setHull(200)							
	playerNarsil:setShieldsMax(150,150)					--weaker shields (vs 200)
	playerNarsil:setShields(150,150)
	playerNarsil:setWeaponTubeCount(6)					--one more forward tube, less flexible ordnance
	playerNarsil:setWeaponTubeDirection(1, 90)			--right facing (vs left)
	playerNarsil:setWeaponTubeDirection(2,  0)			--front facing (vs right)
	playerNarsil:setWeaponTubeDirection(4,-90)			--left facing (vs rear)
	playerNarsil:setWeaponTubeDirection(5,180)			--rear facing
	playerNarsil:setWeaponTubeExclusiveFor(0,"HVLI")	--HVLI only (vs any)
	playerNarsil:setWeaponTubeExclusiveFor(1,"HVLI")	--HVLI only (vs any)
	playerNarsil:setWeaponTubeExclusiveFor(2,"HVLI")	--HVLI only (vs any)
	playerNarsil:setWeaponTubeExclusiveFor(4,"HVLI")	--All but mine (vs mine only)
	playerNarsil:weaponTubeAllowMissle(4,"Nuke")
	playerNarsil:weaponTubeAllowMissle(4,"Homing")
	playerNarsil:weaponTubeAllowMissle(4,"EMP")
	playerNarsil:setWeaponTubeExclusiveFor(5,"Mine")
	playerNarsil:setTubeSize(0,"large")					--left tube large (vs normal)
	playerNarsil:setTubeSize(1,"large")					--right tube large (vs normal)
	playerNarsil:setTubeLoadTime(0,12)					--slower (vs 8)
	playerNarsil:setTubeLoadTime(1,12)					--slower (vs 8)
	playerNarsil:setTubeLoadTime(5,15)					--slower (vs 8)
	playerNarsil:onTakingDamage(playerShipDamage)
	playerNarsil:addReputationPoints(50)
	return playerNarsil
end
function createPlayerShipNimbus()
	playerNimbus = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Nimbus")
	setBeamColor(playerNimbus)
	playerNimbus:setTypeName("Phobos T2.2")
	playerNimbus:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerNimbus:setJumpDrive(true)						--jump drive (vs none)
	playerNimbus.max_jump_range = 25000					--shorter than typical (vs 50)
	playerNimbus.min_jump_range = 2000						--shorter than typical (vs 5)
	playerNimbus:setJumpDriveRange(playerNimbus.min_jump_range,playerNimbus.max_jump_range)
	playerNimbus:setJumpDriveCharge(playerNimbus.max_jump_range)
	playerNimbus:setRotationMaxSpeed(20)				--faster spin (vs 10)
--                 				 Arc, Dir, Range, CycleTime, Dmg
	playerNimbus:setBeamWeapon(0, 10, -15,  1200,         8, 6)
	playerNimbus:setBeamWeapon(1, 10,  15,  1200,         8, 6)
--									   Arc, Dir, Rotate speed
	playerNimbus:setBeamWeaponTurret(0, 90, -15, .2)	--slow turret beams
	playerNimbus:setBeamWeaponTurret(1, 90,  15, .2)
	playerNimbus:setWeaponTubeCount(2)					--one fewer tube (1 forward, 1 rear vs 2 forward, 1 rear)
	playerNimbus:setWeaponTubeDirection(0,0)			--first tube points straight forward
	playerNimbus:setWeaponTubeDirection(1,180)			--second tube points straight back
	playerNimbus:setWeaponTubeExclusiveFor(1,"Mine")
	playerNimbus:setWeaponStorageMax("Homing",6)		--reduce homing storage (vs 10)
	playerNimbus:setWeaponStorage("Homing",6)
	playerNimbus:setWeaponStorageMax("HVLI",10)			--reduce HVLI storage (vs 20)
	playerNimbus:setWeaponStorage("HVLI",10)
	playerNimbus:onTakingDamage(playerShipDamage)
	playerNimbus:addReputationPoints(50)
	return playerNimbus
end
function createPlayerShipOsprey()
	--destroyed 29Feb2020
	playerOsprey = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Osprey")
	setBeamColor(playerOsprey)
	playerOsprey:setTypeName("Flavia 2C")
	playerOsprey:setRotationMaxSpeed(20)					--faster spin (vs 10)
	playerOsprey:setImpulseMaxSpeed(70)						--faster (vs 60)
	playerOsprey:setShieldsMax(120, 120)					--stronger shields (vs 70, 70)
	playerOsprey:setShields(120, 120)
	playerOsprey:setBeamWeapon(0, 40, -10, 1200.0, 5.5, 6.5)	--two forward (vs rear)
	playerOsprey:setBeamWeapon(1, 40,  10, 1200.0, 5.5, 6.5)	--faster (vs 6.0) and stronger (vs 6.0)
	playerOsprey:setWeaponTubeCount(3)						--more (vs 1)
	playerOsprey:setWeaponTubeDirection(0,-90)				--left facing (vs none)
	playerOsprey:setWeaponTubeDirection(1, 90)				--right facing (vs none)
	playerOsprey:setWeaponTubeDirection(2, 180)				--rear facing
	playerOsprey:setWeaponTubeExclusiveFor(0,"Homing"):setTubeSize(0,"large")
	playerOsprey:setWeaponTubeExclusiveFor(1,"Homing"):setTubeSize(1,"large")
	playerOsprey:setWeaponStorageMax("EMP",		2)			--more (vs 0)
	playerOsprey:setWeaponStorage("EMP",		2)				
	playerOsprey:setWeaponStorageMax("Nuke",	2)			--more (vs 1)
	playerOsprey:setWeaponStorage("Nuke",		2)				
	playerOsprey:setWeaponStorageMax("Mine",	2)			--more (vs 1)
	playerOsprey:setWeaponStorage("Mine",		2)				
	playerOsprey:setWeaponStorageMax("Homing",	6)			--more (vs 3)
	playerOsprey:setWeaponStorage("Homing", 	6)				
	playerOsprey:onTakingDamage(playerShipDamage)
	playerOsprey:addReputationPoints(50)
	return playerOsprey
end
function createPlayerShipOutcast()
	playerOutcast = PlayerSpaceship():setTemplate("Hathcock"):setFaction("Human Navy"):setCallSign("Outcast")
	setBeamColor(playerOutcast)
	playerOutcast:setTypeName("Scatter")
	playerOutcast:setRepairCrewCount(4)					--more repair crew (vs 2)
	playerOutcast:setImpulseMaxSpeed(65)				--faster impulse max (vs 50)
	playerOutcast.max_jump_range = 28000				--shorter than typical (vs 50)
	playerOutcast.min_jump_range = 2500					--shorter than typical (vs 5)
	playerOutcast:setJumpDriveRange(playerOutcast.min_jump_range,playerOutcast.max_jump_range)
	playerOutcast:setJumpDriveCharge(playerOutcast.max_jump_range)
	playerOutcast:setShieldsMax(140,100)				--stronger (vs 70,70)
	playerOutcast:setShields(140,100)
--                 				   Arc, Dir, Range, CycleTime, Damage
	playerOutcast:setBeamWeapon(0,  10,   0,  1200,			5,	4)	--3 front, 1 rear turret (vs 4 front)
	playerOutcast:setBeamWeapon(1,  80, -20,  1000, 		5,	5)	--shorter (vs 1400, 1200, 1000, 800)
	playerOutcast:setBeamWeapon(2,  80,  20,  1000, 		5,	5)	--shorter beams stronger
	playerOutcast:setBeamWeapon(3,  10, 180,  1000, 		5,	5)
--										   Arc, Dir, Rotate speed
	playerOutcast:setBeamWeaponTurret(3,	90,	180,	 .4)	--slow turret
	playerOutcast:setWeaponTubeCount(3)							--more (vs 2)
	playerOutcast:setWeaponTubeDirection(2,180)
	playerOutcast:setWeaponStorageMax("Mine",3)					--more (vs 0)
	playerOutcast:setWeaponStorage("Mine",3)
	playerOutcast:setTubeLoadTime(2,30)							--longer load time (vs 15)
	playerOutcast:weaponTubeDisallowMissle(0,"Mine")			--no mines (vs all)
	playerOutcast:weaponTubeDisallowMissle(1,"Mine")
	playerOutcast:setSystemCoolantRate("reactor",		1.4)	--more (vs 1.2)
	playerOutcast:setSystemCoolantRate("jumpdrive",		1.3)	--more (vs 1.2)
	playerOutcast:setSystemCoolantRate("beamweapons",	0.95)	--less (vs 1.2)
	playerOutcast:setSystemCoolantRate("maneuver",		1.05)	--less (vs 1.2)
	playerOutcast:setSystemCoolantRate("impulse",		1.15)	--less (vs 1.2)
	playerOutcast:setSystemCoolantRate("frontshield",	1.25)	--more (vs 1.2)
	playerOutcast:setSystemCoolantRate("rearshield",	1.2)	--same (vs 1.2)
	playerOutcast:setSystemCoolantRate("missilesystem",	1.2)	--same (vs 1.2)
	playerOutcast:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerOutcast:setSystemPowerRate("beamweapons",		0.2)	--less (vs 0.30)
	playerOutcast:setSystemPowerRate("jumpdrive",		0.325)	--more (vs 0.30)
	playerOutcast:setSystemPowerRate("maneuver",		0.25)	--less (vs 0.30)
	playerOutcast:setSystemPowerRate("impulse",			0.3)	--same (vs 0.30)
	playerOutcast:setSystemPowerRate("frontshield",		0.3)	--same (vs 0.30)
	playerOutcast:setSystemPowerRate("rearshield",		0.325)	--more (vs 0.30)	
	playerOutcast:setSystemPowerRate("missilesystem",	0.275)	--less (vs 0.30)	
	playerOutcast:onTakingDamage(playerShipDamage)
	playerOutcast:addReputationPoints(50)
	return playerOutcast
end
function createPlayerShipPinwheel()
	playerRotor = PlayerSpaceship():setTemplate("Maverick"):setFaction("Human Navy"):setCallSign("Pinwheel")
	setBeamColor(playerRotor)
	playerRotor:setTypeName("Rotor")
	playerRotor:setWarpSpeed(450)							--slower (vs 800)
--                  		    Arc, Dir,  Range,   CycleTime, Dmg
	playerRotor:setBeamWeapon(0, 10,   0, 1000.0,			6, 3)	--5 reconfigured beams (vs 6)
	playerRotor:setBeamWeapon(1, 10, 180, 1000.0,			6, 3)
	playerRotor:setBeamWeapon(2, 60, -25,  800.0,			6, 4)
	playerRotor:setBeamWeapon(3, 60,  25,  800.0,			6, 4)
	playerRotor:setBeamWeapon(4, 40,   0,  600.0,			6, 5)
	playerRotor:setBeamWeapon(5,  0,   0,  0,				0, 0)
--									   Arc, Dir, Rotate speed
	playerRotor:setBeamWeaponTurret(0, 190,   0, 1)
	playerRotor:setBeamWeaponTurret(1, 190, 180, 1)
	playerRotor:setLongRangeRadarRange(25000)				--shorter longer range sensors (vs 30000)
	playerRotor.normal_long_range_radar = 25000
	playerRotor:setShortRangeRadarRange(4000)				--shorter short range sensors (vs 5000)
	playerRotor:setWeaponTubeCount(1)						--fewer (vs 3)
	playerRotor:setWeaponTubeDirection(0, 180)				--rear (vs left)
	playerRotor:setWeaponTubeExclusiveFor(0,"Mine")			--Mine only (vs any)
	playerRotor:setWeaponStorageMax("Mine", 6)				--more (vs 2)
	playerRotor:setWeaponStorage("Mine", 6)
	playerRotor:setWeaponStorageMax("Homing", 0)			--fewer (vs 6)
	playerRotor:setWeaponStorage("Homing", 0)
	playerRotor:setWeaponStorageMax("HVLI", 0)				--fewer (vs 10)
	playerRotor:setWeaponStorage("HVLI", 0)
	playerRotor:setWeaponStorageMax("EMP", 0)				--fewer (vs 4)
	playerRotor:setWeaponStorage("EMP", 0)
	playerRotor:setWeaponStorageMax("Nuke", 0)				--fewer (vs 2)
	playerRotor:setWeaponStorage("Nuke", 0)
	playerRotor:setSystemCoolantRate("reactor",			1.15)	--less (vs 1.2)
	playerRotor:setSystemCoolantRate("warp",			1.05)	--less (vs 1.2)
	playerRotor:setSystemCoolantRate("beamweapons",		1.2)	--same (vs 1.2)
	playerRotor:setSystemCoolantRate("maneuver",		1.1)	--less (vs 1.2)
	playerRotor:setSystemCoolantRate("impulse",			1)		--less (vs 1.2)
	playerRotor:setSystemCoolantRate("frontshield",		1.35)	--more (vs 1.2)
	playerRotor:setSystemCoolantRate("rearshield",		1.3)	--more (vs 1.2)
	playerRotor:setSystemCoolantRate("missilesystem",	1)		--less (vs 1.2)
	playerRotor:setSystemPowerRate("reactor",			0.30)	--same (vs 0.30)
	playerRotor:setSystemPowerRate("beamweapons",		0.325)	--more (vs 0.30)
	playerRotor:setSystemPowerRate("warp",				0.25)	--less (vs 0.30)
	playerRotor:setSystemPowerRate("maneuver",			0.275)	--less (vs 0.30)
	playerRotor:setSystemPowerRate("impulse",			0.175)	--less (vs 0.30)
	playerRotor:setSystemPowerRate("frontshield",		0.375)	--more (vs 0.30)
	playerRotor:setSystemPowerRate("rearshield",		0.35)	--more (vs 0.30)	
	playerRotor:setSystemPowerRate("missilesystem",		0.2)	--less (vs 0.30)	
	playerRotor:onTakingDamage(playerShipDamage)
	playerRotor:addReputationPoints(50)
	return playerRotor
end
function createPlayerShipQuarter()
	playerBarrow = PlayerSpaceship():setTemplate("Benedict"):setFaction("Human Navy"):setCallSign("Quarter")
	setBeamColor(playerBarrow)
	playerBarrow:setTypeName("Barrow")
	playerBarrow:setShieldsMax(100, 100)				--stronger shields (vs 70, 70)
	playerBarrow:setShields(100, 100)
	playerBarrow.max_jump_range = 40000					--shorter (vs 90)
	playerBarrow.min_jump_range = 4000					--shorter (vs 5)
	playerBarrow:setJumpDriveRange(playerBarrow.min_jump_range,playerBarrow.max_jump_range)
	playerBarrow:setJumpDriveCharge(playerBarrow.max_jump_range)
--	playerBarrow.carrier_space_group = {
--	 	["Carpenter"] =	{create = stockPlayer, template = "MP52 Hornet",	state = "aboard",	launch_button = "launch_carpenter",	time = 5,	repair = 0, mine = 0},
--	 	["Chack"] =		{create = createPlayerShipFowl,						state = "aboard",	launch_button = "launch_chack",		time = 10,	repair = 0, mine = 4},
--	}
--	playerBarrow.launch_bay = "empty"
	playerBarrow:onTakingDamage(playerShipDamage)
	playerBarrow:addReputationPoints(50)
	return playerBarrow
end
function createPlayerShipQuick()
	playerQuick = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Quicksilver")
	setBeamColor(playerQuick)
	playerQuick:setTypeName("XR-Lindworm")
	playerQuick:setRepairCrewCount(3)			--more repair crew (vs 1)
	playerQuick:setWarpDrive(true)				--warp drive (vs none)
	playerQuick:setWarpSpeed(450)
	playerQuick:setShieldsMax(100,50)			--stronger front (vs 40)
	playerQuick:setShields(100,50)
	playerQuick:setWeaponTubeExclusiveFor(0,"HVLI")
	playerQuick:setTubeSize(0,"large")
	playerQuick:setTubeLoadTime(0,15)
	playerQuick:weaponTubeAllowMissle(1,"Homing")
	playerQuick:weaponTubeAllowMissle(2,"Homing")
	playerQuick:weaponTubeAllowMissle(1,"EMP")
	playerQuick:weaponTubeAllowMissle(2,"Nuke")
	playerQuick:setWeaponStorageMax("Homing",8)		--more homing (vs 3)
	playerQuick:setWeaponStorage("Homing", 8)				
	playerQuick:setWeaponStorageMax("Nuke",3)	--more Nukes (vs 0)
	playerQuick:setWeaponStorage("Nuke", 3)				
	playerQuick:setWeaponStorageMax("EMP",5)	--more EMPs (vs 0)
	playerQuick:setWeaponStorage("EMP", 5)				
	playerQuick:setSystemCoolantRate("reactor",			1.25)	--more (vs 1.2)
	playerQuick:setSystemCoolantRate("warp",			1.3)	--more (vs 1.2)
	playerQuick:setSystemCoolantRate("beamweapons",		1.15)	--less (vs 1.2)
	playerQuick:setSystemCoolantRate("maneuver",		1.25)	--more (vs 1.2)
	playerQuick:setSystemCoolantRate("impulse",			1.05)	--less (vs 1.2)
	playerQuick:setSystemCoolantRate("frontshield",		1.2)	--same (vs 1.2)
	playerQuick:setSystemCoolantRate("rearshield",		1.05)	--less (vs 1.2)
	playerQuick:setSystemCoolantRate("missilesystem",	1.2)	--same (vs 1.2)
	playerQuick:setSystemPowerRate("reactor",			0.4)	--more (vs 0.30)
	playerQuick:setSystemPowerRate("beamweapons",		0.375)	--more (vs 0.30)
	playerQuick:setSystemPowerRate("warp",				0.35)	--more (vs 0.30)
	playerQuick:setSystemPowerRate("maneuver",			0.35)	--more (vs 0.30)
	playerQuick:setSystemPowerRate("impulse",			0.225)	--less (vs 0.30)
	playerQuick:setSystemPowerRate("frontshield",		0.3)	--same (vs 0.30)
	playerQuick:setSystemPowerRate("rearshield",		0.275)	--less (vs 0.30)	
	playerQuick:setSystemPowerRate("missilesystem",		0.35)	--more (vs 0.30)	
	playerQuick:onTakingDamage(playerShipDamage)
	playerQuick:addReputationPoints(50)
	return playerQuick
end
function createPlayerShipQuill()
	playerQuill = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Quill")
	setBeamColor(playerQuill)
	playerQuill:setTypeName("Porcupine")
	-- weapons are designed from scratch, so no comparision vs stock
	-- 5 tubes on the left side, all small
	-- middle 3 HVLI only and are fast
	-- first and last take homing + other
	playerQuill:setWeaponTubeCount(5)
	playerQuill:setWeaponTubeDirection(0,-50)
		:setTubeSize(0,"small")
		:setWeaponTubeExclusiveFor(0,"Homing")
		:weaponTubeAllowMissle(0,"EMP")
	playerQuill:setWeaponTubeDirection(1,-70)
		:setTubeSize(1,"small")
		:setWeaponTubeExclusiveFor(1,"HVLI")
		:setTubeLoadTime(1,10) -- half default
	playerQuill:setWeaponTubeDirection(2,-90)
		:setTubeSize(2,"small")
		:setWeaponTubeExclusiveFor(2,"HVLI")
		:setTubeLoadTime(2,10) -- half default
	playerQuill:setWeaponTubeDirection(3,-110)
		:setTubeSize(3,"small")
		:setWeaponTubeExclusiveFor(3,"HVLI")
		:setTubeLoadTime(3,10) -- half default
	playerQuill:setWeaponTubeDirection(4,-130)
		:setTubeSize(4,"small")
		:setWeaponTubeExclusiveFor(4,"Homing")
		:weaponTubeAllowMissle(4,"Mine")
		:weaponTubeAllowMissle(4,"Nuke")
	playerQuill:setWeaponStorageMax("Homing",8)
	playerQuill:setWeaponStorage("Homing", 8)
	playerQuill:setWeaponStorageMax("Nuke",2)
	playerQuill:setWeaponStorage("Nuke", 2)
	playerQuill:setWeaponStorageMax("EMP",2)
	playerQuill:setWeaponStorage("EMP", 2)
	playerQuill:setWeaponStorageMax("Mine",2)
	playerQuill:setWeaponStorage("Mine", 2)
	playerQuill:setWeaponStorageMax("HVLI",20)
	playerQuill:setWeaponStorage("HVLI", 20)
-- 3 beam arcs on the right
-- all slow average dps turrets
-- there are 2 overlap points where 2 of the 3 turrets can both hit
	playerQuill:setBeamWeapon(0, 5,   90,	1100.0, 	   6.0,   6)
		:setBeamWeaponTurret(0,	45,   90,	.1)
	playerQuill:setBeamWeapon(1, 5, 90-35,	1100.0, 	   6.0,   6)
		:setBeamWeaponTurret(1,	45,   90-35,.1)
	playerQuill:setBeamWeapon(2, 5,  90+35,1100.0, 	   6.0,   6)
		:setBeamWeaponTurret(2,	45,   90+35,.1)
	playerQuill:setWarpSpeed(300)			--slower (vs 500)
	playerQuill:setShieldsMax(130, 130)		--stronger (vs 70,70)
	playerQuill:setShields(130, 130)
	playerQuill:setLongRangeRadarRange(25000)
	playerQuill.normal_long_range_radar = 25000
	playerQuill:onTakingDamage(playerShipDamage)
	playerQuill:addReputationPoints(50)
	return playerQuill
end
function createPlayerShipRaptor()
	playerRaptor = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Raptor")
	setBeamColor(playerRaptor)
	playerRaptor:setTypeName("Destroyer IV")
	playerRaptor.max_jump_range = 32000						--shorter than typical (vs 50)
	playerRaptor.min_jump_range = 3000						--shorter than typical (vs 5)
	playerRaptor:setJumpDriveRange(playerRaptor.min_jump_range,playerRaptor.max_jump_range)
	playerRaptor:setJumpDriveCharge(playerRaptor.max_jump_range)
	playerRaptor:setShieldsMax(100, 100)					--stronger shields (vs 80, 80)
	playerRaptor:setShields(100, 100)
	playerRaptor:setHullMax(150)							--weaker hull (vs 200)
	playerRaptor:setHull(150)
	playerRaptor:setBeamWeapon(0, 45, -10, 1000.0, 5, 6)	--narrower (45 vs 90), faster (5 vs 6), weaker (6 vs 10)
	playerRaptor:setBeamWeapon(1, 45,  10, 1000.0, 5, 6)
	playerRaptor:setWeaponTubeDirection(0,-60)				--left -60 (vs -5)
	playerRaptor:setWeaponTubeDirection(1, 60)				--right 60 (vs 5)
	playerRaptor:setWeaponStorageMax("Homing",6)			--less (vs 12)
	playerRaptor:setWeaponStorage("Homing", 6)				
	playerRaptor:setWeaponStorageMax("Nuke",2)				--fewer (vs 4)
	playerRaptor:setWeaponStorage("Nuke", 2)				
	playerRaptor:setWeaponStorageMax("EMP",3)				--fewer (vs 6)
	playerRaptor:setWeaponStorage("EMP", 3)				
	playerRaptor:setWeaponStorageMax("Mine",4)				--fewer (vs 8)
	playerRaptor:setWeaponStorage("Mine", 4)				
	playerRaptor:setWeaponStorageMax("HVLI",6)				--more (vs 0)
	playerRaptor:setWeaponStorage("HVLI", 6)				
	playerRaptor:onTakingDamage(playerShipDamage)
	playerRaptor:addReputationPoints(50)
	return playerRaptor
end
function createPlayerShipRattler()
	--	stolen from Kraylor, may be used for intelligence gathering
	playerRattler = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Rattler")
	setBeamColor(playerRattler)
	playerRattler:setTypeName("MX-Lindworm")
	playerRattler:setRepairCrewCount(2)						--more (vs 1)
	playerRattler:setJumpDrive(true)
	playerRattler:setShieldsMax(80)							--stronger shields (vs 40)
	playerRattler:setShields(80)
	playerRattler.max_jump_range = 20000					--shorter than typical (vs 50)
	playerRattler.min_jump_range = 3000						--shorter than typical (vs 5)
	playerRattler:setJumpDriveRange(playerRattler.min_jump_range,playerRattler.max_jump_range)
	playerRattler:setJumpDriveCharge(playerRattler.max_jump_range)
	playerRattler:setImpulseMaxSpeed(77)					--faster (vs 70)
	playerRattler:setShortRangeRadarRange(6000)				--longer (vs 5000)
--											Arc, Dir, Rotate speed
	playerRattler:setBeamWeaponTurret( 0,   270, 180, 1)	--slower turret (vs 4)
	playerRattler:setWeaponTubeCount(4)						--more (vs 3)
	playerRattler:setTubeSize(0,"large")					--large (vs small)
	playerRattler:setTubeSize(1,"medium")					--medium (vs small)
	playerRattler:setWeaponTubeExclusiveFor(0,"HVLI")		--only HVLI (vs any)
	playerRattler:setWeaponTubeExclusiveFor(1,"Nuke")		--only Nuke (vs HVLI)
	playerRattler:setWeaponTubeExclusiveFor(2,"Homing")		--only Homing & EMP (vs HVLI)
	playerRattler:weaponTubeAllowMissle(2,"EMP")			
	playerRattler:setTubeLoadTime(1,25)						--slower load time (vs 10)
	playerRattler:setWeaponTubeDirection(3,180)
	playerRattler:setWeaponTubeExclusiveFor(3,"Mine")
	playerRattler:setTubeLoadTime(3,45)						--slower load time (vs 10)
	playerRattler:setWeaponStorageMax("Homing",5)			--more (vs 3)
	playerRattler:setWeaponStorage("Homing",   5)				
	playerRattler:setWeaponStorageMax("EMP",   4)			--more (vs 0)
	playerRattler:setWeaponStorage("EMP",      4)				
	playerRattler:setWeaponStorageMax("Nuke",  2)			--more (vs 0)
	playerRattler:setWeaponStorage("Nuke",     2)
	playerRattler:setWeaponStorageMax("Mine",  2)			--more (vs 0)
	playerRattler:setWeaponStorage("Mine",     2)
	playerRattler:onTakingDamage(playerShipDamage)
	playerRattler:addReputationPoints(50)
	return playerRattler
end
function createPlayerShipRip()
	playerLurker = PlayerSpaceship():setTemplate("ZX-Lindworm"):setFaction("Human Navy"):setCallSign("Rip")
	setBeamColor(playerLurker)
	playerLurker:setTypeName("Lurker")
	playerLurker:setHullMax(120)						--stronger hull (vs 75)
	playerLurker:setHull(120)
	playerLurker:setShieldsMax(100)						--stronger shield (vs 40)
	playerLurker:setShields(100)
	playerLurker:setRotationMaxSpeed(12)				--slower spin (vs 15)
	playerLurker:setAcceleration(18)					--slower (vs 25)
	playerLurker:setWarpDrive(true)						--add warp (vs none)
	playerLurker:setWarpSpeed(320)
	playerLurker:setRepairCrewCount(2)					--more repair crew (vs 1)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerLurker:setBeamWeapon(0, 10, 180,	1000,		2.0, 2)		--faster, longer, (vs 6 Cyc, .9 U) 
--										 Arc,	Dir, Rotate speed
	playerLurker:setBeamWeaponTurret( 0, 180,	180, .3)			--narrower, slower (vs 270 arc, 4 rotate)
	playerLurker:setTubeSize(1,"medium")				--medium (vs small)
	playerLurker:setTubeSize(2,"medium")				--medium (vs small)
	playerLurker:setTubeLoadTime(1,15)					--slower load time (vs 10)
	playerLurker:setTubeLoadTime(2,15)					--slower load time (vs 10)
	playerLurker:setWeaponTubeDirection(1, 5)			--more angled (vs  1)	
	playerLurker:setWeaponTubeDirection(2,-5)			--more angled (vs -1)	
	playerLurker:setWeaponTubeExclusiveFor(0,"HVLI")	--only HVLI (vs any)
	playerLurker:setWeaponTubeExclusiveFor(1,"Homing")	--Homing, Nuke, EMP (vs only HVLI)
	playerLurker:weaponTubeAllowMissle(1,"EMP")
	playerLurker:weaponTubeAllowMissle(1,"Nuke")
	playerLurker:setWeaponTubeExclusiveFor(2,"Homing")	--Homing, Nuke, EMP (vs only HVLI)
	playerLurker:weaponTubeAllowMissle(2,"EMP")
	playerLurker:weaponTubeAllowMissle(2,"Nuke")
	playerLurker:setWeaponStorageMax("Homing",8)			--more (vs 3)
	playerLurker:setWeaponStorage("Homing",   8)				
	playerLurker:setWeaponStorageMax("EMP",   5)			--more (vs 0)
	playerLurker:setWeaponStorage("EMP",      5)				
	playerLurker:setWeaponStorageMax("Nuke",  3)			--more (vs 0)
	playerLurker:setWeaponStorage("Nuke",     3)
	playerLurker:setSystemCoolantRate("reactor",		1.1)	--less (vs 1.2)
	playerLurker:setSystemCoolantRate("beamweapons",	1.1)	--less (vs 1.2)
	playerLurker:setSystemCoolantRate("missilesystem",	1.7)	--more (vs 1.2)
	playerLurker:setSystemCoolantRate("maneuver",		1.1)	--less (vs 1.2)
	playerLurker:setSystemCoolantRate("impulse",		1.1)	--less (vs 1.2)
	playerLurker:setSystemCoolantRate("warp",			1.1)	--less (vs 1.2)
	playerLurker:setSystemCoolantRate("frontshield",	1.1)	--less (vs 1.2)
	playerLurker:setSystemHeatRate("reactor",			0.04)	--less (vs 0.05)
	playerLurker:setSystemHeatRate("beamweapons",		0.04)	--less (vs 0.05)
	playerLurker:setSystemHeatRate("missilesystem",		0.11)	--more (vs 0.05)
	playerLurker:setSystemHeatRate("maneuver",			0.04)	--less (vs 0.05)
	playerLurker:setSystemHeatRate("impulse",			0.04)	--less (vs 0.05)
	playerLurker:setSystemHeatRate("warp",				0.04)	--less (vs 0.05)
	playerLurker:setSystemHeatRate("frontshield",		0.04)	--less (vs 0.05)
	playerLurker:setSystemPowerRate("reactor",			0.20)	--less (vs 0.30)
	playerLurker:setSystemPowerRate("beamweapons",		0.20)	--less (vs 0.30)
	playerLurker:setSystemPowerRate("missilesystem",	0.90)	--more (vs 0.30)
	playerLurker:setSystemPowerRate("maneuver",			0.20)	--less (vs 0.30)
	playerLurker:setSystemPowerRate("impulse",			0.20)	--less (vs 0.30)
	playerLurker:setSystemPowerRate("warp",				0.20)	--less (vs 0.30)
	playerLurker:setSystemPowerRate("frontshield",		0.20)	--less (vs 0.30)
	playerLurker:onTakingDamage(playerShipDamage)
	playerLurker:addReputationPoints(50)
	return playerLurker	
end
function createPlayerShipRoc()
	playerRoc = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Swoop")
	setBeamColor(playerRoc)
	playerRoc:setTypeName("Roc")
	playerRoc:setRepairCrewCount(5)					--more repair crew (vs 3)
	playerRoc:setWarpDrive(true)					--warp drive (vs none)
	playerRoc:setWarpSpeed(480)
	playerRoc:setShieldsMax(150,80)					--strong front, weak rear (vs 100,100)
	playerRoc:setShields(150,80)
	playerRoc:setImpulseMaxSpeed(75)				--slower impulse max (vs 80)
	playerRoc:setRotationMaxSpeed(9)				--slower spin (vs 10)
	playerRoc:setAcceleration(15)					--slower acceleration (vs 20)
--                 			  Arc, Dir, Range, CycleTime, Damage
	playerRoc:setBeamWeapon(0, 30,  10,	 1000,		 8.0, 6)	--shorter, narrower (vs 1.2u, 90 deg) 
	playerRoc:setBeamWeapon(1, 30, -10,	 1000,		 8.0, 6)	--shorter, narrower (vs 1.2u, 90 deg) 
	playerRoc:setBeamWeapon(2, 10, 180,	 1500,		 2.0, 1)	--weak turreted 3rd beam 
--									  Arc,	Dir, Rotate speed
	playerRoc:setBeamWeaponTurret( 2, 310,	180, 1)		
	playerRoc:setWeaponTubeCount(8)					--more (vs 3)
	playerRoc:setWeaponTubeDirection(0, 4)			--more angled (vs  -1)	
	playerRoc:setWeaponTubeDirection(1,-4)			--more angled (vs   1)	
	playerRoc:setWeaponTubeDirection(2, 0)			--forward (vs rear)	
	playerRoc:setWeaponTubeDirection(3, 90)
	playerRoc:setWeaponTubeDirection(4, 90)
	playerRoc:setWeaponTubeDirection(5,-90)
	playerRoc:setWeaponTubeDirection(6,-90)
	playerRoc:setWeaponTubeDirection(7,180)
	playerRoc:setTubeSize(0,"small")				--small (vs medium)
	playerRoc:setTubeSize(1,"small")				--small (vs medium)
	playerRoc:setTubeSize(4,"large")
	playerRoc:setTubeSize(6,"large")
	playerRoc:setTubeLoadTime(0,5)					--faster load time (vs 10)
	playerRoc:setTubeLoadTime(1,5)					--faster load time (vs 10)
	playerRoc:setTubeLoadTime(4,20)					--slower load time (vs 10)
	playerRoc:setTubeLoadTime(6,20)					--slower load time (vs 10)
	playerRoc:setTubeLoadTime(7,15)					--slower load time (vs 10)
	playerRoc:setWeaponTubeExclusiveFor(0,"HVLI")	--HVLI & Homing (vs all but mine)
	playerRoc:weaponTubeAllowMissle(0,"Homing")
	playerRoc:setWeaponTubeExclusiveFor(1,"HVLI")	--HVLI & Homing (vs all but mine)
	playerRoc:weaponTubeAllowMissle(1,"Homing")
	playerRoc:setWeaponTubeExclusiveFor(2,"HVLI")	--HVLI (vs mine)
	playerRoc:weaponTubeDisallowMissle(3,"Mine")
	playerRoc:weaponTubeDisallowMissle(4,"Mine")
	playerRoc:weaponTubeDisallowMissle(5,"Mine")
	playerRoc:weaponTubeDisallowMissle(6,"Mine")
	playerRoc:setWeaponTubeExclusiveFor(7,"Mine")
	playerRoc:setWeaponStorageMax("HVLI",18)		--more (vs 0)
	playerRoc:setWeaponStorage("HVLI", 18)
	playerRoc:setSystemCoolantRate("reactor",		1.35)	--more (vs 1.2)
	playerRoc:setSystemCoolantRate("beamweapons",	1.2)	--same (vs 1.2)
	playerRoc:setSystemCoolantRate("maneuver",		1.1)	--less (vs 1.2)
	playerRoc:setSystemCoolantRate("jumpdrive",		1.25)	--more (vs 1.2)
	playerRoc:setSystemCoolantRate("impulse",		1.15)	--less (vs 1.2)
	playerRoc:setSystemCoolantRate("missilesystem",	1.25)	--more (vs 1.2)
	playerRoc:setSystemCoolantRate("frontshield",	1.1)	--less (vs 1.2)
	playerRoc:setSystemCoolantRate("rearshield",	1.2)	--same (vs 1.2)
	playerRoc:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerRoc:setSystemPowerRate("jumpdrive",		0.3)	--same (vs 0.30)
	playerRoc:setSystemPowerRate("beamweapons",		0.275)	--less (vs 0.30)
	playerRoc:setSystemPowerRate("maneuver",		0.225)	--less (vs 0.30)
	playerRoc:setSystemPowerRate("impulse",			0.25)	--less (vs 0.30)
	playerRoc:setSystemPowerRate("missilesystem",	0.3)	--same (vs 0.30)
	playerRoc:setSystemPowerRate("frontshield",		0.225)	--less (vs 0.30)
	playerRoc:setSystemPowerRate("rearshield",		0.325)	--more (vs 0.30)
	playerRoc:onTakingDamage(playerShipDamage)
	playerRoc:addReputationPoints(50)
	return playerRoc	
end
function createPlayerShipRocinante()
	playerWindmill = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Rocinante")
	setBeamColor(playerWindmill)
	playerWindmill:setTypeName("Windmill")
	playerWindmill:setImpulseMaxSpeed(100)	--faster impulse max (vs 60)
	playerWindmill:setWarpSpeed(350)		--slower (vs 500)
	playerWindmill:setShieldsMax(100,70)	--stronger (vs 70,70)
	playerWindmill:setShields(100,70)
	playerWindmill:setRepairCrewCount(5)	--less repair crew (vs 8)
--                 				   Arc, Dir,   Range, CycleTime, Damage
	playerWindmill:setBeamWeapon(0,	60,   0,	1000, 		6.0, 	6.0)	--front (vs rear), short (vs 1200)
	playerWindmill:setBeamWeapon(1,	60, 180,	1000, 		6.0, 	6.0)	--short (vs 1200)
	playerWindmill:setBeamWeapon(2,	10, -90,	1200, 		6.0, 	4.0)	--left turret (vs none)
	playerWindmill:setBeamWeapon(3,	10,  90,	1200, 		6.0, 	4.0)	--right turret (vs none)
--											Arc,  Dir, Rotate speed
	playerWindmill:setBeamWeaponTurret(2,	140,  -90,			 .5)		--slow turret
	playerWindmill:setBeamWeaponTurret(3,	140,   90,			 .5)		--slow turret
	playerWindmill:setWeaponTubeCount(5)					--more (vs 1)
	playerWindmill:setTubeSize(0,"small")					--small (vs normal)
	playerWindmill:setTubeLoadTime(0,5)						--fast (vs 20)
	playerWindmill:setWeaponTubeDirection(0,0)				--forward facing
	playerWindmill:weaponTubeDisallowMissle(0,"Mine")		--all but mine
	playerWindmill:setTubeLoadTime(1,10)
	playerWindmill:setWeaponTubeDirection(1,-90)			--left facing
	playerWindmill:weaponTubeDisallowMissle(1,"Mine")		--all but mine
	playerWindmill:setTubeLoadTime(2,10)
	playerWindmill:setWeaponTubeDirection(2,90)				--right facing
	playerWindmill:weaponTubeDisallowMissle(2,"Mine")		--all but mine
	playerWindmill:setTubeSize(3,"large")					
	playerWindmill:setTubeLoadTime(3,15)
	playerWindmill:setWeaponTubeDirection(3,180)			--rear facing
	playerWindmill:weaponTubeDisallowMissle(3,"Mine")		--all but mine
	playerWindmill:setTubeLoadTime(4,20)
	playerWindmill:setWeaponTubeDirection(4,180)			--rear facing
	playerWindmill:setWeaponTubeExclusiveFor(4,"Mine")		--mine only
	playerWindmill:setWeaponStorageMax("Homing", 8)			--more (vs 3)
	playerWindmill:setWeaponStorage("Homing", 8)
	playerWindmill:setWeaponStorageMax("Mine", 5)			--more (vs 1)
	playerWindmill:setWeaponStorage("Mine", 5)
	playerWindmill:setWeaponStorageMax("EMP", 3)			--more (vs 0)
	playerWindmill:setWeaponStorage("EMP", 3)
	playerWindmill:setWeaponStorageMax("HVLI", 12)			--more (vs 5)
	playerWindmill:setWeaponStorage("HVLI", 12)
--	playerWindmill:setSystemHeatRate("reactor",		0.5)	--more (vs.05) Lingling
--	playerWindmill:setSystemHeatRate("frontshield",	0.25)	--more (vs.05) Lingling
	playerWindmill:setSystemCoolantRate("reactor",		3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("beamweapons",	3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("missilesystem",3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("maneuver",		3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("impulse",		3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("rearshield",	3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:setSystemCoolantRate("frontshield",	3)	--more (vs 1.2) Arlenian pumps
	playerWindmill:onTakingDamage(playerShipDamage)
	playerWindmill:addReputationPoints(50)
	return playerWindmill
end
function createPlayerShipRogue()
	playerRogue = PlayerSpaceship():setTemplate("Maverick"):setFaction("Human Navy"):setCallSign("Rogue")
	setBeamColor(playerRogue)
	playerRogue:setTypeName("Maverick XP")
	playerRogue:setImpulseMaxSpeed(65)						--slower impulse max (vs 80)
	playerRogue:setWarpDrive(false)							--no warp
	playerRogue:setJumpDrive(true)
	playerRogue.max_jump_range = 20000					--shorter than typical (vs 50)
	playerRogue.min_jump_range = 2000						--shorter than typical (vs 5)
	playerRogue:setJumpDriveRange(playerRogue.min_jump_range,playerRogue.max_jump_range)
	playerRogue:setJumpDriveCharge(playerRogue.max_jump_range)
--                  		    Arc, Dir,  Range, CycleTime, Dmg
	playerRogue:setBeamWeapon(0, 10,   0, 1000.0,      20.0, 20)
--									   Arc, Dir, Rotate speed
	playerRogue:setBeamWeaponTurret(0, 270,   0, .2)
	playerRogue:setBeamWeaponEnergyPerFire(0,playerRogue:getBeamWeaponEnergyPerFire(0)*6)
	playerRogue:setBeamWeaponHeatPerFire(0,playerRogue:getBeamWeaponHeatPerFire(0)*5)
	playerRogue:setBeamWeapon(1, 0, 0, 0, 0, 0)				--eliminate 5 beams
	playerRogue:setBeamWeapon(2, 0, 0, 0, 0, 0)				
	playerRogue:setBeamWeapon(3, 0, 0, 0, 0, 0)				
	playerRogue:setBeamWeapon(4, 0, 0, 0, 0, 0)	
	playerRogue:setBeamWeapon(5, 0, 0, 0, 0, 0)	
	playerRogue:setLongRangeRadarRange(25000)				--shorter longer range sensors (vs 30000)
	playerRogue.normal_long_range_radar = 25000
	playerRogue:setShortRangeRadarRange(6000)				--longer short range sensors (vs 5000)
	playerRogue:onTakingDamage(playerShipDamage)
	playerRogue:addReputationPoints(50)
	return playerRogue
end
function createPlayerShipDial()
	playerRonco = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Dial")
	setBeamColor(playerRonco)
	playerRonco:setTypeName("Ronco")
--                  		     Arc, Dir,  Range,CycleTime, Dmg
	playerRonco:setBeamWeapon(0,  40,   0, 1000.0,		6.0, 6)
	playerRonco:setBeamWeapon(1,  10,  60,  900.0,		6.0, 6)
	playerRonco:setBeamWeapon(2,  10, -60,  900.0,		6.0, 6)
	playerRonco:setBeamWeapon(3,  40, 180,  800.0,		6.0, 6)
--									   Arc, Dir, Rotate speed
	playerRonco:setBeamWeaponTurret(1, 140,  90, .2)
	playerRonco:setBeamWeaponTurret(2, 140, -90, .2)
	playerRonco:setBeamWeaponDamageType(0,"emp")
	playerRonco:setBeamWeaponDamageType(1,"energy")
	playerRonco:setBeamWeaponDamageType(2,"energy")
	playerRonco:setBeamWeaponDamageType(3,"kinetic")
	playerRonco:onTakingDamage(playerShipDamage)
	playerRonco:addReputationPoints(50)
	return playerRonco
end
function createPlayerShipSimian()
	playerSimian = PlayerSpaceship():setTemplate("Player Missile Cr."):setFaction("Human Navy"):setCallSign("Knuckle Drag")
	setBeamColor(playerSimian)
	--aka Knuckle Drag or Simian
	playerSimian:setTypeName("Destroyer III")
	playerSimian:setWarpDrive(false)
	playerSimian:setJumpDrive(true)
	playerSimian.max_jump_range = 20000					--shorter than typical (vs 50)
	playerSimian.min_jump_range = 2000						--shorter than typical (vs 5)
	playerSimian:setJumpDriveRange(playerSimian.min_jump_range,playerSimian.max_jump_range)
	playerSimian:setJumpDriveCharge(playerSimian.max_jump_range)
	playerSimian:setHullMax(120)									--weaker hull (vs 200)
	playerSimian:setHull(120)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerSimian:setBeamWeapon(0,  8,   0, 900.0,         5, 6)		--turreted beam (vs none)
--									    Arc, Dir, Rotate speed
	playerSimian:setBeamWeaponTurret(0, 270,   0, .4)				--slow turret
	playerSimian:setWeaponTubeCount(5)								--fewer (vs 7)
	playerSimian:setWeaponTubeDirection(2, -90)						--left (vs right)
	playerSimian:setWeaponTubeDirection(4, 180)						--rear (vs left)
	playerSimian:setWeaponTubeExclusiveFor(0,"HVLI")				--only HVLI
	playerSimian:setTubeSize(0,"large")								--large (vs medium)
	playerSimian:setTubeLoadTime(0,20)								--slower (vs 8)
	playerSimian:setWeaponTubeExclusiveFor(4,"Mine")
	playerSimian:setWeaponStorageMax("Homing",10)					--less (vs 30)
	playerSimian:setWeaponStorage("Homing", 10)				
	playerSimian:setWeaponStorageMax("Nuke",4)						--less (vs 8)
	playerSimian:setWeaponStorage("Nuke", 4)				
	playerSimian:setWeaponStorageMax("EMP",5)						--less (vs 10)
	playerSimian:setWeaponStorage("EMP", 5)				
	playerSimian:setWeaponStorageMax("Mine",6)						--less (vs 12)
	playerSimian:setWeaponStorage("Mine", 6)				
	playerSimian:setWeaponStorageMax("HVLI",10)						--more (vs 0)
	playerSimian:setWeaponStorage("HVLI", 10)				
	playerSimian:setSystemCoolantRate("reactor",		1.3)	--more (vs 1.2)
	playerSimian:setSystemCoolantRate("jumpdrive",		1.3)	--more (vs 1.2)
	playerSimian:setSystemCoolantRate("beamweapons",	1.25)	--more (vs 1.2)
	playerSimian:setSystemCoolantRate("maneuver",		1.15)	--less (vs 1.2)
	playerSimian:setSystemCoolantRate("impulse",		1.1)	--less (vs 1.2)
	playerSimian:setSystemCoolantRate("frontshield",	1.15)	--less (vs 1.2)
	playerSimian:setSystemCoolantRate("rearshield",		1.15)	--less (vs 1.2)
	playerSimian:setSystemCoolantRate("missilesystem",	1.2)	--same (vs 1.2)
	playerSimian:setSystemPowerRate("reactor",			0.375)	--more (vs 0.30)
	playerSimian:setSystemPowerRate("beamweapons",		0.3)	--more (vs 0.30)
	playerSimian:setSystemPowerRate("jumpdrive",		0.325)	--more (vs 0.30)
	playerSimian:setSystemPowerRate("maneuver",			0.25)	--less (vs 0.30)
	playerSimian:setSystemPowerRate("impulse",			0.275)	--less (vs 0.30)
	playerSimian:setSystemPowerRate("frontshield",		0.25)	--less (vs 0.30)
	playerSimian:setSystemPowerRate("rearshield",		0.3)	--same (vs 0.30)	
	playerSimian:setSystemPowerRate("missilesystem",	0.325)	--more (vs 0.30)	
	playerSimian:setLongRangeRadarRange(20000)				--shorter longer range sensors (vs 30000)
	playerSimian:onTakingDamage(playerShipDamage)
	playerSimian:addReputationPoints(50)
	return playerSimian
end
function createPlayerShipSlingshot()
	playerWrocket = PlayerSpaceship():setTemplate("Piranha"):setFaction("Human Navy"):setCallSign("Slingshot")
	setBeamColor(playerWrocket)
	playerWrocket:setTypeName("Wrocket")
	playerWrocket:setShieldsMax(100,100)				--stronger shields (vs 80,80)
	playerWrocket:setShields(100,100)
	playerWrocket.max_jump_range = 30000				--shorter than typical (vs 50)
	playerWrocket.min_jump_range = 3000					--shorter than typical (vs 5)
	playerWrocket:setCombatManeuver(300,200)			--more (vs 200,150)
	playerWrocket:setJumpDriveRange(playerWrocket.min_jump_range,playerWrocket.max_jump_range)
	playerWrocket:setJumpDriveCharge(playerWrocket.max_jump_range)
--                 				   Arc, Dir,   Range, CycleTime, Damage
	playerWrocket:setBeamWeapon(0,  10,   0,	2000, 		8.0, 	0.5)	--long, very weak, turreted (vs none)
	playerWrocket:setBeamWeapon(1,  10, 180,	2000, 		8.0, 	0.5)	--fighter deterrents
--											Arc,  Dir, Rotate speed
	playerWrocket:setBeamWeaponTurret(0,	270,    0,			 1)
	playerWrocket:setBeamWeaponTurret(1,	270,  180,			 1)
	playerWrocket:setTubeSize(0,"small")				--small (vs large)
	playerWrocket:setTubeSize(3,"small")				--small (vs large)
	playerWrocket:setTubeLoadTime(0,6)					--faster (vs 8)
	playerWrocket:setTubeLoadTime(3,6)					--faster (vs 8)
	playerWrocket:setTubeLoadTime(2,12)					--slower (vs 8)
	playerWrocket:setTubeLoadTime(5,12)					--slower (vs 8)
	playerWrocket:weaponTubeDisallowMissle(1,"Mine")	--no side launching mines
	playerWrocket:weaponTubeDisallowMissle(4,"Mine")
	playerWrocket:setWeaponStorageMax("EMP",8)			--more (vs 0)
	playerWrocket:setWeaponStorage("EMP", 8)
	playerWrocket:setSystemCoolantRate("reactor",		1.25)	--more (vs 1.2)
	playerWrocket:setSystemCoolantRate("jumpdrive",		1.3)	--more (vs 1.2)
	playerWrocket:setSystemCoolantRate("beamweapons",	0.95)	--less (vs 1.2)
	playerWrocket:setSystemCoolantRate("maneuver",		1.2)	--same (vs 1.2)
	playerWrocket:setSystemCoolantRate("impulse",		1.2)	--same (vs 1.2)
	playerWrocket:setSystemCoolantRate("frontshield",	1.2)	--same (vs 1.2)
	playerWrocket:setSystemCoolantRate("rearshield",	1.05)	--less (vs 1.2)
	playerWrocket:setSystemCoolantRate("missilesystem",	1.05)	--less (vs 1.2)
	playerWrocket:setSystemPowerRate("reactor",			0.4)	--more (vs 0.30)
	playerWrocket:setSystemPowerRate("beamweapons",		0.25)	--less (vs 0.30)
	playerWrocket:setSystemPowerRate("jumpdrive",		0.325)	--more (vs 0.30)
	playerWrocket:setSystemPowerRate("maneuver",		0.275)	--less (vs 0.30)
	playerWrocket:setSystemPowerRate("impulse",			0.375)	--more (vs 0.30)
	playerWrocket:setSystemPowerRate("frontshield",		0.325)	--more (vs 0.30)
	playerWrocket:setSystemPowerRate("rearshield",		0.2)	--less (vs 0.30)	
	playerWrocket:setSystemPowerRate("missilesystem",	0.2)	--less (vs 0.30)	
	playerWrocket:onTakingDamage(playerShipDamage)
	playerWrocket:addReputationPoints(50)
	return playerWrocket
end
function createPlayerShipSloop()
	playerSloop = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Levant")
	setBeamColor(playerSloop)
	playerSloop:setTypeName("Sloop")
	playerSloop:setRepairCrewCount(5)				--more repair crew (vs 3)
	playerSloop:setJumpDrive(true)
	playerSloop.max_jump_range = 35000				--shorter than typical (vs 50)
	playerSloop.min_jump_range = 3500				--shorter than typical (vs 5)
	playerSloop:setJumpDriveRange(playerSloop.min_jump_range,playerSloop.max_jump_range)
	playerSloop:setJumpDriveCharge(playerSloop.max_jump_range)
	playerSloop:setImpulseMaxSpeed(90)				--faster impulse max (vs 80)
	playerSloop:setRotationMaxSpeed(15)				--faster spin (vs 10)
	playerSloop:setAcceleration(15)					--slower acceleration (vs 20)
--                 				Arc, Dir, Range, CycleTime, Damage
	playerSloop:setBeamWeapon(0, 40,  10,	 1200,	   8.0, 6)	--narrower (vs 90 deg) 
	playerSloop:setBeamWeapon(1, 40, -10,	 1200,	   8.0, 6)	--narrower (vs 90 deg) 
	playerSloop:setWeaponTubeCount(5)					--more (vs 3)
	playerSloop:setWeaponTubeDirection(0, 10)			--more angled (vs  -1)	
	playerSloop:setWeaponTubeDirection(1,-10)			--more angled (vs   1)	
	playerSloop:setWeaponTubeDirection(3,170)	
	playerSloop:setWeaponTubeDirection(4,190)
	playerSloop:setWeaponTubeExclusiveFor(0,"Homing")	--Homing (vs all but mine)
	playerSloop:setWeaponTubeExclusiveFor(1,"Homing")	--Homing (vs all but mine)
	playerSloop:setWeaponTubeExclusiveFor(3,"Mine")
	playerSloop:setWeaponTubeExclusiveFor(4,"Mine")
	playerSloop:setWeaponStorageMax("Homing",12)		--more (vs 10)
	playerSloop:setWeaponStorage("Homing", 12)
	playerSloop:setWeaponStorageMax("Mine",6)			--more (vs 4)
	playerSloop:setWeaponStorage("Mine", 6)
	playerSloop:setWeaponStorageMax("Nuke",0)			--less (vs 2)
	playerSloop:setWeaponStorage("Nuke", 0)
	playerSloop:setWeaponStorageMax("EMP",0)			--less (vs 3)
	playerSloop:setWeaponStorage("EMP", 0)
	playerSloop:setWeaponStorageMax("HVLI",0)			--less (vs 3)
	playerSloop:setWeaponStorage("HVLI", 0)
	playerSloop:onTakingDamage(playerShipDamage)
	playerSloop:addReputationPoints(50)
	return playerSloop	
end
function createplayerShipSneak()
	playerSneak = PlayerSpaceship():setTemplate("Repulse"):setTypeName("Skray"):setFaction("Human Navy"):setCallSign("5N3AK-E")
	setBeamColor(playerSneak)
	playerSneak:setWeaponStorageMax("Homing", 10)
	playerSneak:setWeaponStorage("Homing", 10)
	playerSneak:setWeaponStorageMax("HVLI", 10)
	playerSneak:setWeaponStorage("HVLI", 10)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerSneak:setBeamWeapon(0,  10, -70,	1200, 		6.0, 	5.0)
	playerSneak:setBeamWeapon(1,  10,  70,	1200, 		6.0,	5.0)
--										Arc,  Dir, Rotate speed
	playerSneak:setBeamWeaponTurret(0,	 30,  -70,			5)
	playerSneak:setBeamWeaponTurret(1,	 30,   70,			5)
	playerSneak:setShortRangeRadarRange(7500)
	playerSneak:onTakingDamage(playerShipDamage)
	playerSneak:addReputationPoints(50)
	return playerSneak
end
function createPlayerShipSparrow()
	playerSparrow = PlayerSpaceship():setTemplate("Player Fighter"):setFaction("Human Navy"):setCallSign("Sparrow")
	setBeamColor(playerSparrow)
	playerSparrow:setTypeName("Vermin")
	playerSparrow:setRepairCrewCount(4)						--more repair crew (vs 3)
	playerSparrow:setMaxEnergy(500)							--more maximum energy (vs 400)
	playerSparrow:setEnergy(500)							
	playerSparrow:setWarpDrive(true)						--warp drive (vs none)
	playerSparrow:setWarpSpeed(900)
	playerSparrow:setShieldsMax(100,60)						--stronger shields (vs 40)
	playerSparrow:setShields(100,60)
	playerSparrow:setBeamWeapon(0, 12,   0, 1000, 6, 4)		--3 beams (vs 2)
	playerSparrow:setBeamWeapon(1, 40, -10,  800, 6, 6)	
	playerSparrow:setBeamWeapon(2, 40,  10,  800, 6, 6)	
	playerSparrow:setWeaponTubeCount(2)						--more (vs 1)
	playerSparrow:setWeaponTubeExclusiveFor(0,"HVLI")
	playerSparrow:setTubeSize(0,"small")					--small (vs medium)
	playerSparrow:setTubeLoadTime(1,20)						--slower (vs 10)
	playerSparrow:setWeaponTubeDirection(1,180)
	playerSparrow:setWeaponTubeExclusiveFor(1,"Mine")
	playerSparrow:setWeaponStorageMax("HVLI", 10)			--more (vs 4)
	playerSparrow:setWeaponStorage("HVLI", 10)
	playerSparrow:setWeaponStorageMax("Mine",6)				--more Mines (vs 0)
	playerSparrow:setWeaponStorage("Mine",6)
	playerSparrow:onTakingDamage(playerShipDamage)
	playerSparrow:addReputationPoints(50)
	return playerSparrow
end
function createPlayerShipSplinter()
	playerFresnel = PlayerSpaceship():setTemplate("Player Fighter"):setFaction("Human Navy"):setCallSign("Splinter")
	setBeamColor(playerFresnel)
	playerFresnel:setTypeName("Fresnel")
	playerFresnel:setRadarTrace("ktlitan_fighter.png")	--different radar trace
	playerFresnel:setMaxEnergy(500)								--more maximum energy (vs 400)
	playerFresnel:setEnergy(500)
	playerFresnel:setShieldsMax(120,80)							--stronger shields (vs 40)
	playerFresnel:setShields(120,80)
	playerFresnel:setJumpDrive(true)							--jump drive (vs none)
	playerFresnel.max_jump_range = 20000						--shorter than typical (vs 50)
	playerFresnel.min_jump_range = 2000							--shorter than typical (vs 5)
	playerFresnel:setSystemPowerFactor("jumpdrive",3.5)			--more efficient (vs 5)
	playerFresnel:setJumpDriveRange(playerFresnel.min_jump_range,playerFresnel.max_jump_range)
	playerFresnel:setJumpDriveCharge(playerFresnel.max_jump_range)
--                 				   Arc, Dir, Range, CycleTime, Damage
	playerFresnel:setBeamWeapon(0,	 5,   0,	2300, 		6.0, 	1.5)
	playerFresnel:setBeamWeapon(1,  10, -20,	 800, 		6.0, 	4.0)	
	playerFresnel:setBeamWeapon(2,  10,  20,	 800, 		6.0,	4.0)
--										   Arc,  Dir, Rotate speed
	playerFresnel:setBeamWeaponTurret(1,	60,  -20,		 .3)		--slow turret
	playerFresnel:setBeamWeaponTurret(2,	60,   20,		 .3)
	playerFresnel:setWeaponTubeCount(2)							--more (vs 1)
	playerFresnel:setWeaponTubeDirection(0,120)					--angled rear (vs front)
	playerFresnel:setWeaponTubeDirection(1,240)					--angled rear (vs none)
	playerFresnel:setWeaponTubeExclusiveFor(0,"Homing")			--homing only (vs HVLI)
	playerFresnel:setWeaponTubeExclusiveFor(2,"Homing")
	playerFresnel:setWeaponStorageMax("HVLI",  0)				--fewer HVLI (vs 4)
	playerFresnel:setWeaponStorage("HVLI",     0)				
	playerFresnel:setWeaponStorageMax("Homing",4)				--more homing (vs 0)
	playerFresnel:setWeaponStorage("Homing",   4)
	playerFresnel.turbo_torp_factor = 3
	playerFresnel:onTakingDamage(playerShipDamage)
	playerFresnel:addReputationPoints(50)
	return playerFresnel
end
function createPlayerShipSpyder()
	--experimental
	playerSpyder = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Spyder")
	setBeamColor(playerSpyder)
	playerSpyder:setTypeName("Atlantis II")
	playerSpyder:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerSpyder:setImpulseMaxSpeed(80)					--slower impulse max (vs 90)
	playerSpyder:setWeaponTubeCount(6)					--one more tube
	playerSpyder:setWeaponTubeDirection(5,0)			--front facing
	playerSpyder:weaponTubeDisallowMissle(5,"Mine")		--no Mine
	playerSpyder:weaponTubeDisallowMissle(5,"EMP")		--no EMP
	playerSpyder:weaponTubeDisallowMissle(5,"Nuke")		--no Nuke
	playerSpyder:setWeaponTubeDirection(0,-60)			--left front facing
	playerSpyder:setWeaponTubeDirection(1,-120)			--left rear facing
	playerSpyder:setWeaponTubeDirection(2,60)			--right front facing
	playerSpyder:setWeaponTubeDirection(3,120)			--right rear facing
	playerSpyder:setSystemCoolantRate("reactor",			1.3)	--more (vs 1.2)
	playerSpyder:setSystemCoolantRate("jumpdrive",		1.2)	--same (vs 1.2)
	playerSpyder:setSystemCoolantRate("beamweapons",		1.15)	--less (vs 1.2)
	playerSpyder:setSystemCoolantRate("maneuver",		1.05)	--less (vs 1.2)
	playerSpyder:setSystemCoolantRate("impulse",			1.2)	--same (vs 1.2)
	playerSpyder:setSystemCoolantRate("frontshield",		1.05)	--less (vs 1.2)
	playerSpyder:setSystemCoolantRate("rearshield",		1.15)	--less (vs 1.2)
	playerSpyder:setSystemCoolantRate("missilesystem",	1.3)	--more (vs 1.2)
	playerSpyder:setSystemPowerRate("reactor",			0.375)	--more (vs 0.30)
	playerSpyder:setSystemPowerRate("beamweapons",		0.3)	--same (vs 0.30)
	playerSpyder:setSystemPowerRate("jumpdrive",		0.325)	--more (vs 0.30)
	playerSpyder:setSystemPowerRate("maneuver",			0.25)	--less (vs 0.30)
	playerSpyder:setSystemPowerRate("impulse",			0.275)	--less (vs 0.30)
	playerSpyder:setSystemPowerRate("frontshield",		0.25)	--less (vs 0.30)
	playerSpyder:setSystemPowerRate("rearshield",		0.3)	--same (vs 0.30)	
	playerSpyder:setSystemPowerRate("missilesystem",	0.325)	--more (vs 0.30)	
	playerSpyder:onTakingDamage(playerShipDamage)
	playerSpyder:addReputationPoints(50)
	return playerSpyder
end
function createPlayerShipStick()
	playerStick = PlayerSpaceship():setTemplate("Hathcock"):setFaction("Human Navy"):setCallSign("Stick")	
	setBeamColor(playerStick)
	--aka stick or spike
	playerStick:setTypeName("Surkov")
	playerStick:setRepairCrewCount(3)	--more repair crew (vs 2)
	playerStick:setImpulseMaxSpeed(60)	--faster impulse max (vs 50)
	playerStick:setJumpDrive(false)		--no jump
	playerStick:setWarpDrive(true)		--add warp
	playerStick:setWarpSpeed(500)
	playerStick:setShieldsMax(80,120)	--stronger (vs 70,70)
	playerStick:setShields(80,120)
	playerStick:setHullMax(175)			--stronger (vs 120)
	playerStick:setHull(175)
--                 				   Arc, Dir,   Range, Cycle,  Dmg
	playerStick:setBeamWeapon(1,	20,   0,	1200,	6.0,	5)	--stronger (vs 4)
	playerStick:setBeamWeapon(2,	60,   0,	1000,	6.0,	6)	--stronger (vs 4)
	playerStick:setBeamWeapon(3,	90,   0,	 800,	6.0,	7)	--stronger (vs 4)
	playerStick:setWeaponTubeCount(3)	--one more tube for mines, no other splash ordnance
	playerStick:setWeaponTubeDirection(0, -90)
	playerStick:weaponTubeDisallowMissle(0,"Mine")
	playerStick:weaponTubeDisallowMissle(0,"Nuke")
	playerStick:weaponTubeDisallowMissle(0,"EMP")
	playerStick:setWeaponStorageMax("Mine",3)		--more (vs 0)
	playerStick:setWeaponStorage("Mine",3)
	playerStick:setWeaponStorageMax("Nuke",0)		--less
	playerStick:setWeaponStorage("Nuke",0)
	playerStick:setWeaponStorageMax("EMP",0)		--less
	playerStick:setWeaponStorage("EMP",0)
	playerStick:setWeaponTubeDirection(1, 90)
	playerStick:weaponTubeDisallowMissle(1,"Mine")
	playerStick:weaponTubeDisallowMissle(1,"Nuke")
	playerStick:weaponTubeDisallowMissle(1,"EMP")
	playerStick:setWeaponTubeDirection(2,180)
	playerStick:setWeaponTubeExclusiveFor(2,"Mine")
	playerStick:setTubeLoadTime(2, 20)				--slower (vs 15)
	playerStick:setSystemCoolantRate("warp",			1.4)	--more (vs 1.2) pump is here
	playerStick:setSystemCoolantRate("reactor",			1.35)	--more (vs 1.2)
	playerStick:setSystemCoolantRate("beamweapons",		1.1)	--less (vs 1.2)
	playerStick:setSystemCoolantRate("impulse",			1.3)	--more (vs 1.2)
	playerStick:setSystemCoolantRate("frontshield",		1.1)	--less (vs 1.2)
	playerStick:setSystemCoolantRate("missilesystem",	1.05)	--less (vs 1.2)
	playerStick:setSystemCoolantRate("rearshield",		1.35)	--more (vs 1.2)
	playerStick:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerStick:setSystemPowerRate("warp",				0.375)	--more (vs 0.30)
	playerStick:setSystemPowerRate("beamweapons",		0.225)	--less (vs 0.30)
	playerStick:setSystemPowerRate("maneuver",			0.275)	--less (vs 0.30)
	playerStick:setSystemPowerRate("impulse",			0.325)	--more (vs 0.30)
	playerStick:setSystemPowerRate("frontshield",		0.35)	--more (vs 0.30)
	playerStick:setSystemPowerRate("rearshield",		0.35)	--more (vs 0.30)
--	playerStick:setSystemHeatRate("beamweapons",	.5)	--more (vs .05) Lingling	
	playerStick:onTakingDamage(playerShipDamage)
	playerStick:addReputationPoints(50)
	return playerStick
end
function createPlayerShipSting()
	--sent to Kraylor war front. May return later
	playerSting = PlayerSpaceship():setTemplate("Hathcock"):setFaction("Human Navy"):setCallSign("Sting")
	setBeamColor(playerSting)
	playerSting:setTypeName("Surkov")
	playerSting:setRepairCrewCount(4)	--more repair crew (vs 2)
	playerSting:setImpulseMaxSpeed(60)	--faster impulse max (vs 50)
	playerSting:setRotationMaxSpeed(20)	--faster spin (vs 15)
	playerSting:setJumpDrive(false)		--no jump
	playerSting:setWarpDrive(true)		--add warp
	playerSting:setWarpSpeed(400)
	playerSting:setWeaponTubeCount(3)	--one more tube for mines, no other splash ordnance
	playerSting:setWeaponTubeDirection(0, -90)
	playerSting:weaponTubeDisallowMissle(0,"Mine")
	playerSting:weaponTubeDisallowMissle(0,"Nuke")
	playerSting:weaponTubeDisallowMissle(0,"EMP")
	playerSting:setWeaponStorageMax("Mine",3)
	playerSting:setWeaponStorage("Mine",3)
	playerSting:setWeaponStorageMax("Nuke",0)
	playerSting:setWeaponStorage("Nuke",0)
	playerSting:setWeaponStorageMax("EMP",0)
	playerSting:setWeaponStorage("EMP",0)
	playerSting:setWeaponTubeDirection(1, 90)
	playerSting:weaponTubeDisallowMissle(1,"Mine")
	playerSting:weaponTubeDisallowMissle(1,"Nuke")
	playerSting:weaponTubeDisallowMissle(1,"EMP")
	playerSting:setWeaponTubeDirection(2,180)
	playerSting:setWeaponTubeExclusiveFor(2,"Mine")
	playerSting:onTakingDamage(playerShipDamage)
	playerSting:addReputationPoints(50)
	return playerSting
end
function createPlayerShipTango()
	playerTwister = PlayerSpaceship():setTemplate("Hathcock"):setFaction("Human Navy"):setCallSign("Tango")
	setBeamColor(playerTwister)
	playerTwister:setTypeName("Twister")
	playerTwister:setRadarTrace("ktlitan_destroyer.png")				--different radar trace
	playerTwister:setRepairCrewCount(5)		--more repair crew (vs 2)
	playerTwister:setShieldsMax(100,120)	--stronger (vs 70,70)
	playerTwister:setShields(100,120)
	playerTwister:setRotationMaxSpeed(10)	--slower spin (vs 15)
	playerTwister:setAcceleration(25)		--faster (vs 8)
	playerTwister:setJumpDrive(false)		--no jump
	playerTwister:setWarpDrive(true)		--add warp (vs jump)
	playerTwister:setWarpSpeed(425)
	playerTwister:setMaxEnergy(800)			--less maximum energy (vs 1000)
	playerTwister:setEnergy(800)							
--                 				   Arc, Dir,   Range, CycleTime, Damage
	playerTwister:setBeamWeapon(0,  10,   0,	1000, 		6.0, 	5.0)	--2 turreted beams (vs 4 fixed)
	playerTwister:setBeamWeapon(1,  10, 180,	1000, 		6.0,	5.0)	--full coverage (vs forward focused), more dmg/beam (vs 4)
	playerTwister:setBeamWeapon(2,   0,   0,	   0, 		  0,	  0)
	playerTwister:setBeamWeapon(3,   0,   0,	   0, 		  0,	  0)
--											Arc,  Dir, Rotate speed
	playerTwister:setBeamWeaponTurret(0,	190,    0,			 .4)		--slow turret
	playerTwister:setBeamWeaponTurret(1,	190,  180,			 .4)		--slow turret
	playerTwister:setWeaponTubeCount(6)					--more (vs 2)
	playerTwister:setWeaponTubeDirection(0,  0)			--front (vs side)
	playerTwister:setWeaponTubeDirection(1,-10)			--angled front (vs side)
	playerTwister:setWeaponTubeDirection(2, 10)
	playerTwister:setWeaponTubeDirection(3,170)
	playerTwister:setWeaponTubeDirection(4,190)
	playerTwister:setWeaponTubeDirection(5,180)
	playerTwister:setWeaponTubeExclusiveFor(0,"HVLI")	--HVLI (vs any)
	playerTwister:setWeaponTubeExclusiveFor(1,"Homing")	--Homing (vs any)
	playerTwister:setWeaponTubeExclusiveFor(2,"Homing")
	playerTwister:setWeaponTubeExclusiveFor(3,"EMP")
	playerTwister:weaponTubeAllowMissle(3,"Nuke")
	playerTwister:setWeaponTubeExclusiveFor(4,"EMP")
	playerTwister:weaponTubeAllowMissle(4,"Nuke")
	playerTwister:setWeaponTubeExclusiveFor(5,"Mine")
	playerTwister:setTubeSize(1,"large")				--large (vs medium)
	playerTwister:setTubeSize(2,"large")				--large (vs medium)
	playerTwister:setTubeLoadTime(0, 5)					--faster (vs 15)
	playerTwister:setTubeLoadTime(1, 10)				--faster (vs 15)
	playerTwister:setTubeLoadTime(2, 10)
	playerTwister:setTubeLoadTime(3, 20)
	playerTwister:setTubeLoadTime(4, 20)
	playerTwister:setWeaponStorageMax("HVLI",  16)		--more (vs 8)
	playerTwister:setWeaponStorageMax("Homing", 8)		--more (vs 4)
	playerTwister:setWeaponStorageMax("EMP",    6)		--more (vs 2)
	playerTwister:setWeaponStorageMax("Nuke",   4)		--more (vs 1)
	playerTwister:setWeaponStorageMax("Mine",   4)
	playerTwister:setWeaponStorage("HVLI",     16)
	playerTwister:setWeaponStorage("Homing",    8)
	playerTwister:setWeaponStorage("EMP",       6)
	playerTwister:setWeaponStorage("Nuke",      4)
	playerTwister:setWeaponStorage("Mine",      4)
	playerTwister:setSystemCoolantRate("reactor",		1.4)	--more (vs 1.2)
	playerTwister:setSystemCoolantRate("warp",			1.35)	--more (vs 1.2)
	playerTwister:setSystemCoolantRate("beamweapons",	1.1)	--less (vs 1.2)
	playerTwister:setSystemCoolantRate("maneuver",		1.15)	--less (vs 1.2)
	playerTwister:setSystemCoolantRate("impulse",		1.25)	--more (vs 1.2)
	playerTwister:setSystemCoolantRate("frontshield",	1.15)	--less (vs 1.2)
	playerTwister:setSystemCoolantRate("rearshield",	1.3)	--more (vs 1.2)
	playerTwister:setSystemCoolantRate("missilesystem",	1.1)	--less (vs 1.2)
	playerTwister:setSystemPowerRate("reactor",			0.40)	--more (vs 0.30)
	playerTwister:setSystemPowerRate("beamweapons",		0.225)	--less (vs 0.30)
	playerTwister:setSystemPowerRate("warp",			0.35)	--more (vs 0.30)
	playerTwister:setSystemPowerRate("maneuver",		0.25)	--less (vs 0.30)
	playerTwister:setSystemPowerRate("impulse",			0.3)	--same (vs 0.30)
	playerTwister:setSystemPowerRate("frontshield",		0.3)	--same (vs 0.30)
	playerTwister:setSystemPowerRate("rearshield",		0.325)	--more (vs 0.30)	
	playerTwister:setSystemPowerRate("missilesystem",	0.275)	--less (vs 0.30)	
	playerTwister:onTakingDamage(playerShipDamage)
	playerTwister:addReputationPoints(50)
	return playerTwister
end
function createPlayerShipTerror()
	playerPhobosT2 = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Terror")
	setBeamColor(playerPhobosT2)
	playerPhobosT2:setTypeName("Phobos T2.2")
	playerPhobosT2:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerPhobosT2:setJumpDrive(true)						--jump drive (vs none)
	playerPhobosT2.max_jump_range = 25000					--shorter than typical (vs 50)
	playerPhobosT2.min_jump_range = 2000						--shorter than typical (vs 5)
	playerPhobosT2:setJumpDriveRange(playerPhobosT2.min_jump_range,playerPhobosT2.max_jump_range)
	playerPhobosT2:setJumpDriveCharge(playerPhobosT2.max_jump_range)
	playerPhobosT2:setRotationMaxSpeed(20)					--faster spin (vs 10)
	playerPhobosT2:setShieldsMax(120,80)					--stronger front, weaker rear (vs 100,100)
	playerPhobosT2:setShields(120,80)
	playerPhobosT2:setMaxEnergy(800)						--less maximum energy (vs 1000)
	playerPhobosT2:setEnergy(800)
--                 				   Arc, Dir, Range, CycleTime, Dmg
	playerPhobosT2:setBeamWeapon(0, 10, -30,  1200,         4, 6)	--split direction (30 vs 15)
	playerPhobosT2:setBeamWeapon(1, 10,  30,  1200,         4, 6)	--reduced cycle time (4 vs 8)
--										 Arc, Dir, Rotate speed
	playerPhobosT2:setBeamWeaponTurret(0, 40, -30, .2)		--slow turret beams
	playerPhobosT2:setBeamWeaponTurret(1, 40,  30, .2)
	playerPhobosT2:setWeaponTubeCount(2)					--one fewer tube (1 forward, 1 rear vs 2 forward, 1 rear)
	playerPhobosT2:setWeaponTubeDirection(0,0)				--first tube points straight forward
	playerPhobosT2:setWeaponTubeDirection(1,180)			--second tube points straight back
	playerPhobosT2:setWeaponTubeExclusiveFor(1,"Mine")
	playerPhobosT2:setWeaponStorageMax("Homing",8)			--reduce homing storage (vs 10)
	playerPhobosT2:setWeaponStorage("Homing",8)
	playerPhobosT2:setWeaponStorageMax("HVLI",16)			--reduce HVLI storage (vs 20)
	playerPhobosT2:setWeaponStorage("HVLI",16)
	playerPhobosT2:onTakingDamage(playerShipDamage)
	playerPhobosT2:addReputationPoints(50)
	return playerPhobosT2
end
function createPlayerShipThelonius()
	playerThelonius = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Thelonius")
	setBeamColor(playerThelonius)
	playerThelonius:setTypeName("Crab")
	playerThelonius:setWarpSpeed(450)						--slower (vs 750)
	playerThelonius:setShieldsMax(280,280)					--stronger (vs 160,160) Lingling effect
	playerThelonius:setShields(280,280)
--                 				 	Arc, Dir,  Range, CycleTime, Damage
	playerThelonius:setBeamWeapon(0, 10, 165,	1000, 		6.0, 	6.0)	--turreted, stronger (vs fixed, 5 Dmg)
	playerThelonius:setBeamWeapon(1, 10, 195,	1000, 		6.0,	6.0)	--rear facing
--										   Arc, Dir, Rotate speed
	playerThelonius:setBeamWeaponTurret(0,	70,	165,		 .5)		--slow turret
	playerThelonius:setBeamWeaponTurret(1,	70,	195,		 .5)		--slow turret
	playerThelonius:setWeaponTubeCount(5)					--fewer (vs 6), no mine tube or mines
	playerThelonius:setTubeSize(0,"large")					--large (vs small)
	playerThelonius:setTubeSize(1,"small")					--small (vs normal)
	playerThelonius:setWeaponTubeDirection(1,-20)			--angled (vs zero degrees)
	playerThelonius:setWeaponTubeExclusiveFor(1,"Homing")	--homing only (vs HVLI)
	playerThelonius:setTubeSize(2,"small")					--medium (vs large)
	playerThelonius:setWeaponTubeDirection(2, 20)			--angled (vs zero degrees)
	playerThelonius:setWeaponTubeExclusiveFor(2,"Homing")	--homing only (vs HVLI)
	playerThelonius:setWeaponStorageMax("Homing",16)		--more (vs 8)
	playerThelonius:setWeaponStorage("Homing", 16)				
	playerThelonius:setWeaponStorageMax("EMP",3)			--fewer (vs 6)
	playerThelonius:setWeaponStorage("EMP", 3)				
	playerThelonius:setWeaponStorageMax("Nuke",2)			--fewer (vs 4)
	playerThelonius:setWeaponStorage("Nuke", 2)				
	playerThelonius:setWeaponStorageMax("Mine",0)			--fewer (vs 6)
	playerThelonius:setWeaponStorage("Mine", 0)				
	playerThelonius:setWeaponStorageMax("HVLI",16)			--fewer (vs 24)
	playerThelonius:setWeaponStorage("HVLI", 16)		
--	playerThelonius:setSystemHeatRate("reactor",		.8)	--more (vs .05) Lingling	
--	playerThelonius:setSystemHeatRate("beamweapons",	.8)	--more (vs .05) Lingling	
--	playerThelonius:setSystemHeatRate("missilesystem",	.5)	--more (vs .05) Lingling	
--	playerThelonius:setSystemHeatRate("impulse",		.5)	--more (vs .05) Lingling	
--	playerThelonius:setSystemHeatRate("warp",			.5)	--more (vs .05) Lingling	
	playerThelonius:setSystemHeatRate("frontshield",	1)	--more (vs .05) Lingling	
	playerThelonius:setSystemHeatRate("rearshield",		1)	--more (vs .05) Lingling	
	playerThelonius:onTakingDamage(playerShipDamage)
	playerThelonius:addReputationPoints(50)
	return playerThelonius
end
function createPlayerShipThunderbird()
	--destroyed 29Feb2020
	playerThunderbird = PlayerSpaceship():setTemplate("Player Cruiser"):setFaction("Human Navy"):setCallSign("Thunderbird")
	setBeamColor(playerThunderbird)
	playerThunderbird:setTypeName("Destroyer IV")
	playerThunderbird.max_jump_range = 28000					--shorter than typical (vs 50)
	playerThunderbird.min_jump_range = 3000						--shorter than typical (vs 5)
	playerThunderbird:setJumpDriveRange(playerThunderbird.min_jump_range,playerThunderbird.max_jump_range)
	playerThunderbird:setJumpDriveCharge(playerThunderbird.max_jump_range)
	playerThunderbird:setShieldsMax(100, 100)					--stronger shields (vs 80, 80)
	playerThunderbird:setShields(100, 100)
	playerThunderbird:setHullMax(150)							--weaker hull (vs 200)
	playerThunderbird:setHull(150)
	playerThunderbird:setBeamWeapon(0, 40, -10, 1000.0, 5, 6)	--narrower (40 vs 90), faster (5 vs 6), weaker (6 vs 10)
	playerThunderbird:setBeamWeapon(1, 40,  10, 1000.0, 5, 6)
	playerThunderbird:setWeaponTubeDirection(0,-60)				--left -60 (vs -5)
	playerThunderbird:setWeaponTubeDirection(1, 60)				--right 60 (vs 5)
	playerThunderbird:setWeaponStorageMax("Homing",8)			--less (vs 12)
	playerThunderbird:setWeaponStorage("Homing", 8)				
	playerThunderbird:setWeaponStorageMax("Nuke",2)				--fewer (vs 4)
	playerThunderbird:setWeaponStorage("Nuke", 2)				
	playerThunderbird:setWeaponStorageMax("EMP",4)				--fewer (vs 6)
	playerThunderbird:setWeaponStorage("EMP", 4)				
	playerThunderbird:setWeaponStorageMax("Mine",6)				--fewer (vs 8)
	playerThunderbird:setWeaponStorage("Mine", 6)				
	playerThunderbird:setWeaponStorageMax("HVLI",12)				--more (vs 0)
	playerThunderbird:setWeaponStorage("HVLI", 12)				
	playerThunderbird:onTakingDamage(playerShipDamage)
	playerThunderbird:addReputationPoints(50)
	return playerThunderbird
end
function createPlayerShipDominant()
	playerTriumph = PlayerSpaceship():setTemplate("Atlantis"):setFaction("Human Navy"):setCallSign("Dominant")
	setBeamColor(playerTriumph)
	playerTriumph:setTypeName("Triumph")
	playerTriumph.max_jump_range = 30000					--shorter (vs 50)
	playerTriumph.min_jump_range = 3000						--shorter (vs 5)
	playerTriumph:setJumpDriveRange(playerTriumph.min_jump_range,playerTriumph.max_jump_range)
	playerTriumph:setJumpDriveCharge(playerTriumph.max_jump_range)
	playerTriumph:setHullMax(180)							--weaker hull (vs 250)
	playerTriumph:setHull(180)
	playerTriumph:setRotationMaxSpeed(15)					--faster spin (vs 10)
	playerTriumph:setAcceleration(30,25)					--faster (vs 20/20)
	playerTriumph:setImpulseMaxSpeed(90,80)					--slower reverse impulse (vs 90)
--                 				  Arc, Dir,  Range, CycleTime, Damage
	playerTriumph:setBeamWeapon(0, 60, -20, 1200.0,		  4.5, 6.5)	--narrower (vs 100), faster (vs 6), weaker (vs 8)
	playerTriumph:setBeamWeapon(1, 60,  20, 1200.0,		  4.5, 6.5)
	playerTriumph:setBeamWeapon(2, 10, -90, 1000.0,			4, 3.5)
	playerTriumph:setBeamWeapon(3, 10,  90, 1000.0,			4, 3.5)
--										 Arc, Dir, Rotate speed
	playerTriumph:setBeamWeaponTurret(2, 160, -90, 1)				--slow turret
	playerTriumph:setBeamWeaponTurret(3, 160,  90, 1)
	playerTriumph:setWeaponTubeDirection(1,  90)					--right (vs left)
	playerTriumph:setWeaponTubeDirection(2, -90)					--left (vs right)
	playerTriumph:setTubeSize(0,"large")							--large (vs medium)
	playerTriumph:setTubeSize(1,"large")							--large (vs medium)
	playerTriumph:setWeaponTubeExclusiveFor(0,"Homing")				--homing only (vs all)
	playerTriumph:setWeaponTubeExclusiveFor(1,"Homing")				--homing only (vs all)
	playerTriumph:setTubeLoadTime(0, 15)							--slower (vs 8)
	playerTriumph:setTubeLoadTime(1, 15)							--slower (vs 8)
	playerTriumph:setTubeLoadTime(4, 12)							--slower (vs 8)
	playerTriumph:onTakingDamage(playerShipDamage)
	playerTriumph:addReputationPoints(50)
	return playerTriumph
end
function createPlayerShipTorch()
	playerTorch = PlayerSpaceship():setTemplate("Player Fighter"):setFaction("Human Navy"):setCallSign("Ignite")
	setBeamColor(playerTorch)
	playerTorch:setTypeName("Torch")
	playerTorch:setWarpDrive(true)					--add warp (vs none)
	playerTorch:setImpulseMaxSpeed(100)				--slower impulse max (vs 110)
	playerTorch:setAcceleration(30)					--slower (vs 40)
	playerTorch:setWarpSpeed(960)
	playerTorch:setShieldsMax(80)					--stronger shields (vs 40)
	playerTorch:setShields(80)
	playerTorch:setHullMax(120)						--stronger hull (vs 60)
	playerTorch:setHull(120)
	local update_data = {
		update = function (self, obj, delta)
			local upper_heat = 0.98
			local heat = extraMath.clamp(obj:getSystemHeat("beamweapons"),0,upper_heat)
			heat = heat/upper_heat
			--					Arc,  Dir, Range,		  Cycle Time, Dmg
			obj:setBeamWeapon(0, 90,    0,  1000, extraMath.lerp(6,3,heat),	3)
			obj:setBeamWeapon(1, 45, -7.5,   900, extraMath.lerp(6,2,heat),	4)
			obj:setBeamWeapon(2, 45,  7.5,   900, extraMath.lerp(6,2,heat),	4)
			obj:setBeamWeapon(3, 30,    0,   700, extraMath.lerp(6,1,heat),	5)
		end
	}
	update_system:addUpdate(playerTorch,"dynamic heating cycle beams", update_data)
	playerTorch:setWeaponTubeDirection(0,-180)			--back (vs front)
	playerTorch:setTubeLoadTime(0, 25)					--slower (vs 10)
	playerTorch:setWeaponTubeExclusiveFor(0,"Mine")		--mine only (vs HVLI)
	playerTorch:setWeaponStorageMax("HVLI",	0)			--less (vs 4)
	playerTorch:setWeaponStorage("HVLI", 	0)				
	playerTorch:setWeaponStorageMax("Mine",	4)			--more (vs 0)
	playerTorch:setWeaponStorage("Mine", 	4)				
	playerTorch:onTakingDamage(playerShipDamage)
	playerTorch:addReputationPoints(50)
	return playerTorch
end
function createPlayerShipVision()
	playerVision = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Vision")
	setBeamColor(playerVision)
	playerVision:setTypeName("Era")
	playerVision:setRotationMaxSpeed(15)									--faster spin (vs 10)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerVision:setBeamWeapon(0,  10,   0,	1200, 		6.0, 	6.0)	--1 turret, 1 rear (vs 2 rear)
	playerVision:setBeamWeapon(1,  80, 180,	1200, 		6.0,	6.0)
--										Arc,  Dir, Rotate speed
	playerVision:setBeamWeaponTurret(0,	300,    0,			 .5)		--slow turret
	playerVision:setShieldsMax(70, 100)									--stronger rear shields (vs 70, 70)
	playerVision:setShields(70, 100)
	playerVision:setLongRangeRadarRange(50000)							--longer long range sensors (vs 30000)
	playerVision.normal_long_range_radar = 50000
	playerVision:onTakingDamage(playerShipDamage)
	playerVision:addReputationPoints(50)
	return playerVision
end
function createPlayerShipWiggy()
	playerWiggy = PlayerSpaceship():setTemplate("Flavia P.Falcon"):setFaction("Human Navy"):setCallSign("Wiggy")
	setBeamColor(playerWiggy)
	playerWiggy:setTypeName("Gull")
	playerWiggy:setRotationMaxSpeed(12)									--faster spin (vs 10)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerWiggy:setBeamWeapon(0,  10,   0,	1100, 		6.0, 	6.0)	--1 turret, 1 rear (vs 2 rear)
	playerWiggy:setBeamWeapon(1,  80, 180,	1100, 		6.0,	6.0)	--shorter (vs 1200)
--										Arc,  Dir, Rotate speed
	playerWiggy:setBeamWeaponTurret(0,	300,    0,			 .5)		--slow turret
	playerWiggy:setWarpDrive(false)						--no warp drive (vs warp)
	playerWiggy:setJumpDrive(true)						--jump drive (vs warp)
	playerWiggy.max_jump_range = 30000					--shorter than typical (vs 50)
	playerWiggy.min_jump_range = 3000					--shorter than typical (vs 5)
	playerWiggy:setJumpDriveRange(playerWiggy.min_jump_range,playerWiggy.max_jump_range)
	playerWiggy:setJumpDriveCharge(playerWiggy.max_jump_range)
	playerWiggy:setHullMax(120)							--stronger hull (vs 100)
	playerWiggy:setHull(120)
	playerWiggy:setShieldsMax(70, 120)					--stronger rear shields (vs 70, 70)
	playerWiggy:setShields(70, 120)
	playerWiggy:setLongRangeRadarRange(40000)			--longer long range sensors (vs 30000)
	playerWiggy.normal_long_range_radar = 40000
	playerWiggy:onTakingDamage(playerShipDamage)
	playerWiggy:addReputationPoints(50)
	return playerWiggy
end
function createPlayerShipWatson()
	playerHolmes = PlayerSpaceship():setTemplate("Crucible"):setFaction("Human Navy"):setCallSign("Watson")
	setBeamColor(playerHolmes)
	playerHolmes:setTypeName("Holmes")
	playerHolmes:setImpulseMaxSpeed(70)						--slower (vs 80)
--                  			 Arc, Dir,  Range,CycleTime, Dmg
	playerHolmes:setBeamWeapon(0, 10, -90, 1000.0, 		6.0, 7)	--broadside beams, narrower (vs 70)
	playerHolmes:setBeamWeapon(1, 60, -90,  500.0, 		6.0, 7)	
	playerHolmes:setBeamWeapon(2, 10,  90, 1000.0, 		6.0, 7)	
	playerHolmes:setBeamWeapon(3, 60,  90,  500.0, 		6.0, 7)	
	for i=0,3 do
		playerHolmes:setBeamWeaponHeatPerFire(i,0.3)
		playerHolmes:setBeamWeaponEnergyPerFire(i,6)
	end
	playerHolmes:setWeaponTubeCount(4)						--fewer (vs 6)
	playerHolmes:setWeaponTubeExclusiveFor(0,"Homing")		--tubes only shoot homing missiles (vs more options)
	playerHolmes:setWeaponTubeExclusiveFor(1,"Homing")
	playerHolmes:setWeaponTubeExclusiveFor(2,"Homing")
	playerHolmes:setWeaponTubeExclusiveFor(3,"Mine")
	playerHolmes:setWeaponTubeDirection(3, 180)
	playerHolmes:setWeaponStorageMax("Homing",10)			--more (vs 8)
	playerHolmes:setWeaponStorage("Homing", 10)				
	playerHolmes:setWeaponStorageMax("HVLI",0)				--fewer
	playerHolmes:setWeaponStorage("HVLI", 0)				
	playerHolmes:setWeaponStorageMax("EMP",0)				--fewer
	playerHolmes:setWeaponStorage("EMP", 0)				
	playerHolmes:setWeaponStorageMax("Nuke",0)				--fewer
	playerHolmes:setWeaponStorage("Nuke", 0)	
	playerHolmes:setLongRangeRadarRange(35000)				--longer longer range sensors (vs 30000)
	playerHolmes.normal_long_range_radar = 35000
	playerHolmes:setShortRangeRadarRange(4000)				--shorter short range sensors (vs 5000)
	playerHolmes:onTakingDamage(playerShipDamage)
	playerHolmes:addReputationPoints(50)
--	print("energy per beam for watson:",playerHolmes:getBeamWeaponEnergyPerFire(0))
	return playerHolmes
end
function createPlayerShipWesson()
	playerChavez = PlayerSpaceship():setTemplate("Hathcock"):setFaction("Human Navy"):setCallSign("Wesson")
	setBeamColor(playerChavez)
	playerChavez:setTypeName("Chavez")
	playerChavez:setRepairCrewCount(5)		--more (vs 2)
	playerChavez.maxRepairCrew = playerChavez:getRepairCrewCount()
	playerChavez.max_jump_range = 25000					--shorter than typical (vs 50)
	playerChavez.min_jump_range = 2500					--shorter than typical (vs 5)
	playerChavez:setJumpDriveRange(playerChavez.min_jump_range,playerChavez.max_jump_range)
	playerChavez:setJumpDriveCharge(playerChavez.max_jump_range)
	playerChavez:setImpulseMaxSpeed(70)		--faster (vs 50)
	playerChavez:setHullMax(160)			--stronger (vs 120)
	playerChavez:setHull(160)
	playerChavez:setRotationMaxSpeed(20)	--faster spin (vs 15)
	playerChavez:setAcceleration(10)		--faster (vs 8)
--      				           	Arc,  Dir,  Range,Cyc,Dmg
	playerChavez:setBeamWeapon(0,	 50,  -20,	 1200,	6,	4)	--fewer (vs 4)
	playerChavez:setBeamWeapon(1,	 50,   20,	 1200,	6,	4)
	playerChavez:setBeamWeapon(2,	  0,    0,	    0,	0,	0)
	playerChavez:setBeamWeapon(3,	  0,    0,	    0,	0,	0)
	playerChavez:setWeaponTubeCount(4)					--more (vs2)
	playerChavez:setWeaponTubeDirection(0, 0)
	playerChavez:setWeaponTubeExclusiveFor(0,"Homing")
	playerChavez:weaponTubeAllowMissle(0,"HVLI")
	playerChavez:setWeaponTubeDirection(1,-90)
	playerChavez:setWeaponTubeDirection(2,90)
	playerChavez:setWeaponTubeDirection(3,180)
	playerChavez:setWeaponTubeExclusiveFor(1,"EMP")
	playerChavez:setWeaponTubeExclusiveFor(2,"Nuke")
	playerChavez:setWeaponTubeExclusiveFor(3,"Mine")
	playerChavez:setWeaponStorageMax("Homing",	6)	--more (vs 4)
	playerChavez:setWeaponStorage("Homing",		6)
	playerChavez:setWeaponStorageMax("HVLI",	6)	--fewer (vs 8)
	playerChavez:setWeaponStorage("HVLI",   	6)
	playerChavez:setWeaponStorageMax("EMP", 	4)	--more (vs 2)
	playerChavez:setWeaponStorage("EMP",    	4)
	playerChavez:setWeaponStorageMax("Nuke",	2)	--more (vs 1)
	playerChavez:setWeaponStorage("Nuke",   	2)
	playerChavez:setWeaponStorageMax("Mine",	4)	--more (vs none)
	playerChavez:setWeaponStorage("Mine",   	4)
	playerChavez:setTubeLoadTime(0,10)				--faster (vs 15)
	playerChavez:setTubeLoadTime(1,15)	
	playerChavez:setTubeLoadTime(2,15)
	playerChavez:setTubeLoadTime(3,20)
--	playerChavez:setSystemHeatRate("beamweapons",	.5)	--more (vs .05) Lingling	
	playerChavez:onTakingDamage(playerShipDamage)
	playerChavez:addReputationPoints(50)
	return playerChavez
end
function createPlayerShipYorik()
	playerYorik = PlayerSpaceship():setTemplate("Repulse"):setFaction("Human Navy"):setCallSign("Yorik")
	setBeamColor(playerYorik)
	playerYorik:setTypeName("Rook")
	playerYorik.max_jump_range = 30000					--shorter than typical (vs 50)
	playerYorik.min_jump_range = 3000						--shorter than typical (vs 5)
	playerYorik:setJumpDriveRange(playerYorik.min_jump_range,playerYorik.max_jump_range)
	playerYorik:setJumpDriveCharge(playerYorik.max_jump_range)
	playerYorik:setImpulseMaxSpeed(75)					--faster impulse max (vs 55)
	playerYorik:setRotationMaxSpeed(8)					--slower spin (vs 9)
	playerYorik:setHullMax(200)							--stronger hull (vs 120)
	playerYorik:setHull(200)
	playerYorik:setShieldsMax(200, 100)					--stronger shields (vs 80, 80)
	playerYorik:setShields(200, 100)
--                 				 Arc, Dir, Range, CycleTime, Damage
	playerYorik:setBeamWeapon(0,  10, -25,	1000, 		6.0, 	4.0)	--front facing (vs left/right with overlap in front and back
	playerYorik:setBeamWeapon(1,  10,  25,	1000, 		6.0,	4.0)	--shorter (vs 1200), weaker (vs 5)
--										Arc,  Dir, Rotate speed
	playerYorik:setBeamWeaponTurret(0,	 60,  -25,			.15)		--slow turret, narrower arc (vs 200)
	playerYorik:setBeamWeaponTurret(1,	 60,   25,			.15)		--slow turret, narrower arc (vs 200)
	playerYorik:setWeaponTubeCount(3)					--more (vs 2)
	playerYorik:setWeaponTubeDirection(0,-90)			--first tube points left (vs forward)
	playerYorik:setWeaponTubeDirection(1, 90)			--second tube points right (vs rear)
	playerYorik:setWeaponTubeDirection(2,180)			--third tube points rear (vs none)
	playerYorik:weaponTubeDisallowMissle(0,"Mine")		--no Mine (vs any)
	playerYorik:weaponTubeDisallowMissle(1,"Mine")		--no Mine (vs any)
	playerYorik:setWeaponTubeExclusiveFor(2,"Mine")		--only mine
	playerYorik:setWeaponStorageMax("Homing", 8)		--more (vs 4)
	playerYorik:setWeaponStorage("Homing", 8)				
	playerYorik:setWeaponStorageMax("EMP", 6)			--more (vs 0)
	playerYorik:setWeaponStorage("EMP", 6)				
	playerYorik:setWeaponStorageMax("Nuke", 3)			--more (vs 0)
	playerYorik:setWeaponStorage("Nuke", 3)				
	playerYorik:setWeaponStorageMax("Mine", 5)			--more (vs 0)
	playerYorik:setWeaponStorage("Mine", 5)				
	playerYorik:onTakingDamage(playerShipDamage)
	playerYorik:addReputationPoints(50)
	return playerYorik
end
function createPlayerShipSzpieg()
	playerSzpieg = PlayerSpaceship():setTemplate("Ktlitan Breaker"):setFaction("Human Navy"):setCallSign("Szpieg")
	setBeamColor(playerSzpieg)
	playerSzpieg:setWarpDrive(true)
	playerSzpieg:setCombatManeuver(200,300)
	playerSzpieg:setShieldsMax(100, 100)				--stronger shields (vs none)
	playerSzpieg:setShields(100, 100)
	playerSzpieg:setMaxScanProbeCount(5)
	playerSzpieg:setScanProbeCount(5)
	playerSzpieg:setWeaponTubeCount(3)					--more (vs none)
	playerSzpieg:setWeaponTubeDirection(1,180)
	playerSzpieg:setWeaponTubeDirection(2,180)
	playerSzpieg:setWeaponTubeExclusiveFor(2,"Mine")
	playerSzpieg:setWeaponStorageMax("HVLI", 	6)		--more (vs none)
	playerSzpieg:setWeaponStorageMax("Homing", 5)		--more (vs none)
	playerSzpieg:setWeaponStorageMax("Mine",	3)		--more (vs none)
	playerSzpieg:setWeaponStorageMax("EMP",	3)		--more (vs none)
	playerSzpieg:setWeaponStorageMax("Nuke",	2)		--more (vs none)
	playerSzpieg:setWeaponStorage("HVLI",		6)
	playerSzpieg:setWeaponStorage("Homing",	5)
	playerSzpieg:setWeaponStorage("Mine",		3)
	playerSzpieg:setWeaponStorage("EMP",		3)
	playerSzpieg:setWeaponStorage("Nuke",		2)
	playerSzpieg:onTakingDamage(playerShipDamage)
	playerSzpieg:addReputationPoints(50)
	return playerSzpieg
end
function createPlayerShipSztylet()
	playerSztylet = PlayerSpaceship():setTemplate("Ktlitan Feeder"):setFaction("Human Navy"):setCallSign("Sztylet")
	setBeamColor(playerSztylet)
	playerSztylet:setWarpDrive(true)
	playerSztylet:setCombatManeuver(300,200)
	playerSztylet:setShieldsMax(150, 50)				--stronger shields (vs none)
	playerSztylet:setShields(150, 50)
	playerSztylet:setMaxScanProbeCount(5)
	playerSztylet:setScanProbeCount(5)
	playerSztylet:setWeaponTubeCount(5)					--more (vs none)
	playerSztylet:setWeaponTubeDirection(1,90)
	playerSztylet:setWeaponTubeDirection(2,-90)
	playerSztylet:setWeaponTubeDirection(3,180)
	playerSztylet:setWeaponTubeDirection(4,180)
	playerSztylet:setTubeSize(1,"small")
	playerSztylet:setTubeSize(2,"small")
	playerSztylet:setWeaponTubeExclusiveFor(0,"HVLI")
	playerSztylet:setWeaponTubeExclusiveFor(1,"HVLI")
	playerSztylet:setWeaponTubeExclusiveFor(2,"HVLI")
	playerSztylet:setWeaponTubeExclusiveFor(3,"HVLI")
	playerSztylet:setWeaponTubeExclusiveFor(4,"Mine")
	playerSztylet:weaponTubeAllowMissle(0,"Homing")
	playerSztylet:weaponTubeAllowMissle(1,"Homing")
	playerSztylet:weaponTubeAllowMissle(2,"Homing")
	playerSztylet:weaponTubeAllowMissle(3,"Homing")
	playerSztylet:setWeaponStorageMax("HVLI", 	6)		--more (vs none)
	playerSztylet:setWeaponStorageMax("Homing", 6)		--more (vs none)
	playerSztylet:setWeaponStorageMax("Mine",	3)		--more (vs none)
	playerSztylet:setWeaponStorage("HVLI",		6)
	playerSztylet:setWeaponStorage("Homing",	6)
	playerSztylet:setWeaponStorage("Mine",		3)
	playerSztylet:setTubeLoadTime(0, 10)
	playerSztylet:setTubeLoadTime(1, 5)
	playerSztylet:setTubeLoadTime(2, 5)
	playerSztylet:setTubeLoadTime(3, 10)
	playerSztylet:setTubeLoadTime(4, 20)
	playerSztylet:onTakingDamage(playerShipDamage)
	playerSztylet:addReputationPoints(50)
	return playerSztylet
end
function createPlayerShipKatarzyna()
	playerKatarzyna = PlayerSpaceship():setTemplate("Ktlitan Queen"):setFaction("Human Navy"):setCallSign("Katarzyna"):
		setBeamWeapon(0, 25, -15, 1000.0, 6.0, 8):
		setBeamWeapon(1, 15, -45, 1500.0, 6.0, 4):
		setBeamWeapon(2, 25, 15, 1000.0, 6.0, 8):
		setBeamWeapon(3, 15, 45, 1500.0, 6.0, 4):
		setBeamWeapon(4, 15, 80, 1300.0, 6.0, 4):
		setBeamWeapon(5, 15, -80, 1300.0, 6.0, 4):
		setBeamWeaponTurret(4, 45, 80, 3000.0, 6.0, 3):
		setBeamWeaponTurret(5, 45, -80, 3000.0, 6.0, 3):
		setWeaponTubeCount(6):
		setTubeSize(0, "large"):
		setTubeSize(1, "large"):
		setTubeSize(2, "medium"):
		setTubeSize(3, "medium"):
		setTubeSize(4, "medium"):
		setTubeSize(5, "medium"):
		setWeaponTubeDirection(0, 80):
		setWeaponTubeDirection(1, -80):
		setWeaponTubeDirection(2, 100):
		setWeaponTubeDirection(3, -100):
		setWeaponTubeDirection(4, 190):
		setWeaponTubeDirection(5, -190):
		setWeaponStorage("Nuke", 8):
		setWeaponStorage("EMP", 8):
		setWeaponStorage("Mine", 4):
		setWeaponStorage("Homing", 15):
		setWeaponStorage("HVLI", 30):
		setWeaponStorageMax("Nuke", 8):
		setWeaponStorageMax("EMP", 8):
		setWeaponStorageMax("Mine", 4):
		setWeaponStorageMax("Homing", 15):
		setWeaponStorageMax("HVLI", 30):
		setWeaponTubeExclusiveFor(0,"EMP"):
		weaponTubeAllowMissle(0, "Nuke"):
		setWeaponTubeExclusiveFor(1, "EMP"):
		weaponTubeAllowMissle(1, "Nuke"):
		setWeaponTubeExclusiveFor(2, "HVLI"):
		weaponTubeAllowMissle(2, "Homing"):
		setWeaponTubeExclusiveFor(3, "HVLI"):
		weaponTubeAllowMissle(3,"Homing"):
		setWeaponTubeExclusiveFor(4,"Mine"):
		setWeaponTubeExclusiveFor(5,"Mine"):
		setTubeLoadTime(0, 10):
		setTubeLoadTime(1, 10):
		setTubeLoadTime(2, 10):
		setTubeLoadTime(3, 10):
		setTubeLoadTime(4, 20):
		setTubeLoadTime(5, 20):
		setHull(300):
		setWarpDrive(true):
		setCombatManeuver(150,150):
		setMaxScanProbeCount(4):
		setScanProbeCount(4):
		setImpulseMaxSpeed(40.0):
		setRotationMaxSpeed(8):
		setHull(318):
		setHullMax(318):
		setShields(95, 153):
		setShieldsMax(95, 153):
		setEnergy(1388):
		setMaxEnergy(1388):
		setTypeName("Ktlitan Brood Mother"):
		setDescriptions("Special type of Ktlitan warship", "Ktlitan Brood Mother is a subtype of Ktlitan Queen.")
	playerKatarzyna:addReputationPoints(50)
	setBeamColor(playerKatarzyna)
	playerKatarzyna:onTakingDamage(playerShipDamage)
	return playerKatarzyna
end
--	Specialized ships spawned by a carrier
function createPlayerShipFowl()
	playerFowl = PlayerSpaceship():setTemplate("Player Fighter"):setFaction("Human Navy"):setCallSign("Chack")
	setBeamColor(playerFowl)
	playerFowl:setTypeName("Fowl")
	playerFowl:setRepairCrewCount(4)					--more repair crew (vs 3)
	playerFowl:setMaxEnergy(500)						--more maximum energy (vs 400)
	playerFowl:setEnergy(500)							
	playerFowl:setShieldsMax(100,60)					--stronger shields (vs 40)
	playerFowl:setShields(100,60)
--                  		   Arc, Dir,	Range, Cycle Time, Dmg
	playerFowl:setBeamWeapon(0, 12,   0,	 1000,			6, 3)	--3 beams (vs 2)
	playerFowl:setBeamWeapon(1, 40, -10,	  800,			6, 4)	
	playerFowl:setBeamWeapon(2, 40,  10,	  800,			6, 4)	
	playerFowl:setWeaponTubeDirection(0,180)			--tube points backwards (vs forward)
	playerFowl:setWeaponTubeExclusiveFor(0,"Mine")		--and only lays mines (vs HVLI)
	playerFowl:setWeaponStorageMax("HVLI",0)			--fewer HVLIs (vs 4)
	playerFowl:setWeaponStorage("HVLI",0)
	playerFowl:setWeaponStorageMax("Mine",4)			--more Mines (vs 0)
	playerFowl:setWeaponStorage("Mine",4)
	playerFowl:onTakingDamage(playerShipDamage)
	return playerFowl
end
function createPlayerShipPhargus()
	playerPhargus = PlayerSpaceship():setTemplate("Phobos M3P"):setFaction("Human Navy"):setCallSign("Gringo")
	setBeamColor(playerPhargus)
	--aka Gringo
	playerPhargus:setTypeName("Phargus")
	playerPhargus:setShieldsMax(70,50)					--weaker (vs 100,100)
	playerPhargus:setShields(70,50)
	playerPhargus:setHullMax(120)						--weaker hull (vs 200)
	playerPhargus:setHull(120)
--                  			   Arc, Dir,    Range, CycleTime, Dmg
	playerPhargus:setBeamWeapon(0,  10, -15,	800.0,		   6, 4)		--shorter (vs 1200), weaker (vs 6), faster (vs 8)
	playerPhargus:setBeamWeapon(1,  10,  15,	800.0,		   6, 4)		
--										   Arc, Dir, Rotate speed
	playerPhargus:setBeamWeaponTurret(0,	70,	-15,		 .4)		--slow turret, narrower overall arc (vs 90)
	playerPhargus:setBeamWeaponTurret(1,	70,	 15,		 .4)
	playerPhargus:onTakingDamage(playerShipDamage)
--	playerPhargus:addReputationPoints(50)	--avoid if spawned by carrier
	return playerPhargus
end
--	Standard ship creation
function setBeamColor(ship)
	local faction = ship:getFaction()
	if faction_beam_color[faction] == nil then
		faction_beam_color[faction] = tableRemoveRandom(faction_beam_color_pool)
--		print("Faction",faction,"now set to",faction_beam_color[faction].name,"r:",faction_beam_color[faction].ir,"g:",faction_beam_color[faction].ig,"b:",faction_beam_color[faction].ib)
	end
	local r = faction_beam_color[faction].r
	local g = faction_beam_color[faction].g
	local b = faction_beam_color[faction].b
--	print("Faction:",faction,"r:",r,"g:",g,"b:",b,faction_beam_color[faction].name)
	for i=0,15 do
		ship:setBeamWeaponArcColor(i,r,g,b,16/255,16/255,16/255)
	end
	local factions_db = queryScienceDatabase("Factions")
	local color_db = queryScienceDatabase("Factions","Colors")
	if color_db == nil then
		factions_db:addEntry("Colors")
		color_db = queryScienceDatabase("Factions","Colors")
	end
	local color_out = "As you identify each faction, the onboard computer system assigns a color to the beam arcs to help identify factions. These are the current faction/color correlations:\n"
	for faction,color in pairs(faction_beam_color) do
		color_out = string.format("%s\n%s: %s",color_out,faction,color.name)
	end
	color_db:setLongDescription(color_out)
end
function stockPlayer(template)
	print("stock player template:",template)
	local ship = PlayerSpaceship()
	ship:setTemplate(template):setFaction("Human Navy")
	setBeamColor(ship)
	ship:onTakingDamage(playerShipDamage)
	if template == "Player Fighter" then
--                  		  Arc, Dir,Range, Cyc,Dmg
		ship:setBeamWeapon(0,  20,   0,	1200,	6,	8):setBeamWeaponDamageType(0,"emp")
		ship:setBeamWeapon(1,  30,   0,	1000,	6,	8)
	end
	return ship
end
--	************************************************************  --
--	****				Initial Set Up Zones				****  --
--	************************************************************  --
-----------------------------------------
--	Initial Set Up > Zones > Add Zone  --
-----------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SETUP			F	initialSetUp
-- -ZONES FROM ADD	F	changeZones
-- +RED				D	setZoneColor
-- +VIA OBJECT		F	addZoneByObject
-- +VIA CLICK		F	addZoneByClick
function addZone()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones from add",changeZones)
	addGMFunction(string.format("+%s",zone_color),setZoneColor)
	addGMFunction("+Via Object",addZoneByObject)
	addGMFunction("+Via Click",addZoneByClick)
end
--------------------------------------------
--	Initial Set Up > Zones > Delete Zone  --
--------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -ZONES FROM DELETE	F	changeZones
-- Button for each existing zone
function deleteZone()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones from delete",changeZones)
	if selected_zone_index == nil then
		selected_zone_index = 1
	end
	if #zone_list > 0 then
		local zone_delete_label = string.format("Del %s",zone_list[selected_zone_index].name)
		if zone_list[selected_zone_index].sector_name ~= nil then
			zone_delete_label = string.format("%s in %s",zone_delete_label,zone_list[selected_zone_index].sector_name)
		end
		addGMFunction(zone_delete_label,function()
			local zone_to_delete = zone_list[selected_zone_index]
			table.remove(zone_list,selected_zone_index)
			zone_to_delete:destroy()
			selected_zone_index = nil
			deleteZone()
		end)
		addGMFunction("Select Next Zone",function()
			selected_zone_index = selected_zone_index + 1
			if selected_zone_index > #zone_list then
				selected_zone_index = 1
			end
			deleteZone()
		end)
	else
		changeZones()
	end
end
--	********************************************************************  --
--	****				Initial Set Up Zones Add Zone				****  --
--	********************************************************************  --
-------------------------------------------------
--	Initial Set Up > Zones > Add Zone > Color  --
-------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -ADD ZONE		F	addZone
-- List of colors for zones, selected has asterisk
function setZoneColor()
	clearGMFunctions()
	addGMFunction("-Add Zone",addZone)
	for color, rgb in pairs(zone_color_list) do
		local button_label = color
		if color == zone_color then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			zone_color = color
			setZoneColor()
		end)
	end
end
------------------------------------------------------
--	Initial Set Up > Zones > Add Zone > Via Object  --
------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM VIA OBJ	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -ZONES				F	changeZones
-- -ADD ZONE			F	addZone
-- SECTOR				F	inline
-- SMALL SQUARE			F	inline
function addZoneByObject()
	clearGMFunctions()
	addGMFunction("-Main Frm Via Obj",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones",changeZones)
	addGMFunction("-Add Zone",addZone)
	addGMFunction("Sector", function()
		local object_list = getGMSelection()
		if #object_list ~= nil and #object_list == 1 then
			local ox, oy = object_list[1]:getPosition()
			ox = math.floor(ox / 20000)
			ox = ox * 20000
			oy = math.floor(oy / 20000)
			oy = oy * 20000
			local zone = Zone():setPoints(ox,oy,ox+20000,oy,ox+20000,oy+20000,ox,oy+20000)
			--zone:setColor(64,64,64)
			zone:setColor(zone_color_list[zone_color].r,zone_color_list[zone_color].g,zone_color_list[zone_color].b)
			zone.name = object_list[1]:getSectorName()
			if zone_list == nil then
				zone_list = {}
			end
			table.insert(zone_list,zone)
		else
			addGMMessage("You must select an object in the sector where you want the zone to appear. No action taken")
		end
	end)
	addGMFunction("Small Square",function()
		local object_list = getGMSelection()
		if #object_list ~= nil and #object_list == 1 then
			local ox, oy = object_list[1]:getPosition()
			local zone = Zone():setPoints(ox+500,oy+500,ox-500,oy+500,ox-500,oy-500,ox+500,oy-500)
			--zone:setColor(255,255,128)
			zone:setColor(zone_color_list[zone_color].r,zone_color_list[zone_color].g,zone_color_list[zone_color].b)
			if square_zone_char_val == nil then
				square_zone_char_val = 65
			end
			zone.name = string.char(square_zone_char_val)
			square_zone_char_val = square_zone_char_val + 1
			zone.sector_name = object_list[1]:getSectorName()
			if zone_list == nil then
				zone_list = {}
			end
			table.insert(zone_list,zone)
			addGMMessage(string.format("Added small square zone %s in %s",zone.name,zone.sector_name))
		else
			addGMMessage("You must select an object in the sector where you want the zone to appear. No action taken")
		end
	end)
end
-----------------------------------------------------
--	Initial Set Up > Zones > Add Zone > Via Click  --
-----------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM VIA CLICK	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -ZONES				F	changeZones
-- -ADD ZONE			F	addZone
-- +RECTANGLE W5 X H5	D	setZoneRectangleSize
-- +POLYGON 3			D	setZonePolygonPointMax
-- PUT RECT ZONE		D	putRectangleZone
function addZoneByClick()
	clearGMFunctions()
	addGMFunction("-Main Frm Via Click",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones",changeZones)
	addGMFunction("-Add Zone",addZone)
	local button_label = string.format("+Rectangle W%i x H%i",zone_rectangle_width,zone_rectangle_height)
	if zone_click_type == "rectangle" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,setZoneRectangleSize)
	button_label = string.format("+Polygon %i",zone_point_max)
	if zone_click_type == "polygon" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,setZonePolygonPointMax)
	if zone_click_type == "rectangle" then
		if gm_click_mode == "zone rectangle" then
			addGMFunction(">Put Rect Zone<",putRectangleZone)
		else
			addGMFunction("Put Rect Zone",putRectangleZone)
		end
	end
	if zone_click_type == "polygon" then
		if gm_click_mode == "zone polygon" then
			if zone_point_count == 0 then
				addGMFunction(">Set First Point<",putPolygonZone)
			elseif zone_point_count == (zone_point_max - 1) then
				addGMFunction(">Set Last Point<",putPolygonZone)
			else
				addGMFunction(string.format(">Set Point %i<",zone_point_count + 1),putPolygonZone)
			end
		else
			addGMFunction("Set First Point",putPolygonZone)
		end
	end
end
function putRectangleZone()
	if gm_click_mode == "zone rectangle" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "zone rectangle"
		onGMClick(gmClickZoneRectangle)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   zone rectangle\nGM click mode.",prev_mode))
		end
	end
	addZoneByClick()
end
function gmClickZoneRectangle(x,y)
	local half_width = zone_rectangle_width*1000/2
	local half_height = zone_rectangle_height*1000/2
	local zone = Zone():setPoints(x - half_width, y - half_height, x + half_width, y - half_height, x + half_width, y + half_height, x - half_width, y + half_height)
	zone:setColor(zone_color_list[zone_color].r,zone_color_list[zone_color].g,zone_color_list[zone_color].b)
	if rectangle_zone_char_val == nil then
		rectangle_zone_char_val = 65
	end
	zone.name = string.format("Rect %s",string.char(rectangle_zone_char_val))
	zone:setLabel(string.format("R%s",string.char(rectangle_zone_char_val)))
	rectangle_zone_char_val = rectangle_zone_char_val + 1
	zone.sector_name = zone:getSectorName()
	if zone_list == nil then
		zone_list = {}
	end
	table.insert(zone_list,zone)
	addGMMessage(string.format("Added rectangle zone %s in %s",zone.name,zone.sector_name))
end
function putPolygonZone()
	if gm_click_mode == "zone polygon" then
		gm_click_mode = nil
		onGMClick(nil)
		zone_point_count = 0	
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "zone polygon"
		onGMClick(gmClickZonePolygon)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   zone polygon\nGM click mode.",prev_mode))
		end
	end
	addZoneByClick()
end
function gmClickZonePolygon(x,y)
	if zone_polygon_point_list_x == nil then
		zone_polygon_point_list_x = {}
		zone_polygon_point_list_y = {}
	end
	table.insert(zone_polygon_point_list_x,x)
	table.insert(zone_polygon_point_list_y,y)
	zone_point_count = zone_point_count + 1
	if zone_point_count == zone_point_max then
		local zone = Zone()
		if zone_point_count == 3 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3]
			)
		elseif zone_point_count == 4 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3],
				zone_polygon_point_list_x[4],zone_polygon_point_list_y[4]
			)
		elseif zone_point_count == 5 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3],
				zone_polygon_point_list_x[4],zone_polygon_point_list_y[4],
				zone_polygon_point_list_x[5],zone_polygon_point_list_y[5]
			)
		elseif zone_point_count == 6 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3],
				zone_polygon_point_list_x[4],zone_polygon_point_list_y[4],
				zone_polygon_point_list_x[5],zone_polygon_point_list_y[5],
				zone_polygon_point_list_x[6],zone_polygon_point_list_y[6]
			)
		elseif zone_point_count == 7 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3],
				zone_polygon_point_list_x[4],zone_polygon_point_list_y[4],
				zone_polygon_point_list_x[5],zone_polygon_point_list_y[5],
				zone_polygon_point_list_x[6],zone_polygon_point_list_y[6],
				zone_polygon_point_list_x[7],zone_polygon_point_list_y[7]
			)
		elseif zone_point_count == 8 then
			zone:setPoints(
				zone_polygon_point_list_x[1],zone_polygon_point_list_y[1],
				zone_polygon_point_list_x[2],zone_polygon_point_list_y[2],
				zone_polygon_point_list_x[3],zone_polygon_point_list_y[3],
				zone_polygon_point_list_x[4],zone_polygon_point_list_y[4],
				zone_polygon_point_list_x[5],zone_polygon_point_list_y[5],
				zone_polygon_point_list_x[6],zone_polygon_point_list_y[6],
				zone_polygon_point_list_x[7],zone_polygon_point_list_y[7],
				zone_polygon_point_list_x[8],zone_polygon_point_list_y[8]
			)
		end
		zone:setColor(zone_color_list[zone_color].r,zone_color_list[zone_color].g,zone_color_list[zone_color].b)
		if polygon_zone_char_val == nil then
			polygon_zone_char_val = 65
		end
		zone.name = string.format("Poly %s %i",string.char(polygon_zone_char_val),zone_point_count)
		zone:setLabel(string.format("%s%i",string.char(polygon_zone_char_val),zone_point_count))
		polygon_zone_char_val = polygon_zone_char_val + 1
		local mid_x = 0
		for i=1,#zone_polygon_point_list_x do
			mid_x = mid_x + zone_polygon_point_list_x[i]
		end
		mid_x = mid_x/#zone_polygon_point_list_x
		local mid_y = 0
		for i=1,#zone_polygon_point_list_y do
			mid_y = mid_y + zone_polygon_point_list_y[i]
		end
		mid_y = mid_y/#zone_polygon_point_list_y
		local reference_asteroid = VisualAsteroid():setPosition(mid_x,mid_y)
		zone.sector_name = reference_asteroid:getSectorName()
		reference_asteroid:destroy()
		if zone_list == nil then
			zone_list = {}
		end
		table.insert(zone_list,zone)
		zone_point_count = 0
		zone_polygon_point_list_x = nil
		zone_polygon_point_list_y = nil
		addGMMessage(string.format("Added polygon zone %s in %s",zone.name,zone.sector_name))
	end
	addZoneByClick()
end
-----------------------------------------------------------------
--	Initial Set Up > Zones > Add Zone > Via Click > Rectangle  --
-----------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM RECT SIZE	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -ZONES				F	changeZones
-- -ADD ZONE			F	addZone
-- -VIA CLICK			F	addZoneByClick
-- WIDER 5 -> 6			D	inline
-- NARROWER 5 -> 4		D	inline
-- TALLER 5 -> 6		D	inline
-- SHORTER 5 -> 4		D	inline
function setZoneRectangleSize()
	clearGMFunctions()
	addGMFunction("-Main Frm Rect Size",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones",changeZones)
	addGMFunction("-Add Zone",addZone)
	addGMFunction("-Via Click",addZoneByClick)
	zone_click_type = "rectangle"
	if zone_rectangle_width < 9 then
		addGMFunction(string.format("Wider %i -> %i",zone_rectangle_width,zone_rectangle_width + 1),function()
			zone_rectangle_width = zone_rectangle_width + 1
			setZoneRectangleSize()
		end)
	end
	if zone_rectangle_width > 1 then
		addGMFunction(string.format("Narrower %i -> %i",zone_rectangle_width,zone_rectangle_width - 1),function()
			zone_rectangle_width = zone_rectangle_width - 1
			setZoneRectangleSize()
		end)
	end
	if zone_rectangle_height < 9 then
		addGMFunction(string.format("Taller %i -> %i",zone_rectangle_height,zone_rectangle_height + 1),function()
			zone_rectangle_height = zone_rectangle_height + 1
			setZoneRectangleSize()
		end)
	end
	if zone_rectangle_height > 1 then
		addGMFunction(string.format("Shorter %i -> %i",zone_rectangle_height,zone_rectangle_height - 1),function()
			zone_rectangle_height = zone_rectangle_height - 1
			setZoneRectangleSize()
		end)
	end
end
---------------------------------------------------------------
--	Initial Set Up > Zones > Add Zone > Via Click > Polygon  --
---------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM POLY MAX	F	initialGMFunctions
-- -SETUP				F	initialSetUp
-- -ZONES				F	changeZones
-- -ADD ZONE			F	addZone
-- -VIA CLICK			F	addZoneByClick
-- MORE 3 -> 4			D	inline
function setZonePolygonPointMax()
	clearGMFunctions()
	addGMFunction("-Main Frm Poly Max",initialGMFunctions)
	addGMFunction("-Setup",initialSetUp)
	addGMFunction("-Zones",changeZones)
	addGMFunction("-Add Zone",addZone)
	addGMFunction("-Via Click",addZoneByClick)
	zone_click_type = "polygon"
	if zone_point_max < 8 then
		addGMFunction(string.format("More %i -> %i",zone_point_max,zone_point_max + 1),function()
			zone_point_max = zone_point_max + 1
			setZonePolygonPointMax()
		end)
	end
	if zone_point_max > 3 then
		addGMFunction(string.format("Less %i -> %i",zone_point_max,zone_point_max - 1),function()
			zone_point_max = zone_point_max - 1
			setZonePolygonPointMax()
		end)
	end
end
-----------------------------------------------------------------------------------
--	Initial Set Up > Automated Station Warning > Set Warning Proximity Distance  --
-----------------------------------------------------------------------------------
-- Button Text FD*	Related Function(s)
-- DEFAULT 30U	D	inline	
-- ZERO			F	inline
-- 5U			F	inline
-- 10U			F	inline
-- 20U			F	inline
-- 30U			F	inline
function setStationSensorRange()
	clearGMFunctions()
	--local long_range_server = getLongRangeRadarRange()
	local long_range_server = 30000
	addGMFunction(string.format("Default %iU",long_range_server/1000),function()
		station_sensor_range = long_range_server
		server_sensor = true
		autoStationWarn()
	end)
	addGMFunction("Zero",function()
		station_sensor_range = 0
		server_sensor = false
		autoStationWarn()
	end)
	addGMFunction("5U",function()
		station_sensor_range = 5000
		server_sensor = false
		autoStationWarn()
	end)
	addGMFunction("10U",function()
		station_sensor_range = 10000
		server_sensor = false
		autoStationWarn()
	end)
	addGMFunction("20U",function()
		station_sensor_range = 20000
		server_sensor = false
		autoStationWarn()
	end)
	addGMFunction("30U",function()
		station_sensor_range = 30000
		server_sensor = false
		autoStationWarn()
	end)
end
--	*												   *  --
--	**												  **  --
--	****************************************************  --
--	****				Spawn Ship(s)				****  --
--	****************************************************  --
--	**												  **  --
--	*												   *  --
------------------------------------
--	Spawn Ship(s) > Spawn a Ship  --
------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM SHIP SPAWN	F	initialGMFunctions
-- -FLEET OR SHIP			F	spawnGMShips
-- +AT CLICK				D	setFleetSpawnLocation
-- SPAWN GNAT				D	parmSpawnShip
-- List of ships unique to sandbox, sorted by unusual first then alphabetically
function spawnGMShip()
	clearGMFunctions()
	addGMFunction("-Main From Ship Spawn",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	returnFromFleetSpawnLocation = spawnGMShip
	addGMFunction(string.format("+%s",fleetSpawnLocation),setFleetSpawnLocation)
	if gm_click_mode == "ship spawn" then
		addGMFunction(string.format(">Spawn %s<",individual_ship),parmSpawnShip)
	else
		addGMFunction(string.format("Spawn %s",individual_ship),parmSpawnShip)
	end
	sandbox_templates = {}
	for name, details in pairs(ship_template) do
		if details.create ~= stockTemplate then
			local sort_name = name
			if details.unusual then
				sort_name = "a" .. name
			else
				sort_name = "b" .. name
			end
			table.insert(sandbox_templates,sort_name)
		end
	end
	table.sort(sandbox_templates)
	for _, name in ipairs(sandbox_templates) do
		local short_name = string.sub(name,2)
		local button_label = short_name
		if string.sub(name,1,1) == "a" then
			button_label = "U-" .. short_name
		end
		if short_name == individual_ship then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			individual_ship = short_name
			spawnGMShip()
		end)
	end
end
-----------------------------------
--	Spawn Ship(s) > Spawn fleet  --
-----------------------------------
-- Button Text			   FD*	Explanation							Related Function(s)
-- -MAIN FROM FLT SPWN		F										initialGMFunctions
-- -SHIP SPAWN				F										spawnGMShips
-- +EXUARI					D	(faction)							setGMFleetFaction
-- +1 PLAYER STRENGTH: n*	D	/Asterisk on selection between		setGMFleetStrength
-- +SET FIXED STRENGTH		D	\relative and fixed strength		setFixedFleetStrength
-- +RANDOM-U				D	(composition)						setFleetComposition
-- +UNMODIFIED				D	(random tweaking)					setFleetChange
-- +IDLE					D	(orders)							setFleetOrders
-- +AT CLICK				D	(position)							setFleetSpawnLocation
-- SPAWN					F										parmSpawnFleet
function spawnGMFleet()
	clearGMFunctions()
	addGMFunction("-Main From Flt Spwn",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction(string.format("+%s",fleetSpawnFaction),setGMFleetFaction)
	if fleet_spawn_type == "relative" then
		local calcStr = math.floor(playerPower()*fleetStrengthByPlayerStrength)
		local GMSetGMFleetStrength = fleetStrengthByPlayerStrength .. "*player strength: " .. calcStr
		if fleetStrengthByPlayerStrength == .25 then
			GMSetGMFleetStrength = "1/4 Player Strength: " .. calcStr
		elseif fleetStrengthByPlayerStrength == .5 then
			GMSetGMFleetStrength = "1/2 Player Strength: " .. calcStr
		end
		addGMFunction("+" .. GMSetGMFleetStrength,setGMFleetStrength)
	elseif fleet_spawn_type == "fixed" then
		addGMFunction(string.format("+Fixed Strength %i",fleetStrengthFixedValue),setFixedFleetStrength)
	elseif fleet_spawn_type == "prebuilt" then
		--calculate fleet strength
		local button_label = "+Prebuilt"
		if formation_shape ~= nil then
			local leader_strength = ship_template[prebuilt_leader].strength
			local follower_strength = ship_template[prebuilt_follower].strength
			local prebuilt_strength = leader_strength + (follower_strength * #fly_formation[formation_shape])
			button_label = string.format("%s %i",button_label,prebuilt_strength)
		end
		addGMFunction(button_label,setPrebuiltFleet)
	end
	if fleet_spawn_type ~= "prebuilt" then
		local exclusion_string = ""
		for name, details in pairs(fleet_exclusions) do
			if details.exclude then
				if exclusion_string == "" then
					exclusion_string = "-"
				end
				exclusion_string = exclusion_string .. details.letter
			end
		end
		addGMFunction(string.format("+%s%s",fleetComposition,exclusion_string),function()
			setFleetComposition(spawnGMFleet)
		end)
		addGMFunction(string.format("+%s",fleetChange),setFleetChange)
		addGMFunction(string.format("+%s",fleetOrders),setFleetOrders)
		returnFromFleetSpawnLocation = spawnGMFleet
		addGMFunction(string.format("+%s",fleetSpawnLocation),setFleetSpawnLocation)
		if gm_click_mode == "fleet spawn" then
			addGMFunction(">Spawn<",parmSpawnFleet)
		else
			addGMFunction("Spawn",parmSpawnFleet)
		end
	end
end
--General use functions for spawning fleets
function playerPower()
	local playerShipScore = 0
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			playerShipScore = playerShipScore + p.shipScore
		end
	end
	return playerShipScore
end
function wrapAddCustomButtons(p)
	p.wrappedAddCustomButton = function(...) customElements:addCustomButton(...) end
	p.wrappedAddCustomInfo = function(...) customElements:addCustomInfo(...) end
	p.wrappedAddCustomMessageWithCallback = function(...) customElements:addCustomMessageWithCallback(...) end
	p.wrappedAddCustomMessage = function(...) customElements:addCustomMessage(...) end
	p.wrappedRemoveCustom = function(...) customElements:removeCustom(...) end
end
function assignPlayerShipScore(p)
	wrapAddCustomButtons(p)
	playerFleet:addToFleet(p)
--	print("assign player ship score",p:getCallSign())
	local spawn_x,spawn_y=p:getPosition()
	if spawn_x<200 and spawn_x>-200 and spawn_y<200 and spawn_y>-200 then-- if the player ship was spawned by the server ship selection screen
		p:setPosition(playerSpawnX,playerSpawnY)	--put player in the correct region when spawned
	end
	p.security_report_button_rel = "security_report_button_rel"
	p:addCustomButton("Relay",p.security_report_button_rel,"Security Report",function()
		string.format("")
		securityReport(p,"Relay")
	end,42)
	p.security_report_button_ops = "security_report_button_ops"
	p:addCustomButton("Operations",p.security_report_button_ops,"Security Report",function()
		string.format("")
		securityReport(p,"Operations")
	end,42)
	--set defaults for those ships not found in the list
	p.shipScore = 24
	p.maxCargo = 5
	p.cargo = p.maxCargo
	p.tractor = false
	p.tractor_target_lock = false
	p.mining = false
	p.max_pods = 1
	p.pods = p.max_pods
	p.security_morale = 1
	updatePlayerSoftTemplate(p)
end
function updatePlayerSoftTemplate(p)
	local tempTypeName = p:getTypeName()
--	print("assign player ship score, temp type name",tempTypeName)
	if tempTypeName ~= nil then
		if playerShipStats[tempTypeName] ~= nil then
			--set values from list
			p.shipScore = playerShipStats[tempTypeName].strength
			p.maxCargo = playerShipStats[tempTypeName].cargo
			p.cargo = p.maxCargo
			p:setLongRangeRadarRange(playerShipStats[tempTypeName].long_range_radar)
			p:setShortRangeRadarRange(playerShipStats[tempTypeName].short_range_radar)
			p:setMaxScanProbeCount(playerShipStats[tempTypeName].probes)
			p:setScanProbeCount(p:getMaxScanProbeCount())
			p.tractor = playerShipStats[tempTypeName].tractor
			p.tractor_target_lock = false
			p.mining = playerShipStats[tempTypeName].mining
			p.max_pods = playerShipStats[tempTypeName].pods
			p.pods = p.max_pods
			p.turbo_torp = playerShipStats[tempTypeName].turbo_torp
			if p.turbo_torp then
				if p.turbo_torp_charge_interval == nil then
					p.turbo_torp_charge_interval = 55
				end
				p.turbo_torp_timer = p.turbo_torp_charge_interval
				p.turbo_torp_active = false
			end
			p.probe_boost = playerShipStats[tempTypeName].probe_boost
			p.patrol_probe = playerShipStats[tempTypeName].patrol_probe
			p.prox_scan = playerShipStats[tempTypeName].prox_scan
			if p.patrol_probe > 0 then
				p.patrol_probe_state = "Off"
				p.patrol_probe_button = "patrol_probe_button"
				p:addCustomButton("Relay",p.patrol_probe_button,"Patrol Probe Off",function()
					string.format("")
					togglePatrolProbeState(p)
				end,10)
				p.patrol_probe_button_ops = "patrol_probe_button_ops"
				p:addCustomButton("Operations",p.patrol_probe_button_ops,"Patrol Probe Off",function()
					string.format("")
					togglePatrolProbeState(p)
				end,10)
			end
			p.epjam = playerShipStats[tempTypeName].epjam
			if p.epjam > 0 then
				p.epjam_button_wea = "epjam_button_wea"
				local epjam_size = {"S","M","L"}
				p:addCustomButton("Weapons",p.epjam_button_wea,string.format("Trigger %s EPJAM",epjam_size[p.epjam]),function()
					triggerEpjam(p)
				end,14)
				p.epjam_button_tac = "epjam_button_tac"
				p:addCustomButton("Tactical",p.epjam_button_tac,string.format("Trigger %s EPJAM",epjam_size[p.epjam]),function()
					triggerEpjam(p)
				end,14)
			end
			p.power_sensor_interval = playerShipStats[tempTypeName].power_sensor_interval
			p.beam_damage_switch = playerShipStats[tempTypeName].beam_damage_switch
			p.max_health_widgets = false
			if playerShipStats[tempTypeName].way_dist then
				p.way_dist = true
			else
				p.way_dist = false
			end
			if playerShipStats[tempTypeName].trigger_missile ~= nil then
				local trigger_missile_range = {
					["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	},
					["E4"] = {missile = "EMPMissile",	short = 4000, long = 5000,	button_label = "Trigger EMP 4-5u",	order = 2,	},
					["N3"] = {missile = "Nuke",			short = 3000, long = 4000,	button_label = "Trigger Nuke 3-4u",	order = 3,	},
					["N4"] = {missile = "Nuke",			short = 4000, long = 5000,	button_label = "Trigger Nuke 4-5u",	order = 4,	},
				}
				p.trigger_missile = {}
				for i,trigger_type in ipairs(playerShipStats[tempTypeName].trigger_missile) do
					p.trigger_missile[trigger_type] = trigger_missile_range[trigger_type]
				end
			end
			p.score_settings_source = tempTypeName
		else
			addGMMessage(string.format("Player ship %s's template type (%s) could not be found in table PlayerShipStats",p:getCallSign(),tempTypeName))
		end
	end
	p.maxRepairCrew = p:getRepairCrewCount()
	p.healthyShield = 1.0
	p.prevShield = 1.0
	p.healthyReactor = 1.0
	p.prevReactor = 1.0
	p.healthyManeuver = 1.0
	p.prevManeuver = 1.0
	p.healthyImpulse = 1.0
	p.prevImpulse = 1.0
	if p:getBeamWeaponRange(0) > 0 then
		p.healthyBeam = 1.0
		p.prevBeam = 1.0
	end
	local tube_count = p:getWeaponTubeCount()
	if tube_count > 0 then
		p.healthyMissile = 1.0
		p.prevMissile = 1.0
		p.tube_size = ""
		for i=1,tube_count do
			local tube_size = p:getTubeSize(i-1)
			if tube_size == "small" then
				p.tube_size = p.tube_size .. "S"
			end
			if tube_size == "medium" then
				p.tube_size = p.tube_size .. "M"
			end
			if tube_size == "large" then
				p.tube_size = p.tube_size .. "L"
			end
		end
	end
	if p:hasWarpDrive() then
		p.healthyWarp = 1.0
		p.prevWarp = 1.0
	end
	if p:hasJumpDrive() then
		p.healthyJump = 1.0
		p.prevJump = 1.0
	end
	p.initialCoolant = p:getMaxCoolant()
end
--------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Exuari  --
--------------------------------------------
-- Select faction for fleet being spawned. Button for each faction. Asterisk = current choice
function setGMFleetFaction()
	clearGMFunctions()
	local GMSetFleetFactionArlenians = "Arlenians"
	if fleetSpawnFaction == "Arlenians" then
		GMSetFleetFactionArlenians = "Arlenians*"
	end
	addGMFunction(GMSetFleetFactionArlenians,function()
		fleetSpawnFaction = "Arlenians"
		spawnGMFleet()
	end)
	local GMSetFleetFactionExuari = "Exuari"
	if fleetSpawnFaction == "Exuari" then
		GMSetFleetFactionExuari = "Exuari*"
	end
	addGMFunction(GMSetFleetFactionExuari,function()
		fleetSpawnFaction = "Exuari"
		spawnGMFleet()
	end)
	local GMSetFleetFactionGhosts = "Ghosts"
	if fleetSpawnFaction == "Ghosts" then
		GMSetFleetFactionGhosts = "Ghosts*"
	end
	addGMFunction(GMSetFleetFactionGhosts,function()
		fleetSpawnFaction = "Ghosts"
		spawnGMFleet()
	end)
	local GMSetFleetFactionHuman = "Human Navy"
	if fleetSpawnFaction == "Human Navy" then
		GMSetFleetFactionHuman = "Human Navy*"
	end
	addGMFunction(GMSetFleetFactionHuman,function()
		fleetSpawnFaction = "Human Navy"
		spawnGMFleet()
	end)
	local GMSetFleetFactionKraylor = "Kraylor"
	if fleetSpawnFaction == "Kraylor" then
		GMSetFleetFactionKraylor = "Kraylor*"
	end
	addGMFunction(GMSetFleetFactionKraylor,function()
		fleetSpawnFaction = "Kraylor"
		spawnGMFleet()
	end)
	local GMSetFleetFactionKtlitans = "Ktlitans"
	if fleetSpawnFaction == "Ktlitans" then
		GMSetFleetFactionKtlitans = "Ktlitans*"
	end
	addGMFunction(GMSetFleetFactionKtlitans,function()
		fleetSpawnFaction = "Ktlitans"
		spawnGMFleet()
	end)
	local GMSetFleetFactionIndependent = "Independent"
	if fleetSpawnFaction == "Independent" then
		GMSetFleetFactionIndependent = "Independent*"
	end
	addGMFunction(GMSetFleetFactionIndependent,function()
		fleetSpawnFaction = "Independent"
		spawnGMFleet()
	end)
	local GMSetFleetFactionTSN = "TSN"
	if fleetSpawnFaction == "TSN" then
		GMSetFleetFactionTSN = "TSN*"
	end
	addGMFunction(GMSetFleetFactionTSN,function()
		fleetSpawnFaction = "TSN"
		spawnGMFleet()
	end)
	local GMSetFleetFactionUSN = "USN"
	if fleetSpawnFaction == "USN" then
		GMSetFleetFactionUSN = "USN*"
	end
	addGMFunction(GMSetFleetFactionUSN,function()
		fleetSpawnFaction = "USN"
		spawnGMFleet()
	end)
	local GMSetFleetFactionCUF = "CUF"
	if fleetSpawnFaction == "CUF" then
		GMSetFleetFactionCUF = "CUF*"
	end
	addGMFunction(GMSetFleetFactionCUF,function()
		fleetSpawnFaction = "CUF"
		spawnGMFleet()
	end)
	local GMSetFleetFactionHolyTerra = "Holy Terra"
	if fleetSpawnFaction == "Holy Terra" then
		GMSetFleetFactionHolyTerra = "Holy Terra*"
	end
	addGMFunction(GMSetFleetFactionHolyTerra,function()
		fleetSpawnFaction = "Holy Terra"
		spawnGMFleet()
	end)
	local GMSetFleetFactionSpacer = "Spacer"
	if fleetSpawnFaction == "Spacer" then
		GMSetFleetFactionSpacer = "Spacer*"
	end
	addGMFunction(GMSetFleetFactionSpacer,function()
		fleetSpawnFaction = "Spacer"
		spawnGMFleet()
	end)
	local GMSetFleetFactionCindyRemnants = "Cindy's Remnants"
	if fleetSpawnFaction == "Cindy's Remnants" then
		GMSetFleetFactionCindyRemnants = "Cindy's Remnants*"
	end
	addGMFunction(GMSetFleetFactionCindyRemnants,function()
		fleetSpawnFaction = "Cindy's Remnants"
		spawnGMFleet()
	end)
	local GMSetFleetFactionSnowSlayers = "Snow Slayers"
	if fleetSpawnFaction == "Snow Slayers" then
		GMSetFleetFactionSnowSlayers = "Snow Slayers*"
	end
	addGMFunction(GMSetFleetFactionSnowSlayers,function()
		fleetSpawnFaction = "Snow Slayers"
		spawnGMFleet()
	end)
end
-------------------------------------------------------------
--  Spawn Ship(s) > Spawn Fleet > Relative Fleet Strength  --
-------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REL STR	F	initialGMFunctions
-- -FLEET SPAWN			F	spawnGMFleet		
-- .5					*	inline
-- 1*					*	inline		asterisk = current selection
-- 2					*	inline
-- 3					*	inline
-- 4					*	inline
-- 5					*	inline
function setGMFleetStrength()
	clearGMFunctions()
	addGMFunction("-Main from Rel Str",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("Switch to Fixed Strength",function()
		fleet_spawn_type = "fixed"
		fleetStrengthFixed = true
		spawnGMFleet()
	end)
	addGMFunction("Switch to Prebuilt",function()
		fleet_spawn_type = "prebuilt"
		fleetStrengthFixed = false
		spawnGMFleet()
	end)
	setFleetStrength(setGMFleetStrength)
end
function setFleetStrength(caller)
	local relative_strength_list = {
		{"1/4", .25},
		{"1/2", .5},
		{"1", 1},
		{"2", 2},
		{"3", 3},
		{"4", 4},
		{"5", 5},
		{"6", 6},
		{"7", 7},
		{"8", 8},
	}
	local matching_index = 0
	for index, item in ipairs(relative_strength_list) do
		if item[2] == fleetStrengthByPlayerStrength then
			matching_index = index
		end
	end
	if matching_index == 1 then
		for i=1,3 do
			local button_label = relative_strength_list[i][1]
			if i == matching_index then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				fleetStrengthByPlayerStrength = relative_strength_list[i][2]
				caller()
			end)
		end
	elseif matching_index == #relative_strength_list then
		for i=#relative_strength_list-2,#relative_strength_list do
			local button_label = relative_strength_list[i][1]
			if i == matching_index then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				fleetStrengthByPlayerStrength = relative_strength_list[i][2]
				caller()
			end)
		end
	else
		for i=matching_index-1,matching_index+1 do
			local button_label = relative_strength_list[i][1]
			if i == matching_index then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				fleetStrengthByPlayerStrength = relative_strength_list[i][2]
				caller()
			end)
		end
	end
end
--------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Set Fixed Strength  --
--------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM FIX STR	F	initialGMFunctions
-- -FLEET SPAWN			F	spawnGMFleet
-- -FIXED STRENGTH 250	D	spawnGMFleet
-- 250 - 50 = 200		D	inline
-- 250 + 50 = 250		D	inline
function setFixedFleetStrength()
	clearGMFunctions()
	addGMFunction("-Main from Fix Str",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Fixed Strength " .. fleetStrengthFixedValue,spawnGMFleet)
	addGMFunction("Switch to Relative",function()
		fleet_spawn_type = "relative"
		fleetStrengthFixed = false
		spawnGMFleet()
	end)
	addGMFunction("Switch to Prebuilt",function()
		fleet_spawn_type = "prebuilt"
		fleetStrengthFixed = false
		spawnGMFleet()
	end)
	fixFleetStrength(setFixedFleetStrength)
end
function fixFleetStrength(caller)
	if fleetStrengthFixedValue > 50 then
		addGMFunction(string.format("%i - %i = %i",fleetStrengthFixedValue,50,fleetStrengthFixedValue-50),function()
			fleetStrengthFixedValue = fleetStrengthFixedValue - 50
			caller()
		end)
	end
	if fleetStrengthFixedValue < 2000 then
		addGMFunction(string.format("%i + %i = %i",fleetStrengthFixedValue,50,fleetStrengthFixedValue+50),function()
			fleetStrengthFixedValue = fleetStrengthFixedValue + 50
			caller()
		end)
	end	
end
function setPrebuiltFleet()
	clearGMFunctions()
	addGMFunction("-Main from Prebuilt",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("Switch to Fixed Strength",function()
		fleet_spawn_type = "fixed"
		fleetStrengthFixed = true
		spawnGMFleet()
	end)
	addGMFunction("Switch to Relative",function()
		fleet_spawn_type = "relative"
		fleetStrengthFixed = false
		spawnGMFleet()
	end)
	button_label = "+Shape"
	if formation_shape ~= nil then
		local leader_strength = ship_template[prebuilt_leader].strength
		local follower_strength = ship_template[prebuilt_follower].strength
		local prebuilt_strength = leader_strength + (follower_strength * #fly_formation[formation_shape])	
		button_label = string.format("%s %s %s",button_label,formation_shape,prebuilt_strength)
	end
	addGMFunction(button_label,setPrebuiltFormationShape)
	addGMFunction("+Curated Formation",curatedPrebuiltFormation)
	addGMFunction("+Composition",setPrebuiltComposition)
	if shipTemplateDistance[prebuilt_leader] == nil then
		print("You need an entry in shipTemplateDistance for leader template:",prebuilt_leader)
	end
	if shipTemplateDistance[prebuilt_follower] == nil then
		print("You need an entry in shipTemplateDistance for follower template:",prebuilt_follower)
	end
	local minimum_spacing = shipTemplateDistance[prebuilt_leader] + shipTemplateDistance[prebuilt_follower] + 300 
	if formation_spacing == nil or formation_spacing < minimum_spacing then
		formation_spacing = minimum_spacing
	end
	addGMFunction(string.format("+Spacing %.1f",formation_spacing/1000),setPrebuiltFormationSpacing)
	if formation_shape ~= nil then
		if gm_click_mode == "set prebuilt target" then
			addGMFunction(">Set Fleet Target<",setPrebuiltFleetTarget)
		else
			local button_label = "Spawn Fleet"
			if gm_click_mode == "spawn prebuilt fleet" then
				button_label = string.format(">%s<",button_label)
			end
			addGMFunction(button_label,spawnPrebuiltFleet)
		end
	end
end
function curatedPrebuiltFormation(match_strength)
	clearGMFunctions()
	addGMFunction("-Main from Curated",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Prebuilt",setPrebuiltFleet)
	local formation_strength = math.max(math.floor(fleetStrengthByPlayerStrength * playerPower()),5)
	if match_strength == nil then
		match_strength = formation_strength
	end
	if match_strength < prebuilt_relative[1].strength then
		addGMMessage("The weakest curated formation is stronger than the player(s)")
		match_strength = prebuilt_relative[1].strength
		formation_shape = prebuilt_relative[1].shape
		prebuilt_leader = prebuilt_relative[1].leader
		prebuilt_follower = prebuilt_relative[1].follower
		for i=1,5 do
			local delimiter = " "
			if prebuilt_relative[i].strength == match_strength then
				delimiter = "."
			end
			addGMFunction(string.format("%s%s%i%s%s",prebuilt_relative[i].leader,delimiter,prebuilt_relative[i].strength,delimiter,prebuilt_relative[i].follower),function()
				string.format("")
				formation_shape = prebuilt_relative[i].shape
				prebuilt_leader = prebuilt_relative[i].leader
				prebuilt_follower = prebuilt_relative[i].follower
				curatedPrebuiltFormation(prebuilt_relative[i].strength)
			end)
		end
	elseif match_strength > prebuilt_relative[#prebuilt_relative].strength then
		addGMMessage("The strongest curated formation is weaker than the player(s)")
		match_strength = prebuilt_relative[#prebuilt_relative].strength
		formation_shape = prebuilt_relative[#prebuilt_relative].shape
		prebuilt_leader = prebuilt_relative[#prebuilt_relative].leader
		prebuilt_follower = prebuilt_relative[#prebuilt_relative].follower
		for i=#prebuilt_relative-4,#prebuilt_relative do
			local delimiter = " "
			if prebuilt_relative[i].strength == match_strength then
				delimiter = "."
			end
			addGMFunction(string.format("%s%s%i%s%s",prebuilt_relative[i].leader,delimiter,prebuilt_relative[i].strength,delimiter,prebuilt_relative[i].follower),function()
				string.format("")
				formation_shape = prebuilt_relative[i].shape
				prebuilt_leader = prebuilt_relative[i].leader
				prebuilt_follower = prebuilt_relative[i].follower
				curatedPrebuiltFormation(prebuilt_relative[i].strength)
			end)
		end
	else
		if match_strength <= prebuilt_relative[2].strength then
			for i=1,5 do
				local delimiter = " "
				if prebuilt_relative[i].strength == match_strength then
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					delimiter = "."					
				end
				addGMFunction(string.format("%s%s%i%s%s",prebuilt_relative[i].leader,delimiter,prebuilt_relative[i].strength,delimiter,prebuilt_relative[i].follower),function()
					string.format("")
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					curatedPrebuiltFormation(prebuilt_relative[i].strength)
				end)
			end
		elseif match_strength >= prebuilt_relative[#prebuilt_relative-1].strength then
			for i=#prebuilt_relative-4,#prebuilt_relative do
				local delimiter = " "
				if prebuilt_relative[i].strength == match_strength then
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					delimiter = "."					
				end
				addGMFunction(string.format("%s%s%i%s%s",prebuilt_relative[i].leader,delimiter,prebuilt_relative[i].strength,delimiter,prebuilt_relative[i].follower),function()
					string.format("")
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					curatedPrebuiltFormation(prebuilt_relative[i].strength)
				end)
			end
		else
			for i=match_strength-prebuilt_relative[1].strength-1,match_strength-prebuilt_relative[1].strength+3 do
				local delimiter = " "
				if prebuilt_relative[i].strength == match_strength then
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					delimiter = "."					
				end
				addGMFunction(string.format("%s%s%i%s%s",prebuilt_relative[i].leader,delimiter,prebuilt_relative[i].strength,delimiter,prebuilt_relative[i].follower),function()
					string.format("")
					formation_shape = prebuilt_relative[i].shape
					prebuilt_leader = prebuilt_relative[i].leader
					prebuilt_follower = prebuilt_relative[i].follower
					curatedPrebuiltFormation(prebuilt_relative[i].strength)
				end)
			end
		end
	end
end
function gmClicksetPrebuiltFleetTarget(x,y)
	local leader_ship = ship_template[prebuilt_leader].create(fleetSpawnFaction,prebuilt_leader)
	local fleet_prefix = generateCallSignPrefix()
	leader_ship:setPosition(prebuilt_fleet_x,prebuilt_fleet_y)
	local prebuilt_angle = angleFromVectorNorth(x,y,prebuilt_fleet_x,prebuilt_fleet_y)
	leader_ship:setHeading(prebuilt_angle)
	leader_ship.formation_ships = {}
	for _, form in ipairs(fly_formation[formation_shape]) do
		local ship = ship_template[prebuilt_follower].create(fleetSpawnFaction,prebuilt_follower)
		local form_x, form_y = vectorFromAngleNorth(prebuilt_angle + form.angle, form.dist * formation_spacing)
		local form_prime_x, form_prime_y = vectorFromAngle(form.angle, form.dist * formation_spacing)
		ship:setPosition(prebuilt_fleet_x + form_x, prebuilt_fleet_y + form_y):setHeading(prebuilt_angle):orderFlyFormation(leader_ship,form_prime_x,form_prime_y)
		ship:setCallSign(generateCallSign(fleet_prefix))
		table.insert(leader_ship.formation_ships,ship)
	end
	leader_ship:orderFlyTowards(x,y)
	gm_click_mode = nil
	onGMClick(nil)
	setPrebuiltFleet()
end
function gmClickSpawnPrebuiltFleet(x,y)
	prebuilt_fleet_x = x
	prebuilt_fleet_y = y
	gm_click_mode = "set prebuilt target"
	onGMClick(gmClicksetPrebuiltFleetTarget)
	setPrebuiltFleet()
end
function spawnPrebuiltFleet()
	if gm_click_mode == "spawn prebuilt fleet" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "spawn prebuilt fleet"
		onGMClick(gmClickSpawnPrebuiltFleet)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   spawn prebuilt fleet\nGM click mode.",prev_mode))
		end
	end
	setPrebuiltFleet()
end
function setPrebuiltFleetTarget()
	if gm_click_mode == "set prebuilt target" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "set prebuilt target"
		onGMClick(gmClicksetPrebuiltFleetTarget)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   set prebuilt target\nGM click mode.",prev_mode))
		end
	end
	setPrebuiltFleet()
end
function setPrebuiltFormationSpacing()
	clearGMFunctions()
	addGMFunction("-Main from Spacing",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Prebuilt",setPrebuiltFleet)
	local minimum_spacing = shipTemplateDistance[prebuilt_leader] + shipTemplateDistance[prebuilt_follower] + 300 
	local maximum_spacing = 3000
	if formation_spacing == minimum_spacing then
		for i=minimum_spacing,minimum_spacing+400,100 do
			local button_label = string.format("Spacing %.1f",i/1000)
			if i == formation_spacing then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				formation_spacing = i
				setPrebuiltFormationSpacing()
			end)
		end
	elseif formation_spacing == minimum_spacing + 100 then
		for i=minimum_spacing+100,minimum_spacing+500,100 do
			local button_label = string.format("Spacing %.1f",i/1000)
			if i == formation_spacing then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				formation_spacing = i
				setPrebuiltFormationSpacing()
			end)
		end
	elseif formation_spacing == maximum_spacing then
		for i=maximum_spacing-400,maximum_spacing,100 do
			local button_label = string.format("Spacing %.1f",i/1000)
			if i == formation_spacing then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				formation_spacing = i
				setPrebuiltFormationSpacing()
			end)
		end
	elseif formation_spacing == maximum_spacing - 100 then
		for i=maximum_spacing-500,maximum_spacing-100,100 do
			local button_label = string.format("Spacing %.1f",i/1000)
			if i == formation_spacing then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				formation_spacing = i
				setPrebuiltFormationSpacing()
			end)
		end
	else
		for i=formation_spacing-200,formation_spacing+200,100 do
			local button_label = string.format("Spacing %.1f",i/1000)
			if i == formation_spacing then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				formation_spacing = i
				setPrebuiltFormationSpacing()
			end)
		end
	end
end
function setPrebuiltComposition()
	clearGMFunctions()
	addGMFunction("-Main from Composition",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Prebuilt",setPrebuiltFleet)
	addGMFunction(string.format("+Lead:%s",prebuilt_leader),setPrebuiltLeader)
	addGMFunction(string.format("+Follow:%s",prebuilt_follower),setPrebuiltFollower)
end
function setPrebuiltFollower()
	clearGMFunctions()
	addGMFunction("-Main from Follow",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Prebuilt",setPrebuiltFleet)
	--sort
	for follower, leader_list in pairs(prebuilt_followers) do
		local follower_suffix = ""
		if follower == prebuilt_follower then
			follower_suffix = "*"
		end
		local leader_suffix = ""
		for _, leader in ipairs(leader_list) do
			if leader == prebuilt_leader then
				leader_suffix = "*"
				break
			end
		end
		addGMFunction(string.format("%s%s%s",follower,leader_suffix,follower_suffix),function()
			prebuilt_follower = follower
			local leader_list = prebuilt_followers[prebuilt_follower]
			local leader_in_list = false
			for _, leader in ipairs(leader_list) do
				if leader == prebuilt_leader then
					leader_in_list = true
					break
				end
			end
			if not leader_in_list then
				prebuilt_leader = leader_list[1]
			end
			setPrebuiltComposition()
		end)
	end
end
function setPrebuiltLeader()
	clearGMFunctions()
	addGMFunction("-Main from Lead",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-Prebuilt",setPrebuiltFleet)
	--sort
	for leader, follower_list in pairs(prebuilt_leaders) do
		local leader_suffix = ""
		if leader == prebuilt_leader then
			leader_suffix = "*"
		end
		local follower_suffix = ""
		for _, follower in ipairs(follower_list) do
			if follower == prebuilt_follower then
				follower_suffix = "*"
				break
			end
		end
		addGMFunction(string.format("%s%s%s",leader,leader_suffix,follower_suffix),function()
			prebuilt_leader = leader
			local follower_list = prebuilt_leaders[prebuilt_leader]
			local follower_in_list = false
			for _, follower in ipairs(follower_list) do
				if follower == prebuilt_follower then
					follower_in_list = true
					break
				end
			end
			if not follower_in_list then
				prebuilt_follower = follower_list[1]
			end
			setPrebuiltComposition()
		end)
	end
end
function setPrebuiltFormationShape()
	clearGMFunctions()
	addGMFunction("+V",setPrebuiltFormationCategoryV)
	addGMFunction("+A",setPrebuiltFormationCategoryA)
	addGMFunction("+Line",setPrebuiltFormationCategoryLine)
	addGMFunction("+M",setPrebuiltFormationCategoryM)
	addGMFunction("+W",setPrebuiltFormationCategoryW)
	addGMFunction("+X",setPrebuiltFormationCategoryX)
	addGMFunction("+H",setPrebuiltFormationCategoryH)
	addGMFunction("+*",setPrebuiltFormationCategorySplat)
	addGMFunction("+O",setPrebuiltFormationCategoryOh)	
end
function setPrebuiltFormationCategoryOh()
	clearGMFunctions()
	local form_list = {"O","O2R","O3R","O4R","O5R","O6R","O7R"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategorySplat()
	clearGMFunctions()
	local form_list = {"*","*12","*18"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryH()
	clearGMFunctions()
	local form_list = {"H"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryX()
	clearGMFunctions()
	local form_list = {"X","X8","Xac","Xac8","X12","Xac12","X16","Xac16"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryW()
	clearGMFunctions()
	local form_list = {"W","W6","Wac","Wac6"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryM()
	clearGMFunctions()
	local form_list = {"M","M6","Mac","Mac6"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryLine()
	clearGMFunctions()
	local form_list = {"/","/ac","-","-4","\\","\\ac","|","|4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryA()
	clearGMFunctions()
	local form_list = {"A","A4","Aac","Aac4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
function setPrebuiltFormationCategoryV()
	clearGMFunctions()
	local form_list = {"V","V4","Vac","Vac4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setPrebuiltFleet()
		end)
	end
end
--------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Random  --
--------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM COMPOSITION	F	inline
-- +GROUP RANDOM		D	SetFleetGroupComposition
-- +EXCLUDE				D	SetFleetExclusions
function setFleetComposition(caller)
	clearGMFunctions()
	addGMFunction("-From composition",function()
		string.format("")	--necessary to have global reference for Serious Proton engine
		caller()
	end)
	addGMFunction(string.format("+Group %s",fleetComposition),function()
		setFleetGroupComposition(caller)
	end)
	local exclusion_string = ""
	for name, details in pairs(fleet_exclusions) do
		if details.exclude then
			if exclusion_string == "" then
				exclusion_string = "-"
			end
			exclusion_string = exclusion_string .. details.letter
		end
	end
	addGMFunction(string.format("+Exclude%s",exclusion_string),function()
		setFleetExclusions(caller)
	end)
	addGMFunction(string.format("selectivity: %s",pool_selectivity),function()
		if pool_selectivity == "full" then
			pool_selectivity = "less/heavy"
		elseif pool_selectivity == "less/heavy" then
			pool_selectivity = "more/light"
		elseif pool_selectivity == "more/light" then
			pool_selectivity = "full"
		end
		setFleetComposition(caller)
	end)
	if pool_selectivity ~= "full" then
		addGMFunction(string.format("Increase Pool: %i",template_pool_size),function()
			if template_pool_size < 20 then
				template_pool_size = template_pool_size + 1
			else
				addGMMessage("Reached maximum ship template selection pool size of 20")
			end
			setFleetComposition(caller)
		end)
		addGMFunction(string.format("Decrease Pool: %i",template_pool_size),function()
			if template_pool_size > 1 then
				template_pool_size = template_pool_size - 1
			else
				addGMMessage("Reached minimum ship template selection pool size of 1")
			end
			setFleetComposition(caller)
		end)
	end
end
------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Random > Exclude  --
------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM COMPOSITION	F	inline
-- -FROM EXCLUSIONS		F	setFleetComposition
-- -WARP				*	asterisk = included in exclusions, list order varies, items not mutually exclusive
-- -JUMP				*
-- -NUKE				*
function setFleetExclusions(caller)
	clearGMFunctions()
	addGMFunction("-From composition",function()
		string.format("")	--necessary to have global reference for Serious Proton engine
		caller()
	end)
	addGMFunction("-From Exclusions",function()
		string.format("")	--necessary to have global reference for Serious Proton engine
		setFleetComposition(caller)
	end)
	for name, details in pairs(fleet_exclusions) do
		local button_label = name
		if details.exclude then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			if details.exclude then
				details.exclude = false
			else
				details.exclude = true
			end
			setFleetExclusions(caller)
		end)
	end
end
-----------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Random > Group Random  --
-----------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM COMPOSITION GROUP	F	spawnGMFleet
-- RANDOM*					*	inline		asterisk = current selection
-- FIGHTERS					*	inline
-- CHASERS					*	inline
-- FRIGATES					*	inline
-- BEAMERS					*	inline
-- MISSILERS				*	inline
-- ADDERS					*	inline
-- NON-DB					*	inline
-- DRONES					*	inline
function setFleetGroupComposition(caller)
	clearGMFunctions()
	addGMFunction("-From composition group",function()
		string.format("")	--necessary to have global reference for Serious Proton engine
		setFleetComposition(caller)
	end)
	local GMSetFleetCompositionRandom = "Random"
	if fleetComposition == "Random" then
		GMSetFleetCompositionRandom = "Random*"
	end
	addGMFunction(GMSetFleetCompositionRandom,function()
		fleetComposition = "Random"
		caller()
	end)
	local GMSetFleetCompositionFighters = "Fighters"
	if fleetComposition == "Fighters" then
		GMSetFleetCompositionFighters = "Fighters*"
	end
	addGMFunction(GMSetFleetCompositionFighters,function()
		fleetComposition = "Fighters"
		caller()
	end)
	local GMSetFleetCompositionChasers = "Chasers"
	if fleetComposition == "Chasers" then
		GMSetFleetCompositionChasers = "Chasers*"
	end
	addGMFunction(GMSetFleetCompositionChasers,function()
		fleetComposition = "Chasers"
		caller()
	end)
	local GMSetFleetCompositionFrigates = "Frigates"
	if fleetComposition == "Frigates" then
		GMSetFleetCompositionFrigates = "Frigates*"
	end
	addGMFunction(GMSetFleetCompositionFrigates,function()
		fleetComposition = "Frigates"
		caller()
	end)
	local GMSetFleetCompositionBeamers = "Beamers"
	if fleetComposition == "Beamers" then
		GMSetFleetCompositionBeamers = "Beamers*"
	end
	addGMFunction(GMSetFleetCompositionBeamers,function()
		fleetComposition = "Beamers"
		caller()
	end)
	local GMSetFleetCompositionMissilers = "Missilers"
	if fleetComposition == "Missilers" then
		GMSetFleetCompositionMissilers = "Missilers*"
	end
	addGMFunction(GMSetFleetCompositionMissilers,function()
		fleetComposition = "Missilers"
		caller()
	end)
	local GMSetFleetCompositionAdders = "Adders"
	if fleetComposition == "Adders" then
		GMSetFleetCompositionAdders = "Adders*"
	end
	addGMFunction(GMSetFleetCompositionAdders,function()
		fleetComposition = "Adders"
		caller()
	end)		
	local GMSetFleetCompositionNonDB = "Non-DB"
	if fleetComposition == "Non-DB" then
		GMSetFleetCompositionNonDB = "Non-DB*"
	end
	addGMFunction(GMSetFleetCompositionNonDB,function()
		fleetComposition = "Non-DB"
		caller()
	end)		
	local GMSetFleetCompositionDrone = "Drones"
	if fleetComposition == "Drones" then
		GMSetFleetCompositionDrone = "Drones*"
	end
	addGMFunction(GMSetFleetCompositionDrone,function()
		fleetComposition = "Drones"
		caller()
	end)
end
----------------------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Unmodified (Random Tweaking or Fleet Change)  --
----------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM FLT CHNG	F	initialGMFunctions
-- -FLEET SPAWN			F	spawnGMFleet
-- UNMODIFIED*			*	inline		asterisk = current selection
-- IMPROVED				*	inline
-- DEGRADED				*	inline
-- TINKERED				*	inline
-- CHANGE CHANCE: 20	D	inline
-- SET TO 10			D	inline
-- SET TO 30			D	inline
function setFleetChange()
	clearGMFunctions()
	addGMFunction("-Main from Flt Chng",initialGMFunctions)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	local GMSetFleetChangeUnmodified = "Unmodified"
	if fleetChange == "unmodified" then
		GMSetFleetChangeUnmodified = "Unmodified*"
	end
	addGMFunction(GMSetFleetChangeUnmodified,function()
		fleetChange = "unmodified"
		setFleetChange()
	end)
	local GMSetFleetChangeImproved = "Improved"
	if fleetChange == "improved" then
		GMSetFleetChangeImproved = "Improved*"
	end
	addGMFunction(GMSetFleetChangeImproved,function()
		fleetChange = "improved"
		setFleetChange()
	end)
	local GMSetFleetChangeDegraded = "Degraded"
	if fleetChange == "degraded" then
		GMSetFleetChangeDegraded = "Degraded*"
	end
	addGMFunction(GMSetFleetChangeDegraded,function()
		fleetChange = "degraded"
		setFleetChange()
	end)
	local GMSetFleetChangeTinkered = "Tinkered"
	if fleetChange == "tinkered" then
		GMSetFleetChangeTinkered = "Tinkered*"
	end
	addGMFunction(GMSetFleetChangeTinkered,function()
		fleetChange = "tinkered"
		setFleetChange()
	end)
	if fleetChange ~= "unmodified" then
		addGMFunction("Change Chance: " .. fleetChangeChance,setFleetChange)
		if fleetChangeChance == 10 then
			addGMFunction("Set to 20",function()
				fleetChangeChance = 20
				setFleetChange()
			end)
		end
		if fleetChangeChance == 20 then
			addGMFunction("Set to 10", function()
				fleetChangeChance = 10
				setFleetChange()
			end)
			addGMFunction("Set to 30", function()
				fleetChangeChance = 30
				setFleetChange()
			end)
		end
		if fleetChangeChance == 30 then
			addGMFunction("Set to 20", function()
				fleetChangeChance = 20
				setFleetChange()
			end)
			addGMFunction("Set to 50", function()
				fleetChangeChance = 50
				setFleetChange()
			end)
		end
		if fleetChangeChance == 50 then
			addGMFunction("Set to 30", function()
				fleetChangeChance = 30
				setFleetChange()
			end)
			addGMFunction("Set to 70", function()
				fleetChangeChance = 70
				setFleetChange()
			end)
		end
		if fleetChangeChance == 70 then
			addGMFunction("Set to 50", function()
				fleetChangeChance = 50
				setFleetChange()
			end)
			addGMFunction("Set to 80", function()
				fleetChangeChance = 80
				setFleetChange()
			end)
		end
		if fleetChangeChance == 80 then
			addGMFunction("Set to 70", function()
				fleetChangeChance = 70
				setFleetChange()
			end)
			addGMFunction("Set to 90", function()
				fleetChangeChance = 90
				setFleetChange()
			end)
		end
		if fleetChangeChance == 90 then
			addGMFunction("Set to 80", function()
				fleetChangeChance = 80
				setFleetChange()
			end)
			addGMFunction("Set to 100", function()
				fleetChangeChance = 100
				setFleetChange()
			end)
		end
		if fleetChangeChance == 100 then
			addGMFunction("Set to 90",function()
				fleetChangeChance = 90
				setFleetChange()
			end)
		end
	end
end
----------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Idle (Fleet Orders When Spawned)  --
----------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM FLT ORD	F	initialGMFunctions
-- -FLEET SPAWN			F	spawnGMFleet
-- ROAMING				*	inline
-- IDLE*				*	inline		asterisk = current selection
-- STAND GROUND			*	inline
function setFleetOrders()
	clearGMFunctions()
	addGMFunction("-Main from Flt Ord",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	local GMSetFleetOrdersRoaming = "Roaming"
	if fleetOrders == "Roaming" then
		GMSetFleetOrdersRoaming = "Roaming*"
	end
	addGMFunction(GMSetFleetOrdersRoaming,function()
		fleetOrders = "Roaming"
		setFleetOrders()
	end)
	local GMSetFleetOrdersIdle = "Idle"
	if fleetOrders == "Idle" then
		GMSetFleetOrdersIdle = "Idle*"
	end
	addGMFunction(GMSetFleetOrdersIdle,function()
		fleetOrders = "Idle"
		setFleetOrders()
	end)
	local GMSetFleetOrdersStandGround = "Stand Ground"
	if fleetOrders == "Stand Ground" then
		GMSetFleetOrdersStandGround = "Stand Ground*"
	end
	addGMFunction(GMSetFleetOrdersStandGround,function()
		fleetOrders = "Stand Ground"
		setFleetOrders()
	end)
end
---------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > At Click (Fleet Spawn Location)  --
---------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM FLT LOCTN		F	initialGMFunctions
-- -FLEET SPAWN				F	spawnGMFleet
-- AT SELECTION				*	inline
-- SENSOR EDGE				*	inline 
-- BEYOND SENSORS			*	inline
-- +RANDOM DIRECTION		D	setFleetSpawnRelativeDirection (button only appears for SENSOR EDGE and BEYOND SENSORS selections)
-- +AT CLICK*				D*	setSpawnLocationAway
-- +AMBUSH 5				D*	inline, setFleetAmbushDistance
function setFleetSpawnLocation()
	clearGMFunctions()
	addGMFunction("-Main from Flt Loctn",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	local return_label = "-Fleet Spawn"
	if returnFromFleetSpawnLocation == spawnGMShip then
		return_label = "-Ship Spawn"
	end
	addGMFunction(return_label,returnFromFleetSpawnLocation)
	local button_label = "At Selection"
	if fleetSpawnLocation == "At Selection" then
		button_label = "At Selection*"
	end
	addGMFunction(button_label,function()
		fleetSpawnLocation = "At Selection"
		setFleetSpawnLocation()
	end)
	button_label = "Sensor Edge"
	if fleetSpawnLocation == "Sensor Edge" then
		button_label = "Sensor Edge*"
	end
	addGMFunction(button_label,function()
		fleetSpawnLocation = "Sensor Edge"
		setFleetSpawnLocation()
	end)
	button_label = "Beyond Sensors"
	if fleetSpawnLocation == "Beyond Sensors" then
		button_label = "Beyond Sensors*"
	end
	addGMFunction(button_label,function()
		fleetSpawnLocation = "Beyond Sensors"
		setFleetSpawnLocation()
	end)
	if fleetSpawnLocation == "Sensor Edge" or fleetSpawnLocation == "Beyond Sensors" then
		addGMFunction(string.format("+%s",fleetSpawnRelativeDirection),setFleetSpawnRelativeDirection)
	end
	button_label = "Away"
	if string.find(fleetSpawnLocation,"Away") then
		button_label = fleetSpawnLocation .. "*"
	end
	addGMFunction(string.format("+%s",button_label),setSpawnLocationAway)
	button_label = string.format("Ambush %i",fleetAmbushDistance)
	if fleetSpawnLocation == "Ambush" then
		button_label = string.format("Ambush* %i",fleetAmbushDistance)
	end
	addGMFunction(string.format("+%s",button_label),function()
		fleetSpawnLocation = "Ambush"
		setFleetAmbushDistance()
	end)
	button_label = "At Click"
	if fleetSpawnLocation == "At Click" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		fleetSpawnLocation = "At Click"
		setFleetSpawnLocation()
	end)
end
--------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Ambush (Set Fleet Ambush Distance)  --
--------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM AMBUSH DIST  	F	setFleetSpawnLocation
-- 3					*	inline
-- 4					*	inline
-- 5*					*	inline		asterisk = current selection
-- 6					*	inline
-- 7					*	inline
function setFleetAmbushDistance()
	clearGMFunctions()
	addGMFunction("-From Ambush Dist",setFleetSpawnLocation)
	local GMSetFleetAmbushDistance3 = "3"
	if fleetAmbushDistance == 3 then
		GMSetFleetAmbushDistance3 = "3*"
	end
	addGMFunction(GMSetFleetAmbushDistance3,function()
		fleetAmbushDistance = 3
		setFleetAmbushDistance()
	end)
	local GMSetFleetAmbushDistance4 = "4"
	if fleetAmbushDistance == 4 then
		GMSetFleetAmbushDistance4 = "4*"
	end
	addGMFunction(GMSetFleetAmbushDistance4,function()
		fleetAmbushDistance = 4
		setFleetAmbushDistance()
	end)
	local GMSetFleetAmbushDistance5 = "5"
	if fleetAmbushDistance == 5 then
		GMSetFleetAmbushDistance5 = "5*"
	end
	addGMFunction(GMSetFleetAmbushDistance5,function()
		fleetAmbushDistance = 5
		setFleetAmbushDistance()
	end)
	local GMSetFleetAmbushDistance6 = "6"
	if fleetAmbushDistance == 6 then
		GMSetFleetAmbushDistance6 = "6*"
	end
	addGMFunction(GMSetFleetAmbushDistance6,function()
		fleetAmbushDistance = 6
		setFleetAmbushDistance()
	end)
	local GMSetFleetAmbushDistance7 = "7"
	if fleetAmbushDistance == 7 then
		GMSetFleetAmbushDistance7 = "7*"
	end
	addGMFunction(GMSetFleetAmbushDistance7,function()
		fleetAmbushDistance = 7
		setFleetAmbushDistance()
	end)
end
-----------------------------------------------------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Away (Fleet Spawn Location) > Random Direction (Fleet Spawn Relative Direction From Player)  --
-----------------------------------------------------------------------------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -FROM SPWN DIRECTION		F	setFleetSpawnLocation
-- RANDOM DIRECTION*		*	inline		asterisk = current selection
-- 0						*	inline
-- 45						*	inline
-- 90						*	inline
-- 135						*	inline
-- 180						*	inline
-- 225						*	inline
-- 270						*	inline
-- 315						*	inline
function setFleetSpawnRelativeDirection()
	clearGMFunctions()
	addGMFunction("-From Spwn Direction",setFleetSpawnLocation)
	local GMSetFleetSpawnRelativeDirectionRandom = "Random Direction"
	if fleetSpawnRelativeDirection == "Random Direction" then
		GMSetFleetSpawnRelativeDirectionRandom = "Random Direction*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirectionRandom,function()
		fleetSpawnRelativeDirection = "Random Direction"
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection0 = "0"
	if fleetSpawnRelativeDirection == 0 then
		GMSetFleetSpawnRelativeDirection0 = "0*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection0,function()
		fleetSpawnRelativeDirection = 0
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection45 = "45"
	if fleetSpawnRelativeDirection == 45 then
		GMSetFleetSpawnRelativeDirection45 = "45*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection45,function()
		fleetSpawnRelativeDirection = 45
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection90 = "90"
	if fleetSpawnRelativeDirection == 90 then
		GMSetFleetSpawnRelativeDirection90 = "90*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection90,function()
		fleetSpawnRelativeDirection = 90
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection135 = "135"
	if fleetSpawnRelativeDirection == 135 then
		GMSetFleetSpawnRelativeDirection135 = "135*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection135,function()
		fleetSpawnRelativeDirection = 135
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection180 = "180"
	if fleetSpawnRelativeDirection == 180 then
		GMSetFleetSpawnRelativeDirection180 = "180*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection180,function()
		fleetSpawnRelativeDirection = 180
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection225 = "225"
	if fleetSpawnRelativeDirection == 225 then
		GMSetFleetSpawnRelativeDirection225 = "225*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection225,function()
		fleetSpawnRelativeDirection = 225
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection270 = "270"
	if fleetSpawnRelativeDirection == 270 then
		GMSetFleetSpawnRelativeDirection270 = "270*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection270,function()
		fleetSpawnRelativeDirection = 270
		setFleetSpawnRelativeDirection()
	end)
	local GMSetFleetSpawnRelativeDirection315 = "315"
	if fleetSpawnRelativeDirection == 315 then
		GMSetFleetSpawnRelativeDirection315 = "315*"
	end
	addGMFunction(GMSetFleetSpawnRelativeDirection315,function()
		fleetSpawnRelativeDirection = 315
		setFleetSpawnRelativeDirection()
	end)
end
---------------------------------------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Away (Fleet Spawn Location) > Away (Set Spawn Location Away from GM Selection) --
---------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM SPWN AWY	F	initialGMFunctions
-- -FLEET SPAWN			F	spawnGMFleet
-- -FROM SPAWN AWAY		F	setFleetSpawnLocation
-- +90 DEGREES			D	setFleetSpawnAwayDirection
-- +60U					D	setFleetSpawnAwayDistance
function setSpawnLocationAway()
	clearGMFunctions()
	addGMFunction("-Main from Spwn Awy",initialGMFunctions)
	addGMFunction("-Fleet or Ship",spawnGMShips)
	addGMFunction("-Fleet Spawn",spawnGMFleet)
	addGMFunction("-From Spawn Away",setFleetSpawnLocation)
	local GMSetFleetSpawnAwayDirection = fleetSpawnAwayDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetFleetSpawnAwayDirection),setFleetSpawnAwayDirection)
	local GMSetFleetSpawnAwayDistance = fleetSpawnAwayDistance .. "U"
	addGMFunction(string.format("+%s",GMSetFleetSpawnAwayDistance),setFleetSpawnAwayDistance)
	fleetSpawnLocation = string.format("%s Deg Away %iU",fleetSpawnAwayDirection,fleetSpawnAwayDistance)
end
-------------------------------------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Away > Away > 90 Degrees (Set Fleet Spawn Away Direction From GM Selection)  --
-------------------------------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -SPAWN AWAY		F	setSpawnLocationAway
-- RANDOM			*	inline
-- 0				*	inline
-- 45				*	inline
-- 90*				*	inline		asterisk = current selection
-- 135				*	inline
-- 180				*	inline
-- 225				*	inline
-- 270				*	inline
-- 315				*	inline
function setFleetSpawnAwayDirection()
	clearGMFunctions()
	addGMFunction("-Spawn Away",setSpawnLocationAway)
	local GMSetFleetSpawnLocationAwayDirectionRandom = "Random"
	if fleetSpawnAwayDirection == "Random" then
		GMSetFleetSpawnLocationAwayDirectionRandom = "Random*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirectionRandom,function()
		fleetSpawnAwayDirection = "Random"
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection0 = "0"
	if fleetSpawnAwayDirection == 0 then
		GMSetFleetSpawnLocationAwayDirection0 = "0*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection0,function()
		fleetSpawnAwayDirection = 0
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection45 = "45"
	if fleetSpawnAwayDirection == 45 then
		GMSetFleetSpawnLocationAwayDirection45 = "45*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection45,function()
		fleetSpawnAwayDirection = 45
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection90 = "90"
	if fleetSpawnAwayDirection == 90 then
		GMSetFleetSpawnLocationAwayDirection90 = "90*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection90,function()
		fleetSpawnAwayDirection = 90
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection135 = "135"
	if fleetSpawnAwayDirection == 135 then
		GMSetFleetSpawnLocationAwayDirection135 = "135*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection135,function()
		fleetSpawnAwayDirection = 135
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection180 = "180"
	if fleetSpawnAwayDirection == 180 then
		GMSetFleetSpawnLocationAwayDirection180 = "180*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection180,function()
		fleetSpawnAwayDirection = 180
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection225 = "225"
	if fleetSpawnAwayDirection == 225 then
		GMSetFleetSpawnLocationAwayDirection225 = "225*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection225,function()
		fleetSpawnAwayDirection = 225
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection270 = "270"
	if fleetSpawnAwayDirection == 270 then
		GMSetFleetSpawnLocationAwayDirection270 = "270*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection270,function()
		fleetSpawnAwayDirection = 270
		setFleetSpawnAwayDirection()
	end)
	local GMSetFleetSpawnLocationAwayDirection315 = "315"
	if fleetSpawnAwayDirection == 315 then
		GMSetFleetSpawnLocationAwayDirection315 = "315*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDirection315,function()
		fleetSpawnAwayDirection = 315
		setFleetSpawnAwayDirection()
	end)
end
----------------------------------------------------------------------------------------
--	Spawn Ship(s) > Spawn Fleet > Away > Away > 60U (Set Fleet Spawn Away Distance From GM Selection) --
----------------------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -SPAWN AWAY		F	setSpawnLocationAway
-- 5U				*	inline
-- 10U				*	inline
-- 20U				*	inline
-- 30U				*	inline
-- 40U				*	inline
-- 50U				*	inline
-- 60U*				*	inline		asterisk = current selection
function setFleetSpawnAwayDistance()
	clearGMFunctions()
	addGMFunction("-Spawn Away",setSpawnLocationAway)
	local GMSetFleetSpawnLocationAwayDistance5 = "5U"
	if fleetSpawnAwayDistance == 5 then
		GMSetFleetSpawnLocationAwayDistance5 = "5U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance5,function()
		fleetSpawnAwayDistance = 5
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance10 = "10U"
	if fleetSpawnAwayDistance == 10 then
		GMSetFleetSpawnLocationAwayDistance10 = "10U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance10,function()
		fleetSpawnAwayDistance = 10
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance20 = "20U"
	if fleetSpawnAwayDistance == 20 then
		GMSetFleetSpawnLocationAwayDistance20 = "20U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance20,function()
		fleetSpawnAwayDistance = 20
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance30 = "30U"
	if fleetSpawnAwayDistance == 30 then
		GMSetFleetSpawnLocationAwayDistance30 = "30U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance30,function()
		fleetSpawnAwayDistance = 30
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance40 = "40U"
	if fleetSpawnAwayDistance == 40 then
		GMSetFleetSpawnLocationAwayDistance40 = "40U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance40,function()
		fleetSpawnAwayDistance = 40
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance50 = "50U"
	if fleetSpawnAwayDistance == 50 then
		GMSetFleetSpawnLocationAwayDistance50 = "50U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance50,function()
		fleetSpawnAwayDistance = 50
		setFleetSpawnAwayDistance()
	end)
	local GMSetFleetSpawnLocationAwayDistance60 = "60U"
	if fleetSpawnAwayDistance == 60 then
		GMSetFleetSpawnLocationAwayDistance60 = "60U*"
	end
	addGMFunction(GMSetFleetSpawnLocationAwayDistance60,function()
		fleetSpawnAwayDistance = 60
		setFleetSpawnAwayDistance()
	end)
end
---------------------------------------
--	Spawn Ship(s) > Spawn fleet based on parameters  --
---------------------------------------
function centerOfSelected(objectList)
	local xSum = 0
	local ySum = 0
	for i=1,#objectList do
		local x, y = objectList[i]:getPosition()
		xSum = xSum + x
		ySum = ySum + y
	end
	local fsx = xSum/#objectList
	local fsy = ySum/#objectList
	return fsx, fsy
end
function gmClickShipSpawn(x,y)
	local ship = ship_template[individual_ship].create(fleetSpawnFaction,individual_ship)
	ship:setCallSign(generateCallSign())
	setShipEnhancement(ship)
	setSpecialDescription(ship)
	if ship_template[individual_ship].base then
		ship:setCommsScript(""):setCommsFunction(commsStation)
	end
	ship:setPosition(x,y)
	if fleetOrders == "Roaming" then
		ship:orderRoaming()
	elseif fleetOrders == "Idle" then
		ship:orderIdle()
	elseif fleetOrders == "Stand Ground" then
		ship:orderStandGround()
	end
	if fleetChange ~= "unmodified" then
		modifyShip(ship)
	end
end
function parmSpawnShip()
	local fsx = 0
	local fsy = 0
	if fleetSpawnLocation == "At Click" then
		if gm_click_mode == nil then
			gm_click_mode = "ship spawn"
			onGMClick(gmClickShipSpawn)
		elseif gm_click_mode == "ship spawn" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "ship spawn"
			onGMClick(gmClickShipSpawn)
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   ship spawn\nGM click mode.",prev_mode))
		end
		spawnGMShip()
	else
		local object_list = getGMSelection()
		if #object_list < 1 then
			addGMMessage("Fleet spawn failed: nothing selected for spawn location determination")
			return
		end 
		if fleetSpawnLocation == "At Selection" then
			fsx, fsy = centerOfSelected(object_list)
		elseif fleetSpawnLocation == "Sensor Edge" or fleetSpawnLocation == "Beyond Sensors" or fleetSpawnLocation == "Ambush" then
			local selectedMatchesPlayer = false
			local selected_player = nil
			for i=1,#object_list do
				local curSelObj = object_list[i]
				local players = getActivePlayerShips()
				for pidx, p in ipairs(players) do
					if p ~= nil and p:isValid() then
						if p == curSelObj then
							selectedMatchesPlayer = true
							fsx, fsy = p:getPosition()
							selected_player = p
							break
						end
					end
				end
				if selectedMatchesPlayer then
					break
				end
			end
			if selectedMatchesPlayer then
				local spawnAngle = fleetSpawnRelativeDirection
				if fleetSpawnRelativeDirection == "Random Direction" then
					spawnAngle = random(0,360)
				else
					spawnAngle = spawnAngle + 270
					if spawnAngle > 360 then 
						spawnAngle = spawnAngle - 360
					end
				end
				if fleetSpawnLocation ~= "Ambush" then
					local tvx = 0
					local tvy = 0
					if fleetSpawnLocation == "Sensor Edge" then
						--tvx, tvy = vectorFromAngle(spawnAngle,getLongRangeRadarRange())
						tvx, tvy = vectorFromAngle(spawnAngle,selected_player:getLongRangeRadarRange())
					else	--beyond sensors
						--tvx, tvy = vectorFromAngle(spawnAngle,getLongRangeRadarRange() + 10000)
						tvx, tvy = vectorFromAngle(spawnAngle,selected_player:getLongRangeRadarRange() + 10000)
					end
					fsx = fsx + tvx
					fsy = fsy + tvy
				end
			else
				addGMMessage("Fleet spawn failed: no valid player ship found amongst selected items")
				return
			end
		elseif string.find(fleetSpawnLocation,"Away") then
			fsx, fsy = centerOfSelected(object_list)
			spawnAngle = fleetSpawnAwayDirection
			if fleetSpawnAwayDirection == "Random" then
				spawnAngle = random(0,360)
			else
				spawnAngle = spawnAngle + 270
				if spawnAngle > 360 then 
					spawnAngle = spawnAngle - 360
				end
			end
			tvx, tvy = vectorFromAngle(spawnAngle,fleetSpawnAwayDistance*1000)
			fsx = fsx + tvx
			fsy = fsy + tvy
		end
		local ship = ship_template[individual_ship].create(fleetSpawnFaction,individual_ship)
		if fleetOrders == "Roaming" then
			ship:orderRoaming()
		elseif fleetOrders == "Idle" then
			ship:orderIdle()
		elseif fleetOrders == "Stand Ground" then
			ship:orderStandGround()
		end
		if fleetChange ~= "unmodified" then
			modifyShip(ship)
		end
		if fleetSpawnLocation == "Ambush" then
			local dex, dey = vectorFromAngle(random(0,360),fleetAmbushDistance*1000)
			ship:setPosition(fsx+dex,fsy+dey)
		else
			ship:setPosition(fsx,fsy)
		end
	end
end
function gmClickFleetSpawn(x,y)
	table.insert(fleet_list,spawnRandomArmed(x, y, #fleet_list + 1))
end
function parmSpawnFleet()
	local fsx = 0
	local fsy = 0
	local fleet = nil
	if fleetSpawnLocation == "At Click" then
		if gm_click_mode == nil then
			gm_click_mode = "fleet spawn"
			onGMClick(gmClickFleetSpawn)
		elseif gm_click_mode == "fleet spawn" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "fleet spawn"
			onGMClick(gmClickFleetSpawn)
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   fleet spawn\nGM click mode.",prev_mode))
		end
		spawnGMFleet()
	else
		local objectList = getGMSelection()
		if #objectList < 1 and (fleetSpawnLocation ~= "Click" and fleetSpawnLocation ~= "AtCachedLocation") then
			addGMMessage("Fleet spawn failed: nothing selected for spawn location determination")
			return
		end
		if fleetSpawnLocation == "At Selection" then
			fsx, fsy = centerOfSelected(objectList)
		elseif fleetSpawnLocation == "Sensor Edge" or fleetSpawnLocation == "Beyond Sensors" or fleetSpawnLocation == "Ambush" then
			local selectedMatchesPlayer = false
			local selected_player = nil
			for i=1,#objectList do
				local curSelObj = objectList[i]
				local players = getActivePlayerShips()
				for pidx, p in ipairs(players) do
					if p ~= nil and p:isValid() then
						if p == curSelObj then
							selectedMatchesPlayer = true
							fsx, fsy = p:getPosition()
							selected_player = p
							break
						end
					end
				end
				if selectedMatchesPlayer then
					break
				end
			end
			if selectedMatchesPlayer then
				local spawnAngle = fleetSpawnRelativeDirection
				if fleetSpawnRelativeDirection == "Random Direction" then
					spawnAngle = random(0,360)
				else
					spawnAngle = spawnAngle + 270
					if spawnAngle > 360 then 
						spawnAngle = spawnAngle - 360
					end
				end
				if fleetSpawnLocation ~= "Ambush" then
					local tvx = 0
					local tvy = 0
					if fleetSpawnLocation == "Sensor Edge" then
						--tvx, tvy = vectorFromAngle(spawnAngle,getLongRangeRadarRange())
						tvx, tvy = vectorFromAngle(spawnAngle,selected_player:getLongRangeRadarRange())
					else	--beyond sensors
						--tvx, tvy = vectorFromAngle(spawnAngle,getLongRangeRadarRange() + 10000)
						tvx, tvy = vectorFromAngle(spawnAngle,selected_player:getLongRangeRadarRange() + 10000)
					end
					fsx = fsx + tvx
					fsy = fsy + tvy
				end
			else
				addGMMessage("Fleet spawn failed: no valid player ship found amongst selected items")
				return
			end
		elseif string.find(fleetSpawnLocation,"Away") then
			fsx, fsy = centerOfSelected(objectList)
			spawnAngle = fleetSpawnAwayDirection
			if fleetSpawnAwayDirection == "Random" then
				spawnAngle = random(0,360)
			else
				spawnAngle = spawnAngle + 270
				if spawnAngle > 360 then 
					spawnAngle = spawnAngle - 360
				end
			end
			tvx, tvy = vectorFromAngle(spawnAngle,fleetSpawnAwayDistance*1000)
			fsx = fsx + tvx
			fsy = fsy + tvy
		elseif fleetSpawnLocation == "Click" then
			onGMClick(function (x,y) -- this probably could be made simpler, but I lack the understanding and time to make it neater at this time
				cached_x = x
				cached_y = y
				fleetSpawnLocation = "AtCachedLocation"
				parmSpawnFleet()
				fleetSpawnLocation = "Click"
			end)
			return
		elseif fleetSpawnLocation == "AtCachedLocation" then
			fsx = cached_x
			fsy = cached_y
		end
		if fleetSpawnLocation == "Ambush" then
			fleet = spawnRandomArmed(fsx, fsy, #fleet_list + 1, "ambush", fleetAmbushDistance, spawnAngle)
		else
			fleet = spawnRandomArmed(fsx, fsy, #fleet_list + 1)
		end
		table.insert(fleet_list,fleet)
	end
end
function excludeShip(current_ship_template)
	assert(type(current_ship_template)=="string") -- the template name we are spawning from ship_template	
	local ship = nil
	ship = ship_template[current_ship_template].create("Independent",current_ship_template)
	ship:orderIdle()
	local exclude = false
	for name, details in pairs(fleet_exclusions) do
		if details.exclude then
			if name == "Unusual" then
				if ship_template[current_ship_template].unusual == true then
					exclude = true
				end
			end
			if name == "Nuke" then
				if ship:getWeaponStorageMax("Nuke") > 0 then
					exclude = true
				end
			end
			if name == "Warp" then
				if ship:hasWarpDrive() then
					exclude = true
				end
			end
			if name == "Jump" then
				if ship:hasJumpDrive() then
					exclude = true
				end
			end
		end
	end
	ship:destroy()
	return exclude
end
function getTemplatePool(max_strength)
	local function getStrengthSort(tbl, sortFunction)
		local keys = {}
		for key in pairs(tbl) do
			table.insert(keys,key)
		end
		table.sort(keys, function(a,b)
			return sortFunction(tbl[a], tbl[b])
		end)
		return keys
	end
	local ship_template_by_strength = getStrengthSort(ship_template, function(a,b)
		return a.strength > b.strength
	end)
	local template_pool = {}
	if pool_selectivity == "less/heavy" then
		for _, current_ship_template in ipairs(ship_template_by_strength) do
			if not excludeShip(current_ship_template) then
				if ship_template[current_ship_template].strength <= max_strength then
					if fleetComposition == "Non-DB" then
						if ship_template[current_ship_template].create ~= stockTemplate then
							table.insert(template_pool,current_ship_template)
						end
					elseif fleetComposition == "Random" then
						table.insert(template_pool,current_ship_template)
					else
						if ship_template[current_ship_template].fleet_group[fleetComposition] then
							table.insert(template_pool,current_ship_template)							
						end
					end
				end
			end
			if #template_pool >= template_pool_size then
				break
			end
		end
	elseif pool_selectivity == "more/light" then
		for i=#ship_template_by_strength,1,-1 do
			local current_ship_template = ship_template_by_strength[i]
			if not excludeShip(current_ship_template) then
				if ship_template[current_ship_template].strength <= max_strength then
					if fleetComposition == "Non-DB" then
						if ship_template[current_ship_template].create ~= stockTemplate then
							table.insert(template_pool,current_ship_template)
						end
					elseif fleetComposition == "Random" then
						table.insert(template_pool,current_ship_template)
					else
						if ship_template[current_ship_template].fleet_group[fleetComposition] then
							table.insert(template_pool,current_ship_template)							
						end
					end
				end
			end
			if #template_pool >= template_pool_size then
				break
			end
		end
	else	--full
		for current_ship_template, details in pairs(ship_template) do
			if not excludeShip(current_ship_template) then
				if details.strength <= max_strength then
					if fleetComposition == "Non-DB" then
						if ship_template[current_ship_template].create ~= stockTemplate then
							table.insert(template_pool,current_ship_template)
						end
					elseif fleetComposition == "Random" then
						table.insert(template_pool,current_ship_template)
					else
						if ship_template[current_ship_template][fleet_group[fleetComposition]] then
							table.insert(template_pool,current_ship_template)							
						end
					end
				end
			end
		end
	end
	--print("returning template pool containing these templates:")
	--for _, template in ipairs(template_pool) do
	--	print(template)
	--end
	return template_pool
end
function modifyShip(ship)
	local modVal = modifiedValue()
	if modVal ~= 1 then
		ship:setHullMax(ship:getHullMax()*modVal)
		ship:setHull(ship:getHullMax())
	end
	modVal = modifiedValue()
	if modVal ~= 1 then
		local shieldCount = ship:getShieldCount()
		if shieldCount > 0 then
			if shieldCount == 1 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal)
				ship:setShields(ship:getShieldMax(0))
			elseif shieldCount == 2 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1))
			elseif shieldCount == 3 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2))
			elseif shieldCount == 4 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal,ship:getShieldMax(3)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2),ship:getShieldMax(3))
			elseif shieldCount == 5 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal,ship:getShieldMax(3)*modVal,ship:getShieldMax(4)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2),ship:getShieldMax(3),ship:getShieldMax(4))
			elseif shieldCount == 6 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal,ship:getShieldMax(3)*modVal,ship:getShieldMax(4)*modVal,ship:getShieldMax(5)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2),ship:getShieldMax(3),ship:getShieldMax(4),ship:getShieldMax(5))
			elseif shieldCount == 7 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal,ship:getShieldMax(3)*modVal,ship:getShieldMax(4)*modVal,ship:getShieldMax(5)*modVal,ship:getShieldMax(6)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2),ship:getShieldMax(3),ship:getShieldMax(4),ship:getShieldMax(5),ship:getShieldMax(6))
			elseif shieldCount == 8 then
				ship:setShieldsMax(ship:getShieldMax(0)*modVal,ship:getShieldMax(1)*modVal,ship:getShieldMax(2)*modVal,ship:getShieldMax(3)*modVal,ship:getShieldMax(4)*modVal,ship:getShieldMax(5)*modVal,ship:getShieldMax(6)*modVal,ship:getShieldMax(7)*modVal)
				ship:setShields(ship:getShieldMax(0),ship:getShieldMax(1),ship:getShieldMax(2),ship:getShieldMax(3),ship:getShieldMax(4),ship:getShieldMax(5),ship:getShieldMax(6),ship:getShieldMax(7))
			end
		end
	end
	local maxNuke = ship:getWeaponStorageMax("Nuke")
	if maxNuke > 0 then
		modVal = modifiedValue()
		if modVal ~= 1 then
			if modVal > 1 then
				ship:setWeaponStorageMax("Nuke",math.ceil(maxNuke*modVal))
			else
				ship:setWeaponStorageMax("Nuke",math.floor(maxNuke*modVal))
			end
			ship:setWeaponStorage("Nuke",ship:getWeaponStorageMax("Nuke"))
		end
	end
	local maxEMP = ship:getWeaponStorageMax("EMP")
	if maxEMP > 0 then
		modVal = modifiedValue()
		if modVal ~= 1 then
			if modVal > 1 then
				ship:setWeaponStorageMax("EMP",math.ceil(maxEMP*modVal))
			else
				ship:setWeaponStorageMax("EMP",math.floor(maxEMP*modVal))
			end
			ship:setWeaponStorage("EMP",ship:getWeaponStorageMax("EMP"))
		end
	end
	local maxMine = ship:getWeaponStorageMax("Mine")
	if maxMine > 0 then
		modVal = modifiedValue()
		if modVal ~= 1 then
			if modVal > 1 then
				ship:setWeaponStorageMax("Mine",math.ceil(maxMine*modVal))
			else
				ship:setWeaponStorageMax("Mine",math.floor(maxMine*modVal))
			end
			ship:setWeaponStorage("Mine",ship:getWeaponStorageMax("Mine"))
		end
	end
	local maxHoming = ship:getWeaponStorageMax("Homing")
	if maxHoming > 0 then
		modVal = modifiedValue()
		if modVal ~= 1 then
			if modVal > 1 then
				ship:setWeaponStorageMax("Homing",math.ceil(maxHoming*modVal))
			else
				ship:setWeaponStorageMax("Homing",math.floor(maxHoming*modVal))
			end
			ship:setWeaponStorage("Homing",ship:getWeaponStorageMax("Homing"))
		end
	end
	local maxHVLI = ship:getWeaponStorageMax("HVLI")
	if maxHVLI > 0 then
		modVal = modifiedValue()
		if modVal ~= 1 then
			if modVal > 1 then
				maxHVLI = math.ceil(maxHVLI*modVal)
			else
				maxHVLI = math.floor(maxHVLI*modVal)
			end
			ship:setWeaponStorageMax("HVLI",maxHVLI)
			ship:setWeaponStorage("HVLI",maxHVLI)
		end
	end
	modVal = modifiedValue()
	if modVal ~= 1 then
		ship:setImpulseMaxSpeed(ship:getImpulseMaxSpeed()*modVal)
	end
	modVal = modifiedValue()
	if modVal ~= 1 then
		ship:setRotationMaxSpeed(ship:getRotationMaxSpeed()*modVal)
	end
	if ship:getBeamWeaponRange(0) > 0 then
		local beamIndex = 0
		local modArc = modifiedValue()
		local modRange = modifiedValue()
		local modCycle = 1/modifiedValue()
		local modDamage = modifiedValue()
		local modEnergy = 1/modifiedValue()
		local modHeat = 1/modifiedValue()
		repeat
			local beamArc = ship:getBeamWeaponArc(beamIndex)
			local beamDirection = ship:getBeamWeaponDirection(beamIndex)
			local beamRange = ship:getBeamWeaponRange(beamIndex)
			local beamCycle = ship:getBeamWeaponCycleTime(beamIndex)
			local beamDamage = ship:getBeamWeaponDamage(beamIndex)
			ship:setBeamWeapon(beamIndex,beamArc*modArc,beamDirection,beamRange*modRange,beamCycle*modCycle,beamDamage*modDamage)
			ship:setBeamWeaponEnergyPerFire(beamIndex,ship:getBeamWeaponEnergyPerFire(beamIndex)*modEnergy)
			ship:setBeamWeaponHeatPerFire(beamIndex,ship:getBeamWeaponHeatPerFire(beamIndex)*modHeat)
			beamIndex = beamIndex + 1
		until(ship:getBeamWeaponRange(beamIndex) < 1)
	end
end
function spawnNPCs(x, y, strength, faction, action, composition, exclude, tinkered, shape, spawn_distance, spawn_angle, px, py, enhancement)
	--	x and y are the spawn coordinates
	--	strength is the numerical value of the strength of the ships spawned
	--		if nil, will use relative strength as selected in GM buttons
	--	faction specifies the spawned ships' faction
	--		if nil, will use faction specified in GM menus
	if x == nil or y == nil then
		print("x and y coordinates required for spawnNPCs func")
		return
	end
	if action ~= nil then
		if action ~= "Roaming" and action ~= "Idle" and action ~= "Stand Ground" then
			print("valid values for action are 'Roaming', 'Idle' or 'Stand Ground'")
			return
		end
	end
	if composition ~= nil then
		if composition ~= "Random" and composition ~= "Fighters" and composition ~= "Chasers" and composition ~= "Frigates" and composition ~= "Beamers" and composition ~= "Missilers" and composition ~= "Adders" and composition ~= "Non-DB" and composition ~= "Drones" then
			print("valid values for composition are 'Fighters', 'Chasers', 'Frigates', 'Beamers', 'Missilers', 'Adders', 'Non-DB' or 'Drones'")
			return
		end
	end
	if tinkered ~= nil then
		if tinkered ~= "unmodified" and tinkered ~= "improved" and tinkered ~= "degraded" and tinkered ~= "tinkered" then
			print("valid values for tinkered are 'unmodified', 'improved', 'degraded' or 'tinkered'")
			return
		end
	end
	if shape ~= nil then
		if shape ~= "square" and shape ~= "hexagonal" and shape ~= "none" and shape ~= "pyramid" and shape ~= "ambush" then
			print("valid values for shape are 'square', 'hexagonal', 'none', 'pyramid' or 'ambush'")
			return
		end
	end
	local restore_strength = nil
	local restore_strength_boolean = nil
	local restore_faction = nil
	local restore_order = nil
	local restore_composition = nil
	local restore_exclude = nil
	local restore_tinkered = nil
	local restore_enhancement = nil
	if enhancement ~= nil then
		restore_enhancement = ship_enhancement_factor
		ship_enhancement_factor = enhancement
	end
	if strength ~= nil then
		restore_strength = fleetStrengthFixedValue
		restore_strength_boolean = fleetStrengthFixed
		fleetStrengthFixedValue = strength
		fleetStrengthFixed = true
	end
	if faction ~= nil then
		restore_faction = fleetSpawnFaction
		fleetSpawnFaction = faction
	end
	if action ~= nil then
		restore_order = fleetOrders
		fleetOrders = action
	end
	if composition ~= nil then
		restore_composition = fleetComposition
		fleetComposition = composition
	end
	if exclude ~= nil then
		restore_exclude = fleet_exclusions
		if string.find(exclude,"N") then
			fleet_exclusions["Nuke"].exclude = true
		end
		if string.find(exclude,"W") then
			fleet_exclusions["Warp"].exclude = true
		end
		if string.find(exclude,"J") then
			fleet_exclusions["Jump"].exclude = true
		end
	end
	if tinkered ~= nil then
		restore_tinkered = fleetChange
		fleetChange = tinkered
	end
	local fleet = spawnRandomArmed(x, y, nil, shape, spawn_distance, spawn_angle, px, py)
	if restore_enhancement ~= nil then
		ship_enhancement_factor = restore_enhancement
	end
	if restore_tinkered ~= nil then
		fleetChange = restore_tinkered
	end
	if restore_exclude ~= nil then
		fleet_exclusions = restore_exclude
	end
	if restore_composition ~= nil then
		fleetComposition = restore_composition
	end
	if restore_order ~= nil then
		fleetOrders = restore_order
	end
	if restore_faction ~= nil then
		fleetSpawnFaction = restore_faction
	end
	if restore_strength ~= nil then
		fleetStrengthFixedValue = restore_strength
		fleetStrengthFixed = restore_strength_boolean
	end
	return fleet
end
function spawnRandomArmed(x, y, fleetIndex, shape, spawn_distance, spawn_angle, px, py)
--x and y are central spawn coordinates
--fleetIndex is the number of the fleet to be spawned
--sl (was) the score list, nl is the name list, bl is the boolean list
--spawn_distance optional - used for ambush or pyramid
--spawn_angle optional - used for ambush or pyramid
--px and py are the player coordinates or the pyramid fly towards point coordinates
	local enemyStrength = math.max(fleetStrengthByPlayerStrength * playerPower(),5)
	if fleetStrengthFixed then
		enemyStrength = fleetStrengthFixedValue
	end
	local enemyPosition = 0
	local sp = irandom(500,1000)			--random spacing of spawned group
	if shape == nil then
		shape = "square"
		if random(1,100) < 50 then
			shape = "hexagonal"
		end
	end
	local enemy_position = 0
	local enemyList = {}
	--print("in spawn random armed function about to call get template pool function")
	local template_pool = getTemplatePool(enemyStrength)
	if #template_pool < 1 then
		addGMMessage("Empty Template pool: fix excludes or other criteria")
		return enemyList
	end
	local fleet_prefix = generateCallSignPrefix()
	while enemyStrength > 0 do
		local selected_template = template_pool[math.random(1,#template_pool)]
--		print("selected template:",selected_template)
--		print("base:",ship_template[selected_template].base)
		local ship = ship_template[selected_template].create(fleetSpawnFaction,selected_template)
		ship:setCallSign(generateCallSign(fleet_prefix))
		setShipEnhancement(ship)
		setSpecialDescription(ship)
		if ship_template[selected_template].base then
--			print("setting faux station comms")
			ship:setCommsScript(""):setCommsFunction(commsStation)
		else
			ship:setCommsScript(""):setCommsFunction(commsShip)
		end
		ship:orderRoaming()
		if fleetOrders == "Roaming" then
			ship:orderRoaming()
		elseif fleetOrders == "Idle" then
			ship:orderIdle()
		elseif fleetOrders == "Stand Ground" then
			ship:orderStandGround()
		end
		enemy_position = enemy_position + 1
		if shape == "none" or shape == "pyramid" or shape == "ambush" then
			ship:setPosition(x,y)
		else
			ship:setPosition(x + formation_delta[shape].x[enemy_position] * sp, y + formation_delta[shape].y[enemy_position] * sp)
		end
		ship.fleetIndex = fleetIndex
		if fleetChange ~= "unmodified" then
			modifyShip(ship)
		end
		table.insert(enemyList, ship)
		enemyStrength = enemyStrength - ship_template[selected_template].strength
	end
	if shape == "pyramid" then
		if spawn_distance == nil then
			spawn_distance = 30
		end
		if spawn_angle == nil then
			spawn_angle = random(0,360)
		end
		if px == nil then
			px = 0
		end
		if py == nil then
			py = 0
		end
		local pyramid_tier = math.min(#enemyList,max_pyramid_tier)
		for index, ship in ipairs(enemyList) do
			if index <= max_pyramid_tier then
				local pyramid_angle = spawn_angle + formation_delta.pyramid[pyramid_tier][index].angle
				if pyramid_angle < 0 then 
					pyramid_angle = pyramid_angle + 360
				end
				pyramid_angle = pyramid_angle % 360
				rx, ry = vectorFromAngle(pyramid_angle,spawn_distance*1000 + formation_delta.pyramid[pyramid_tier][index].distance * 800)
				ship:setPosition(px+rx,py+ry)
			else
				ship:setPosition(px+vx,py+vy)
			end
			ship:setHeading((spawn_angle + 270) % 360)
			ship:orderFlyTowards(px,py)
		end
	end
	if shape == "ambush" then
		if spawn_distance == nil then
			spawn_distance = 5
		end
		if spawn_angle == nil then
			spawn_angle = random(0,360)
		end
		local circle_increment = 360/#enemyList
		for _, enemy in ipairs(enemyList) do
			local dex, dey = vectorFromAngle(spawn_angle,spawn_distance*1000)
			enemy:setPosition(x+dex,y+dey)
			spawn_angle = spawn_angle + circle_increment
		end
	end
	return enemyList
end
--		Generate call sign functions
function generateCallSign(prefix,faction)
	if faction == nil then
		if prefix == nil then
			prefix = generateCallSignPrefix()
		end
	else
		if prefix == nil then
			prefix = getFactionPrefix(faction)
		else
			prefix = string.format("%s %s",getFactionPrefix(faction),prefix)
		end
	end
	suffix_index = suffix_index + math.random(1,3)
	if suffix_index > 99 then 
		suffix_index = 1
	end
	return string.format("%s%i",prefix,suffix_index)
end
function generateCallSignPrefix(length)
	if call_sign_prefix_pool == nil then
		call_sign_prefix_pool = {}
		prefix_length = prefix_length + 1
		if prefix_length > 2 then
			prefix_length = 1
		end
		fillPrefixPool()
	end
	if length == nil then
		length = prefix_length
	end
	local prefix = ""
	for i=1,length do
		if #call_sign_prefix_pool < 1 then
			fillPrefixPool()
		end
		prefix = prefix .. tableRemoveRandom(call_sign_prefix_pool)
	end
	return prefix
end
function fillPrefixPool()
	for i=1,26 do
		table.insert(call_sign_prefix_pool,string.char(i+64))
	end
end
function getFactionPrefix(faction)
	local faction_prefix = nil
	if faction == "Kraylor" then
		if kraylor_names == nil then
			setKraylorNames()
		else
			if #kraylor_names < 1 then
				setKraylorNames()
			end
		end
		local kraylor_name_choice = math.random(1,#kraylor_names)
		faction_prefix = kraylor_names[kraylor_name_choice]
		table.remove(kraylor_names,kraylor_name_choice)
	end
	if faction == "Exuari" then
		if exuari_names == nil then
			setExuariNames()
		else
			if #exuari_names < 1 then
				setExuariNames()
			end
		end
		local exuari_name_choice = math.random(1,#exuari_names)
		faction_prefix = exuari_names[exuari_name_choice]
		table.remove(exuari_names,exuari_name_choice)
	end
	if faction == "Ghosts" then
		if ghosts_names == nil then
			setGhostsNames()
		else
			if #ghosts_names < 1 then
				setGhostsNames()
			end
		end
		local ghosts_name_choice = math.random(1,#ghosts_names)
		faction_prefix = ghosts_names[ghosts_name_choice]
		table.remove(ghosts_names,ghosts_name_choice)
	end
	if faction == "Independent" then
		if independent_names == nil then
			setIndependentNames()
		else
			if #independent_names < 1 then
				setIndependentNames()
			end
		end
		local independent_name_choice = math.random(1,#independent_names)
		faction_prefix = independent_names[independent_name_choice]
		table.remove(independent_names,independent_name_choice)
	end
	if faction == "Human Navy" then
		if human_names == nil then
			setHumanNames()
		else
			if #human_names < 1 then
				setHumanNames()
			end
		end
		local human_name_choice = math.random(1,#human_names)
		faction_prefix = human_names[human_name_choice]
		table.remove(human_names,human_name_choice)
	end
	if faction == "Arlenians" then
		if arlenian_names == nil then
			setArlenianNames()
		else
			if #arlenian_names < 1 then
				setArlenianNames()
			end
		end
		local arlenian_name_choice = math.random(1,#arlenian_names)
		faction_prefix = arlenian_names[arlenian_name_choice]
		table.remove(arlenian_names,arlenian_name_choice)
	end
	if faction == "USN" then
		if usn_names == nil then
			setUsnNames()
		else
			if #usn_names < 1 then
				setUsnNames()
			end
		end
		local usn_name_choice = math.random(1,#usn_names)
		faction_prefix = usn_names[usn_name_choice]
		table.remove(usn_names,usn_name_choice)
	end
	if faction == "TSN" then
		if tsn_names == nil then
			setTsnNames()
		else
			if #tsn_names < 1 then
				setTsnNames()
			end
		end
		local tsn_name_choice = math.random(1,#tsn_names)
		faction_prefix = tsn_names[tsn_name_choice]
		table.remove(tsn_names,tsn_name_choice)
	end
	if faction == "CUF" then
		if cuf_names == nil then
			setCufNames()
		else
			if #cuf_names < 1 then
				setCufNames()
			end
		end
		local cuf_name_choice = math.random(1,#cuf_names)
		faction_prefix = cuf_names[cuf_name_choice]
		table.remove(cuf_names,cuf_name_choice)
	end
	if faction == "Ktlitans" then
		if ktlitan_names == nil then
			setKtlitanNames()
		else
			if #ktlitan_names < 1 then
				setKtlitanNames()
			end
		end
		local ktlitan_name_choice = math.random(1,#ktlitan_names)
		faction_prefix = ktlitan_names[ktlitan_name_choice]
		table.remove(ktlitan_names,ktlitan_name_choice)
	end
	if faction_prefix == nil then
		faction_prefix = generateCallSignPrefix()
	end
	return faction_prefix
end
function setGhostsNames()
	ghosts_names = {}
	table.insert(ghosts_names,"Abstract")
	table.insert(ghosts_names,"Ada")
	table.insert(ghosts_names,"Assemble")
	table.insert(ghosts_names,"Assert")
	table.insert(ghosts_names,"Backup")
	table.insert(ghosts_names,"BASIC")
	table.insert(ghosts_names,"Big Iron")
	table.insert(ghosts_names,"BigEndian")
	table.insert(ghosts_names,"Binary")
	table.insert(ghosts_names,"Bit")
	table.insert(ghosts_names,"Block")
	table.insert(ghosts_names,"Boot")
	table.insert(ghosts_names,"Branch")
	table.insert(ghosts_names,"BTree")
	table.insert(ghosts_names,"Bubble")
	table.insert(ghosts_names,"Byte")
	table.insert(ghosts_names,"Capacitor")
	table.insert(ghosts_names,"Case")
	table.insert(ghosts_names,"Chad")
	table.insert(ghosts_names,"Charge")
	table.insert(ghosts_names,"COBOL")
	table.insert(ghosts_names,"Collate")
	table.insert(ghosts_names,"Compile")
	table.insert(ghosts_names,"Control")
	table.insert(ghosts_names,"Construct")
	table.insert(ghosts_names,"Cycle")
	table.insert(ghosts_names,"Data")
	table.insert(ghosts_names,"Debug")
	table.insert(ghosts_names,"Decimal")
	table.insert(ghosts_names,"Decision")
	table.insert(ghosts_names,"Default")
	table.insert(ghosts_names,"DIMM")
	table.insert(ghosts_names,"Displacement")
	table.insert(ghosts_names,"Edge")
	table.insert(ghosts_names,"Exit")
	table.insert(ghosts_names,"Factor")
	table.insert(ghosts_names,"Flag")
	table.insert(ghosts_names,"Float")
	table.insert(ghosts_names,"Flow")
	table.insert(ghosts_names,"FORTRAN")
	table.insert(ghosts_names,"Fullword")
	table.insert(ghosts_names,"GIGO")
	table.insert(ghosts_names,"Graph")
	table.insert(ghosts_names,"Hack")
	table.insert(ghosts_names,"Hash")
	table.insert(ghosts_names,"Halfword")
	table.insert(ghosts_names,"Hertz")
	table.insert(ghosts_names,"Hexadecimal")
	table.insert(ghosts_names,"Indicator")
	table.insert(ghosts_names,"Initialize")
	table.insert(ghosts_names,"Integer")
	table.insert(ghosts_names,"Integrate")
	table.insert(ghosts_names,"Interrupt")
	table.insert(ghosts_names,"Java")
	table.insert(ghosts_names,"Lisp")
	table.insert(ghosts_names,"List")
	table.insert(ghosts_names,"Logic")
	table.insert(ghosts_names,"Loop")
	table.insert(ghosts_names,"Lua")
	table.insert(ghosts_names,"Magnetic")
	table.insert(ghosts_names,"Mask")
	table.insert(ghosts_names,"Memory")
	table.insert(ghosts_names,"Mnemonic")
	table.insert(ghosts_names,"Micro")
	table.insert(ghosts_names,"Model")
	table.insert(ghosts_names,"Nibble")
	table.insert(ghosts_names,"Octal")
	table.insert(ghosts_names,"Order")
	table.insert(ghosts_names,"Operator")
	table.insert(ghosts_names,"Parameter")
	table.insert(ghosts_names,"Pascal")
	table.insert(ghosts_names,"Pattern")
	table.insert(ghosts_names,"Pixel")
	table.insert(ghosts_names,"Point")
	table.insert(ghosts_names,"Polygon")
	table.insert(ghosts_names,"Port")
	table.insert(ghosts_names,"Process")
	table.insert(ghosts_names,"RAM")
	table.insert(ghosts_names,"Raster")
	table.insert(ghosts_names,"Rate")
	table.insert(ghosts_names,"Redundant")
	table.insert(ghosts_names,"Reference")
	table.insert(ghosts_names,"Refresh")
	table.insert(ghosts_names,"Register")
	table.insert(ghosts_names,"Resistor")
	table.insert(ghosts_names,"ROM")
	table.insert(ghosts_names,"Routine")
	table.insert(ghosts_names,"Ruby")
	table.insert(ghosts_names,"SAAS")
	table.insert(ghosts_names,"Sequence")
	table.insert(ghosts_names,"Share")
	table.insert(ghosts_names,"Silicon")
	table.insert(ghosts_names,"SIMM")
	table.insert(ghosts_names,"Socket")
	table.insert(ghosts_names,"Sort")
	table.insert(ghosts_names,"Structure")
	table.insert(ghosts_names,"Switch")
	table.insert(ghosts_names,"Symbol")
	table.insert(ghosts_names,"Trace")
	table.insert(ghosts_names,"Transistor")
	table.insert(ghosts_names,"Value")
	table.insert(ghosts_names,"Vector")
	table.insert(ghosts_names,"Version")
	table.insert(ghosts_names,"View")
	table.insert(ghosts_names,"WYSIWYG")
	table.insert(ghosts_names,"XOR")
end
function setExuariNames()
	exuari_names = {}
	table.insert(exuari_names,"Astonester")
	table.insert(exuari_names,"Ametripox")
	table.insert(exuari_names,"Bakeltevex")
	table.insert(exuari_names,"Baropledax")
	table.insert(exuari_names,"Batongomox")
	table.insert(exuari_names,"Bekilvimix")
	table.insert(exuari_names,"Benoglopok")
	table.insert(exuari_names,"Bilontipur")
	table.insert(exuari_names,"Bolictimik")
	table.insert(exuari_names,"Bomagralax")
	table.insert(exuari_names,"Buteldefex")
	table.insert(exuari_names,"Catondinab")
	table.insert(exuari_names,"Chatorlonox")
	table.insert(exuari_names,"Culagromik")
	table.insert(exuari_names,"Dakimbinix")
	table.insert(exuari_names,"Degintalix")
	table.insert(exuari_names,"Dimabratax")
	table.insert(exuari_names,"Dokintifix")
	table.insert(exuari_names,"Dotandirex")
	table.insert(exuari_names,"Dupalgawax")
	table.insert(exuari_names,"Ekoftupex")
	table.insert(exuari_names,"Elidranov")
	table.insert(exuari_names,"Fakobrovox")
	table.insert(exuari_names,"Femoplabix")
	table.insert(exuari_names,"Fibatralax")
	table.insert(exuari_names,"Fomartoran")
	table.insert(exuari_names,"Gateldepex")
	table.insert(exuari_names,"Gamutrewal")
	table.insert(exuari_names,"Gesanterux")
	table.insert(exuari_names,"Gimardanax")
	table.insert(exuari_names,"Hamintinal")
	table.insert(exuari_names,"Holangavak")
	table.insert(exuari_names,"Igolpafik")
	table.insert(exuari_names,"Inoklomat")
	table.insert(exuari_names,"Jamewtibex")
	table.insert(exuari_names,"Jepospagox")
	table.insert(exuari_names,"Kajortonox")
	table.insert(exuari_names,"Kapogrinix")
	table.insert(exuari_names,"Kelitravax")
	table.insert(exuari_names,"Kipaldanax")
	table.insert(exuari_names,"Kodendevex")
	table.insert(exuari_names,"Kotelpedex")
	table.insert(exuari_names,"Kutandolak")
	table.insert(exuari_names,"Lakirtinix")
	table.insert(exuari_names,"Lapoldinek")
	table.insert(exuari_names,"Lavorbonox")
	table.insert(exuari_names,"Letirvinix")
	table.insert(exuari_names,"Lowibromax")
	table.insert(exuari_names,"Makintibix")
	table.insert(exuari_names,"Makorpohox")
	table.insert(exuari_names,"Matoprowox")
	table.insert(exuari_names,"Mefinketix")
	table.insert(exuari_names,"Motandobak")
	table.insert(exuari_names,"Nakustunux")
	table.insert(exuari_names,"Nequivonax")
	table.insert(exuari_names,"Nitaldavax")
	table.insert(exuari_names,"Nobaldorex")
	table.insert(exuari_names,"Obimpitix")
	table.insert(exuari_names,"Owaklanat")
	table.insert(exuari_names,"Pakendesik")
	table.insert(exuari_names,"Pazinderix")
	table.insert(exuari_names,"Pefoglamuk")
	table.insert(exuari_names,"Pekirdivix")
	table.insert(exuari_names,"Potarkadax")
	table.insert(exuari_names,"Pulendemex")
	table.insert(exuari_names,"Quatordunix")
	table.insert(exuari_names,"Rakurdumux")
	table.insert(exuari_names,"Ralombenik")
	table.insert(exuari_names,"Regosporak")
	table.insert(exuari_names,"Retordofox")
	table.insert(exuari_names,"Rikondogox")
	table.insert(exuari_names,"Rokengelex")
	table.insert(exuari_names,"Rutarkadax")
	table.insert(exuari_names,"Sakeldepex")
	table.insert(exuari_names,"Setiftimix")
	table.insert(exuari_names,"Siparkonal")
	table.insert(exuari_names,"Sopaldanax")
	table.insert(exuari_names,"Sudastulux")
	table.insert(exuari_names,"Takeftebex")
	table.insert(exuari_names,"Taliskawit")
	table.insert(exuari_names,"Tegundolex")
	table.insert(exuari_names,"Tekintipix")
	table.insert(exuari_names,"Tiposhomox")
	table.insert(exuari_names,"Tokaldapax")
	table.insert(exuari_names,"Tomuglupux")
	table.insert(exuari_names,"Tufeldepex")
	table.insert(exuari_names,"Unegremek")
	table.insert(exuari_names,"Uvendipax")
	table.insert(exuari_names,"Vatorgopox")
	table.insert(exuari_names,"Venitribix")
	table.insert(exuari_names,"Vobalterix")
	table.insert(exuari_names,"Wakintivix")
	table.insert(exuari_names,"Wapaltunix")
	table.insert(exuari_names,"Wekitrolax")
	table.insert(exuari_names,"Wofarbanax")
	table.insert(exuari_names,"Xeniplofek")
	table.insert(exuari_names,"Yamaglevik")
	table.insert(exuari_names,"Yakildivix")
	table.insert(exuari_names,"Yegomparik")
	table.insert(exuari_names,"Zapondehex")
	table.insert(exuari_names,"Zikandelat")
end
function setKraylorNames()		
	kraylor_names = {}
	table.insert(kraylor_names,"Abroten")
	table.insert(kraylor_names,"Ankwar")
	table.insert(kraylor_names,"Bakrik")
	table.insert(kraylor_names,"Belgor")
	table.insert(kraylor_names,"Benkop")
	table.insert(kraylor_names,"Blargvet")
	table.insert(kraylor_names,"Bloktarg")
	table.insert(kraylor_names,"Bortok")
	table.insert(kraylor_names,"Bredjat")
	table.insert(kraylor_names,"Chankret")
	table.insert(kraylor_names,"Chatork")
	table.insert(kraylor_names,"Chokarp")
	table.insert(kraylor_names,"Cloprak")
	table.insert(kraylor_names,"Coplek")
	table.insert(kraylor_names,"Cortek")
	table.insert(kraylor_names,"Daltok")
	table.insert(kraylor_names,"Darpik")
	table.insert(kraylor_names,"Dastek")
	table.insert(kraylor_names,"Dotark")
	table.insert(kraylor_names,"Drambok")
	table.insert(kraylor_names,"Duntarg")
	table.insert(kraylor_names,"Earklat")
	table.insert(kraylor_names,"Ekmit")
	table.insert(kraylor_names,"Fakret")
	table.insert(kraylor_names,"Fapork")
	table.insert(kraylor_names,"Fawtrik")
	table.insert(kraylor_names,"Fenturp")
	table.insert(kraylor_names,"Feplik")
	table.insert(kraylor_names,"Figront")
	table.insert(kraylor_names,"Floktrag")
	table.insert(kraylor_names,"Fonkack")
	table.insert(kraylor_names,"Fontreg")
	table.insert(kraylor_names,"Foondrap")
	table.insert(kraylor_names,"Frotwak")
	table.insert(kraylor_names,"Gastonk")
	table.insert(kraylor_names,"Gentouk")
	table.insert(kraylor_names,"Gonpruk")
	table.insert(kraylor_names,"Gortak")
	table.insert(kraylor_names,"Gronkud")
	table.insert(kraylor_names,"Hewtang")
	table.insert(kraylor_names,"Hongtag")
	table.insert(kraylor_names,"Hortook")
	table.insert(kraylor_names,"Indrut")
	table.insert(kraylor_names,"Iprant")
	table.insert(kraylor_names,"Jakblet")
	table.insert(kraylor_names,"Jonket")
	table.insert(kraylor_names,"Jontot")
	table.insert(kraylor_names,"Kandarp")
	table.insert(kraylor_names,"Kantrok")
	table.insert(kraylor_names,"Kiptak")
	table.insert(kraylor_names,"Kortrant")
	table.insert(kraylor_names,"Krontgat")
	table.insert(kraylor_names,"Lobreck")
	table.insert(kraylor_names,"Lokrant")
	table.insert(kraylor_names,"Lomprok")
	table.insert(kraylor_names,"Lutrank")
	table.insert(kraylor_names,"Makrast")
	table.insert(kraylor_names,"Moklahft")
	table.insert(kraylor_names,"Morpug")
	table.insert(kraylor_names,"Nagblat")
	table.insert(kraylor_names,"Nokrat")
	table.insert(kraylor_names,"Nomek")
	table.insert(kraylor_names,"Notark")
	table.insert(kraylor_names,"Ontrok")
	table.insert(kraylor_names,"Orkpent")
	table.insert(kraylor_names,"Peechak")
	table.insert(kraylor_names,"Plogrent")
	table.insert(kraylor_names,"Pokrint")
	table.insert(kraylor_names,"Potarg")
	table.insert(kraylor_names,"Prangtil")
	table.insert(kraylor_names,"Quagbrok")
	table.insert(kraylor_names,"Quimprill")
	table.insert(kraylor_names,"Reekront")
	table.insert(kraylor_names,"Ripkort")
	table.insert(kraylor_names,"Rokust")
	table.insert(kraylor_names,"Rontrait")
	table.insert(kraylor_names,"Saknep")
	table.insert(kraylor_names,"Sengot")
	table.insert(kraylor_names,"Skitkard")
	table.insert(kraylor_names,"Skopgrek")
	table.insert(kraylor_names,"Sletrok")
	table.insert(kraylor_names,"Slorknat")
	table.insert(kraylor_names,"Spogrunk")
	table.insert(kraylor_names,"Staklurt")
	table.insert(kraylor_names,"Stonkbrant")
	table.insert(kraylor_names,"Swaktrep")
	table.insert(kraylor_names,"Tandrok")
	table.insert(kraylor_names,"Takrost")
	table.insert(kraylor_names,"Tonkrut")
	table.insert(kraylor_names,"Torkrot")
	table.insert(kraylor_names,"Trablok")
	table.insert(kraylor_names,"Trokdin")
	table.insert(kraylor_names,"Unkelt")
	table.insert(kraylor_names,"Urjop")
	table.insert(kraylor_names,"Vankront")
	table.insert(kraylor_names,"Vintrep")
	table.insert(kraylor_names,"Volkerd")
	table.insert(kraylor_names,"Vortread")
	table.insert(kraylor_names,"Wickurt")
	table.insert(kraylor_names,"Xokbrek")
	table.insert(kraylor_names,"Yeskret")
	table.insert(kraylor_names,"Zacktrope")
end
function setIndependentNames()
	independent_names = {}
	table.insert(independent_names,"Akdroft")	--faux Kraylor
	table.insert(independent_names,"Bletnik")	--faux Kraylor
	table.insert(independent_names,"Brogfent")	--faux Kraylor
	table.insert(independent_names,"Cruflech")	--faux Kraylor
	table.insert(independent_names,"Dengtoct")	--faux Kraylor
	table.insert(independent_names,"Fiklerg")	--faux Kraylor
	table.insert(independent_names,"Groftep")	--faux Kraylor
	table.insert(independent_names,"Hinkflort")	--faux Kraylor
	table.insert(independent_names,"Irklesht")	--faux Kraylor
	table.insert(independent_names,"Jotrak")	--faux Kraylor
	table.insert(independent_names,"Kargleth")	--faux Kraylor
	table.insert(independent_names,"Lidroft")	--faux Kraylor
	table.insert(independent_names,"Movrect")	--faux Kraylor
	table.insert(independent_names,"Nitrang")	--faux Kraylor
	table.insert(independent_names,"Poklapt")	--faux Kraylor
	table.insert(independent_names,"Raknalg")	--faux Kraylor
	table.insert(independent_names,"Stovtuk")	--faux Kraylor
	table.insert(independent_names,"Trongluft")	--faux Kraylor
	table.insert(independent_names,"Vactremp")	--faux Kraylor
	table.insert(independent_names,"Wunklesp")	--faux Kraylor
	table.insert(independent_names,"Yentrilg")	--faux Kraylor
	table.insert(independent_names,"Zeltrag")	--faux Kraylor
	table.insert(independent_names,"Avoltojop")		--faux Exuari
	table.insert(independent_names,"Bimartarax")	--faux Exuari
	table.insert(independent_names,"Cidalkapax")	--faux Exuari
	table.insert(independent_names,"Darongovax")	--faux Exuari
	table.insert(independent_names,"Felistiyik")	--faux Exuari
	table.insert(independent_names,"Gopendewex")	--faux Exuari
	table.insert(independent_names,"Hakortodox")	--faux Exuari
	table.insert(independent_names,"Jemistibix")	--faux Exuari
	table.insert(independent_names,"Kilampafax")	--faux Exuari
	table.insert(independent_names,"Lokuftumux")	--faux Exuari
	table.insert(independent_names,"Mabildirix")	--faux Exuari
	table.insert(independent_names,"Notervelex")	--faux Exuari
	table.insert(independent_names,"Pekolgonex")	--faux Exuari
	table.insert(independent_names,"Rifaltabax")	--faux Exuari
	table.insert(independent_names,"Sobendeyex")	--faux Exuari
	table.insert(independent_names,"Tinaftadax")	--faux Exuari
	table.insert(independent_names,"Vadorgomax")	--faux Exuari
	table.insert(independent_names,"Wilerpejex")	--faux Exuari
	table.insert(independent_names,"Yukawvalak")	--faux Exuari
	table.insert(independent_names,"Zajiltibix")	--faux Exuari
	table.insert(independent_names,"Alter")		--faux Ghosts
	table.insert(independent_names,"Assign")	--faux Ghosts
	table.insert(independent_names,"Brain")		--faux Ghosts
	table.insert(independent_names,"Break")		--faux Ghosts
	table.insert(independent_names,"Boundary")	--faux Ghosts
	table.insert(independent_names,"Code")		--faux Ghosts
	table.insert(independent_names,"Compare")	--faux Ghosts
	table.insert(independent_names,"Continue")	--faux Ghosts
	table.insert(independent_names,"Core")		--faux Ghosts
	table.insert(independent_names,"CRUD")		--faux Ghosts
	table.insert(independent_names,"Decode")	--faux Ghosts
	table.insert(independent_names,"Decrypt")	--faux Ghosts
	table.insert(independent_names,"Device")	--faux Ghosts
	table.insert(independent_names,"Encode")	--faux Ghosts
	table.insert(independent_names,"Encrypt")	--faux Ghosts
	table.insert(independent_names,"Event")		--faux Ghosts
	table.insert(independent_names,"Fetch")		--faux Ghosts
	table.insert(independent_names,"Frame")		--faux Ghosts
	table.insert(independent_names,"Go")		--faux Ghosts
	table.insert(independent_names,"IO")		--faux Ghosts
	table.insert(independent_names,"Interface")	--faux Ghosts
	table.insert(independent_names,"Kilo")		--faux Ghosts
	table.insert(independent_names,"Modify")	--faux Ghosts
	table.insert(independent_names,"Pin")		--faux Ghosts
	table.insert(independent_names,"Program")	--faux Ghosts
	table.insert(independent_names,"Purge")		--faux Ghosts
	table.insert(independent_names,"Retrieve")	--faux Ghosts
	table.insert(independent_names,"Store")		--faux Ghosts
	table.insert(independent_names,"Unit")		--faux Ghosts
	table.insert(independent_names,"Wire")		--faux Ghosts
	table.insert(independent_names,"Chakak")		--faux Ktlitans
	table.insert(independent_names,"Chakik")		--faux Ktlitans
	table.insert(independent_names,"Chaklik")		--faux Ktlitans
	table.insert(independent_names,"Kaklak")		--faux Ktlitans
	table.insert(independent_names,"Kiklak")		--faux Ktlitans
	table.insert(independent_names,"Kitpak")		--faux Ktlitans
	table.insert(independent_names,"Kitplak")		--faux Ktlitans
	table.insert(independent_names,"Pipklat")		--faux Ktlitans
	table.insert(independent_names,"Piptik")		--faux Ktlitans
end
function setCufNames()
	cuf_names = {}
	table.insert(cuf_names,"Allegro")
	table.insert(cuf_names,"Bonafide")
	table.insert(cuf_names,"Brief Blur")
	table.insert(cuf_names,"Byzantine Born")
	table.insert(cuf_names,"Celeste")
	table.insert(cuf_names,"Chosen Charter")
	table.insert(cuf_names,"Conundrum")
	table.insert(cuf_names,"Crazy Clef")
	table.insert(cuf_names,"Curtail")
	table.insert(cuf_names,"Dark Demesne")
	table.insert(cuf_names,"Diminutive Drama")
	table.insert(cuf_names,"Draconian Destiny")
	table.insert(cuf_names,"Fickle Frown")
	table.insert(cuf_names,"Final Freeze")
	table.insert(cuf_names,"Fried Feather")
	table.insert(cuf_names,"Frozen Flare")
	table.insert(cuf_names,"Gaunt Gator")
	table.insert(cuf_names,"Hidden Harpoon")
	table.insert(cuf_names,"Intense Interest")
	table.insert(cuf_names,"Lackadaisical")
	table.insert(cuf_names,"Largess")
	table.insert(cuf_names,"Ointment")
	table.insert(cuf_names,"Plush Puzzle")
	table.insert(cuf_names,"Slick")
	table.insert(cuf_names,"Thumper")
	table.insert(cuf_names,"Torpid")
	table.insert(cuf_names,"Triple Take")
end
function setUsnNames()
	usn_names = {}
	table.insert(usn_names,"Belladonna")
	table.insert(usn_names,"Broken Dragon")
	table.insert(usn_names,"Burning Knave")
	table.insert(usn_names,"Corona Flare")
	table.insert(usn_names,"Daring the Deep")
	table.insert(usn_names,"Dragon's Cutlass")
	table.insert(usn_names,"Dragon's Sadness")
	table.insert(usn_names,"Elusive Doom")
	table.insert(usn_names,"Fast Flare")
	table.insert(usn_names,"Flying Flare")
	table.insert(usn_names,"Fulminate")
	table.insert(usn_names,"Gaseous Gale")
	table.insert(usn_names,"Golden Anger")
	table.insert(usn_names,"Greedy Promethean")
	table.insert(usn_names,"Happy Mynock")
	table.insert(usn_names,"Jimi Saru")
	table.insert(usn_names,"Jolly Roger")
	table.insert(usn_names,"Killer's Grief")
	table.insert(usn_names,"Mad Delight")
	table.insert(usn_names,"Nocturnal Neptune")
	table.insert(usn_names,"Obscure Orbiter")
	table.insert(usn_names,"Red Rift")
	table.insert(usn_names,"Rusty Belle")
	table.insert(usn_names,"Silver Pearl")
	table.insert(usn_names,"Sodden Corsair")
	table.insert(usn_names,"Solar Sailor")
	table.insert(usn_names,"Solar Secret")
	table.insert(usn_names,"Sun's Grief")
	table.insert(usn_names,"Tortuga Shadows")
	table.insert(usn_names,"Trinity")
	table.insert(usn_names,"Wayfaring Wind")
end
function setTsnNames()
	tsn_names = {}
	table.insert(tsn_names,"Aegis")
	table.insert(tsn_names,"Allegiance")
	table.insert(tsn_names,"Apollo")
	table.insert(tsn_names,"Ares")
	table.insert(tsn_names,"Casper")
	table.insert(tsn_names,"Charger")
	table.insert(tsn_names,"Dauntless")
	table.insert(tsn_names,"Demeter")
	table.insert(tsn_names,"Eagle")
	table.insert(tsn_names,"Excalibur")
	table.insert(tsn_names,"Falcon")
	table.insert(tsn_names,"Guardian")
	table.insert(tsn_names,"Hawk")
	table.insert(tsn_names,"Hera")
	table.insert(tsn_names,"Horizon")
	table.insert(tsn_names,"Hunter")
	table.insert(tsn_names,"Hydra")
	table.insert(tsn_names,"Intrepid")
	table.insert(tsn_names,"Lancer")
	table.insert(tsn_names,"Montgomery")
	table.insert(tsn_names,"Nemesis")
	table.insert(tsn_names,"Osiris")
	table.insert(tsn_names,"Pegasus")
	table.insert(tsn_names,"Phoenix")
	table.insert(tsn_names,"Poseidon")
	table.insert(tsn_names,"Raven")
	table.insert(tsn_names,"Sabre")
	table.insert(tsn_names,"Stalker")
	table.insert(tsn_names,"Valkyrie")
	table.insert(tsn_names,"Viper")
end
function setHumanNames()
	human_names = {}
	table.insert(human_names,"Andromeda")
	table.insert(human_names,"Angelica")
	table.insert(human_names,"Artemis")
	table.insert(human_names,"Barrier")
	table.insert(human_names,"Beauteous")
	table.insert(human_names,"Bliss")
	table.insert(human_names,"Bonita")
	table.insert(human_names,"Bounty Hunter")
	table.insert(human_names,"Bueno")
	table.insert(human_names,"Capitol")
	table.insert(human_names,"Castigator")
	table.insert(human_names,"Centurion")
	table.insert(human_names,"Chakalaka")
	table.insert(human_names,"Charity")
	table.insert(human_names,"Christmas")
	table.insert(human_names,"Chutzpah")
	table.insert(human_names,"Constantine")
	table.insert(human_names,"Crystal")
	table.insert(human_names,"Dauntless")
	table.insert(human_names,"Defiant")
	table.insert(human_names,"Discovery")
	table.insert(human_names,"Dorcas")
	table.insert(human_names,"Elite")
	table.insert(human_names,"Empathy")
	table.insert(human_names,"Enlighten")
	table.insert(human_names,"Enterprise")
	table.insert(human_names,"Escape")
	table.insert(human_names,"Exclamatory")
	table.insert(human_names,"Faith")
	table.insert(human_names,"Felicity")
	table.insert(human_names,"Firefly")
	table.insert(human_names,"Foresight")
	table.insert(human_names,"Forthright")
	table.insert(human_names,"Fortitude")
	table.insert(human_names,"Frankenstein")
	table.insert(human_names,"Gallant")
	table.insert(human_names,"Gladiator")
	table.insert(human_names,"Glider")
	table.insert(human_names,"Godzilla")
	table.insert(human_names,"Grind")
	table.insert(human_names,"Happiness")
	table.insert(human_names,"Hearken")
	table.insert(human_names,"Helena")
	table.insert(human_names,"Heracles")
	table.insert(human_names,"Honorable Intentions")
	table.insert(human_names,"Hope")
	table.insert(human_names,"Inertia")
	table.insert(human_names,"Ingenius")
	table.insert(human_names,"Injurious")
	table.insert(human_names,"Insight")
	table.insert(human_names,"Insufferable")
	table.insert(human_names,"Insurmountable")
	table.insert(human_names,"Intractable")
	table.insert(human_names,"Intransigent")
	table.insert(human_names,"Jenny")
	table.insert(human_names,"Juice")
	table.insert(human_names,"Justice")
	table.insert(human_names,"Jurassic")
	table.insert(human_names,"Karma Cast")
	table.insert(human_names,"Knockout")
	table.insert(human_names,"Leila")
	table.insert(human_names,"Light Fantastic")
	table.insert(human_names,"Livid")
	table.insert(human_names,"Lolita")
	table.insert(human_names,"Mercury")
	table.insert(human_names,"Moira")
	table.insert(human_names,"Mona Lisa")
	table.insert(human_names,"Nancy")
	table.insert(human_names,"Olivia")
	table.insert(human_names,"Ominous")
	table.insert(human_names,"Oracle")
	table.insert(human_names,"Orca")
	table.insert(human_names,"Pandemic")
	table.insert(human_names,"Parsimonious")
	table.insert(human_names,"Personal Prejudice")
	table.insert(human_names,"Porpoise")
	table.insert(human_names,"Pristine")
	table.insert(human_names,"Purple Passion")
	table.insert(human_names,"Renegade")
	table.insert(human_names,"Revelation")
	table.insert(human_names,"Rosanna")
	table.insert(human_names,"Rozelle")
	table.insert(human_names,"Sainted Gramma")
	table.insert(human_names,"Shazam")
	table.insert(human_names,"Starbird")
	table.insert(human_names,"Stargazer")
	table.insert(human_names,"Stile")
	table.insert(human_names,"Streak")
	table.insert(human_names,"Take Flight")
	table.insert(human_names,"Taskmaster")
	table.insert(human_names,"The Way")
	table.insert(human_names,"Tornado")
	table.insert(human_names,"Trailblazer")
	table.insert(human_names,"Trident")
	table.insert(human_names,"Triple Threat")
	table.insert(human_names,"Turnabout")
	table.insert(human_names,"Undulator")
	table.insert(human_names,"Urgent")
	table.insert(human_names,"Victoria")
	table.insert(human_names,"Wee Bit")
	table.insert(human_names,"Wet Willie")
end
function setKtlitanNames()
	ktlitan_names = {}
	table.insert(ktlitan_names,"Chaklak")
	table.insert(ktlitan_names,"Chaklit")
	table.insert(ktlitan_names,"Chitlat")
	table.insert(ktlitan_names,"Chitlit")
	table.insert(ktlitan_names,"Chitpik")
	table.insert(ktlitan_names,"Chokpit")
	table.insert(ktlitan_names,"Choktip")
	table.insert(ktlitan_names,"Choktot")
	table.insert(ktlitan_names,"Chotlap")
	table.insert(ktlitan_names,"Chotlat")
	table.insert(ktlitan_names,"Chotlot")
	table.insert(ktlitan_names,"Kaftlit")
	table.insert(ktlitan_names,"Kaplak")
	table.insert(ktlitan_names,"Kaplat")
	table.insert(ktlitan_names,"Kichpak")
	table.insert(ktlitan_names,"Kichpik")
	table.insert(ktlitan_names,"Kichtak")
	table.insert(ktlitan_names,"Kiftlat")
	table.insert(ktlitan_names,"Kiftak")
	table.insert(ktlitan_names,"Kiftakt")
	table.insert(ktlitan_names,"Kiftlikt")
	table.insert(ktlitan_names,"Kiftlit")
	table.insert(ktlitan_names,"Kiklat")
	table.insert(ktlitan_names,"Kiklik")
	table.insert(ktlitan_names,"Kiklit")
	table.insert(ktlitan_names,"Kiplit")
	table.insert(ktlitan_names,"Kiptot")
	table.insert(ktlitan_names,"Kitchip")
	table.insert(ktlitan_names,"Kitchit")
	table.insert(ktlitan_names,"Kitlaft")
	table.insert(ktlitan_names,"Kitlak")
	table.insert(ktlitan_names,"Kitlakt")
	table.insert(ktlitan_names,"Kitlich")
	table.insert(ktlitan_names,"Kitlik")
	table.insert(ktlitan_names,"Kitpok")
	table.insert(ktlitan_names,"Koptich")
	table.insert(ktlitan_names,"Koptlik")
	table.insert(ktlitan_names,"Kotplat")
	table.insert(ktlitan_names,"Pachtik")
	table.insert(ktlitan_names,"Paflak")
	table.insert(ktlitan_names,"Paftak")
	table.insert(ktlitan_names,"Paftik")
	table.insert(ktlitan_names,"Pakchit")
	table.insert(ktlitan_names,"Pakchok")
	table.insert(ktlitan_names,"Paktok")
	table.insert(ktlitan_names,"Piklit")
	table.insert(ktlitan_names,"Piflit")
	table.insert(ktlitan_names,"Piftik")
	table.insert(ktlitan_names,"Pitlak")
	table.insert(ktlitan_names,"Pochkik")
	table.insert(ktlitan_names,"Pochkit")
	table.insert(ktlitan_names,"Poftlit")
	table.insert(ktlitan_names,"Pokchap")
	table.insert(ktlitan_names,"Pokchat")
	table.insert(ktlitan_names,"Poktat")
	table.insert(ktlitan_names,"Poklit")
	table.insert(ktlitan_names,"Potlak")
	table.insert(ktlitan_names,"Tachpik")
	table.insert(ktlitan_names,"Tachpit")
	table.insert(ktlitan_names,"Taklit")
	table.insert(ktlitan_names,"Talkip")
	table.insert(ktlitan_names,"Talpik")
	table.insert(ktlitan_names,"Taltkip")
	table.insert(ktlitan_names,"Taltkit")
	table.insert(ktlitan_names,"Tichpik")
	table.insert(ktlitan_names,"Tikplit")
	table.insert(ktlitan_names,"Tiklich")
	table.insert(ktlitan_names,"Tiklip")
	table.insert(ktlitan_names,"Tiklip")
	table.insert(ktlitan_names,"Tilpit")
	table.insert(ktlitan_names,"Tiltlit")
	table.insert(ktlitan_names,"Tochtik")
	table.insert(ktlitan_names,"Tochkap")
	table.insert(ktlitan_names,"Tochpik")
	table.insert(ktlitan_names,"Tochpit")
	table.insert(ktlitan_names,"Tochkit")
	table.insert(ktlitan_names,"Totlop")
	table.insert(ktlitan_names,"Totlot")
end
function setArlenianNames()
	arlenian_names = {}
	table.insert(arlenian_names,"Balura")
	table.insert(arlenian_names,"Baminda")
	table.insert(arlenian_names,"Belarne")
	table.insert(arlenian_names,"Bilanna")
	table.insert(arlenian_names,"Calonda")
	table.insert(arlenian_names,"Carila")
	table.insert(arlenian_names,"Carulda")
	table.insert(arlenian_names,"Charma")
	table.insert(arlenian_names,"Choralle")
	table.insert(arlenian_names,"Corlune")
	table.insert(arlenian_names,"Damilda")
	table.insert(arlenian_names,"Dilenda")
	table.insert(arlenian_names,"Dorla")
	table.insert(arlenian_names,"Elena")
	table.insert(arlenian_names,"Emerla")
	table.insert(arlenian_names,"Famelda")
	table.insert(arlenian_names,"Finelle")
	table.insert(arlenian_names,"Fontaine")
	table.insert(arlenian_names,"Forlanne")
	table.insert(arlenian_names,"Gendura")
	table.insert(arlenian_names,"Gilarne")
	table.insert(arlenian_names,"Grizelle")
	table.insert(arlenian_names,"Hilerna")
	table.insert(arlenian_names,"Homella")
	table.insert(arlenian_names,"Jarille")
	table.insert(arlenian_names,"Jindarre")
	table.insert(arlenian_names,"Juminde")
	table.insert(arlenian_names,"Kalena")
	table.insert(arlenian_names,"Kimarna")
	table.insert(arlenian_names,"Kolira")
	table.insert(arlenian_names,"Lanerra")
	table.insert(arlenian_names,"Lamura")
	table.insert(arlenian_names,"Lavila")
	table.insert(arlenian_names,"Lavorna")
	table.insert(arlenian_names,"Lendura")
	table.insert(arlenian_names,"Limala")
	table.insert(arlenian_names,"Lorelle")
	table.insert(arlenian_names,"Mavelle")
	table.insert(arlenian_names,"Menola")
	table.insert(arlenian_names,"Merla")
	table.insert(arlenian_names,"Mitelle")
	table.insert(arlenian_names,"Mivelda")
	table.insert(arlenian_names,"Morainne")
	table.insert(arlenian_names,"Morda")
	table.insert(arlenian_names,"Morlena")
	table.insert(arlenian_names,"Nadela")
	table.insert(arlenian_names,"Naminda")
	table.insert(arlenian_names,"Nilana")
	table.insert(arlenian_names,"Nurelle")
	table.insert(arlenian_names,"Panela")
	table.insert(arlenian_names,"Pelnare")
	table.insert(arlenian_names,"Pilera")
	table.insert(arlenian_names,"Povelle")
	table.insert(arlenian_names,"Quilarre")
	table.insert(arlenian_names,"Ramila")
	table.insert(arlenian_names,"Renatha")
	table.insert(arlenian_names,"Rendelle")
	table.insert(arlenian_names,"Rinalda")
	table.insert(arlenian_names,"Riderla")
	table.insert(arlenian_names,"Rifalle")
	table.insert(arlenian_names,"Samila")
	table.insert(arlenian_names,"Salura")
	table.insert(arlenian_names,"Selinda")
	table.insert(arlenian_names,"Simanda")
	table.insert(arlenian_names,"Sodila")
	table.insert(arlenian_names,"Talinda")
	table.insert(arlenian_names,"Tamierre")
	table.insert(arlenian_names,"Telorre")
	table.insert(arlenian_names,"Terila")
	table.insert(arlenian_names,"Turalla")
	table.insert(arlenian_names,"Valerna")
	table.insert(arlenian_names,"Vilanda")
	table.insert(arlenian_names,"Vomera")
	table.insert(arlenian_names,"Wanelle")
	table.insert(arlenian_names,"Warenda")
	table.insert(arlenian_names,"Wilena")
	table.insert(arlenian_names,"Wodarla")
	table.insert(arlenian_names,"Yamelda")
	table.insert(arlenian_names,"Yelanda")
end
function tableRemoveRandom(array)
--	Remove random element from array and return it.
	-- Returns nil if the array is empty,
	-- analogous to `table.remove`.
    local array_item_count = #array
    if array_item_count == 0 then
        return nil
    end
    local selected_item = math.random(array_item_count)
    array[selected_item], array[array_item_count] = array[array_item_count], array[selected_item]
    return table.remove(array)
end
function tableSelectRandom(array)
	local array_item_count = #array
    if array_item_count == 0 then
        return nil
    end
	return array[math.random(1,#array)]	
end
function playerShipDamage(self,instigator)
	string.format("")
	if instigator ~= nil then
		local bi = 0	--beam index
		local beam_damage = 0
		if instigator.shield_drain_beam_factor ~= nil then
			if self:getShieldCount() > 0 then
				if self:getShieldsActive() then
					repeat
						beam_damage = beam_damage + instigator:getBeamWeaponDamage(bi)
						bi = bi + 1
					until(instigator:getBeamWeaponRange(bi) < 1)
					beam_damage = beam_damage / bi * instigator.shield_drain_beam_factor	--average multiplied by factor
					if self:getShieldCount() > 1 then
						self:setShields(math.max(self:getShieldLevel(0) - beam_damage,0),math.max(self:getShieldLevel(1) - beam_damage,0))
					else
						self:setShields(math.max(self:getShieldLevel(0) - beam_damage,0))
					end
					local template = self:getTypeName()
					local slf_x, slf_y = self:getPosition()
					local exp_size = shipTemplateDistance[template]
					if exp_size == nil then
						print("nil from shipTemplateDistance for template:",template)
						exp_size = 400
					end
					local explosion_size = shipTemplateDistance[template]
					if explosion_size == nil then
						explosion_size = 500
					end
					ElectricExplosionEffect():setSize(explosion_size):setOnRadar(true):setPosition(slf_x, slf_y)
				end
			end
		end
		if instigator.skip_beam_factor ~= nil then
			bi = 0
			beam_damage = 0
			local beam_range = 0
			repeat
				beam_damage = beam_damage + instigator:getBeamWeaponDamage(bi)
				beam_range = beam_range + instigator:getBeamWeaponRange(bi)
				bi = bi + 1
			until(instigator:getBeamWeaponRange(bi) < 1)
			beam_damage = beam_damage / bi * instigator.skip_beam_factor / 2	--average multiplied by factor
			beam_range = beam_range / bi 
			if distance_diagnostic then
				print("distance_diagnostic 9 self:",self,"instigator:",instigator)
			end
			local dist = distance(self,instigator)
			if dist < beam_range then
				self:setHull(math.max(self:getHull() - beam_damage,0))
			end
		end
	end
end
function npcShipDamage(self, instigator)
	--Note: this function currently only applies to ships with shields, so it's not on ships that don't have shields
	string.format("")	--serious proton needs a global context
	if self.adjust_shield_frequency_automatically ~= nil and self.adjust_shield_frequency_automatically then
		if instigator ~= nil then
			if instigator:getBeamWeaponRange(0) > 1 then
				self:setShieldsFrequency(instigator:getBeamFrequency())
			end
		end
	end
	local tactical_hop_eval = random(1,100)
	if self.tactical_hop ~= nil and tactical_hop_eval <= self.tactical_hop_chance then
		local hacked_hop = self.tactical_hop_chance
		if self:hasSystem("jumpdrive") then
			hacked_hop = hacked_hop - (hacked_hop *  self:getSystemHackedLevel("jumpdrive") / 2)
		elseif self:hasSystem("warp") then
			hacked_hop = hacked_hop - (hacked_hop *  self:getSystemHackedLevel("warp") / 2)
		else
			hacked_hop = hacked_hop - (hacked_hop *  self:getSystemHackedLevel("impulse") / 2)
		end
		if tactical_hop_eval < hacked_hop then
			if instigator ~= nil then
				if instigator:isEnemy(self) then
					local self_x, self_y = self:getPosition()
					local instigator_x, instigator_y = instigator:getPosition()
					local hop_axis = angleFromVectorNorth(instigator_x,instigator_y,self_x,self_y)
					local hop_x = 0
					local hop_y = 0
					local hop_range = 4000
					local template_name = self:getTypeName()
					if self.tactical_hop == 1 or self.tactical_hop == 2 then
						hop_x, hop_y = vectorFromAngleNorth(hop_axis,4000)
						self:setPosition(instigator_x + hop_x, instigator_y + hop_y)
					end
					if self.tactical_hop == 3 or self.tactical_hop == 4 then
						if ship_template[template_name] ~= nil and ship_template[template_name].hop_range ~= nil then
							hop_range = ship_template[template_name].hop_range
						end
						hop_x, hop_y = vectorFromAngleNorth(hop_axis,hop_range)
						self:setPosition(instigator_x + hop_x, instigator_y + hop_y)
					end
					if self.tactical_hop == 5 then
						if self:getHull() < self:getHullMax()/2 then
							hop_range = 5000
						else
							if ship_template[template_name] ~= nil and ship_template[template_name].hop_range ~= nil then
								hop_range = ship_template[template_name].hop_range
							end
						end
						hop_x, hop_y = vectorFromAngleNorth(hop_axis,hop_range)
						self:setPosition(instigator_x + hop_x, instigator_y + hop_y)
					end
					if self.tactical_hop == 2 or self.tactical_hop == 4 or self.tactical_hop == 5 then
						local hop_angle = (hop_axis + 180) % 360
						if ship_template[template_name] ~= nil and ship_template[template_name].hop_angle ~= nil then
							hop_angle = (hop_angle + ship_template[template_name].hop_angle) % 360
						end
						self:setHeading(hop_angle)	
					end
				end
			end
		end
	end
	if self.spiky_spin ~= nil and self.spiky_spin_active == nil and self.spiky_spin_cooling == nil then
		if math.random(1,100) < self.spiky_spin then
			self.spiky_spin_normal = self:getRotationMaxSpeed()
			self:setRotationMaxSpeed(self.spiky_spin_normal * 3)
			self.spiky_spin_active = getScenarioTime() + 5
			self.spiky_spin_cooling = getScenarioTime() + 35
			table.insert(spiky_spin_ships,self)
		end
	end
	if self.boost_impulse_factor ~= nil and self.boost_impulse_active == nil and self.boost_impulse_cooling == nil then
		local desperation = (1 - self:getHull()/self:getHullMax())*100
		if math.random(1,100) + desperation > 50 then
			self.boost_impulse_normal = self:getImpulseMaxSpeed()
			self:setImpulseMaxSpeed(self:getImpulseMaxSpeed()*self.boost_impulse_degree_factor)
			self.boost_impulse_active = getScenarioTime() + self.boost_impulse_time_factor
			self.boost_impulse_cooling = getScenarioTime() + (self.boost_impulse_time_factor * 2)
			table.insert(impulse_boost_ships,self)
		end
	end
end
function modifiedValue()
	local modChance = random(1,100)
	local modValue = 1
	if fleetChange == "improved" then
		if modChance <= fleetChangeChance then
			modValue = modValue + random(10,25)/100
		end
	elseif fleetChange == "degraded" then
		if modChance <= fleetChangeChance then
			modValue = modValue - random(10,25)/100
		end
	else	--tinkered
		if modChance <= fleetChangeChance then
			if random(1,100) <= 50 then
				modValue = modValue + random(10,25)/100
			else
				modValue = modValue - random(10,25)/100
			end
		end
	end
	return modValue
end
function addEnhancementToScienceDatabase(enhancement_type)
	local enhancement_db = queryScienceDatabase("Ships","Enhancements")
	if enhancement_db == nil then
		addEnhancementDatabaseEntry()
	end
	enhancement_db = queryScienceDatabase("Ships","Enhancements")
	if enhancement_type == "Shield Drain Beam" then
		local shield_drain_beam_db = queryScienceDatabase("Ships","Enhancements","Shield Drain Beam")
		if shield_drain_beam_db == nil then
			enhancement_db:addEntry("Shield Drain Beam")
			shield_drain_beam_db = queryScienceDatabase("Ships","Enhancements","Shield Drain Beam")
			shield_drain_beam_db:setLongDescription("If a ship is equipped with Shield Drain Beam capability, their beam weapons have been enhanced to particularly negatively impact the target's shields. The damage is applied to all shield arcs and reduces the shield charge. The degree of impact depends on the shield drain factor. In addition to the normal beam damage, the draining damage is the normal beam damage multiplied by the factor applied to all shield arcs.")
		end
	elseif enhancement_type == "Boost Impulse" then
		local boost_impulse_db = queryScienceDatabase("Ships","Enhancements","Boost Impulse")
		if boost_impulse_db == nil then
			enhancement_db:addEntry("Boost Impulse")
			boost_impulse_db = queryScienceDatabase("Ships","Enhancements","Boost Impulse")
			boost_impulse_db:setLongDescription("If a ship is equipped with Boost Impulse, it can temporarily increase its maximum impulse speed, something learned from observing CUF ships. The numeric expression indicates seconds x speed multiplier.")
		end
	elseif enhancement_type == "Skip Beam" then
		local skip_beam_db = queryScienceDatabase("Ships","Enhancements","Skip Beam")
		if skip_beam_db == nil then
			enhancement_db:addEntry("Skip Beam")
			skip_beam_db = queryScienceDatabase("Ships","Enhancements","Skip Beam")
			skip_beam_db:setLongDescription("If a ship is equipped with a Skip Beam, it can directly damage the target ship hull regardless of the state of the shields. The beam is enhanced with intertwined jump characteristics allowing it to bypass the shields. The damage applied to the hull equates to the normal damage multiplied by the skip beam factor divided by two.")
		end
	elseif enhancement_type == "Shield Frequency Adjuster" then
		local shield_frequency_adjuster_db = queryScienceDatabase("Ships","Enhancements","Shield Frequency Adjuster")
		if shield_frequency_adjuster_db == nil then
			enhancement_db:addEntry("Shield Frequency Adjuster")
			shield_frequency_adjuster_db = queryScienceDatabase("Ships","Enhancements","Shield Frequency Adjuster")
			shield_frequency_adjuster_db:setLongDescription("If a ship is equipped with Shield Frequency Adjusters, their shields automatically adjust to the best defensive shield frequency during combat.")
		end
	elseif enhancement_type == "Tactical Hop" then
		local tactical_hop_db = queryScienceDatabase("Ships","Enhancements","Tactical Hop")
		if tactical_hop_db == nil then
			enhancement_db:addEntry("Tactical Hop")
			tactical_hop_db = queryScienceDatabase("Ships","Enhancements","Tactical Hop")
			tactical_hop_db:setLongDescription("If a ship is equipped with Tactical Hop, they have a rapid-acting quasi-jump drive under computer control that combat conditions can trigger. The combat computer action taken depends on the rating (the integer portion of the number given in the Science description). The likelihood of the computer taking the hop action depends on the reliability (the fractional portion of the number given in the Science description).\n\nRating actions:\n1: Hop to the other side of the target at range 4U.\n2: Hop to the other side of the target at range 4U and face weapons to target.\n3: Hop to the other side of the target at good weapons range.\n4: Hop to the other side of the target at good weapons range and face weapons to target.\n5: If hull damage at 50% or higher, hop to the other side of the target at range 5U otherwise hop to the other side of the target at good weapons range. In either case, face weapons to target.")
		end
	elseif enhancement_type == "Spiky Spin" then
		local spiky_spin_db = queryScienceDatabase("Ships","Enhancements","Spiky Spin")
		if spiky_spin_db == nil then
			enhancement_db:addEntry("Spiky Spin")
			spiky_spin_db = queryScienceDatabase("Ships","Enhancements","Spiky Spin")
			spiky_spin_db:setLongDescription("If a ship is equipped with Spiky Spin, they can spike up the performance of their maneuvering systems temporarily under combat conditions. This allows them to spin rapidly to bring weapons to bear on a desired target. The number given in the Science description represents the likelihood that the spike will function when desired.")
		end
	elseif enhancement_type == "Point Defense Cannon" then
		local pdc_db = queryScienceDatabase("Ships","Enhancements","Point Defense Cannon")
		if pdc_db == nil then
			enhancement_db:addEntry("Point Defense Cannon")
			pdc_db = queryScienceDatabase("Ships","Enhancements","Point Defense Cannon")
			pdc_db:setLongDescription("If a ship is equipped with a Point Defense Cannon, it can shoot down incoming missiles if the targeting computer can get a lock. The factor shown represents the percentage chance of locking on to a missile based on the targeting computer's capability.")
		end
	elseif enhancement_type == "Cyber Attack" then
		local cyber_attack_db = queryScienceDatabase("Ships","Enhancements","Cyber Attack")
		if cyber_attack_db == nil then
			enhancement_db:addEntry("Cyber Attack")
			cyber_attack_db = queryScienceDatabase("Ships","Enhancements","Cyber Attack")
			cyber_attack_db:setLongDescription("If a ship is equipped with Cyber Attack, it can hack various systems on your ship. When assessing this capability the integer portion of the number represents the interval between attacks in seconds. The fractional portion of the number represents the chance of success.")
		end
	end
end
function setShipEnhancement(ship)
	local template_name = ship:getTypeName()
	local enhancements = {}
	if ship_template ~= nil and template_name ~= nil and ship_template[template_name] ~= nil then
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			if ship:getBeamWeaponRange(0) > 1 then
				ship.shield_drain_beam_factor = beam_factors[math.random(1,#beam_factors)]
				table.insert(enhancements,string.format("Shield Drain Beam. Factor:%i",ship.shield_drain_beam_factor))
				addEnhancementToScienceDatabase("Shield Drain Beam")
			end
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			if ship:getBeamWeaponRange(0) > 1 then
				ship.pdc_factor = pdc_factors[math.random(1,#pdc_factors)]
				table.insert(pdc_ships,ship)
				table.insert(enhancements,string.format("Point Defense Cannon. Factor %i%%",ship.pdc_factor))
				addEnhancementToScienceDatabase("Point Defense Cannon")
			end
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			if ship:getBeamWeaponRange(0) > 1 then
				ship.skip_beam_factor = math.random(1,5)
				table.insert(enhancements,string.format("Skip Beam. Factor:%i",ship.skip_beam_factor))
				addEnhancementToScienceDatabase("Skip Beam")
			end
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			if ship:hasSystem("frontshield") then
				ship.adjust_shield_frequency_automatically = true
				table.insert(enhancements,"Automatic Shield Frequency Adjusters")
				addEnhancementToScienceDatabase("Shield Frequency Adjuster")
			end
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			ship.tactical_hop = math.random(1,5)
			ship.tactical_hop_chance = math.random(25,50)
			table.insert(enhancements,string.format("Tactical Hop %i.%i",ship.tactical_hop,ship.tactical_hop_chance))
			addEnhancementToScienceDatabase("Tactical Hop")
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			ship.spiky_spin = math.random(25,50)
			table.insert(enhancements,string.format("Spiky Spin %i",ship.spiky_spin))
			addEnhancementToScienceDatabase("Spiky Spin")
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			ship.boost_impulse_degree_factor = impulse_boost_degree_factors[math.random(1,#impulse_boost_degree_factors)]
			ship.boost_impulse_time_factor = impulse_boost_time_factors[math.random(1,#impulse_boost_time_factors)]
			ship.boost_impulse_factor = string.format("%ix%s",ship.boost_impulse_time_factor,ship.boost_impulse_degree_factor)
			table.insert(enhancements,string.format("Boost Impulse %s",ship.boost_impulse_factor))
			addEnhancementToScienceDatabase("Boost Impulse")
		end
		if random(1,1000) < ship_template[template_name].strength * ship_enhancement_factor then
			ship.cyber_attack_factor = cyber_attack_factors[math.random(1,#cyber_attack_factors)]
			ship.cyber_attack_interval = cyber_attack_intervals[math.random(1,#cyber_attack_intervals)]
			table.insert(cyber_attack_ships,ship)
			table.insert(enhancements,string.format("Cyber Attack. Factor %s.%s",ship.cyber_attack_interval,ship.cyber_attack_factor))
			addEnhancementToScienceDatabase("Cyber Attack")
		end
	end
	if #enhancements > 0 then
		local msg_out = string.format("Ship %s (%s) has the following special enhancement(s):",ship:getCallSign(),ship:getTypeName())
		for _, enhancement in ipairs(enhancements) do
			msg_out = string.format("%s\n    %s",msg_out,enhancement)
		end
		if enhancement_warning_message then
			msg_out = msg_out .. "\nGo to +Order Ship > +Specials to make adjustments"
			addGMMessage(msg_out)
		end
		print(msg_out)
	end
end
function addEnhancementDatabaseEntry()
	local ship_db = queryScienceDatabase("Ships")
	ship_db:addEntry("Enhancements")
	local enhancement_db = queryScienceDatabase("Ships","Enhancements")
	enhancement_db:setLongDescription("Ship enhancements give the ship benefits during combat over and above those things possible with typical assistance from Engineering")
end
function stockTemplate(enemyFaction,template)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate(template):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	if ship_template[template].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template[template].short_range_radar)
	end
	setBeamColor(ship)
	ship:onTakingDamage(npcShipDamage)
	return ship
end
--------------------------------------------------------------------------------------------
--	Additional enemy ships with some modifications from the original template parameters  --
--------------------------------------------------------------------------------------------
function phobosR2(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Phobos R2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Phobos R2"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Phobos R2")
	ship:setWeaponTubeDirection(0,0)	--straight tubes vs angled
	ship:setWeaponTubeDirection(1,0)	
	ship:setImpulseMaxSpeed(55)			--slower impulse (vs 60)
	ship:setRotationMaxSpeed(15)		--faster maneuver (vs 10)
	local phobos_r2_db = queryScienceDatabase("Ships","Frigate","Phobos R2")
	if phobos_r2_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Phobos R2")
		phobos_r2_db = queryScienceDatabase("Ships","Frigate","Phobos R2")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			phobos_r2_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Phobos R2 model is very similar to the Phobos T3. It's got a faster turn speed, but straight tubes instead of angled tubes",
			{
				{key = "Tube 0", value = "60 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "60 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"AtlasHeavyFighterYellow"
		)
		--[[
		phobos_r2_db:setLongDescription("The Phobos R2 model is very similar to the Phobos T3. It's got a faster turn speed, but only one missile tube")
		phobos_r2_db:setKeyValue("Class","Frigate")
		phobos_r2_db:setKeyValue("Sub-class","Cruiser")
		phobos_r2_db:setKeyValue("Size","80")
		phobos_r2_db:setKeyValue("Shield","50/40")
		phobos_r2_db:setKeyValue("Hull","70")
		phobos_r2_db:setKeyValue("Move speed","3.3 U/min")
		phobos_r2_db:setKeyValue("Turn speed","15.0 deg/sec")
		phobos_r2_db:setKeyValue("Beam weapon -15:90","6.0 Dmg / 8.0 sec")
		phobos_r2_db:setKeyValue("Beam weapon 15:90","6.0 Dmg / 8.0 sec")
		phobos_r2_db:setKeyValue("Tube 0","60 sec")
		phobos_r2_db:setKeyValue("Storage Homing","6")
		phobos_r2_db:setKeyValue("Storage HVLI","20")
		phobos_r2_db:setImage("radar/cruiser.png")
		--]]
	end
	return ship
end
function hornetMV52(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("MT52 Hornet"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["MV52 Hornet"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["MV52 Hornet"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("MV52 Hornet")
--						 Arc, Dir, 	Rng, Cyc, Dmg
	ship:setBeamWeapon(0, 30,	0, 1000, 4.0, 3.0)	--longer and stronger beam (vs 700 & 2)
	ship:setRotationMaxSpeed(31)					--faster maneuver (vs 30)
	ship:setImpulseMaxSpeed(130)					--faster impulse (vs 120)
	local hornet_mv52_db = queryScienceDatabase("Ships","Starfighter","MV52 Hornet")
	if hornet_mv52_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("MV52 Hornet")
		hornet_mv52_db = queryScienceDatabase("Ships","Starfighter","MV52 Hornet")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MT52 Hornet"),	--base ship database entry
			hornet_mv52_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The MV52 Hornet is very similar to the MT52 and MU52 models. The beam does more damage than both of the other Hornet models, it's max impulse speed is faster than both of the other Hornet models, it turns faster than the MT52, but slower than the MU52",
			nil,
			nil,
			"WespeScoutYellow"
		)
		--[[
		hornet_mv52_db:setLongDescription("The MV52 Hornet is very similar to the MT52 and MU52 models. The beam does more damage than both of the other Hornet models, it's max impulse speed is faster than both of the other Hornet models, it turns faster than the MT52, but slower than the MU52")
		hornet_mv52_db:setKeyValue("Class","Starfighter")
		hornet_mv52_db:setKeyValue("Sub-class","Interceptor")
		hornet_mv52_db:setKeyValue("Size","30")
		hornet_mv52_db:setKeyValue("Shield","20")
		hornet_mv52_db:setKeyValue("Hull","30")
		hornet_mv52_db:setKeyValue("Move speed","7.8 U/min")
		hornet_mv52_db:setKeyValue("Turn speed","31.0 deg/sec")
		hornet_mv52_db:setKeyValue("Beam weapon 0:30","3.0 Dmg / 4.0 sec")
		hornet_mv52_db:setImage("radar/fighter.png")
		--]]
	end
	return ship
end
function fiendG3(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Gunship"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Fiend G3"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Fiend G3"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Fiend G3")
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,35000)
	local fiend_g3_db = queryScienceDatabase("Ships","Frigate","Fiend G3")
	if fiend_g3_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Fiend G3")
		fiend_g3_db = queryScienceDatabase("Ships","Frigate","Fiend G3")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Gunship"),	--base ship database entry
			fiend_g3_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Fiend G3 was the first model produced by Conversions R Us. They got a good deal on a number of used Gunships. They added a cheap jump drive to the Gunship and viola! they made the Fiend G3. Like the Gunship, it has a homing missile tube and beams to readily take down weaker ships. With the jump drive, it becomes quite a bit more dangerous than the stock Gunship.",
			{
				{key = "Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
			},
			"5 - 35 U",		--jump range
			"battleship_destroyer_4_upgraded"
		)
		--[[
		fiend_g3_db:setLongDescription("The Fiend G3 was the first model produced by Conversions R Us. They got a good deal on a number of used Gunships. They added a cheap jump drive to the Gunship and viola! they made the Fiend G3. Like the Gunship, it has a homing missile tube and beams to readily take down weaker ships. With the jump drive, it becomes quite a bit more dangerous than the stock Gunship.")
		fiend_g3_db:setKeyValue("Class","Frigate")
		fiend_g3_db:setKeyValue("Sub-class","Gunship")
		fiend_g3_db:setKeyValue("Size","200")
		fiend_g3_db:setKeyValue("Shield","100/80/80")
		fiend_g3_db:setKeyValue("Hull","100")
		fiend_g3_db:setKeyValue("Move speed","3.6 U/min")
		fiend_g3_db:setKeyValue("Turn speed","5.0 deg/sec")
		fiend_g3_db:setKeyValue("Jump Range","5 - 35 U")
		fiend_g3_db:setKeyValue("Beam weapon -15:50","8.0 Dmg / 6.0 sec")
		fiend_g3_db:setKeyValue("Beam weapon 15:50","8.0 Dmg / 6.0 sec")
		fiend_g3_db:setKeyValue("Tube 0","8 sec")
		fiend_g3_db:setKeyValue("Storage Homing","4")
		fiend_g3_db:setImage("radar/adv_gunship.png")
		--]]
	end
	return ship
end
function fiendG4(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Gunship"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Fiend G4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Fiend G4"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Fiend G4")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(800)
	local fiend_g4_db = queryScienceDatabase("Ships","Frigate","Fiend G4")
	if fiend_g4_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Fiend G4")
		fiend_g4_db = queryScienceDatabase("Ships","Frigate","Fiend G4")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Gunship"),	--base ship database entry
			fiend_g4_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Fiend G4 was among the first models produced by Conversions R Us. They got a good deal on a number of used Gunships. They added a cheap warp drive to the Gunship and viola! they made the Fiend G4. Like the Gunship, it has a homing missile tube and beams to readily take down weaker ships. With the warp drive, it becomes quite a bit more dangerous than the stock Gunship.",
			{
				{key = "Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"battleship_destroyer_4_upgraded"
		)
		--[[
		fiend_g4_db:setLongDescription("The Fiend G4 was among the first models produced by Conversions R Us. They got a good deal on a number of used Gunships. They added a cheap warp drive to the Gunship and viola! they made the Fiend G4. Like the Gunship, it has a homing missile tube and beams to readily take down weaker ships. With the warp drive, it becomes quite a bit more dangerous than the stock Gunship.")
		fiend_g4_db:setKeyValue("Class","Frigate")
		fiend_g4_db:setKeyValue("Sub-class","Gunship")
		fiend_g4_db:setKeyValue("Size","200")
		fiend_g4_db:setKeyValue("Shield","100/80/80")
		fiend_g4_db:setKeyValue("Hull","100")
		fiend_g4_db:setKeyValue("Move speed","3.6 U/min")
		fiend_g4_db:setKeyValue("Turn speed","5.0 deg/sec")
		fiend_g4_db:setKeyValue("Warp Speed","48.0 U/min")
		fiend_g4_db:setKeyValue("Beam weapon -15:50","8.0 Dmg / 6.0 sec")
		fiend_g4_db:setKeyValue("Beam weapon 15:50","8.0 Dmg / 6.0 sec")
		fiend_g4_db:setKeyValue("Tube 0","8 sec")
		fiend_g4_db:setKeyValue("Storage Homing","4")
		fiend_g4_db:setImage("radar/adv_gunship.png")
		--]]
	end
	return ship
end
function fiendG5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adv. Gunship"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Fiend G5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Fiend G5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Fiend G5")
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,35000)
	local fiend_g5_db = queryScienceDatabase("Ships","Frigate","Fiend G5")
	if fiend_g5_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Fiend G5")
		fiend_g5_db = queryScienceDatabase("Ships","Frigate","Fiend G5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Gunship"),	--base ship database entry
			fiend_g5_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"With the success of the Fiend G3 and G4 models, Conversions R Us continued their streak with the Fiend G5. They acquired some used Advanced Gunships and added cheap jump drives to them and made the Fiend G5. Like the Advanced Gunship, it has two homing missile tubes and beams to readily take down weaker ships. The jump drive makes it all the more dangerous.",
			{
				{key = "Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
				{key = " Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
			},
			"5 - 35 U",		--jump range
			"battleship_destroyer_4_upgraded"
		)
		--[[
		fiend_g5_db:setLongDescription("With the success of the Fiend G3 and G4 models, Conversions R Us continued their streak with the Fiend G5. They acquired some used Advanced Gunships and added cheap jump drives to them and made the Fiend G5. Like the Advanced Gunship, it has two homing missile tubes and beams to readily take down weaker ships. The jump drive makes it all the more dangerous.")
		fiend_g5_db:setKeyValue("Class","Frigate")
		fiend_g5_db:setKeyValue("Sub-class","Gunship")
		fiend_g5_db:setKeyValue("Size","200")
		fiend_g5_db:setKeyValue("Shield","100/80/80")
		fiend_g5_db:setKeyValue("Hull","100")
		fiend_g5_db:setKeyValue("Move speed","3.6 U/min")
		fiend_g5_db:setKeyValue("Turn speed","5.0 deg/sec")
		fiend_g5_db:setKeyValue("Jump Range","5 - 35 U")
		fiend_g5_db:setKeyValue("Beam weapon -15:50","8.0 Dmg / 6.0 sec")
		fiend_g5_db:setKeyValue("Beam weapon 15:50","8.0 Dmg / 6.0 sec")
		fiend_g5_db:setKeyValue("Tube 0","8 sec")
		fiend_g5_db:setKeyValue(" Tube 0","8 sec")
		fiend_g5_db:setKeyValue("Storage Homing","4")
		fiend_g5_db:setImage("radar/adv_gunship.png")
		--]]
	end
	return ship
end
function fiendG6(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adv. Gunship"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Fiend G6"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Fiend G6"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Fiend G6")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(800)
	local fiend_g6_db = queryScienceDatabase("Ships","Frigate","Fiend G6")
	if fiend_g6_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Fiend G6")
		fiend_g6_db = queryScienceDatabase("Ships","Frigate","Fiend G6")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Gunship"),	--base ship database entry
			fiend_g6_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"With the success of the Fiend G3 and G4 models, Conversions R Us continued their streak with the Fiend G6. They acquired some used Advanced Gunships and added cheap warp drives to them and made the Fiend G6. Like the Advanced Gunship, it has two homing missile tubes and beams to readily take down weaker ships. The warp drive makes it all the more dangerous.",
			{
				{key = "Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
				{key = " Tube 0", value = "8 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"battleship_destroyer_4_upgraded"
		)
		--[[
		fiend_g6_db:setLongDescription("With the success of the Fiend G3 and G4 models, Conversions R Us continued their streak with the Fiend G6. They acquired some used Advanced Gunships and added cheap warp drives to them and made the Fiend G6. Like the Advanced Gunship, it has two homing missile tubes and beams to readily take down weaker ships. The warp drive makes it all the more dangerous.")
		fiend_g6_db:setKeyValue("Class","Frigate")
		fiend_g6_db:setKeyValue("Sub-class","Gunship")
		fiend_g6_db:setKeyValue("Size","200")
		fiend_g6_db:setKeyValue("Shield","100/80/80")
		fiend_g6_db:setKeyValue("Hull","100")
		fiend_g6_db:setKeyValue("Move speed","3.6 U/min")
		fiend_g6_db:setKeyValue("Turn speed","5.0 deg/sec")
		fiend_g6_db:setKeyValue("Warp Speed","48.0 U/min")
		fiend_g6_db:setKeyValue("Beam weapon -15:50","8.0 Dmg / 6.0 sec")
		fiend_g6_db:setKeyValue("Beam weapon 15:50","8.0 Dmg / 6.0 sec")
		fiend_g6_db:setKeyValue("Tube 0","8 sec")
		fiend_g6_db:setKeyValue(" Tube 0","8 sec")
		fiend_g6_db:setKeyValue("Storage Homing","4")
		fiend_g6_db:setImage("radar/adv_gunship.png")
		--]]
	end
	return ship
end
function k2fighter(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Fighter"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["K2 Fighter"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["K2 Fighter"].short_range_radar)
	end
	ship:setTypeName("K2 Fighter")
	ship:setBeamWeapon(0, 60, 0, 1200.0, 2.5, 6)	--beams cycle faster (vs 4.0)
	ship:setHullMax(65)								--weaker hull (vs 70)
	ship:setHull(65)
	local k2_fighter_db = queryScienceDatabase("Ships","No Class","K2 Fighter")
	if k2_fighter_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("K2 Fighter")
		k2_fighter_db = queryScienceDatabase("Ships","No Class","K2 Fighter")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Fighter"),	--base ship database entry
			k2_fighter_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Enterprising designers published this design specification based on salvaged Ktlitan Fighters. Comparatively, it's got beams that cycle faster, but the hull is a bit weaker.",
			nil,
			nil,	--jump range
			"sci_fi_alien_ship_1"
		)
		--[[
		k2_fighter_db:setLongDescription("Enterprising designers published this design specification based on salvaged Ktlitan Fighters. Comparatively, it's got beams that cycle faster, but the hull is a bit weaker.")
		k2_fighter_db:setKeyValue("Class","No Class")
		k2_fighter_db:setKeyValue("Sub-class","No Sub-Class")
		k2_fighter_db:setKeyValue("Size","180")
		k2_fighter_db:setKeyValue("Hull","65")
		k2_fighter_db:setKeyValue("Move speed","8.4 U/min")
		k2_fighter_db:setKeyValue("Turn speed","30.0 deg/sec")
		k2_fighter_db:setKeyValue("Beam weapon 0:60","6.0 Dmg / 2.5 sec")
		k2_fighter_db:setImage("radar/ktlitan_fighter.png")
		--]]
	end
	return ship
end	
function k3fighter(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Fighter"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["K3 Fighter"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["K3 Fighter"].short_range_radar)
	end
	ship:setTypeName("K3 Fighter")
	ship:setBeamWeapon(0, 60, 0, 1200.0, 2.5, 9)	--beams cycle faster and damage more (vs 4.0 & 6)
	ship:setHullMax(60)								--weaker hull (vs 70)
	ship:setHull(60)
	local k3_fighter_db = queryScienceDatabase("Ships","No Class","K3 Fighter")
	if k3_fighter_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("K3 Fighter")
		k3_fighter_db = queryScienceDatabase("Ships","No Class","K3 Fighter")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Fighter"),	--base ship database entry
			k3_fighter_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Enterprising designers published this design specification based on salvaged Ktlitan Fighters. Comparatively, it's got beams that are stronger and that cycle faster, but the hull is weaker.",
			nil,
			nil,		--jump range
			"sci_fi_alien_ship_1"
		)
		--[[
		k3_fighter_db:setLongDescription("Enterprising designers published this design specification based on salvaged Ktlitan Fighters. Comparatively, it's got beams that cycle faster, but the hull is weaker.")
		k3_fighter_db:setKeyValue("Class","No Class")
		k3_fighter_db:setKeyValue("Sub-class","No Sub-Class")
		k3_fighter_db:setKeyValue("Size","180")
		k3_fighter_db:setKeyValue("Hull","60")
		k3_fighter_db:setKeyValue("Move speed","8.4 U/min")
		k3_fighter_db:setKeyValue("Turn speed","30.0 deg/sec")
		k3_fighter_db:setKeyValue("Beam weapon 0:60","9.0 Dmg / 2.5 sec")
		k3_fighter_db:setImage("radar/ktlitan_fighter.png")
		--]]
	end
	return ship
end	
function stalkerQ5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Stalker Q7"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Stalker Q5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Stalker Q5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Stalker Q5")
	ship:setShieldsMax(50,50)		--weaker shields (vs 80,30,30,30)
	ship:setShields(50,50)
	ship:setHullMax(45)				--weaker hull (vs 50)
	ship:setHull(45)
	ship:setRotationMaxSpeed(15)	--faster maneuver (vs 12)
	local stalker_q5_db = queryScienceDatabase("Ships","Frigate","Stalker Q5")
	if stalker_q5_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Stalker Q5")
		stalker_q5_db = queryScienceDatabase("Ships","Frigate","Stalker Q5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Stalker Q7"),	--base ship database entry
			stalker_q5_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The stalker Q5 predates the Stalker Q7. Like the Q7, the Q5 is designed to swoop into battle, deal damage quickly and retreat. Compared to the Q7, the Q5 has weaker shields and hull, but a faster turn speed",
			nil,
			nil,		--jump range
			"small_frigate_3"
		)
		--[[
		stalker_q5_db:setLongDescription("The stalker Q5 predates the Stalker Q7. Like the Q7, the Q5 is designed to swoop into battle, deal damage quickly and retreat. Compared to the Q7, the Q5 has weaker shields and hull, but a faster turn speed")
		stalker_q5_db:setKeyValue("Class","Frigate")
		stalker_q5_db:setKeyValue("Sub-class","Cruiser: Strike Ship")
		stalker_q5_db:setKeyValue("Size","80")
		stalker_q5_db:setKeyValue("Shield","50/50")
		stalker_q5_db:setKeyValue("Hull","45")
		stalker_q5_db:setKeyValue("Move speed","4.2 U/min")
		stalker_q5_db:setKeyValue("Turn speed","15.0 deg/sec")
		stalker_q5_db:setKeyValue("Warp Speed","42.0 U/min")
		stalker_q5_db:setKeyValue("Beam weapon -5:40","6.0 Dmg / 6.0 sec")
		stalker_q5_db:setKeyValue("Beam weapon 5:40","6.0 Dmg / 6.0 sec")
		stalker_q5_db:setImage("radar/cruiser.png")
		--]]
	end
	return ship
end
function stalkerR5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Stalker R7"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Stalker R5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Stalker R5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Stalker R5")
	ship:setShieldsMax(50,50)		--weaker shields (vs 80,30,30,30)
	ship:setShields(50,50)
	ship:setHullMax(45)				--weaker hull (vs 50)
	ship:setHull(45)
	ship:setRotationMaxSpeed(15)	--faster maneuver (vs 12)
	local stalker_r5_db = queryScienceDatabase("Ships","Frigate","Stalker R5")
	if stalker_r5_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Stalker R5")
		stalker_r5_db = queryScienceDatabase("Ships","Frigate","Stalker R5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Stalker R7"),	--base ship database entry
			stalker_r5_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The stalker R5 predates the Stalker R7. Like the R7, the R5 is designed to swoop into battle, deal damage quickly and retreat. Compared to the R7, the R5 has weaker shields and hull, but a faster turn speed",
			nil,
			nil,		--jump range
			"small_frigate_3"
		)
		--[[
		stalker_r5_db:setLongDescription("The stalker R5 predates the Stalker R7. Like the R7, the R5 is designed to swoop into battle, deal damage quickly and retreat. Compared to the R7, the R5 has weaker shields and hull, but a faster turn speed")
		stalker_r5_db:setKeyValue("Class","Frigate")
		stalker_r5_db:setKeyValue("Sub-class","Cruiser: Strike Ship")
		stalker_r5_db:setKeyValue("Size","80")
		stalker_r5_db:setKeyValue("Shield","50/50")
		stalker_r5_db:setKeyValue("Hull","45")
		stalker_r5_db:setKeyValue("Move speed","4.2 U/min")
		stalker_r5_db:setKeyValue("Turn speed","15.0 deg/sec")
		stalker_r5_db:setKeyValue("Jump Range","5 - 50 U")
		stalker_r5_db:setKeyValue("Beam weapon -5:40","6.0 Dmg / 6.0 sec")
		stalker_r5_db:setKeyValue("Beam weapon 5:40","6.0 Dmg / 6.0 sec")
		stalker_r5_db:setImage("radar/cruiser.png")
		--]]
	end
	return ship
end
function waddle5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Waddle 5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Waddle 5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Waddle 5")
	ship:setWarpDrive(true)
--				   Index,  Arc,	  Dir, Range, Cycle,	Damage
	ship:setBeamWeapon(2,	70,	  -30,	 600,	5.0,	2.0)	--adjust beam direction to match starboard side (vs -35)
	local waddle_5_db = queryScienceDatabase("Ships","Starfighter","Waddle 5")
	if waddle_5_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Waddle 5")
		waddle_5_db = queryScienceDatabase("Ships","Starfighter","Waddle 5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			waddle_5_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Conversions R Us purchased a number of Adder MK 5 ships at auction and added warp drives to them to produce the Waddle 5",
			{
				{key = "Small tube 0", value = "15 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AdlerLongRangeScoutYellow"
		)
		--[[
		waddle_5_db:setLongDescription("Conversions R Us purchased a number of Adder MK 5 ships at auction and added warp drives to them to produce the Waddle 5")
		waddle_5_db:setKeyValue("Class","Starfighter")
		waddle_5_db:setKeyValue("Sub-class","Gunship")
		waddle_5_db:setKeyValue("Size","80")
		waddle_5_db:setKeyValue("Shield","30")
		waddle_5_db:setKeyValue("Hull","50")
		waddle_5_db:setKeyValue("Move speed","4.8 U/min")
		waddle_5_db:setKeyValue("Turn speed","28.0 deg/sec")
		waddle_5_db:setKeyValue("Warp Speed","60.0 U/min")
		waddle_5_db:setKeyValue("Beam weapon 0:35","2.0 Dmg / 5.0 sec")
		waddle_5_db:setKeyValue("Beam weapon 30:70","2.0 Dmg / 5.0 sec")
		waddle_5_db:setKeyValue("Beam weapon -35:70","2.0 Dmg / 5.0 sec")
		waddle_5_db:setImage("radar/fighter.png")
		--]]
	end
	return ship
end
function jade5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Jade 5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Jade 5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Jade 5")
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,35000)
--				   Index,  Arc,	  Dir, Range, Cycle,	Damage
	ship:setBeamWeapon(2,	70,	  -30,	 600,	5.0,	2.0)	--adjust beam direction to match starboard side (vs -35)
	local jade_5_db = queryScienceDatabase("Ships","Starfighter","Jade 5")
	if jade_5_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Jade 5")
		jade_5_db = queryScienceDatabase("Ships","Starfighter","Jade 5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			jade_5_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Conversions R Us purchased a number of Adder MK 5 ships at auction and added jump drives to them to produce the Jade 5",
			{
				{key = "Small tube 0", value = "15 sec"},	--torpedo tube direction and load speed
			},
			"5 - 35 U",		--jump range
			"AdlerLongRangeScoutYellow"
		)
		--[[
		jade_5_db:setLongDescription("Conversions R Us purchased a number of Adder MK 5 ships at auction and added jump drives to them to produce the Jade 5")
		jade_5_db:setKeyValue("Class","Starfighter")
		jade_5_db:setKeyValue("Sub-class","Gunship")
		jade_5_db:setKeyValue("Size","80")
		jade_5_db:setKeyValue("Shield","30")
		jade_5_db:setKeyValue("Hull","50")
		jade_5_db:setKeyValue("Move speed","4.8 U/min")
		jade_5_db:setKeyValue("Turn speed","28.0 deg/sec")
		jade_5_db:setKeyValue("Jump Range","5 - 35 U")
		jade_5_db:setKeyValue("Beam weapon 0:35","2.0 Dmg / 5.0 sec")
		jade_5_db:setKeyValue("Beam weapon 30:70","2.0 Dmg / 5.0 sec")
		jade_5_db:setKeyValue("Beam weapon -35:70","2.0 Dmg / 5.0 sec")
		jade_5_db:setImage("radar/fighter.png")
		--]]
	end
	return ship
end
function droneLite(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Drone"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Lite Drone"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Lite Drone"].short_range_radar)
	end
	ship:setTypeName("Lite Drone")
	ship:setHullMax(20)					--weaker hull (vs 30)
	ship:setHull(20)
	ship:setImpulseMaxSpeed(130)		--faster impulse (vs 120)
	ship:setRotationMaxSpeed(20)		--faster maneuver (vs 10)
	ship:setBeamWeapon(0,40,0,600,4,4)	--weaker (vs 6) beam
	local drone_lite_db = queryScienceDatabase("Ships","No Class","Lite Drone")
	if drone_lite_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("Lite Drone")
		drone_lite_db = queryScienceDatabase("Ships","No Class","Lite Drone")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Drone"),	--base ship database entry
			drone_lite_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The light drone was pieced together from scavenged parts of various damaged Ktlitan drones. Compared to the Ktlitan drone, the lite drone has a weaker hull, and a weaker beam, but a faster turn and impulse speed",
			nil,
			nil,
			"sci_fi_alien_ship_4"
		)
		--[[
		drone_lite_db:setLongDescription("The light drone was pieced together from scavenged parts of various damaged Ktlitan drones. Compared to the Ktlitan drone, the lite drone has a weaker hull, and a weaker beam, but a faster turn and impulse speed")
		drone_lite_db:setKeyValue("Class","No Class")
		drone_lite_db:setKeyValue("Sub-class","No Sub-Class")
		drone_lite_db:setKeyValue("Size","150")
		drone_lite_db:setKeyValue("Hull","20")
		drone_lite_db:setKeyValue("Move speed","7.8 U/min")
		drone_lite_db:setKeyValue("Turn speed","20 deg/sec")
		drone_lite_db:setKeyValue("Beam weapon 0:40","4.0 Dmg / 4.0 sec")
		drone_lite_db:setImage("radar/ktlitan_drone.png")
		--]]
	end
	return ship
end
function droneHeavy(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Drone"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Heavy Drone"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Heavy Drone"].short_range_radar)
	end
	ship:setTypeName("Heavy Drone")
	ship:setHullMax(40)					--stronger hull (vs 30)
	ship:setHull(40)
	ship:setImpulseMaxSpeed(110)		--slower impulse (vs 120)
	ship:setBeamWeapon(0,40,0,600,4,8)	--stronger (vs 6) beam
	local drone_heavy_db = queryScienceDatabase("Ships","No Class","Heavy Drone")
	if drone_heavy_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("Heavy Drone")
		drone_heavy_db = queryScienceDatabase("Ships","No Class","Heavy Drone")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Drone"),	--base ship database entry
			drone_heavy_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The heavy drone has a stronger hull and a stronger beam than the normal Ktlitan Drone, but it also moves slower",
			nil,
			nil,
			"sci_fi_alien_ship_4"
		)
		--[[
		drone_heavy_db:setLongDescription("The heavy drone has a stronger hull and a stronger beam than the normal Ktlitan Drone, but it also moves slower")
		drone_heavy_db:setKeyValue("Class","No Class")
		drone_heavy_db:setKeyValue("Sub-class","No Sub-Class")
		drone_heavy_db:setKeyValue("Size","150")
		drone_heavy_db:setKeyValue("Hull","40")
		drone_heavy_db:setKeyValue("Move speed","6.6 U/min")
		drone_heavy_db:setKeyValue("Turn speed","10 deg/sec")
		drone_heavy_db:setKeyValue("Beam weapon 0:40","8.0 Dmg / 4.0 sec")
		drone_heavy_db:setImage("radar/ktlitan_drone.png")
		--]]
	end
	return ship
end
function droneJacket(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Drone"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Jacket Drone"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Jacket Drone"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Jacket Drone")
	ship:setShieldsMax(20)				--stronger shields (vs none)
	ship:setShields(20)
	ship:setImpulseMaxSpeed(110)		--slower impulse (vs 120)
	ship:setBeamWeapon(0,40,0,600,4,4)	--weaker (vs 6) beam
	local drone_jacket_db = queryScienceDatabase("Ships","No Class","Jacket Drone")
	if drone_jacket_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("Jacket Drone")
		drone_jacket_db = queryScienceDatabase("Ships","No Class","Jacket Drone")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Drone"),	--base ship database entry
			drone_jacket_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Jacket Drone is a Ktlitan Drone with a shield. It's also slightly slower and has a slightly weaker beam due to the energy requirements of the added shield",
			nil,
			nil,
			"sci_fi_alien_ship_4"
		)
		--[[
		drone_jacket_db:setLongDescription("The Jacket Drone is a Ktlitan Drone with a shield. It's also slightly slower and has a slightly weaker beam due to the energy requirements of the added shield")
		drone_jacket_db:setKeyValue("Class","No Class")
		drone_jacket_db:setKeyValue("Sub-class","No Sub-Class")
		drone_jacket_db:setKeyValue("Size","150")
		drone_jacket_db:setKeyValue("Shield","20")
		drone_jacket_db:setKeyValue("Hull","40")
		drone_jacket_db:setKeyValue("Move speed","6.6 U/min")
		drone_jacket_db:setKeyValue("Turn speed","10 deg/sec")
		drone_jacket_db:setKeyValue("Beam weapon 0:40","4.0 Dmg / 4.0 sec")
		drone_jacket_db:setImage("radar/ktlitan_drone.png")
		--]]
	end
	return ship
end
function elaraP2(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Elara P2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Elara P2"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Elara P2")
	ship:setWarpDrive(true)			--warp drive (vs none)
	ship:setWarpSpeed(800)
	ship:setShieldsMax(70,40)		--stronger front shield (vs 50,40)
	ship:setShields(70,40)
	local elara_p2_db = queryScienceDatabase("Ships","Frigate","Elara P2")
	if elara_p2_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Elara P2")
		elara_p2_db = queryScienceDatabase("Ships","Frigate","Elara P2")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			elara_p2_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Inspired by the Phobos T3, the Elara P2 is nearly identical. With the addition of a warp drive and stronger front shields, the Elara P2 poses a greater threat than the Phobos",
			{
				{key = "Tube -1", value = "60 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "60 sec"},		--torpedo tube direction and load speed
			},
			nil,
			"AtlasHeavyFighterYellow"
		)
		--[[
		elara_p2_db:setLongDescription("Inspired by the Phobos T3, the Elara P2 is nearly identical. With the addition of a warp drive and stronger front shields, the Elara P2 poses a greater threat than the Phobos")
		elara_p2_db:setKeyValue("Class","Frigate")
		elara_p2_db:setKeyValue("Sub-class","Cruiser")
		elara_p2_db:setKeyValue("Size","80")
		elara_p2_db:setKeyValue("Shield","70/40")
		elara_p2_db:setKeyValue("Hull","70")
		elara_p2_db:setKeyValue("Move speed","3.6 U/min")
		elara_p2_db:setKeyValue("Turn speed","10.0 deg/sec")
		elara_p2_db:setKeyValue("Warp Speed","48.0 U/min")
		elara_p2_db:setKeyValue("Beam weapon -15:90","6.0 Dmg / 8.0 sec")
		elara_p2_db:setKeyValue("Beam weapon 15:90","6.0 Dmg / 8.0 sec")
		elara_p2_db:setKeyValue("Tube -1","60 sec")
		elara_p2_db:setKeyValue("Tube 1","60 sec")
		elara_p2_db:setKeyValue("Storage Homing","6")
		elara_p2_db:setKeyValue("Storage HVLI","20")
		elara_p2_db:setImage("radar/cruiser.png")
		--]]
	end
	return ship
end
function wzLindworm(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("WX-Lindworm"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["WZ-Lindworm"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["WZ-Lindworm"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("WZ-Lindworm")
	ship:setWeaponStorageMax("Nuke",2)		--more nukes (vs 0)
	ship:setWeaponStorage("Nuke",2)
	ship:setWeaponStorageMax("Homing",4)	--more homing (vs 1)
	ship:setWeaponStorage("Homing",4)
	ship:setWeaponStorageMax("HVLI",12)		--more HVLI (vs 6)
	ship:setWeaponStorage("HVLI",12)
	ship:setRotationMaxSpeed(12)			--slower maneuver (vs 15)
	ship:setHullMax(45)						--weaker hull (vs 50)
	ship:setHull(45)
	local wz_lindworm_db = queryScienceDatabase("Ships","Starfighter","WZ-Lindworm")
	if wz_lindworm_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("WZ-Lindworm")
		wz_lindworm_db = queryScienceDatabase("Ships","Starfighter","WZ-Lindworm")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","WX-Lindworm"),	--base ship database entry
			wz_lindworm_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The WZ-Lindworm is essentially the stock WX-Lindworm with more HVLIs, more homing missiles and added nukes. They had to remove some of the armor to get the additional missiles to fit, so the hull is weaker. Also, the WZ turns a little more slowly than the WX. This little bomber packs quite a whallop.",
			{
				{key = "Small tube 0", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Small tube 1", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Small tube -1", value = "15 sec"},	--torpedo tube direction and load speed
			},
			nil,
			"LindwurmFighterYellow"
		)
		--[[
		wz_lindworm_db:setLongDescription("The WZ-Lindworm is essentially the stock WX-Lindworm with more HVLIs, more homing missiles and added nukes. They had to remove some of the armor to get the additional missiles to fit, so the hull is weaker. Also, the WZ turns a little more slowly than the WX. This little bomber packs quite a whallop.")
		wz_lindworm_db:setKeyValue("Class","Starfighter")
		wz_lindworm_db:setKeyValue("Sub-class","Bomber")
		wz_lindworm_db:setKeyValue("Size","30")
		wz_lindworm_db:setKeyValue("Shield","20")
		wz_lindworm_db:setKeyValue("Hull","45")
		wz_lindworm_db:setKeyValue("Move speed","3.0 U/min")
		wz_lindworm_db:setKeyValue("Turn speed","12 deg/sec")
		wz_lindworm_db:setKeyValue("Small tube 0","15 sec")
		wz_lindworm_db:setKeyValue("Small tube 1","15 sec")
		wz_lindworm_db:setKeyValue("Small tube -1","15 sec")
		wz_lindworm_db:setKeyValue("Storage Homing","4")
		wz_lindworm_db:setKeyValue("Storage Nuke","2")
		wz_lindworm_db:setKeyValue("Storage HVLI","12")
		wz_lindworm_db:setImage("radar/fighter.png")
		--]]
	end
	return ship
end
function tempest(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Piranha F12"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Tempest"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Tempest"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Tempest")
	ship:setWeaponTubeCount(10)						--four more tubes (vs 6)
	ship:setWeaponTubeDirection(0, -88)				--5 per side
	ship:setWeaponTubeDirection(1, -89)				--slight angle spread
	ship:setWeaponTubeDirection(3,  88)				--3 for HVLI each side
	ship:setWeaponTubeDirection(4,  89)				--2 for homing and nuke each side
	ship:setWeaponTubeDirection(6, -91)				
	ship:setWeaponTubeDirection(7, -92)				
	ship:setWeaponTubeDirection(8,  91)				
	ship:setWeaponTubeDirection(9,  92)				
	ship:setWeaponTubeExclusiveFor(7,"HVLI")
	ship:setWeaponTubeExclusiveFor(9,"HVLI")
	ship:setWeaponStorageMax("Homing",16)			--more (vs 6)
	ship:setWeaponStorage("Homing", 16)				
	ship:setWeaponStorageMax("Nuke",8)				--more (vs 0)
	ship:setWeaponStorage("Nuke", 8)				
	ship:setWeaponStorageMax("HVLI",34)				--more (vs 20)
	ship:setWeaponStorage("HVLI", 34)
	local tempest_db = queryScienceDatabase("Ships","Frigate","Tempest")
	if tempest_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Tempest")
		tempest_db = queryScienceDatabase("Ships","Frigate","Tempest")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Piranha F12"),	--base ship database entry
			tempest_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Loosely based on the Piranha F12 model, the Tempest adds four more broadside tubes (two on each side), more HVLIs, more Homing missiles and 8 Nukes. The Tempest can strike fear into the hearts of your enemies. Get yourself one today!",
			{
				{key = "Large tube -88", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube -89", value = "15 sec"},		--torpedo tube direction and load speed
				{key = "Large tube -90", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Large tube 88", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube 89", value = "15 sec"},		--torpedo tube direction and load speed
				{key = "Large tube 90", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube -91", value = "15 sec"},		--torpedo tube direction and load speed
				{key = "Tube -92", value = "15 sec"},		--torpedo tube direction and load speed
				{key = "Tube 91", value = "15 sec"},		--torpedo tube direction and load speed
				{key = "Tube 92", value = "15 sec"},		--torpedo tube direction and load speed
			},
			nil,
			"HeavyCorvetteRed"
		)
		--[[
		tempest_db:setLongDescription("Loosely based on the Piranha F12 model, the Tempest adds four more broadside tubes (two on each side), more HVLIs, more Homing missiles and 8 Nukes. The Tempest can strike fear into the hearts of your enemies. Get yourself one today!")
		tempest_db:setKeyValue("Class","Frigate")
		tempest_db:setKeyValue("Sub-class","Cruiser: Light Artillery")
		tempest_db:setKeyValue("Size","80")
		tempest_db:setKeyValue("Shield","30/30")
		tempest_db:setKeyValue("Hull","70")
		tempest_db:setKeyValue("Move speed","2.4 U/min")
		tempest_db:setKeyValue("Turn speed","6.0 deg/sec")
		tempest_db:setKeyValue("Large Tube -88","15 sec")
		tempest_db:setKeyValue("Tube -89","15 sec")
		tempest_db:setKeyValue("Large Tube -90","15 sec")
		tempest_db:setKeyValue("Large Tube 88","15 sec")
		tempest_db:setKeyValue("Tube 89","15 sec")
		tempest_db:setKeyValue("Large Tube 90","15 sec")
		tempest_db:setKeyValue("Tube -91","15 sec")
		tempest_db:setKeyValue("Tube -92","15 sec")
		tempest_db:setKeyValue("Tube 91","15 sec")
		tempest_db:setKeyValue("Tube 92","15 sec")
		tempest_db:setKeyValue("Storage Homing","16")
		tempest_db:setKeyValue("Storage Nuke","8")
		tempest_db:setKeyValue("Storage HVLI","34")
		tempest_db:setImage("radar/piranha.png")
		--]]
	end
	return ship
end
function enforcer(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Blockade Runner"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Enforcer"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Enforcer"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Enforcer")
	ship:setRadarTrace("ktlitan_destroyer.png")			--different radar trace
	ship:setWarpDrive(true)										--warp (vs none)
	ship:setWarpSpeed(600)
	ship:setImpulseMaxSpeed(100)								--faster impulse (vs 60)
	ship:setRotationMaxSpeed(20)								--faster maneuver (vs 15)
	ship:setShieldsMax(200,100,100)								--stronger shields (vs 100,150)
	ship:setShields(200,100,100)					
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	30,	    5,	1500,		6,		10)	--narrower (vs 60), longer (vs 1000), stronger (vs 8)
	ship:setBeamWeapon(1,	30,	   -5,	1500,		6,		10)
	ship:setBeamWeapon(2,	 0,	    0,	   0,		0,		 0)	--fewer (vs 4)
	ship:setBeamWeapon(3,	 0,	    0,	   0,		0,		 0)
	ship:setWeaponTubeCount(3)									--more (vs 0)
	ship:setTubeSize(0,"large")									--large (vs normal)
	ship:setWeaponTubeDirection(1,-15)				
	ship:setWeaponTubeDirection(2, 15)	
	ship:setTubeLoadTime(0,18)
	ship:setTubeLoadTime(1,12)
	ship:setTubeLoadTime(2,12)			
	ship:setWeaponStorageMax("Homing",18)						--more (vs 0)
	ship:setWeaponStorage("Homing", 18)
	local enforcer_db = queryScienceDatabase("Ships","Frigate","Enforcer")
	if enforcer_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Enforcer")
		enforcer_db = queryScienceDatabase("Ships","Frigate","Enforcer")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Blockade Runner"),	--base ship database entry
			enforcer_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Enforcer is a highly modified Blockade Runner. A warp drive was added and impulse engines boosted along with turning speed. Three missile tubes were added to shoot homing missiles, large ones straight ahead. Stronger shields and hull. Removed rear facing beams and strengthened front beams.",
			{
				{key = "Large tube 0", value = "18 sec"},	--torpedo tube direction and load speed
				{key = "Tube -15", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Tube 15", value = "12 sec"},		--torpedo tube direction and load speed
			},
			nil,
			"battleship_destroyer_3_upgraded"
		)
		--[[
		enforcer_db:setLongDescription("The Enforcer is a highly modified Blockade Runner. A warp drive was added and impulse engines boosted along with turning speed. Three missile tubes were added to shoot homing missiles, large ones straight ahead. Stronger shields and hull. Removed rear facing beams and stengthened front beams.")
		enforcer_db:setKeyValue("Class","Frigate")
		enforcer_db:setKeyValue("Sub-class","High Punch")
		enforcer_db:setKeyValue("Size","200")
		enforcer_db:setKeyValue("Shield","200/100/100")
		enforcer_db:setKeyValue("Hull","100")
		enforcer_db:setKeyValue("Move speed","6.0 U/min")
		enforcer_db:setKeyValue("Turn speed","20.0 deg/sec")
		enforcer_db:setKeyValue("Warp Speed","36.0 U/min")
		enforcer_db:setKeyValue("Beam weapon -15:30","10.0 Dmg / 6.0 sec")
		enforcer_db:setKeyValue("Beam weapon 15:30","10.0 Dmg / 6.0 sec")
		enforcer_db:setKeyValue("Large Tube 0","20 sec")
		enforcer_db:setKeyValue("Tube -30","20 sec")
		enforcer_db:setKeyValue("Tube 30","20 sec")
		enforcer_db:setKeyValue("Storage Homing","18")
		--]]
		enforcer_db:setImage("radar/ktlitan_destroyer.png")		--override default radar image
	end
	return ship		
end
function predator(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Piranha F8"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Predator"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Predator"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Predator")
	ship:setShieldsMax(100,100)									--stronger shields (vs 30,30)
	ship:setShields(100,100)					
	ship:setHullMax(80)											--stronger hull (vs 70)
	ship:setHull(80)
	ship:setImpulseMaxSpeed(65)									--faster impulse (vs 40)
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 6)
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,35000)			
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	90,	    0,	1000,		6,		 4)	--more (vs 0)
	ship:setBeamWeapon(1,	90,	  180,	1000,		6,		 4)	
	ship:setWeaponTubeCount(8)									--more (vs 3)
	ship:setWeaponTubeDirection(0,-60)				
	ship:setWeaponTubeDirection(1,-90)				
	ship:setWeaponTubeDirection(2,-90)				
	ship:setWeaponTubeDirection(3, 60)				
	ship:setWeaponTubeDirection(4, 90)				
	ship:setWeaponTubeDirection(5, 90)				
	ship:setWeaponTubeDirection(6,-120)				
	ship:setWeaponTubeDirection(7, 120)				
	ship:setWeaponTubeExclusiveFor(0,"Homing")
	ship:setWeaponTubeExclusiveFor(1,"Homing")
	ship:setWeaponTubeExclusiveFor(2,"Homing")
	ship:setWeaponTubeExclusiveFor(3,"Homing")
	ship:setWeaponTubeExclusiveFor(4,"Homing")
	ship:setWeaponTubeExclusiveFor(5,"Homing")
	ship:setWeaponTubeExclusiveFor(6,"Homing")
	ship:setWeaponTubeExclusiveFor(7,"Homing")
	ship:setWeaponStorageMax("Homing",32)						--more (vs 5)
	ship:setWeaponStorage("Homing", 32)		
	ship:setWeaponStorageMax("HVLI",0)							--less (vs 10)
	ship:setWeaponStorage("HVLI", 0)
	ship:setRadarTrace("missile_cruiser.png")				--different radar trace
	local predator_db = queryScienceDatabase("Ships","Frigate","Predator")
	if predator_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Predator")
		predator_db = queryScienceDatabase("Ships","Frigate","Predator")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Piranha F8"),	--base ship database entry
			predator_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Predator is a significantly improved Piranha F8. Stronger shields and hull, faster impulse and turning speeds, a jump drive, beam weapons, eight missile tubes pointing in six directions and a large number of homing missiles to shoot.",
			{
				{key = "Large tube -60", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Tube -90", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Large tube -90", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Large tube 60", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Tube 90", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Large tube 90", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Tube -120", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Tube 120", value = "12 sec"},		--torpedo tube direction and load speed
			},
			"5 - 35 U",		--jump range
			"HeavyCorvetteRed"
		)
		--[[
		predator_db:setLongDescription("The Predator is a significantly improved Piranha F8. Stronger shields and hull, faster impulse and turning speeds, a jump drive, beam weapons, eight missile tubes pointing in six directions and a large number of homing missiles to shoot.")
		predator_db:setKeyValue("Class","Frigate")
		predator_db:setKeyValue("Sub-class","Cruiser: Light Artillery")
		predator_db:setKeyValue("Size","80")
		predator_db:setKeyValue("Shield","100/100")
		predator_db:setKeyValue("Hull","80")
		predator_db:setKeyValue("Move speed","3.9 U/min")
		predator_db:setKeyValue("Turn speed","15.0 deg/sec")
		predator_db:setKeyValue("Jump Range","5 - 35 U")
		predator_db:setKeyValue("Beam weapon 0:90","4.0 Dmg / 6.0 sec")
		predator_db:setKeyValue("Beam weapon 180:90","4.0 Dmg / 6.0 sec")
		predator_db:setKeyValue("Large Tube -60","12 sec")
		predator_db:setKeyValue("Tube -90","12 sec")
		predator_db:setKeyValue("Large Tube -90","12 sec")
		predator_db:setKeyValue("Large Tube 60","12 sec")
		predator_db:setKeyValue("Tube 90","12 sec")
		predator_db:setKeyValue("Large Tube 90","12 sec")
		predator_db:setKeyValue("Tube -120","12 sec")
		predator_db:setKeyValue("Tube 120","12 sec")
		predator_db:setKeyValue("Storage Homing","32")
		--]]
		predator_db:setImage("radar/missile_cruiser.png")		--override default radar image
	end
	return ship		
end
function atlantisY42(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Atlantis X23"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Atlantis Y42"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Atlantis Y42"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Atlantis Y42")
	ship:setShieldsMax(300,200,300,200)							--stronger shields (vs 200,200,200,200)
	ship:setShields(300,200,300,200)					
	ship:setImpulseMaxSpeed(65)									--faster impulse (vs 30)
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 3.5)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(2,	80,	  190,	1500,		6,		 8)	--narrower (vs 100)
	ship:setBeamWeapon(3,	80,	  170,	1500,		6,		 8)	--extra (vs 3 beams)
	ship:setWeaponStorageMax("Homing",16)						--more (vs 4)
	ship:setWeaponStorage("Homing", 16)
	local atlantis_y42_db = queryScienceDatabase("Ships","Corvette","Atlantis Y42")
	if atlantis_y42_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Corvette")
		corvette_db:addEntry("Atlantis Y42")
		atlantis_y42_db = queryScienceDatabase("Ships","Corvette","Atlantis Y42")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Atlantis X23"),	--base ship database entry
			atlantis_y42_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Atlantis Y42 improves on the Atlantis X23 with stronger shields, faster impulse and turn speeds, an extra beam in back and a larger missile stock",
			{
				{key = "Tube -90", value = "10 sec"},	--torpedo tube direction and load speed
				{key = " Tube -90", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Tube 90", value = "10 sec"},	--torpedo tube direction and load speed
				{key = " Tube 90", value = "10 sec"},	--torpedo tube direction and load speed
			},
			"5 - 50 U",		--jump range
			"battleship_destroyer_1_upgraded"
		)
		--[[
		atlantis_y42_db:setLongDescription("The Atlantis Y42 improves on the Atlantis X23 with stronger shields, faster impulse and turn speeds, an extra beam in back and a larger missile stock")
		atlantis_y42_db:setKeyValue("Class","Corvette")
		atlantis_y42_db:setKeyValue("Sub-class","Destroyer")
		atlantis_y42_db:setKeyValue("Size","200")
		atlantis_y42_db:setKeyValue("Shield","300/200/300/200")
		atlantis_y42_db:setKeyValue("Hull","100")
		atlantis_y42_db:setKeyValue("Move speed","3.9 U/min")
		atlantis_y42_db:setKeyValue("Turn speed","15.0 deg/sec")
		atlantis_y42_db:setKeyValue("Jump Range","5 - 50 U")
		atlantis_y42_db:setKeyValue("Beam weapon -20:100","8.0 Dmg / 6.0 sec")
		atlantis_y42_db:setKeyValue("Beam weapon 20:100","8.0 Dmg / 6.0 sec")
		atlantis_y42_db:setKeyValue("Beam weapon 190:100","8.0 Dmg / 6.0 sec")
		atlantis_y42_db:setKeyValue("Beam weapon 170:100","8.0 Dmg / 6.0 sec")
		atlantis_y42_db:setKeyValue("Tube -90","10 sec")
		atlantis_y42_db:setKeyValue(" Tube -90","10 sec")
		atlantis_y42_db:setKeyValue("Tube 90","10 sec")
		atlantis_y42_db:setKeyValue(" Tube 90","10 sec")
		atlantis_y42_db:setKeyValue("Storage Homing","4")
		atlantis_y42_db:setKeyValue("Storage HVLI","20")
		atlantis_y42_db:setImage("radar/dread.png")
		--]]
	end
	return ship		
end
function starhammerV(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Starhammer II"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Starhammer V"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Starhammer V"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Starhammer V")
	ship:setImpulseMaxSpeed(65)									--faster impulse (vs 35)
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 6)
	ship:setShieldsMax(450, 350, 250, 250, 350)					--stronger shields (vs 450, 350, 150, 150, 350)
	ship:setShields(450, 350, 250, 250, 350)					
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(4,	60,	  180,	1500,		8,		11)	--extra rear facing beam
	ship:setWeaponStorageMax("Homing",16)						--more (vs 4)
	ship:setWeaponStorage("Homing", 16)		
	ship:setWeaponStorageMax("HVLI",36)							--more (vs 20)
	ship:setWeaponStorage("HVLI", 36)
	local starhammer_v_db = queryScienceDatabase("Ships","Corvette","Starhammer V")
	if starhammer_v_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Corvette")
		corvette_db:addEntry("Starhammer V")
		starhammer_v_db = queryScienceDatabase("Ships","Corvette","Starhammer V")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Starhammer II"),	--base ship database entry
			starhammer_v_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Starhammer V recognizes common modifications made in the field to the Starhammer II: stronger shields, faster impulse and turning speeds, additional rear beam and more missiles to shoot. These changes make the Starhammer V a force to be reckoned with.",
			{
				{key = "Tube 0", value = "10 sec"},	--torpedo tube direction and load speed
				{key = " Tube 0", value = "10 sec"},	--torpedo tube direction and load speed
			},
			"5 - 50 U",		--jump range
			"battleship_destroyer_4_upgraded"
		)
		--[[
		starhammer_v_db:setLongDescription("The Starhammer V recognizes common modifications made in the field to the Starhammer II: stronger shields, faster impulse and turning speeds, additional rear beam and more missiles to shoot. These changes make the Starhammer V a force to be reckoned with.")
		starhammer_v_db:setKeyValue("Class","Corvette")
		starhammer_v_db:setKeyValue("Sub-class","Destroyer")
		starhammer_v_db:setKeyValue("Size","200")
		starhammer_v_db:setKeyValue("Shield","450/350/250/250/350")
		starhammer_v_db:setKeyValue("Hull","200")
		starhammer_v_db:setKeyValue("Move speed","3.9 U/min")
		starhammer_v_db:setKeyValue("Turn speed","15.0 deg/sec")
		starhammer_v_db:setKeyValue("Jump Range","5 - 50 U")
		starhammer_v_db:setKeyValue("Beam weapon -10:60","11.0 Dmg / 8.0 sec")
		starhammer_v_db:setKeyValue("Beam weapon 10:60","11.0 Dmg / 8.0 sec")
		starhammer_v_db:setKeyValue("Beam weapon -20:60","11.0 Dmg / 8.0 sec")
		starhammer_v_db:setKeyValue("Beam weapon 20:60","11.0 Dmg / 8.0 sec")
		starhammer_v_db:setKeyValue("Beam weapon 180:60","11.0 Dmg / 8.0 sec")
		starhammer_v_db:setKeyValue("Tube 0","10 sec")
		starhammer_v_db:setKeyValue(" Tube 0","10 sec")
		starhammer_v_db:setKeyValue("Storage Homing","16")
		starhammer_v_db:setKeyValue("Storage EMP","2")
		starhammer_v_db:setKeyValue("Storage HVLI","36")
		starhammer_v_db:setImage("radar/dread.png")
		--]]
	end
	return ship		
end
function tyr(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Battlestation"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Tyr"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Tyr"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Tyr")
	ship:setImpulseMaxSpeed(50)									--faster impulse (vs 30)
	ship:setRotationMaxSpeed(10)								--faster maneuver (vs 1.5)
	ship:setShieldsMax(400, 300, 300, 400, 300, 300)			--stronger shields (vs 300, 300, 300, 300, 300)
	ship:setShields(400, 300, 300, 400, 300, 300)					
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	90,	  -60,	2500,		6,		 8)	--stronger beams, broader coverage
	ship:setBeamWeapon(1,	90,	 -120,	2500,		6,		 8)
	ship:setBeamWeapon(2,	90,	   60,	2500,		6,		 8)
	ship:setBeamWeapon(3,	90,	  120,	2500,		6,		 8)
	ship:setBeamWeapon(4,	90,	  -60,	2500,		6,		 8)
	ship:setBeamWeapon(5,	90,	 -120,	2500,		6,		 8)
	ship:setBeamWeapon(6,	90,	   60,	2500,		6,		 8)
	ship:setBeamWeapon(7,	90,	  120,	2500,		6,		 8)
	ship:setBeamWeapon(8,	90,	  -60,	2500,		6,		 8)
	ship:setBeamWeapon(9,	90,	 -120,	2500,		6,		 8)
	ship:setBeamWeapon(10,	90,	   60,	2500,		6,		 8)
	ship:setBeamWeapon(11,	90,	  120,	2500,		6,		 8)
	local tyr_db = queryScienceDatabase("Ships","Dreadnought","Tyr")
	if tyr_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Dreadnought")
		corvette_db:addEntry("Tyr")
		tyr_db = queryScienceDatabase("Ships","Dreadnought","Tyr")
		addShipToDatabase(
			queryScienceDatabase("Ships","Dreadnought","Battlestation"),	--base ship database entry
			tyr_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Tyr is the shipyard's answer to admiral konstatz' casual statement that the Battlestation model was too slow to be effective. The shipyards improved on the Battlestation by fitting the Tyr with more than twice the impulse speed and more than six times the turn speed. They threw in stronger shields and hull and wider beam coverage just to show that they could",
			nil,
			"5 - 50 U",		--jump range
			"Ender Battlecruiser"
		)
		--[[
		tyr_db:setLongDescription("The Tyr is the shipyard's answer to admiral konstatz' casual statement that the Battlestation model was too slow to be effective. The shipyards improved on the Battlestation by fitting the Tyr with more than twice the impulse speed and more than six times the turn speed. They threw in stronger shields and hull and wider beam coverage just to show that they could")
		tyr_db:setKeyValue("Class","Dreadnought")
		tyr_db:setKeyValue("Sub-class","Assault")
		tyr_db:setKeyValue("Size","200")
		tyr_db:setKeyValue("Shield","400/300/300/400/300/300")
		tyr_db:setKeyValue("Hull","100")
		tyr_db:setKeyValue("Move speed","3.0 U/min")
		tyr_db:setKeyValue("Turn speed","10.0 deg/sec")
		tyr_db:setKeyValue("Jump Range","5 - 50 U")
		tyr_db:setKeyValue("Beam weapon -60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("Beam weapon -120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("Beam weapon 60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("Beam weapon 120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue(" Beam weapon -60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue(" Beam weapon -120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue(" Beam weapon 60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue(" Beam weapon 120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("  Beam weapon -60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("  Beam weapon -120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("  Beam weapon 60:90","8.0 Dmg / 6.0 sec")
		tyr_db:setKeyValue("  Beam weapon 120:90","8.0 Dmg / 6.0 sec")
		tyr_db:setImage("radar/battleship.png")
		--]]
	end
	return ship
end
function gnat(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Drone"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Gnat"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Gnat"].short_range_radar)
	end
	ship:setTypeName("Gnat")
	ship:setHullMax(15)					--weaker hull (vs 30)
	ship:setHull(15)
	ship:setImpulseMaxSpeed(140)		--faster impulse (vs 120)
	ship:setRotationMaxSpeed(25)		--faster maneuver (vs 10)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,   40,		0,	 600,		4,		 3)	--weaker (vs 6) beam
	local gnat_db = queryScienceDatabase("Ships","No Class","Gnat")
	if gnat_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("Gnat")
		gnat_db = queryScienceDatabase("Ships","No Class","Gnat")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Drone"),	--base ship database entry
			gnat_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Gnat is a nimbler version of the Ktlitan Drone. It's got half the hull, but it moves and turns faster",
			nil,
			nil,		--jump range
			"sci_fi_alien_ship_4"
		)
	end
	return ship
end
function cucaracha(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Tug"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Cucaracha"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Cucaracha"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Cucaracha")
	ship:setShieldsMax(200, 50, 50, 50, 50, 50)		--stronger shields (vs 20)
	ship:setShields(200, 50, 50, 50, 50, 50)					
	ship:setHullMax(100)							--stronger hull (vs 50)
	ship:setHull(100)
	ship:setRotationMaxSpeed(20)					--faster maneuver (vs 10)
	ship:setAcceleration(30)						--faster acceleration (vs 15)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	60,	    0,	1500,		6,		10)	--beam (vs none)
	local cucaracha_db = queryScienceDatabase("Ships","No Class","Cucaracha")
	if cucaracha_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("Cucaracha")
		cucaracha_db = queryScienceDatabase("Ships","No Class","Cucaracha")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Tug"),	--base ship database entry
			cucaracha_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Cucaracha is a quick ship built around the Tug model with heavy shields and a heavy beam designed to be difficult to squash",
			nil,
			nil,		--jump range
			"space_tug"
		)
	end
	return ship
end
function starhammerIII(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Starhammer II"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Starhammer III"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Starhammer III"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Starhammer III")
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(4,	60,	  180,	1500,		8,		11)	--extra rear facing beam
	ship:setTubeSize(0,"large")
	ship:setWeaponStorageMax("Homing",16)						--more (vs 4)
	ship:setWeaponStorage("Homing", 16)		
	ship:setWeaponStorageMax("HVLI",36)							--more (vs 20)
	ship:setWeaponStorage("HVLI", 36)
	local starhammer_iii_db = queryScienceDatabase("Ships","Corvette","Starhammer III")
	if starhammer_iii_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Corvette")
		corvette_db:addEntry("Starhammer III")
		starhammer_iii_db = queryScienceDatabase("Ships","Corvette","Starhammer III")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Starhammer II"),	--base ship database entry
			starhammer_iii_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The designers of the Starhammer III took the Starhammer II and added a rear facing beam, enlarged one of the missile tubes and added more missiles to fire",
			{
				{key = "Large tube 0", value = "10 sec"},	--torpedo tube direction and load speed
				{key = "Tube 0", value = "10 sec"},			--torpedo tube direction and load speed
			},
			"5 - 50 U",		--jump range
			"battleship_destroyer_4_upgraded"
		)
	end
	return ship
end
function k2breaker(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Breaker"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["K2 Breaker"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["K2 Breaker"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("K2 Breaker")
	ship:setHullMax(200)							--stronger hull (vs 120)
	ship:setHull(200)
	ship:setWeaponTubeCount(3)						--more (vs 1)
	ship:setTubeSize(0,"large")						--large (vs normal)
	ship:setWeaponTubeDirection(1,-30)				
	ship:setWeaponTubeDirection(2, 30)
	ship:setWeaponTubeExclusiveFor(0,"HVLI")		--only HVLI (vs any)
	ship:setWeaponStorageMax("Homing",16)			--more (vs 0)
	ship:setWeaponStorage("Homing", 16)
	ship:setWeaponStorageMax("HVLI",8)				--more (vs 5)
	ship:setWeaponStorage("HVLI", 8)
	local k2_breaker_db = queryScienceDatabase("Ships","No Class","K2 Breaker")
	if k2_breaker_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No Class")
		no_class_db:addEntry("K2 Breaker")
		k2_breaker_db = queryScienceDatabase("Ships","No Class","K2 Breaker")
		addShipToDatabase(
			queryScienceDatabase("Ships","No Class","Ktlitan Breaker"),	--base ship database entry
			k2_breaker_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The K2 Breaker designers took the Ktlitan Breaker and beefed up the hull, added two bracketing tubes, enlarged the center tube and added more missiles to shoot. Should be good for a couple of enemy ships",
			{
				{key = "Large tube 0", value = "13 sec"},	--torpedo tube direction and load speed
				{key = "Tube -30", value = "13 sec"},		--torpedo tube direction and load speed
				{key = "Tube 30", value = "13 sec"},		--torpedo tube direction and load speed
			},
			nil,
			"sci_fi_alien_ship_2"
		)
	end
	return ship
end
function hurricane(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Piranha F8"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Hurricane"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Hurricane"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Hurricane")
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,40000)			
	ship:setWeaponTubeCount(8)						--more (vs 3)
	ship:setWeaponTubeExclusiveFor(1,"HVLI")		--only HVLI (vs any)
	ship:setWeaponTubeDirection(1,  0)				--forward (vs -90)
	ship:setTubeSize(3,"large")						
	ship:setWeaponTubeDirection(3,-90)
	ship:setTubeSize(4,"small")
	ship:setWeaponTubeExclusiveFor(4,"Homing")
	ship:setWeaponTubeDirection(4,-15)
	ship:setTubeSize(5,"small")
	ship:setWeaponTubeExclusiveFor(5,"Homing")
	ship:setWeaponTubeDirection(5, 15)
	ship:setWeaponTubeExclusiveFor(6,"Homing")
	ship:setWeaponTubeDirection(6,-30)
	ship:setWeaponTubeExclusiveFor(7,"Homing")
	ship:setWeaponTubeDirection(7, 30)
	ship:setWeaponStorageMax("Homing",24)			--more (vs 5)
	ship:setWeaponStorage("Homing", 24)
	local hurricane_db = queryScienceDatabase("Ships","Frigate","Hurricane")
	if hurricane_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Hurricane")
		hurricane_db = queryScienceDatabase("Ships","Frigate","Hurricane")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Piranha F8"),	--base ship database entry
			hurricane_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Hurricane is designed to jump in and shower the target with missiles. It is based on the Piranha F8, but with a jump drive, five more tubes in various directions and sizes and lots more missiles to shoot",
			{
				{key = "Large tube 0", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Tube 0", value = "12 sec"},			--torpedo tube direction and load speed
				{key = "Large tube 90", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Large tube -90", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Small tube -15", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Small tube 15", value = "12 sec"},	--torpedo tube direction and load speed
				{key = "Tube -30", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Tube 30", value = "12 sec"},		--torpedo tube direction and load speed
			},
			"5 - 40 U",		--jump range
			"HeavyCorvetteRed"
		)
	end
	return ship
end
function phobosT4(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Phobos T4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Phobos T4"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Phobos T4")
	ship:setRotationMaxSpeed(20)								--faster maneuver (vs 10)
	ship:setShieldsMax(80,30)									--stronger shields (vs 50,40)
	ship:setShields(80,30)					
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	90,	  -15,	1500,		6,		6)	--longer (vs 1200), faster (vs 8)
	ship:setBeamWeapon(1,	90,	   15,	1500,		6,		6)	
	local phobos_t4_db = queryScienceDatabase("Ships","Frigate","Phobos T4")
	if phobos_t4_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Phobos T4")
		phobos_t4_db = queryScienceDatabase("Ships","Frigate","Phobos T4")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			phobos_t4_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Phobos T4 makes some simple improvements on the Phobos T3: faster maneuver, stronger front shields, though weaker rear shields and longer and faster beam weapons",
			{
				{key = "Tube -1", value = "60 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "60 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function whirlwind(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Storm"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Whirlwind"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Whirlwind"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Whirlwind")
	ship:setWeaponTubeCount(9)					--more (vs 5)
	ship:setWeaponTubeDirection(0,-90)			--3 left, 3 right, 3 front (vs 5 front)	
	ship:setWeaponTubeDirection(1,-92)				
	ship:setWeaponTubeDirection(2,-88)				
	ship:setWeaponTubeDirection(3, 90)				
	ship:setWeaponTubeDirection(4, 92)				
	ship:setWeaponTubeDirection(5, 88)				
	ship:setWeaponTubeDirection(6,  0)				
	ship:setWeaponTubeDirection(7,  2)				
	ship:setWeaponTubeDirection(8, -2)				
	ship:setWeaponStorageMax("Homing",36)						--more (vs 15)
	ship:setWeaponStorage("Homing", 36)		
	ship:setWeaponStorageMax("HVLI",36)							--more (vs 15)
	ship:setWeaponStorage("HVLI", 36)
	local whirlwind_db = queryScienceDatabase("Ships","Frigate","Whirlwind")
	if whirlwind_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Whirlwind")
		whirlwind_db = queryScienceDatabase("Ships","Frigate","Whirlwind")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Storm"),	--base ship database entry
			whirlwind_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Whirlwind, another heavy artillery cruiser, takes the Storm and adds tubes and missiles. It's as if the Storm swallowed a Pirahna and grew gills. Expect to see missiles, lots of missiles",
			{
				{key = "Tube -90", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube -92", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube -88", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube  90", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube  92", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube  88", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube   0", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube   2", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube  -2", value = "15 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"HeavyCorvetteYellow"
		)
	end
	return ship
end
function farco3(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Farco 3"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Farco 3"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Farco 3")
	ship:setShieldsMax(60, 40)									--stronger shields (vs 50, 40)
	ship:setShields(60, 40)					
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	90,	-15,	 1500,	5.0,	6.0)	--longer (vs 1200), faster (vs 8)
	ship:setBeamWeapon(1,	90,	 15,	 1500,	5.0,	6.0)
	local farco_3_db = queryScienceDatabase("Ships","Frigate","Farco 3")
	if farco_3_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Farco 3")
		farco_3_db = queryScienceDatabase("Ships","Frigate","Farco 3")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			farco_3_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Farco models are evolutionary changes to the Phobos T3. In the case of the Farco 3, the beams are longer and faster and the shields are slightly stronger.",
			{
				{key = "Tube -1", value = "60 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "60 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function farco5(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Farco 5"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Farco 5"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Farco 5")
	ship:setShieldsMax(60, 40)				--stronger shields (vs 50, 40)
	ship:setShields(60, 40)	
	ship:setTubeLoadTime(0,30)				--faster (vs 60)
	ship:setTubeLoadTime(0,30)				
	local farco_5_db = queryScienceDatabase("Ships","Frigate","Farco 5")
	if farco_5_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Farco 5")
		farco_5_db = queryScienceDatabase("Ships","Frigate","Farco 5")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			farco_5_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Farco models are evolutionary changes to the Phobos T3. In the case of the Farco 5, the tubes load faster and the shields are slightly stronger.",
			{
				{key = "Tube -1", value = "30 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "30 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function farco8(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Farco 8"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Farco 8"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Farco 8")
	ship:setShieldsMax(80, 50)				--stronger shields (vs 50, 40)
	ship:setShields(80, 50)	
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	90,	-15,	 1500,	5.0,	6.0)	--longer (vs 1200), faster (vs 8)
	ship:setBeamWeapon(1,	90,	 15,	 1500,	5.0,	6.0)
	ship:setTubeLoadTime(0,30)				--faster (vs 60)
	ship:setTubeLoadTime(0,30)				
	local farco_8_db = queryScienceDatabase("Ships","Frigate","Farco 8")
	if farco_8_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Farco 8")
		farco_8_db = queryScienceDatabase("Ships","Frigate","Farco 8")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			farco_8_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Farco models are evolutionary changes to the Phobos T3. In the case of the Farco 8, the beams are longer and faster, the tubes load faster and the shields are stronger.",
			{
				{key = "Tube -1", value = "30 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "30 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function farco11(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Farco 11"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Farco 11"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Farco 11")
	ship:setShieldsMax(80, 50)				--stronger shields (vs 50, 40)
	ship:setShields(80, 50)	
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 10)
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	90,	-15,	 1500,	5.0,	6.0)	--longer (vs 1200), faster (vs 8)
	ship:setBeamWeapon(1,	90,	 15,	 1500,	5.0,	6.0)
	ship:setBeamWeapon(2,	20,	  0,	 1800,	5.0,	4.0)	--additional sniping beam
	local farco_11_db = queryScienceDatabase("Ships","Frigate","Farco 11")
	if farco_11_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Farco 11")
		farco_11_db = queryScienceDatabase("Ships","Frigate","Farco 11")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			farco_11_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Farco models are evolutionary changes to the Phobos T3. In the case of the Farco 11, the maneuver speed is faster, the beams are longer and faster, there's an added longer sniping beam and the shields are stronger.",
			{
				{key = "Tube -1", value = "60 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "60 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function farco13(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Farco 13"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Farco 13"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Farco 13")
	ship:setShieldsMax(90, 70)				--stronger shields (vs 50, 40)
	ship:setShields(90, 70)	
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 10)
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	90,	-15,	 1500,	5.0,	6.0)	--longer (vs 1200), faster (vs 8)
	ship:setBeamWeapon(1,	90,	 15,	 1500,	5.0,	6.0)
	ship:setBeamWeapon(2,	20,	  0,	 1800,	5.0,	4.0)	--additional sniping beam
	ship:setTubeLoadTime(0,30)				--faster (vs 60)
	ship:setTubeLoadTime(1,30)				
	ship:setWeaponStorageMax("Homing",16)						--more (vs 6)
	ship:setWeaponStorage("Homing", 16)		
	ship:setWeaponStorageMax("HVLI",30)							--more (vs 20)
	ship:setWeaponStorage("HVLI", 30)
	local farco_13_db = queryScienceDatabase("Ships","Frigate","Farco 13")
	if farco_13_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Farco 13")
		farco_13_db = queryScienceDatabase("Ships","Frigate","Farco 13")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			farco_13_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Farco models are evolutionary changes to the Phobos T3. In the case of the Farco 13, the maneuver speed is faster, the beams are longer and faster, there's an added longer sniping beam, the tubes load faster, there are more missiles and the shields are stronger.",
			{
				{key = "Tube -1", value = "30 sec"},	--torpedo tube direction and load speed
				{key = "Tube 1", value = "30 sec"},		--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function hornetMT55(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("MT52 Hornet"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["MT55 Hornet"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["MT55 Hornet"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("MT55 Hornet")
	ship:setRotationMaxSpeed(29)					--slower maneuver (vs 30)
	ship:setImpulseMaxSpeed(135)					--faster impulse (vs 120)
	ship:setAcceleration(40)						--faster acceleration (vs 25)
	local hornet_mt55_db = queryScienceDatabase("Ships","Starfighter","MT55 Hornet")
	if hornet_mt55_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("MT55 Hornet")
		hornet_mt55_db = queryScienceDatabase("Ships","Starfighter","MT55 Hornet")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MT52 Hornet"),	--base ship database entry
			hornet_mt55_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The MT55 Hornet is similar to the 52 series Hornet models. Its speed is faster but it turns more slowly",
			nil,
			nil,
			"WespeScoutYellow"
		)
	end
	return ship
end
function hornetMU55(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("MU52 Hornet"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["MU55 Hornet"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["MU55 Hornet"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("MU55 Hornet")
	ship:setRotationMaxSpeed(29)					--slower maneuver (vs 30)
	ship:setImpulseMaxSpeed(135)					--faster impulse (vs 120)
	ship:setAcceleration(40)						--faster acceleration (vs 25)
	ship:setWeaponTubeCount(1)						--more (vs 0)
	ship:setTubeSize(0,"small")
	ship:setTubeLoadTime(0,40)
	ship:setWeaponStorageMax("Homing",6)			--more (vs 0)
	ship:setWeaponStorage("Homing", 6)		
	local hornet_mu55_db = queryScienceDatabase("Ships","Starfighter","MU55 Hornet")
	if hornet_mu55_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("MU55 Hornet")
		hornet_mu55_db = queryScienceDatabase("Ships","Starfighter","MU55 Hornet")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","MU52 Hornet"),	--base ship database entry
			hornet_mu55_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The MU55 Hornet is similar to the 52 series Hornet models. Its speed is faster but it turns more slowly. The MU55 comes equipped with a small homing missile tube",
			{
				{key = "Small Tube 0", value = "40 sec"},	--torpedo tube size, direction and load speed
			},
			nil,
			"WespeScoutYellow"
		)
	end
	return ship
end
function piranhaF10(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Piranha F12.M"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Piranha F10"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Piranha F10"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Piranha F10")
	ship:setHullMax(50)						--weaker hull (vs 70)
	ship:setHull(50)
	ship:setShieldsMax(50, 50)				--stronger shields (vs 30, 30)
	ship:setShields(50, 50)					
	ship:setRotationMaxSpeed(10)			--faster maneuver (vs 6)
	ship:setTubeSize(0,"small")				--small (vs large)
	ship:setTubeSize(3,"small")
	ship:setTubeLoadTime(0,10)				--faster (vs 15)
	ship:setTubeLoadTime(3,10)
	ship:setTubeLoadTime(1,20)				--slower (vs 15)
	ship:setTubeLoadTime(4,20)
	ship:weaponTubeAllowMissle(2,"Homing")	--allow large homing missiles
	ship:weaponTubeAllowMissle(5,"Homing")
	ship:setWeaponStorageMax("HVLI",  20)	--more (vs 10)
	ship:setWeaponStorage("HVLI",     20)		
	ship:setWeaponStorageMax("Homing",10)	--more (vs 4)
	ship:setWeaponStorage("Homing",   10)		
	ship:setWeaponStorageMax("Nuke",   6)	--more (vs 2)
	ship:setWeaponStorage("Nuke",      6)		
	local piranha_f10_db = queryScienceDatabase("Ships","Frigate","Piranha F10")
	if piranha_f10_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Piranha F10")
		piranha_f10_db = queryScienceDatabase("Ships","Frigate","Piranha F10")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Piranha F12.M"),	--base ship database entry
			piranha_f10_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Piranha F10 borrows design aspects from the F8, F12 and F12.M. Internal bulkheads were removed, missile loading mechanisms tweaked and two large tubes replaced with two small tubes to make room for more missiles. This resulted in a weaker hull, varying missile load speeds and improved maneuverability. The shield generators received an upgrade",
			{
				{key = "Small tube -90", value = "10 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube -90", value = "20 sec"},			--torpedo tube size, direction and load speed
				{key = "Large tube -90", value = "15 sec"},		--torpedo tube size, direction and load speed
				{key = "Small tube 90", value = "10 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 90", value = "20 sec"},			--torpedo tube size, direction and load speed
				{key = "Large tube 90", value = "15 sec"},		--torpedo tube size, direction and load speed
			},
			nil,		--jump range
			"HeavyCorvetteRed"
		)
	end
	return ship
end
function predatorV2(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Piranha F8"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Predator V2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Predator V2"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Predator V2")
	ship:setShieldsMax(100,100)									--stronger shields (vs 30,30)
	ship:setShields(100,100)					
	ship:setHullMax(80)											--stronger hull (vs 70)
	ship:setHull(80)
	ship:setImpulseMaxSpeed(65)									--faster impulse (vs 40)
	ship:setRotationMaxSpeed(20)								--faster maneuver (vs 6)
	ship:setJumpDrive(true)
	ship:setJumpDriveRange(5000,35000)			
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	90,	    0,	1000,		6,		 4)	--more (vs 0)
	ship:setBeamWeapon(1,	90,	  180,	1000,		6,		 4)	
	ship:setWeaponTubeCount(8)									--more (vs 3)
	ship:setWeaponTubeDirection(0,-90)		--left (vs front)	
	ship:setWeaponTubeDirection(2,-90)		--left (vs right)
	ship:setWeaponTubeDirection(3,-90)		--left (vs right)
	ship:setWeaponTubeDirection(4, 90)				
	ship:setWeaponTubeDirection(5, 90)
	ship:setWeaponTubeDirection(6, 90)				
	ship:setWeaponTubeDirection(7, 90)
	ship:setTubeSize(0,"small")				--small (vs large)				
	ship:setTubeSize(4,"small")				--small (vs medium)			
	ship:setTubeSize(2,"medium")			--medium (vs large)			
	ship:setTubeSize(5,"medium")			--medium (vs large)			
	ship:setTubeSize(7,"large")				--large (vs medium)
	ship:setTubeLoadTime(0,10)				--faster (vs 15)
	ship:setTubeLoadTime(4,10)				--faster (vs 15)
	ship:setTubeLoadTime(1,13)				--faster (vs 15)
	ship:setTubeLoadTime(5,13)				--faster (vs 15)
	ship:setTubeLoadTime(3,18)				--slower (vs 15)
	ship:setTubeLoadTime(7,18)				--slower (vs 15)
	ship:setWeaponTubeExclusiveFor(0,"Homing")
	ship:setWeaponTubeExclusiveFor(1,"Homing")
	ship:setWeaponTubeExclusiveFor(2,"Homing")
	ship:setWeaponTubeExclusiveFor(3,"Homing")
	ship:setWeaponTubeExclusiveFor(4,"Homing")
	ship:setWeaponTubeExclusiveFor(5,"Homing")
	ship:setWeaponTubeExclusiveFor(6,"Homing")
	ship:setWeaponTubeExclusiveFor(7,"Homing")
	ship:setWeaponStorageMax("Homing",32)						--more (vs 5)
	ship:setWeaponStorage("Homing", 32)		
	ship:setWeaponStorageMax("HVLI",0)							--less (vs 10)
	ship:setWeaponStorage("HVLI", 0)
	ship:setRadarTrace("missile_cruiser.png")				--different radar trace
	local predator_v2_db = queryScienceDatabase("Ships","Frigate","Predator V2")
	if predator_v2_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Predator V2")
		predator_v2_db = queryScienceDatabase("Ships","Frigate","Predator V2")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Piranha F8"),	--base ship database entry
			predator_v2_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Predator V2 is a significantly improved Piranha F8. Stronger shields and hull, faster impulse and turning speeds, a jump drive, beam weapons, eight broadside missile tubes of varying sizes and speeds and a large number of homing missiles to shoot.",
			{
				{key = "Small tube -90", value = "10 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube -90", value = "12 sec"},		--torpedo tube size, direction and load speed
				{key = " Tube -90", value = "13 sec"},		--torpedo tube size, direction and load speed
				{key = "Large tube -90", value = "18 sec"},	--torpedo tube size, direction and load speed
				{key = "Small tube 90", value = "10 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube 90", value = "12 sec"},		--torpedo tube size, direction and load speed
				{key = " Tube 90", value = "13 sec"},		--torpedo tube size, direction and load speed
				{key = "Large Tube 90", value = "18 sec"},	--torpedo tube size, direction and load speed
			},
			"5 - 35 U",		--jump range
			"HeavyCorvetteRed"
		)
		predator_v2_db:setImage("radar/missile_cruiser.png")		--override default radar image
	end
	return ship		
end
function enforcerV2(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Blockade Runner"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Enforcer V2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Enforcer V2"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Enforcer V2")
	ship:setRadarTrace("ktlitan_destroyer.png")			--different radar trace
	ship:setWarpDrive(true)										--warp (vs none)
	ship:setWarpSpeed(600)
	ship:setImpulseMaxSpeed(100)								--faster impulse (vs 60)
	ship:setRotationMaxSpeed(20)								--faster maneuver (vs 15)
	ship:setShieldsMax(200,100,100)								--stronger shields (vs 100,150)
	ship:setShields(200,100,100)					
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	30,	    5,	1500,		6,		 8)	--narrower (vs 60), longer (vs 1000)
	ship:setBeamWeapon(1,	30,	   -5,	1500,		6,		 8)
	ship:setBeamWeapon(2,	30,	   10,	1300,		6,		10)	--forward (vs rear), longer (vs 1000), stronger (vs 8)
	ship:setBeamWeapon(3,	30,	  -10,	1300,		6,		10)
	ship:setWeaponTubeCount(3)									--more (vs 0)
	ship:setTubeSize(0,"large")									--large (vs normal)
	ship:setWeaponTubeDirection(1,-15)				
	ship:setWeaponTubeDirection(2, 15)	
	ship:setTubeLoadTime(0,18)
	ship:setTubeLoadTime(1,12)
	ship:setTubeLoadTime(2,12)			
	ship:setWeaponStorageMax("Homing",18)						--more (vs 0)
	ship:setWeaponStorage("Homing", 18)
	local enforcer_v2_db = queryScienceDatabase("Ships","Frigate","Enforcer V2")
	if enforcer_v2_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Enforcer V2")
		enforcer_v2_db = queryScienceDatabase("Ships","Frigate","Enforcer V2")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Blockade Runner"),	--base ship database entry
			enforcer_v2_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Enforcer V2 is a highly modified Blockade Runner. A warp drive was added and impulse engines boosted along with turning speed. Three missile tubes were added to shoot homing missiles, large ones straight ahead. Stronger shields and hull. Strengthened beams.",
			{
				{key = "Large tube 0", value = "18 sec"},	--torpedo tube direction and load speed
				{key = "Tube -15", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Tube 15", value = "12 sec"},		--torpedo tube direction and load speed
			},
			nil,
			"battleship_destroyer_3_upgraded"
		)
		enforcer_v2_db:setImage("radar/ktlitan_destroyer.png")		--override default radar image
	end
	return ship		
end
function gulper(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Starhammer II"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Gulper"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Gulper"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Gulper")
	ship:setShieldsMax(300,200,300,200)							--different  shields (vs 450, 350, 150, 150, 350)
	ship:setShields(300,200,300,200)					
	ship:setImpulseMaxSpeed(65)									--faster impulse (vs 30)
	ship:setRotationMaxSpeed(15)								--faster maneuver (vs 3.5)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(2,	80,	  190,	1500,		6,		 8)	--rear facing (vs forward), faster (vs 8), weaker (vs 11)
	ship:setBeamWeapon(3,	80,	  170,	1500,		6,		 8)
	ship:setWeaponTubeCount(6)									--more (vs 2)
	ship:setWeaponTubeExclusiveFor(0,"HVLI")
	ship:setWeaponTubeExclusiveFor(1,"HVLI")
	ship:weaponTubeAllowMissle(0,"Homing")
	ship:weaponTubeAllowMissle(1,"Homing")
	ship:setWeaponTubeExclusiveFor(2,"EMP")
	ship:setWeaponTubeExclusiveFor(3,"Nuke")
	ship:setWeaponTubeExclusiveFor(4,"EMP")
	ship:setWeaponTubeExclusiveFor(5,"Nuke")
	ship:setTubeSize(2,"small")
	ship:setTubeSize(5,"large")
	ship:setTubeLoadTime(2,8)					--faster (vs 10)
	ship:setTubeLoadTime(4,12)					--slower (vs 10)
	ship:setTubeLoadTime(5,14)					--slower (vs 10)
	ship:setWeaponStorageMax("Homing",8)		--more (vs 4)
	ship:setWeaponStorage("Homing", 8)
	ship:setWeaponStorageMax("EMP",8)			--more (vs 2)
	ship:setWeaponStorage("EMP", 8)
	ship:setWeaponStorageMax("Nuke",5)			--more (vs 0)
	ship:setWeaponStorage("Nuke", 5)
	local gulper_db = queryScienceDatabase("Ships","Corvette","Gulper")
	if gulper_db == nil then
		local corvette_db = queryScienceDatabase("Ships","Corvette")
		corvette_db:addEntry("Gulper")
		gulper_db = queryScienceDatabase("Ships","Corvette","Gulper")
		addShipToDatabase(
			queryScienceDatabase("Ships","Corvette","Starhammer II"),	--base ship database entry
			gulper_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Gulper resembles a Starhammer. It's faster, has fewer shield arcs, has two forward and two rear beam batteries, but most importantly, it has many more missiles of various sizes and load speeds",
			{
				{key = "Tube 0", value = "10 sec"},			--torpedo tube size, direction and load speed
				{key = " Tube 0", value = "10 sec"},		--torpedo tube size, direction and load speed
				{key = "Small tube 0", value = "8 sec"},	--torpedo tube direction and load speed
				{key = "  Tube 0", value = "10 sec"},		--torpedo tube size, direction and load speed
				{key = "   Tube 0", value = "12 sec"},		--torpedo tube size, direction and load speed
				{key = "Large tube 0", value = "14 sec"},	--torpedo tube size, direction and load speed
			},
			"5 - 50 U",		--jump range
			"battleship_destroyer_4_upgraded"
		)
	end
	return ship		
end
function diva(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Queen"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Diva"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Diva"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Diva")
	ship:setImpulseMaxSpeed(35)				--faster impulse (vs 0)
	ship:setRotationMaxSpeed(8)				--faster maneuver (vs 0)
	ship:setAcceleration(5)					--faster acceleration (vs 0)
	ship:setWeaponTubeDirection(1,180)		--rear (vs front)				
	local diva_db = queryScienceDatabase("Ships","No class","Diva")
	if diva_db == nil then
		local no_class_db = queryScienceDatabase("Ships","No class")
		no_class_db:addEntry("Diva")
		diva_db = queryScienceDatabase("Ships","No class","Diva")
		addShipToDatabase(
			queryScienceDatabase("Ships","No class","Ktlitan Queen"),	--base ship database entry
			diva_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Diva is a mobile version of the Ktlitan Queen with one tube pointed to the rear",
			{
				{key = "Tube 0", value = "15 sec"},			--torpedo tube size, direction and load speed
				{key = "Tube 180", value = "15 sec"},		--torpedo tube size, direction and load speed
			},
			nil,		--jump range
			"sci_fi_alien_ship_8"
		)
	end
	return ship		
end
function loki(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Odin"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Loki"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Loki"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Loki")
	ship:setImpulseMaxSpeed(1)				--faster impulse (vs 0)
	ship:setRotationMaxSpeed(2)				--faster maneuver (vs 1)
	ship:setAcceleration(5)					--faster acceleration (vs 0)
	for n=0,15 do
		if n % 4 == 0 then
			ship:setTubeSize(n,"small")		--smaller (vs large)
			ship:setTubeLoadTime(n,2.5)		--faster (vs 3)
		end
		if n % 4 == 1 then
			ship:setTubeSize(n,"medium")	--smaller (vs large)
		end
		if n % 4 == 2 then
			ship:setTubeSize(n,"medium")	--smaller (vs large)
			ship:setTubeLoadTime(n,3.5)		--slower (vs 3)
		end
	end
	local loki_db = queryScienceDatabase("Ships","Dreadnought","Loki")
	if loki_db == nil then
		local dreadnought_db = queryScienceDatabase("Ships","Dreadnought")
		dreadnought_db:addEntry("Loki")
		loki_db = queryScienceDatabase("Ships","Dreadnought","Loki")
		addShipToDatabase(
			queryScienceDatabase("Ships","Dreadnought","Odin"),	--base ship database entry
			loki_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Loki is a modified version of the Odin",
			{
				{key = "Small Tube 0", value = "2.5 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube 22.5", value = "3 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 45", value = "3.5 sec"},		--torpedo tube size, direction and load speed
				{key = "Large Tube 67.5", value = "3 sec"},	--torpedo tube size, direction and load speed
				{key = "Small Tube 90", value = "2.5 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube 112.5", value = "3 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 135", value = "3.5 sec"},		--torpedo tube size, direction and load speed
				{key = "Large Tube 157.5", value = "3 sec"},--torpedo tube size, direction and load speed
				{key = "Small Tube 180", value = "2.5 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube 202.5", value = "3 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 225", value = "3.5 sec"},		--torpedo tube size, direction and load speed
				{key = "Large Tube 247.5", value = "3 sec"},--torpedo tube size, direction and load speed
				{key = "Small Tube 270", value = "2.5 sec"},	--torpedo tube size, direction and load speed
				{key = "Tube 292.5", value = "3 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 315", value = "3.5 sec"},		--torpedo tube size, direction and load speed
				{key = "Large Tube 337.5", value = "3 sec"},--torpedo tube size, direction and load speed
			},
			"5 - 50 U",		--jump range
			"Ender Battlecruiser"
		)
	end
	return ship		
end
function munemi(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Flash"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Munemi"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Munemi"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Munemi")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(650)
	ship:setTubeSize(1,"small")
	ship:setWeaponTubeExclusiveFor(1,"EMP")
	ship:setWeaponStorageMax("Homing", 12)		--more (vs 6)
	ship:setWeaponStorage("Homing",    12)
	ship:setWeaponStorageMax("EMP",    4)		--more (vs 0)
	ship:setWeaponStorage("EMP",       4)
	ship:setWeaponStorageMax("Nuke",   4)		--more (vs 2)
	ship:setWeaponStorage("Nuke",      4)
	local munemi_db = queryScienceDatabase("Ships","Frigate","Munemi")
	if munemi_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Munemi")
		munemi_db = queryScienceDatabase("Ships","Frigate","Munemi")
		addShipToDatabase(
			queryScienceDatabase("Ships","Exuari","Flash"),	--base ship database entry
			munemi_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Munemi is loosely based on the Flash, but with a warp drive, twice the missiles and a stock of small EMPs",
			{
				{key = "Tube 0", value = "15 sec"},			--torpedo tube size, direction and load speed
				{key = "Small Tube 0", value = "15 sec"},	--torpedo tube size, direction and load speed
				{key = " Tube 0", value = "15 sec"},		--torpedo tube size, direction and load speed
			},
			nil,
			"small_frigate_2"
		)
	end
	return ship		
end
function maniapak(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Maniapak"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Maniapak"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Maniapak")
	ship:setRadarTrace("exuari_fighter.png")			--different radar trace
	ship:setImpulseMaxSpeed(70)					--slower impulse (vs 80)
	ship:setWeaponTubeCount(9)					--more (vs 1)
	ship:setWeaponTubeDirection(0,  0)				
	ship:setWeaponTubeDirection(1,-10)				
	ship:setWeaponTubeDirection(2, 10)				
	ship:setWeaponTubeDirection(3,  0)				
	ship:setWeaponTubeDirection(4,-12)				
	ship:setWeaponTubeDirection(5, 12)				
	ship:setWeaponTubeDirection(6,  0)				
	ship:setWeaponTubeDirection(7,-15)				
	ship:setWeaponTubeDirection(8, 15)				
	ship:setTubeSize(0,"small")
	ship:setTubeSize(1,"small")
	ship:setTubeSize(2,"small")
	ship:setTubeSize(6,"large")
	ship:setTubeSize(7,"large")
	ship:setTubeSize(8,"large")
	ship:setTubeLoadTime(0,15)
	ship:setTubeLoadTime(1,16)
	ship:setTubeLoadTime(2,17)
	ship:setTubeLoadTime(3,18)
	ship:setTubeLoadTime(4,19)
	ship:setTubeLoadTime(5,20)
	ship:setTubeLoadTime(6,21)
	ship:setTubeLoadTime(7,22)
	ship:setTubeLoadTime(8,23)
	ship:setWeaponStorageMax("Homing", 27)		--more (vs 0)
	ship:setWeaponStorage("Homing",    27)
	ship:setWeaponStorageMax("EMP",    18)		--more (vs 0)
	ship:setWeaponStorage("EMP",       18)
	ship:setWeaponStorageMax("Nuke",   27)		--more (vs 0)
	ship:setWeaponStorage("Nuke",      27)
	ship:setWeaponStorageMax("HVLI",   36)		--more (vs 4)
	ship:setWeaponStorage("HVLI",      36)
	local maniapak_db = queryScienceDatabase("Ships","Starfighter","Maniapak")
	if maniapak_db == nil then
		local fighter_db = queryScienceDatabase("Ships","Starfighter")
		fighter_db:addEntry("Maniapak")
		maniapak_db = queryScienceDatabase("Ships","Starfighter","Maniapak")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			maniapak_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Maniapak is an extreme modification of an Adder MK5 and a Blade. A maniacal designer was tasked with packing as many missiles as possible in this tiny starfighter frame. This record has yet to be beaten. Unfortunately, this ship is often a danger to friends as well as foes.",
			{
				{key = "Small Tube 0", value = "15 sec"},		--torpedo tube size, direction and load speed
				{key = "Small Tube -10", value = "16 sec"},		--torpedo tube size, direction and load speed
				{key = "Small Tube 10", value = "17 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 0", value = "18 Sec"},
				{key = "Tube -12", value = "19 sec"},
				{key = "Tube 12", value = "20 sec"},
				{key = "Large Tube 0", value = "21 sec"},
				{key = "Large Tube -15", value = "22 sec"},
				{key = "Large Tube 15", value = "23 sec"},
				{key = "Missile Storage", value = "H:27 E:18 N:27 L:36"},
			},
			nil,
			"AdlerLongRangeScoutYellow"
		)
		maniapak_db:setImage("radar/exuari_fighter.png")		--override default radar image
	end
	return ship		
end
function prador(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Battlestation"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Prador"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Prador"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Prador")
	ship:setImpulseMaxSpeed(50)									--faster impulse (vs 30)
	ship:setRotationMaxSpeed(10)								--faster maneuver (vs 1.5)
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	60,	  -15,	2500,		6,		 8)	--stronger beams, broader coverage
	ship:setBeamWeapon(1,	60,	  -45,	2500,		6,		 8)
	ship:setBeamWeapon(2,	60,	   15,	2500,		6,		 8)
	ship:setBeamWeapon(3,	60,	   45,	2500,		6,		 8)
	ship:setBeamWeapon(4,	60,	  -75,	2500,		6,		 8)
	ship:setBeamWeapon(5,	60,	 -105,	2500,		6,		 8)
	ship:setBeamWeapon(6,	60,	   75,	2500,		6,		 8)
	ship:setBeamWeapon(7,	60,	  105,	2500,		6,		 8)
	ship:setBeamWeapon(8,	60,	 -135,	2500,		6,		 8)
	ship:setBeamWeapon(9,	60,	 -165,	2500,		6,		 8)
	ship:setBeamWeapon(10,	60,	  135,	2500,		6,		 8)
	ship:setBeamWeapon(11,	60,	  165,	2500,		6,		 8)
	local prador_db = queryScienceDatabase("Ships","Dreadnought","Prador")
	if prador_db == nil then
		local dreadnought_db = queryScienceDatabase("Ships","Dreadnought")
		dreadnought_db:addEntry("Prador")
		prador_db = queryScienceDatabase("Ships","Dreadnought","Prador")
		addShipToDatabase(
			queryScienceDatabase("Ships","Dreadnought","Battlestation"),	--base ship database entry
			prador_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Prador improves on the Battlestation model by increasing the impulse speed, strengthening the hull and realigning the beam weapons",
			nil,
			"5 - 50 U",		--jump range
			"Ender Battlecruiser"
		)
	end
	return ship
end
function strongarm(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Blockade Runner"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Strongarm"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Strongarm"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Strongarm")
	ship:setImpulseMaxSpeed(75)				--faster impulse (vs 60)
	ship:setAcceleration(35)				--faster acceleration (vs 25)
	ship:setShieldsMax(250,200,200)			--different shields (vs 100, 150)
	ship:setShields(250,200,200)					
	ship:setHullMax(150)					--stronger hull (vs 70)
	ship:setHull(150)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	75,	   25,	1500,		6,		 8)	--wider, realigned, longer (vs 60, -15, 1000)
	ship:setBeamWeapon(1,	75,	  -25,	1500,		6,		 8)	--wider, realigned, longer (vs 60,  15, 1000)
	ship:setBeamWeapon(2,	30,	   10,	2000,		6,		 8)	--wider, realigned, longer (vs 25, 170, 1000)
	ship:setBeamWeapon(3,	30,	  -10,	2000,		6,		 8)	--wider, realigned, longer (vs 25, 190, 1000)
	ship:setBeamWeapon(4,  170,	  180,	1500,		6,		 8)	--additional rear, wide beam
	ship:setWeaponTubeCount(2)					--more (vs 0)
	ship:setWeaponTubeDirection(0,  90)				
	ship:setWeaponTubeDirection(1, -90)
	ship:setTubeLoadTime(0,15)
	ship:setTubeLoadTime(1,16)
	ship:setWeaponStorageMax("Homing",	8)		--more (vs 0)
	ship:setWeaponStorage("Homing",		8)
	ship:setWeaponStorageMax("Nuke", 	1)		--more (vs 0)
	ship:setWeaponStorage("Nuke",		1)
	ship:setWeaponStorageMax("EMP", 	3)		--more (vs 0)
	ship:setWeaponStorage("EMP",		3)
	ship:setWeaponStorageMax("HVLI", 	12)		--more (vs 0)
	ship:setWeaponStorage("HVLI",		12)
	local strongarm_db = queryScienceDatabase("Ships","Frigate","Strongarm")
	if strongarm_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Strongarm")
		strongarm_db = queryScienceDatabase("Ships","Frigate","Strongarm")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Blockade Runner"),	--base ship database entry
			strongarm_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Black operations took control of an undisclosed shipyard and heavily modified the Blockade Runner into the Strongarm. They sped up impulse and acceleration, strenghtened the shields and hull, lengthened and realigned the beams and added missile tubes.",
			{
				{key = "Tube 90", value = "15 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 270", value = "16 sec"},		--torpedo tube size, direction and load speed
				{key = "Missile Storage", value = "H:8 E:3 N:1 L:12"},
			},
			nil,
			"battleship_destroyer_3_upgraded"
		)
	end
	return ship
end
function dreadNoMore(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Dreadnought"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Dread No More"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Dread No More"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Dread No More")
	ship:setImpulseMaxSpeed(50)									--faster impulse (vs 30)
	ship:setRotationMaxSpeed(12)								--faster maneuver (vs 1.5)
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	25,	   -5,	1500,		7,		11)	--narrower (vs 90), more forward (vs dir -25), slower (vs 6), stronger (vs 8)
	ship:setBeamWeapon(1,	25,	    5,	1500,		7,		11)	--narrower (vs 90), more forward (vs dir  25), slower (vs 6), stronger (vs 8)
	ship:setBeamWeapon(2,	65,	  -45,	1200,		7,		11)	--narrower (vs 100), more forward (vs dir -60), slower (vs 6), stronger (vs 8)
	ship:setBeamWeapon(3,	65,	   45,	1200,		7,		11)	--narrower (vs 100), more forward (vs dir  60), slower (vs 6), stronger (vs 8)
	ship:setBeamWeapon(4,	20,	    0,	2000,		7,		11)	--narrower (vs 30), slower (vs 6), stronger (vs 8)
	ship:setBeamWeapon(5,  100,	  180,	1200,		7,		11)	--slower (vs 6), stronger (vs 8)
	local dread_no_more_db = queryScienceDatabase("Ships","Dreadnought","Dread No More")
	if dread_no_more_db == nil then
		local dreadnought_db = queryScienceDatabase("Ships","Dreadnought")
		dreadnought_db:addEntry("Dread No More")
		dread_no_more_db = queryScienceDatabase("Ships","Dreadnought","Dread No More")
		addShipToDatabase(
			queryScienceDatabase("Ships","Dreadnought","Dreadnought"),	--base ship database entry
			dread_no_more_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Encounter the Dread No More and you will dread no more since you'll be dead, at least that's what the designers had in mind. The improvements over the base Dreadnought include faster impulse and maneuvering, a stronger hull and beams that do more damage.",
			nil,
			nil,		--jump range
			"battleship_destroyer_1_upgraded"
		)
	end
	return ship
end
function tsarina(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Queen"):
		setBeamWeapon(0, 90, -15, 1000.0, 6.0, 10):
		setBeamWeapon(1, 90, -45, 1000.0, 6.0, 10):
		setBeamWeapon(3, 90, 15, 1000.0, 6.0, 10):
		setBeamWeapon(4, 90, 45, 1000.0, 6.0, 10):
		setTubeSize(0, "small"):
		setTubeSize(1, "small"):
		setWeaponStorage("Nuke", 0):
		setWeaponStorage("EMP", 0):
		setWeaponStorage("Homing", 0):
		setWeaponStorage("HVLI", 100):
		setHull(300):
		setShields(100, 50, 50):
		setAI("default"):  -- note it's a change from fighter AI. with slower impulse speed this works better as a "snake" for the tail to attack as well.
		setTypeName("Ktlitan Tsarina"):
		setDescriptions("Undiscovered type of Ktlitan warship", "Ktlitan Tsarina is a subtype of Ktlitan Queen. It's twice as agile and durable.  " ..
			"It focuses on using beams and dumbfire weapons. Prefers to lead smaller vessels in a \"snake\" formation which significantly boosts their agility and speed." ..
			"Once the leading Tsarina is destroyed, the formation is broken.")
	ship:setRotationMaxSpeed(2 * ship:getRotationMaxSpeed())
	setBeamColor(ship)
	ship:onTakingDamage(npcShipDamage)

	--- note: for now, the snake formation is implemented as a Kosai's One-Off

	local tsarinaDb = queryScienceDatabase("Ships", "No class", "Ktlitan Tsarina")
	if tsarinaDb == nil then
		local parentDb = queryScienceDatabase("Ships", "No class")
		parentDb:addEntry("Ktlitan Tsarina")
		local tsarinaDb = queryScienceDatabase("Ships", "No class", "Ktlitan Tsarina")
		addShipToDatabase(
			queryScienceDatabase("Ships", "No class", "Ktlitan Tsarina"),
			tsarinaDb,
			ship,
			"Ktlitan Tsarina is a subtype of Ktlitan Queen. It's twice as agile and durable. " ..
			"It focuses on using beams and dumbfire weapons. Prefers to lead smaller vessels in a \"snake\" formation which significantly boosts their agility and speed." ..
			"Once the leading Tsarina is destroyed, the formation is broken.",
			nil,
			nil,
			"sci_fi_alien_ship_8"
		)
	end

	return ship
end
function beastBreaker(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Breaker"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Beast Breaker"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Beast Breaker"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Beast Breaker")
	ship:setShieldsMax(80,80)					--shields (vs none)
	ship:setShields(80,80)
	ship:setWeaponTubeCount(2)					--more (vs 1)
	ship:setWeaponTubeDirection(1,180)
	ship:setWeaponStorageMax("Homing",	5)		--more (vs none)
	ship:setWeaponStorageMax("Mine",	3)		--more (vs none)
	ship:setWeaponStorageMax("EMP",		3)		--more (vs none)
	ship:setWeaponStorageMax("Nuke",	2)		--more (vs none)
	ship:setWeaponStorage("Homing",		5)
	ship:setWeaponStorage("Mine",		3)
	ship:setWeaponStorage("EMP",		3)
	ship:setWeaponStorage("Nuke",		2)
	local beast_breaker_db = queryScienceDatabase("Ships","No class","Beast Breaker")
	if beast_breaker_db == nil then
		local breaker_db = queryScienceDatabase("Ships","No class")
		breaker_db:addEntry("Beast Breaker")
		beast_breaker_db = queryScienceDatabase("Ships","No Class","Beast Breaker")
		addShipToDatabase(
			queryScienceDatabase("Ships","No class","Ktlitan Breaker"),	--base ship database entry
			beast_breaker_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Enhanced Breaker with shields and more missiles and an extra missile tube",
			{
				{key = "Tube 0", value = "13 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 180", value = "13 sec"},		--torpedo tube size, direction and load speed
			},
			nil,		--jump range
			"sci_fi_alien_ship_2"
		)
	end
	return ship
end
function foulFeeder(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Feeder"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Foul Feeder"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Foul Feeder"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Foul Feeder")
	ship:setShieldsMax(80,40)					--shields (vs none)
	ship:setShields(80,40)
	ship:setWeaponTubeCount(4)					--more (vs none)
	ship:setWeaponTubeDirection(1,90)
	ship:setWeaponTubeDirection(2,-90)
	ship:setWeaponTubeDirection(3,180)
	ship:setTubeSize(1,"small")
	ship:setTubeSize(2,"small")
	ship:setWeaponTubeExclusiveFor(0,"HVLI")
	ship:setWeaponTubeExclusiveFor(1,"HVLI")
	ship:setWeaponTubeExclusiveFor(2,"HVLI")
	ship:setWeaponTubeExclusiveFor(3,"HVLI")
	ship:weaponTubeAllowMissle(0,"Homing")
	ship:weaponTubeAllowMissle(1,"Homing")
	ship:weaponTubeAllowMissle(2,"Homing")
	ship:weaponTubeAllowMissle(3,"Homing")
	ship:setWeaponStorageMax("HVLI", 	6)		--more (vs none)
	ship:setWeaponStorageMax("Homing", 6)		--more (vs none)
	ship:setWeaponStorage("HVLI",		6)
	ship:setWeaponStorage("Homing",	6)
	ship:setTubeLoadTime(0, 12)
	ship:setTubeLoadTime(1, 8)
	ship:setTubeLoadTime(2, 8)
	ship:setTubeLoadTime(3, 12)
	local foul_feeder_db = queryScienceDatabase("Ships","No class","Foul Feeder")
	if foul_feeder_db == nil then
		local feeder_db = queryScienceDatabase("Ships","No class")
		feeder_db:addEntry("Foul Feeder")
		foul_feeder_db = queryScienceDatabase("Ships","No Class","Foul Feeder")
		addShipToDatabase(
			queryScienceDatabase("Ships","No class","Ktlitan Feeder"),	--base ship database entry
			foul_feeder_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Enhanced Feeder with shields and tubes",
			{
				{key = "Tube 0", value = "12 sec"},		--torpedo tube size, direction and load speed
				{key = "Small Tube -90", value = "8 sec"},		--torpedo tube size, direction and load speed
				{key = "Small Tube 90", value = "8 sec"},		--torpedo tube size, direction and load speed
				{key = "Tube 180", value = "12 sec"},		--torpedo tube size, direction and load speed
			},
			nil,		--jump range
			"sci_fi_alien_ship_5"
		)
	end
	return ship
end
function broodMother(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Ktlitan Queen"):
		setBeamWeapon(0, 25, -15, 1000.0, 6.0, 8):
		setBeamWeapon(1, 15, -45, 1500.0, 6.0, 4):
		setBeamWeapon(2, 25, 15, 1000.0, 6.0, 8):
		setBeamWeapon(3, 15, 45, 1500.0, 6.0, 4):
		setBeamWeapon(4, 15, 80, 1300.0, 6.0, 4):
		setBeamWeapon(5, 15, -80, 1300.0, 6.0, 4):
		setBeamWeaponTurret(4, 45, 80, 3000.0, 6.0, 3):
		setBeamWeaponTurret(5, 45, -80, 3000.0, 6.0, 3):
		setWeaponTubeCount(6):
		setTubeSize(0, "large"):
		setTubeSize(1, "large"):
		setTubeSize(2, "medium"):
		setTubeSize(3, "medium"):
		setTubeSize(4, "medium"):
		setTubeSize(5, "medium"):
		setWeaponTubeDirection(0, 80):
		setWeaponTubeDirection(1, -80):
		setWeaponTubeDirection(2, 100):
		setWeaponTubeDirection(3, -100):
		setWeaponTubeDirection(4, 190):
		setWeaponTubeDirection(5, -190):
		setWeaponStorage("Nuke", 8):
		setWeaponStorage("EMP", 8):
		setWeaponStorage("Mine", 4):
		setWeaponStorage("Homing", 15):
		setWeaponStorage("HVLI", 30):
		setWeaponStorageMax("Nuke", 8):
		setWeaponStorageMax("EMP", 8):
		setWeaponStorageMax("Mine", 4):
		setWeaponStorageMax("Homing", 15):
		setWeaponStorageMax("HVLI", 30):
		setWeaponTubeExclusiveFor(0,"EMP"):
		weaponTubeAllowMissle(0, "Nuke"):
		setWeaponTubeExclusiveFor(1, "EMP"):
		weaponTubeAllowMissle(1, "Nuke"):
		setWeaponTubeExclusiveFor(2, "HVLI"):
		weaponTubeAllowMissle(2, "Homing"):
		setWeaponTubeExclusiveFor(3, "HVLI"):
		weaponTubeAllowMissle(3,"Homing"):
		setWeaponTubeExclusiveFor(4,"Mine"):
		setWeaponTubeExclusiveFor(5,"Mine"):
		setTubeLoadTime(0, 10):
		setTubeLoadTime(1, 10):
		setTubeLoadTime(2, 10):
		setTubeLoadTime(3, 10):
		setTubeLoadTime(4, 20):
		setTubeLoadTime(5, 20):
		setHull(318):
		setHullMax(318):
		setShields(95, 153):
		setShieldsMax(95, 153):
		setEnergy(1388):
		setMaxEnergy(1388):
		setWarpDrive(true):
		setCombatManeuver(150,150):
		setImpulseMaxSpeed(40.0):
		setRotationMaxSpeed(8):
		setTypeName("Ktlitan Brood Mother"):
		setDescriptions("Special type of Ktlitan warship", "Ktlitan Brood Mother is a subtype of Ktlitan Queen."):
		setAI("default")
	ship:onTakingDamage(npcShipDamage)
	setBeamColor(ship)
	local broodMotherDb = queryScienceDatabase("Ships", "No class", "Ktlitan Brood Mother")
	if broodMotherDb == nil then
		local parentDb = queryScienceDatabase("Ships", "No class")
		parentDb:addEntry("Ktlitan Brood Mother")
		local broodMotherDb = queryScienceDatabase("Ships", "No class", "Ktlitan Brood Mother")
		addShipToDatabase(
			queryScienceDatabase("Ships", "No class", "Ktlitan Brood Mother"),
			broodMotherDb,
			ship,
			"Ktlitan Brood Mother is a subtype of Ktlitan Queen.",
			nil,
			nil,
			"sci_fi_alien_ship_8"
		)
	end
	return ship
end
function sweeper(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Sweeper"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Sweeper"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Sweeper")
	ship:setImpulseMaxSpeed(70)					--slower impulse (vs 80)
	ship:setWeaponTubeCount(15)					--more (vs 1)
	ship:setWeaponTubeDirection(0, -45)				
	ship:setWeaponTubeDirection(1,  45)				
	ship:setWeaponTubeDirection(2, -30)				
	ship:setWeaponTubeDirection(3,  30)				
	ship:setWeaponTubeDirection(4, -15)				
	ship:setWeaponTubeDirection(5,  15)				
	ship:setWeaponTubeDirection(6,   0)				
	ship:setWeaponTubeDirection(7, -40)				
	ship:setWeaponTubeDirection(8,  40)				
	ship:setWeaponTubeDirection(9, -20)				
	ship:setWeaponTubeDirection(10, 20)				
	ship:setWeaponTubeDirection(11,  0)				
	ship:setWeaponTubeDirection(12,-10)				
	ship:setWeaponTubeDirection(13, 10)				
	ship:setWeaponTubeDirection(14,  0)				
	ship:setTubeSize(0,"small")
	ship:setTubeSize(1,"small")
	ship:setTubeSize(2,"small")
	ship:setTubeSize(3,"small")
	ship:setTubeSize(4,"small")
	ship:setTubeSize(5,"small")
	ship:setTubeSize(6,"small")
	ship:setTubeSize(12,"large")	
	ship:setTubeSize(13,"large")	
	ship:setTubeSize(14,"large")	
	ship:setTubeLoadTime(0, 15)
	ship:setTubeLoadTime(1, 15)
	ship:setTubeLoadTime(2, 16)
	ship:setTubeLoadTime(3, 16)
	ship:setTubeLoadTime(4, 17)
	ship:setTubeLoadTime(5, 17)
	ship:setTubeLoadTime(6, 18)
	ship:setTubeLoadTime(7, 19)
	ship:setTubeLoadTime(8, 19)
	ship:setTubeLoadTime(9, 20)
	ship:setTubeLoadTime(10,20)
	ship:setTubeLoadTime(11,21)
	ship:setTubeLoadTime(12,22)
	ship:setTubeLoadTime(13,22)
	ship:setTubeLoadTime(14,23)
	ship:setWeaponStorageMax("HVLI",   45)		--more (vs 4)
	ship:setWeaponStorage("HVLI",      45)
	local sweeper_db = queryScienceDatabase("Ships","Starfighter","Sweeper")
	if sweeper_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Sweeper")
		sweeper_db = queryScienceDatabase("Ships","Starfighter","Sweeper")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			sweeper_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Sweeper applies the technology gleaned from the Maniapak, namely the inclusion of numerous HVLI",
			{
				{key = "7 tubes -45 to 45", value = "Small: 15-18 sec"},	--torpedo tube direction and load speed
				{key = "5 tubes -40 to 40", value = "19-21 sec"},	--torpedo tube direction and load speed
				{key = "3 tubes -10 to 10", value = "Large: 12-14 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AdlerLongRangeScoutYellow"
		)
	end
	return ship
end
function broom(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Broom"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Broom"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Broom")
	ship:setImpulseMaxSpeed(73)					--slower impulse (vs 80)
	ship:setWeaponTubeCount(9)					--more (vs 1)
	ship:setWeaponTubeDirection(0, -30)				
	ship:setWeaponTubeDirection(1,  30)				
	ship:setWeaponTubeDirection(2, -15)				
	ship:setWeaponTubeDirection(3,  15)				
	ship:setWeaponTubeDirection(4,   0)				
	ship:setWeaponTubeDirection(5, -10)				
	ship:setWeaponTubeDirection(6,  10)				
	ship:setWeaponTubeDirection(7,   0)				
	ship:setWeaponTubeDirection(8,   0)				
	ship:setTubeSize(0,"small")
	ship:setTubeSize(1,"small")
	ship:setTubeSize(2,"small")
	ship:setTubeSize(3,"small")
	ship:setTubeSize(4,"small")
	ship:setTubeSize(8,"large")
	ship:setTubeLoadTime(0, 15)
	ship:setTubeLoadTime(1, 15)
	ship:setTubeLoadTime(2, 16)
	ship:setTubeLoadTime(3, 16)
	ship:setTubeLoadTime(4, 17)
	ship:setTubeLoadTime(5, 18)
	ship:setTubeLoadTime(6, 18)
	ship:setTubeLoadTime(7, 19)
	ship:setTubeLoadTime(8, 20)
	ship:setWeaponStorageMax("HVLI",   27)		--more (vs 4)
	ship:setWeaponStorage("HVLI",      27)
	local broom_db = queryScienceDatabase("Ships","Starfighter","Broom")
	if broom_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Broom")
		broom_db = queryScienceDatabase("Ships","Starfighter","Broom")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			broom_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Broom applies the technology gleaned from the Maniapak, namely the inclusion of several HVLI",
			{
				{key = "5 tubes -30 to 30", value = "Small: 15-17 sec"},	--torpedo tube direction and load speed
				{key = "3 tubes -10 to 10", value = "18-19 sec"},	--torpedo tube direction and load speed
				{key = "Tube 0", value = "20 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AdlerLongRangeScoutYellow"
		)
	end
	return ship
end
function brush(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Adder MK5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Brush"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Brush"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Brush")
	ship:setImpulseMaxSpeed(76)					--slower impulse (vs 80)
	ship:setWeaponTubeCount(6)					--more (vs 1)
	ship:setWeaponTubeDirection(0, -10)				
	ship:setWeaponTubeDirection(1,  10)				
	ship:setWeaponTubeDirection(2,   0)				
	ship:setWeaponTubeDirection(3,  -5)				
	ship:setWeaponTubeDirection(4,   5)				
	ship:setWeaponTubeDirection(5,   0)				
	ship:setTubeSize(0,"small")
	ship:setTubeSize(1,"small")
	ship:setTubeSize(2,"small")
	ship:setTubeSize(5,"large")
	ship:setTubeLoadTime(0, 15)
	ship:setTubeLoadTime(1, 15)
	ship:setTubeLoadTime(2, 16)
	ship:setTubeLoadTime(3, 17)
	ship:setTubeLoadTime(4, 17)
	ship:setTubeLoadTime(5, 18)
	ship:setWeaponStorageMax("HVLI",   24)		--more (vs 4)
	ship:setWeaponStorage("HVLI",      24)
	local brush_db = queryScienceDatabase("Ships","Starfighter","Brush")
	if brush_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Brush")
		brush_db = queryScienceDatabase("Ships","Starfighter","Brush")
		addShipToDatabase(
			queryScienceDatabase("Ships","Starfighter","Adder MK5"),	--base ship database entry
			brush_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Brush applies the technology gleaned from the Maniapak, namely adapting it to HVLI",
			{
				{key = "3 tubes -10 to 10", value = "Small: 15-16 sec"},	--torpedo tube direction and load speed
				{key = "Tube -5", value = "17 sec"},	--torpedo tube direction and load speed
				{key = "Tube 5", value = "17 sec"},	--torpedo tube direction and load speed
				{key = "Tube 0", value = "Large: 18 sec"},	--torpedo tube direction and load speed
			},
			nil,		--jump range
			"AdlerLongRangeScoutYellow"
		)
	end
	return ship
end
function supervisor(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Blockade Runner"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Supervisor"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Supervisor"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Supervisor")
	ship:setShieldsMax(200,100,100)								--stronger shields (vs 100,150)
	ship:setShields(200,100,100)					
	ship:setHullMax(100)										--stronger hull (vs 70)
	ship:setHull(100)
	ship:setRotationMaxSpeed(30)								--faster maneuver (vs 15)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	60,	   15,	1000,		6,		 8)	--change sides (vs -15)
	ship:setBeamWeapon(1,	60,	  -15,	1000,		6,		 8) --change sides (vs 15)
	ship:setBeamWeapon(2,  120,	  120,	1000,		6,		 8)	--broadside to rear (vs rear), wider (vs 25)
	ship:setBeamWeapon(3,  120,	 -120,	1000,		6,		 8)
	local supervisor_db = queryScienceDatabase("Ships","Frigate","Supervisor")
	if supervisor_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Supervisor")
		supervisor_db = queryScienceDatabase("Ships","Frigate","Supervisor")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Blockade Runner"),	--base ship database entry
			supervisor_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Black operations took control of an undisclosed shipyard and tweaked the Blockade Runner into the Supervisor. They strenghtened the shields and hull and realigned the beams",
			nil,	--torpedo tubes
			nil,	--jump range
			"battleship_destroyer_3_upgraded"
		)
	end
	return ship
end
function mikado(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Storm"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Mikado"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Mikado"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setShieldsMax(120,120)					--stronger (vs 30,30)
	ship:setShields(120,120)					
	ship:setHullMax(80)							--stronger hull (vs 50)
	ship:setHull(80)
	ship:setRotationMaxSpeed(15)				--faster maneuver (vs 6)
	ship:setTypeName("Mikado")
	ship:setRadarTrace("missile_cruiser.png")	--different radar trace
	ship:setWeaponTubeCount(16)					--more (vs 5)
	ship:setWeaponTubeDirection(0, -72):setTubeSize(0,  "large"):setTubeLoadTime(0, 15):setWeaponTubeExclusiveFor(0, "HVLI")
	ship:setWeaponTubeDirection(1, -79):setTubeSize(1, "medium"):setTubeLoadTime(1, 10):setWeaponTubeExclusiveFor(1, "HVLI"):weaponTubeAllowMissle(1, "Homing")
	ship:setWeaponTubeDirection(2, -85):setTubeSize(2,  "small"):setTubeLoadTime(2,  5):setWeaponTubeExclusiveFor(2, "HVLI"):weaponTubeAllowMissle(2,   "Nuke")
	ship:setWeaponTubeDirection(3, -90):setTubeSize(3,  "large"):setTubeLoadTime(3, 16):setWeaponTubeExclusiveFor(3, "HVLI"):weaponTubeAllowMissle(3, "Homing")
	ship:setWeaponTubeDirection(4, -90):setTubeSize(4, "medium"):setTubeLoadTime(4, 11):setWeaponTubeExclusiveFor(4, "HVLI"):weaponTubeAllowMissle(4, "Homing"):weaponTubeAllowMissle(4, "Nuke"):weaponTubeAllowMissle(5,  "EMP")
	ship:setWeaponTubeDirection(5, -95):setTubeSize(5,  "small"):setTubeLoadTime(5,  6):setWeaponTubeExclusiveFor(5, "HVLI"):weaponTubeAllowMissle(5,   "Nuke"):weaponTubeAllowMissle(5,  "EMP")
	ship:setWeaponTubeDirection(6,-101):setTubeSize(6, "medium"):setTubeLoadTime(6, 12):setWeaponTubeExclusiveFor(6, "HVLI"):weaponTubeAllowMissle(6,   "Nuke")
	ship:setWeaponTubeDirection(7,-108):setTubeSize(7,  "small"):setTubeLoadTime(7,  7):setWeaponTubeExclusiveFor(7, "HVLI"):weaponTubeAllowMissle(7, "Homing"):weaponTubeAllowMissle(7, "Nuke"):weaponTubeAllowMissle(5,  "EMP")
	ship:setWeaponTubeDirection(8,  72):setTubeSize(8,  "small"):setTubeLoadTime(8,  7):setWeaponTubeExclusiveFor(8, "HVLI"):weaponTubeAllowMissle(8, "Homing"):weaponTubeAllowMissle(8, "Nuke"):weaponTubeAllowMissle(5,  "EMP")
	ship:setWeaponTubeDirection(9,  79):setTubeSize(9, "medium"):setTubeLoadTime(9, 12):setWeaponTubeExclusiveFor(9, "HVLI"):weaponTubeAllowMissle(9,   "Nuke")
	ship:setWeaponTubeDirection(10, 85):setTubeSize(10, "small"):setTubeLoadTime(10, 6):setWeaponTubeExclusiveFor(10,"HVLI"):weaponTubeAllowMissle(10,  "Nuke"):weaponTubeAllowMissle(10, "EMP")
	ship:setWeaponTubeDirection(11, 90):setTubeSize(11, "large"):setTubeLoadTime(11,16):setWeaponTubeExclusiveFor(11,"HVLI"):weaponTubeAllowMissle(11,"Homing")
	ship:setWeaponTubeDirection(12, 90):setTubeSize(12,"medium"):setTubeLoadTime(12,11):setWeaponTubeExclusiveFor(12,"HVLI"):weaponTubeAllowMissle(12,"Homing"):weaponTubeAllowMissle(12,"Nuke"):weaponTubeAllowMissle(5,  "EMP")
	ship:setWeaponTubeDirection(13, 95):setTubeSize(13, "small"):setTubeLoadTime(13, 5):setWeaponTubeExclusiveFor(13,"HVLI"):weaponTubeAllowMissle(13,  "Nuke")
	ship:setWeaponTubeDirection(14,101):setTubeSize(14,"medium"):setTubeLoadTime(14,10):setWeaponTubeExclusiveFor(14,"HVLI"):weaponTubeAllowMissle(14,"Homing")
	ship:setWeaponTubeDirection(15,108):setTubeSize(15, "large"):setTubeLoadTime(15,15):setWeaponTubeExclusiveFor(15,"HVLI")
	ship:setWeaponStorageMax("Homing", 32)		--more (vs 15)
	ship:setWeaponStorage("Homing",    32)
	ship:setWeaponStorageMax("EMP",    20)		--more (vs 0)
	ship:setWeaponStorage("EMP",       20)
	ship:setWeaponStorageMax("Nuke",   30)		--more (vs 0)
	ship:setWeaponStorage("Nuke",      30)
	ship:setWeaponStorageMax("HVLI",   48)		--more (vs 15)
	ship:setWeaponStorage("HVLI",      48)
	local mikado_db = queryScienceDatabase("Ships","Frigate","Mikado")
	if mikado_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Mikado")
		mikado_db = queryScienceDatabase("Ships","Frigate","Mikado")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Storm"),	--base ship database entry
			mikado_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Mikado is a beefed up heavy artillery cruiser bristling with missile tubes and stuffed with missiles. It may move slow, but it's nimble for a missile ship.",
			{
				{key = "Large tube -72 & 108", value = "15 sec"},	--torpedo tube direction and load speed
				{key = "Tube -79 & 101", value = "10 sec"},		--torpedo tube direction and load speed
				{key = "Small Tube -85 & 95", value = "5 sec"},	--torpedo tube direction and load speed
				{key = "Large Tube -90 & 90", value = "16 sec"},	--torpedo tube direction and load speed
				{key = "Tube -90 & 90", value = "11 sec"},		--torpedo tube direction and load speed
				{key = "Small Tube -95 & 85", value = "6 sec"},	--torpedo tube direction and load speed
				{key = "Tube -101 & 79", value = "12 sec"},		--torpedo tube direction and load speed
				{key = "Small Tube -108 & 72", value = "7 sec"},	--torpedo tube direction and load speed
			},
			nil,	--jump range
			"HeavyCorvetteYellow"
		)
		mikado_db:setImage("radar/missile_cruiser.png")		--override default radar image
	end
	return ship
end
function touchy(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Fighter"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Touchy"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Touchy"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Touchy")
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	12,	  0,	 2200,	9.0,	9.0)	--narrower (vs 60), longer (vs 1000), slower (vs 4),  stronger (vs 4)
	local touchy_db = queryScienceDatabase("Ships","Starfighter","Touchy")
	if touchy_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Touchy")
		touchy_db = queryScienceDatabase("Ships","Starfighter","Touchy")
		addShipToDatabase(
			queryScienceDatabase("Ships","Exuari","Dagger"),	--base ship database entry
			touchy_db,	--modified ship database entry
			ship,			--ship just created, long description on the next line
			"Touchy is a fighter with a highly modified beam weapon: narrower, longer, slower and stronger",
			nil,
			nil,
			"small_fighter_1"
		)
	end
	return ship
end
function barracuda(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Phobos T3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Barracuda"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Barracuda"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Barracuda")
	ship:setHullMax(200)			--stronger hull (vs 70)
	ship:setHull(200)
	ship:setShieldsMax(200,100,100)	--stronger shields (vs 50,40)
	ship:setShields(200,100,100)
	ship:setImpulseMaxSpeed(75)		--faster impulse (vs 60)
	ship:setRotationMaxSpeed(15)	--faster maneuver (vs 10)
	ship:setWeaponTubeCount(16)		--more (vs 2)
	ship:setWeaponTubeDirection(0,   5):setTubeSize(0,  "small"):setTubeLoadTime(0,  8):setWeaponTubeExclusiveFor(0, "Homing")
	ship:setWeaponTubeDirection(1,  -5):setTubeSize(1,  "small"):setTubeLoadTime(1,  8):setWeaponTubeExclusiveFor(1, "Homing")
	ship:setWeaponTubeDirection(2,   0):setTubeSize(2,  "small"):setTubeLoadTime(2,  7):setWeaponTubeExclusiveFor(2, "Homing")
	ship:setWeaponTubeDirection(3,   5):setTubeSize(3,  "small"):setTubeLoadTime(3,  6):setWeaponTubeExclusiveFor(3, "EMP")
	ship:setWeaponTubeDirection(4,  -5):setTubeSize(4,  "small"):setTubeLoadTime(4,  6):setWeaponTubeExclusiveFor(4, "EMP")
	ship:setWeaponTubeDirection(5,   0):setTubeSize(5,  "small"):setTubeLoadTime(5,  5):setWeaponTubeExclusiveFor(5, "EMP")
	ship:setWeaponTubeDirection(6,   5):setTubeSize(6,  "small"):setTubeLoadTime(6,  9):setWeaponTubeExclusiveFor(6, "Nuke")
	ship:setWeaponTubeDirection(7,  -5):setTubeSize(7,  "small"):setTubeLoadTime(7,  9):setWeaponTubeExclusiveFor(7, "Nuke")
	ship:setWeaponTubeDirection(8,   0):setTubeSize(8,  "small"):setTubeLoadTime(8,  8):setWeaponTubeExclusiveFor(8, "Nuke")
	ship:setWeaponTubeDirection(9,   5):setTubeSize(9,  "small"):setTubeLoadTime(9,  4):setWeaponTubeExclusiveFor(9, "HVLI")
	ship:setWeaponTubeDirection(10, -5):setTubeSize(10, "small"):setTubeLoadTime(10, 4):setWeaponTubeExclusiveFor(10,"HVLI")
	ship:setWeaponTubeDirection(11,  0):setTubeSize(11, "small"):setTubeLoadTime(11, 3):setWeaponTubeExclusiveFor(11,"HVLI")
	ship:setWeaponTubeDirection(12,-10):setTubeSize(12, "small"):setTubeLoadTime(12, 5):setWeaponTubeExclusiveFor(12,"HVLI")
	ship:setWeaponTubeDirection(13, 10):setTubeSize(13, "small"):setTubeLoadTime(13, 5):setWeaponTubeExclusiveFor(13,"HVLI")
	ship:setWeaponTubeDirection(14,  0):setTubeSize(14,"medium"):setTubeLoadTime(14, 5):setWeaponTubeExclusiveFor(14,"Homing")
	ship:setWeaponTubeDirection(15,  0):setTubeSize(15,"medium"):setTubeLoadTime(15,10):setWeaponTubeExclusiveFor(15,"Nuke")
	ship:setWeaponStorageMax("Homing", 32)		--more (vs 6)
	ship:setWeaponStorage("Homing",    32)
	ship:setWeaponStorageMax("EMP",    20)		--more (vs 0)
	ship:setWeaponStorage("EMP",       20)
	ship:setWeaponStorageMax("Nuke",   18)		--more (vs 0)
	ship:setWeaponStorage("Nuke",      18)
	ship:setWeaponStorageMax("HVLI",   55)		--more (vs 12)
	ship:setWeaponStorage("HVLI",      55)
	local barracuda_db = queryScienceDatabase("Ships","Frigate","Barracuda")
	if barracuda_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Barracuda")
		barracuda_db = queryScienceDatabase("Ships","Frigate","Barracuda")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Phobos T3"),	--base ship database entry
			barracuda_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Barracuda started off as a Phobos T3. It was given massive upgrades to shields, hull and missile weapons. The impulse systems were also upgraded. It's designed to spray missiles forth at a prodigious rate.\n\nIt barely qualifies as a frigate, it's more like a mini-corvette.",
			{
				{key = "Small tubes 0", value = "7 sec / Homing, 8 sec / Nuke"},	--torpedo tube direction and load speed
				{key = "Small tubes 5 & -5", value = "8 sec / Homing, 9 sec / Nuke"},	--torpedo tube direction and load speed
				{key = "Small tube 0", value = "5 sec / EMP"},	--torpedo tube direction and load speed
				{key = " Small tubes 5 & -5", value = "6 sec / EMP"},	--torpedo tube direction and load speed
				{key = "  Small tube 0", value = "3 sec / HVLI"},	--torpedo tube direction and load speed
				{key = "   Small tubes 5 & -5", value = "4 sec / HVLI"},	--torpedo tube direction and load speed
				{key = "Small tubes 10 & -10", value = "5 sec / HVLI"},	--torpedo tube direction and load speed
				{key = "Tube 0", value = "5 sec / Homing"},	--torpedo tube direction and load speed
				{key = " Tube 0", value = "10 sec / Nuke"},	--torpedo tube direction and load speed
			},
			nil,	--jump range
			"AtlasHeavyFighterYellow"
		)
	end
	return ship
end
function nirvanaR8(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Nirvana R5"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Nirvana R8"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Nirvana R8"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Nirvana R8")
	ship:setHullMax(100)			--stronger hull (vs 70)
	ship:setHull(100)
	ship:setShieldsMax(80,40,40)	--stronger shields (vs 50,40)
	ship:setShields(80,40,40)
	ship:setImpulseMaxSpeed(95)		--faster impulse (vs 70)
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	20,	  0,	 1500,	   3,	1)	--narrower (vs 90), straight (vs -15), longer (vs 1200)
	ship:setBeamWeapon(1,	40,	  0,	 1000,	   4,	6)	--narrower (vs 90), straight (vs 15), shorter (vs 1200), slower (vs 3), stronger (vs 1)
	ship:setBeamWeapon(2,	90,	  0,	  800,	   5,	8)	--straight (vs 50), shorter (vs 1200), slower (vs 3), stronger (vs 1)
	ship:setBeamWeapon(3,  180,	  0,	  700,	   5,	12)	--wider (vs 90), straight (vs -50), shorter (vs 1200), slower (vs 3), stronger (vs 1)
	ship:setBeamWeapon(4,  270,	  0,	  600,	   5,	20)	
	local nirvana_r8_db = queryScienceDatabase("Ships","Frigate","Nirvana R8")
	if nirvana_r8_db == nil then
		local frigate_db = queryScienceDatabase("Ships","Frigate")
		frigate_db:addEntry("Nirvana R8")
		nirvana_r8_db = queryScienceDatabase("Ships","Frigate","Nirvana R8")
		addShipToDatabase(
			queryScienceDatabase("Ships","Frigate","Nirvana R5"),	--base ship database entry
			nirvana_r8_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Nirvana R8 departs from the normal Nirvana design with an improved hull, impulse engine, three shield arcs and a radical change to the beam arrangement. In addition to warding off fighters, the 'Rate' as it's come to be known has beams more powerful as their range shortens. You don't want to let the Rate get too close to you.",
			nil,
			nil,	--jump range
			"small_frigate_5"
		)
	end
	return ship
end
function shepherd(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Fighter"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Shepherd"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Shepherd"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Shepherd")
--				   Index,  Arc,	Dir,	Range, Cycle,	Damage
	ship:setBeamWeapon(0,	10,	  0,	 3000,	   4,	4)	--narrower (vs 60), longer (vs 1000)
	local shepherd_db = queryScienceDatabase("Ships","Starfighter","Shepherd")
	if shepherd_db == nil then
		local starfighter_db = queryScienceDatabase("Ships","Starfighter")
		starfighter_db:addEntry("Shepherd")
		shepherd_db = queryScienceDatabase("Ships","Starfighter","Shepherd")
		addShipToDatabase(
			queryScienceDatabase("Ships","Exuari","Dagger"),	--base ship database entry
			shepherd_db,		--modified ship database entry
			ship,			--ship just created, long description on the next line
			"The Shepherd is a Fighter with a long narrow beam. Tactical recommendation: hack the impulse engines",
			nil,
			nil,	--jump range
			"small_fighter_1"
		)
	end
	return ship
end

function addShipToDatabase(base_db,modified_db,ship,description,tube_directions,jump_range,model_name)
	modified_db:setLongDescription(description)
	modified_db:setImage(base_db:getImage())
	modified_db:setKeyValue("Class",base_db:getKeyValue("Class"))
	modified_db:setKeyValue("Sub-class",base_db:getKeyValue("Sub-class"))
	modified_db:setKeyValue("Size",base_db:getKeyValue("Size"))
	local shields = ship:getShieldCount()
	if shields > 0 then
		local shield_string = ""
		for i=1,shields do
			if shield_string == "" then
				shield_string = string.format("%i",math.floor(ship:getShieldMax(i-1)))
			else
				shield_string = string.format("%s/%i",shield_string,math.floor(ship:getShieldMax(i-1)))
			end
		end
		modified_db:setKeyValue("Shield",shield_string)
	end
	modified_db:setKeyValue("Hull",string.format("%i",math.floor(ship:getHullMax())))
	modified_db:setKeyValue("Move speed",string.format("%.1f u/min",ship:getImpulseMaxSpeed()*60/1000))
	modified_db:setKeyValue("Turn speed",string.format("%.1f deg/sec",ship:getRotationMaxSpeed()))
	if ship:hasJumpDrive() then
		if jump_range == nil then
			local base_jump_range = base_db:getKeyValue("Jump range")
			if base_jump_range ~= nil and base_jump_range ~= "" then
				modified_db:setKeyValue("Jump range",base_jump_range)
			else
				modified_db:setKeyValue("Jump range","5 - 50 u")
			end
		else
			modified_db:setKeyValue("Jump range",jump_range)
		end
	end
	if ship:hasWarpDrive() then
		modified_db:setKeyValue("Warp Speed",string.format("%.1f u/min",ship:getWarpSpeed()*60/1000))
	end
	local key = ""
	if ship:getBeamWeaponRange(0) > 0 then
		local bi = 0
		repeat
			local beam_direction = ship:getBeamWeaponDirection(bi)
			if beam_direction > 315 and beam_direction < 360 then
				beam_direction = beam_direction - 360
			end
			key = string.format("Beam weapon %.1f:%i",ship:getBeamWeaponDirection(bi),ship:getBeamWeaponArc(bi))
			while(modified_db:getKeyValue(key) ~= "") do
				key = " " .. key
			end
			modified_db:setKeyValue(key,string.format("%.1f Dmg / %.1f sec",ship:getBeamWeaponDamage(bi),ship:getBeamWeaponCycleTime(bi)))
			bi = bi + 1
		until(ship:getBeamWeaponRange(bi) < 1)
	end
	local tubes = ship:getWeaponTubeCount()
	if tubes > 0 then
		if tube_directions ~= nil then
			for i=1,#tube_directions do
				modified_db:setKeyValue(tube_directions[i].key,tube_directions[i].value)
			end
		end
		for _, missile_type in ipairs(missile_types) do
			local max_storage = ship:getWeaponStorageMax(missile_type)
			if max_storage > 0 then
				modified_db:setKeyValue(string.format("Storage %s",missile_type),string.format("%i",max_storage))
			end
		end
	end
	if model_name ~= nil then
		modified_db:setModelDataName(model_name)
	end
end
--not included in random fleet spawn lists
function auxiliaryCruiser(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Transport3x3"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Transport"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Transport"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setHullMax(180)					--stronger hull (vs 100)
	ship:setHull(180)
	ship:setShieldsMax(100,100)				--stronger shields (vs 50, 50)
	ship:setShields(100,100)
	ship:setImpulseMaxSpeed(65)				--faster impulse (vs 45)
	ship:setRotationMaxSpeed(10)			--faster maneuver (vs 6)
	ship:setWarpDrive(true)					--warp (vs none)
	ship:setWarpSpeed(200)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	30,	    0,	1200,		4,		 4)		--front & rear beams (vs none)
	ship:setBeamWeapon(1,	30,	  180,	1200,		4,		 4)
	return ship
end
function leech(enemyFaction)
	local ship = CpuShip():setTemplate("Defense platform"):setFaction(enemyFaction):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	setBeamColor(ship)
	if ship_template["Leech Sat"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Leech Sat"].short_range_radar)
	end
	ship:setTypeName("Leech")
--               			Arc,  Dir, Range,   CycleTime, Dmg
	ship:setBeamWeapon(0,	 30,	0,	4000,			2,	20)	--slower cycle time  (2,4,4,4,6) vs 1.5
	ship:setBeamWeapon(1,	120,    0,	2000,			4,	10)	--wider arc (120,120,120,330) vs 30
	ship:setBeamWeapon(1,	120,  -60,	2000,			4,	10)	--shorter range (2k,2k,2k, 1k) vs 4k
	ship:setBeamWeapon(2,	120,   60,	2000,			4,	10)	--different directions (-60, 180) vs evenly spaced
	ship:setBeamWeapon(3,	330,  180,	1000,			6,	10)	--less damage (10, 10, 10, 10) vs 20
	ship:setBeamWeapon(4,	  0,    0,	   0,			0,	 0)	--missing vs present
	ship:setBeamWeapon(5,	  0,    0,	   0,			0,	 0)	--missing vs present
	ship:setRotationMaxSpeed(10)								--faster turn speed (vs .5)
	ship:setShieldsMax(300,100)									--fewer shields (2) vs 120,120,120,120,120,120
	ship:setShields(300,100)									--shield strength variance
	return ship
end
function overclocker(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Equipment Freighter 1"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	ship:setTypeName("overclocker")
	ship:setShieldsMax(150,150,150)
	ship:setShields(150,150,150) -- high shields, slightly unusual number of arcs (3)
	ship:setRotationMaxSpeed(20)
	ship:setImpulseMaxSpeed(100)
	return ship
end
function beamOverclocker(enemyFaction)
	local ship = overclocker(enemyFaction)
	if ship_template["OClock Beam"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["OClock Beam"].short_range_radar)
	end
	ship:setDescription("beam overclocker")-- there seems to be some sort of bug with descriptions - the fully scanned is not showing with setDescriptions, this is a work around, it should be fixed in EE at some point
	ship:setDescriptions("sending encrypted data","sending encrypted data to boost beams of nearby ships")
	update_system:addBeamOverclocker(ship,10)
	return ship
end
function engineOverclocker(enemyFaction)
	local ship = overclocker(enemyFaction)
	if ship_template["OClock Engine"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["OClock Engine"].short_range_radar)
	end
	ship:setDescription("engine overclocker")-- there seems to be some sort of bug with descriptions - the fully scanned is not showing with setDescriptions, this is a work around, it should be fixed in EE at some point
	ship:setDescriptions("sending encrypted data","sending encrypted data to boost engines of nearby ships")
	update_system:addEngineOverclocker(ship,10)
	return ship
end
function shieldOverclocker(enemyFaction)
	local ship = overclocker(enemyFaction)
	if ship_template["OClock Shield"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["OClock Shield"].short_range_radar)
	end
	ship:setDescription("shield overclocker")-- there seems to be some sort of bug with descriptions - the fully scanned is not showing with setDescriptions, this is a work around, it should be fixed in EE at some point
	ship:setDescriptions("sending encrypted data","sending encrypted data to boost shields of nearby ships")
	update_system:addShieldOverclocker(ship,10)
	return ship
end
function overclockOptimizer(enemyFaction)
	-- the boost is only cosmetic / only GM controlled at this time
	local ship = overclocker(enemyFaction)
	ship:setDescription("overclocker optimizer")-- there seems to be some sort of bug with descriptions - the fully scanned is not showing with setDescriptions, this is a work around, it should be fixed in EE at some point
	ship:setDescriptions("sending encrypted data","sending encrypted data to boost overclockers of allied ships")
	ship:setTypeName("unshackled mind")
	ship:setShieldsMax(300,300,300)
	ship:setShields(300,300,300)
	update_system:addOverclockOptimizer(ship,20)
	return ship
end
function orbiterOverclocker(enemyFaction)
	-- internally these are marked as orbiter overclockers
	-- externally they are marked as tractor overlockers
	-- this is as the only tractor ship supported are the orbiting craft
	local ship = overclocker(enemyFaction)
	ship:setDescription("tractor overclocker")-- there seems to be some sort of bug with descriptions - the fully scanned is not showing with setDescriptions, this is a work around, it should be fixed in EE at some point
	ship:setDescriptions("sending encrypted data","sending encrypted data to boost tractor beams of nearby ships")
	update_system:addOrbitingOverclocker(ship,10)
	return ship
end
function orbiter(enemyFaction)
	local ship  = CpuShip():setFaction(enemyFaction):setTemplate("Tug"):orderRoaming():setCommsScript(""):setCommsFunction(commsShip)
	ship:setDescription("A large number of tractor beams are detected aboard")
	ship:setShieldsMax(50,50)
	ship:setShields(50,50)
	ship:setRotationMaxSpeed(10)
	ship:setImpulseMaxSpeed(50)
	return ship
end
function mineOrbiter(enemyFaction)
	print("in mine orbiter function")
	local ship = orbiter(enemyFaction)
	update_system:addOverclockableTractor(ship,Mine)
	return ship
end
function asteroidOrbiter(enemyFaction)
	print("in asteroid orbiter function")
	local ship = orbiter(enemyFaction)
	update_system:addOverclockableTractor(ship,Asteroid)
	return ship
end
function missilePod(enemyFaction)
	-- common shared between all the missile pods
	-- the AI behaves more sensibly with order stand ground in testing
	local ship=CpuShip():setFaction(enemyFaction):setTemplate("Defense platform"):orderStandGround():setTypeName("Missile Pod"):setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	ship:setScanState("simplescan")
	ship:onTakingDamage(npcShipDamage)
	table.insert(immobile_stations,ship)
	-- no beams for missile platforms
	ship:setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0)
	ship:setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0)
	ship:setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0)
	ship:setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0)
	ship:setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0)
	ship:setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
	-- much weaker shields / hull than normal
	ship:setHullMax(35):setHull(35):setShieldsMax(50):setShields(50)
	ship:setRotationMaxSpeed(5)
	-- note no missiles - that is done in the individual type of platforms
    ship.comms_data = {
    	friendlyness = random(1,100),
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(1,4),Mine = math.random(2,6),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,10)<8,	HVLI = random(1,10)<9,	Mine = random(1,10)<7,	Nuke = random(1,10)<5,		EMP = random(1,10)<6},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 73,
        hack_repair =			random(1,100) < 67,
        scan_repair =			random(1,100) < 63,
        combat_maneuver_repair=	random(1,100) < 53,
        self_destruct_repair=	random(1,100) < 43,
        sensor_boost = {value = math.random(5,10)*1000, cost = math.random(5,10)},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = math.random(5,9),	cost = 1},},
        trade = {	food = false, medicine = random(1,10)<3, luxury = random(1,10)<5 },
        public_relations = false,
        general_information = "",
    	history = "",
    	idle_defense_fleet = {
			DF1 = "Adder MK5",
			DF2 = "Adder MK6",
    	},
	}
	local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
	if missile_pod_db == nil then
		local station_db = queryScienceDatabase("Stations")
		station_db:addEntry("Missile Pod")
		missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. It has offensive weapons sytems to help defend against enemy ships")
		missile_pod_db:setImage("radar/smallstation.png")
		missile_pod_db:setKeyValue("Class","Small")
		missile_pod_db:setKeyValue("Size",300)
		missile_pod_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_db:setModelDataName("space_station_4")
	end
	return ship
end
-- the extra bit of the callsign after missile pod indicates the type of missile
-- I wanted to avoid H=NVLI N=Nuke etc
-- as it feels to obvious
-- however dear reader of this code, I provide you with a decoder ring
-- D=Dumb fire AKA HVLI
-- T=Tracking AKA homing
-- S=Shields AKA EMPs
-- I=Two tubes on opposite sides (no I or X = one tube)
-- X=Four tubes equidistant (no I or X = one tube)
-- E=Explosive AKA nukes (not implemented yet due to expecations regarding extreme friendly fire)
-- the digit is weighted such that small=1, medium=2, large=4
-- all of the tubes are added together if multiple are present
-- load time is not in there
function missilePodD1(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod D1")
	if ship_template["Missile Pod D1"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod D1"].short_range_radar)
	end
	ship:setHullMax(15):setHull(15):setShieldsMax(20):setShields(20)
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(5,10))
	ship:setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 400)
	ship:setTubeSize(0,"small"):setWeaponTubeExclusiveFor(0,"HVLI")
	local missile_pod_d1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D1")
	if missile_pod_d1_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod D1")
		missile_pod_d1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D1")
		missile_pod_d1_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The D1 fires small, dumb missiles to help defend against enemy ships")
		missile_pod_d1_db:setImage("radar/smallstation.png")
		missile_pod_d1_db:setKeyValue("Class","Small")
		missile_pod_d1_db:setKeyValue("Size",300)
		missile_pod_d1_db:setKeyValue("Shield",20)
		missile_pod_d1_db:setKeyValue("Hull",15)
		missile_pod_d1_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_d1_db:setKeyValue("Small Tube 0","5-10 Sec")
		missile_pod_d1_db:setKeyValue("Storage HVLI",400)
		missile_pod_d1_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_d1_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodD2(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod D2")
	if ship_template["Missile Pod D2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod D2"].short_range_radar)
	end
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(11,15))
	ship:setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 400)
	ship:setTubeSize(0,"Medium"):setWeaponTubeExclusiveFor(0,"HVLI")
	local missile_pod_d2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D2")
	if missile_pod_d2_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod D2")
		missile_pod_d2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D2")
		missile_pod_d2_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The D2 fires medium, dumb missiles to help defend against enemy ships")
		missile_pod_d2_db:setImage("radar/smallstation.png")
		missile_pod_d2_db:setKeyValue("Class","Small")
		missile_pod_d2_db:setKeyValue("Size",300)
		missile_pod_d2_db:setKeyValue("Shield",50)
		missile_pod_d2_db:setKeyValue("Hull",35)
		missile_pod_d2_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_d2_db:setKeyValue("Tube 0","11-15 Sec")
		missile_pod_d2_db:setKeyValue("Storage HVLI",400)
		missile_pod_d2_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_d2_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodD4(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod D4")
	if ship_template["Missile Pod D4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod D4"].short_range_radar)
	end
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(15,20))
	ship:setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 400)
	ship:setTubeSize(0,"Large"):setWeaponTubeExclusiveFor(0,"HVLI")
	local missile_pod_d4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D4")
	if missile_pod_d4_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod D4")
		missile_pod_d4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod D4")
		missile_pod_d4_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The D4 fires large, dumb missiles to help defend against enemy ships")
		missile_pod_d4_db:setImage("radar/smallstation.png")
		missile_pod_d4_db:setKeyValue("Class","Small")
		missile_pod_d4_db:setKeyValue("Size",300)
		missile_pod_d4_db:setKeyValue("Shield",50)
		missile_pod_d4_db:setKeyValue("Hull",35)
		missile_pod_d4_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_d4_db:setKeyValue("Large Tube 0","15-20 Sec")
		missile_pod_d4_db:setKeyValue("Storage HVLI",400)
		missile_pod_d4_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_d4_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodT1(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod T1")
	if ship_template["Missile Pod T1"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod T1"].short_range_radar)
	end
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(12,17))
	ship:setTubeSize(0,"small"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_t1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod T1")
	if missile_pod_t1_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod T1")
		missile_pod_t1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod T1")
		missile_pod_t1_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The T1 fires small, tracking missiles to help defend against enemy ships")
		missile_pod_t1_db:setImage("radar/smallstation.png")
		missile_pod_t1_db:setKeyValue("Class","Small")
		missile_pod_t1_db:setKeyValue("Size",300)
		missile_pod_t1_db:setKeyValue("Shield",50)
		missile_pod_t1_db:setKeyValue("Hull",35)
		missile_pod_t1_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_t1_db:setKeyValue("Small Tube 0","12-17 Sec")
		missile_pod_t1_db:setKeyValue("Storage Homing",400)
		missile_pod_t1_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_t1_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodT2(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod T2")
	if ship_template["Missile Pod T2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod T2"].short_range_radar)
	end
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(12,17))
	ship:setWeaponTubeExclusiveFor(0,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_t2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod T2")
	if missile_pod_t2_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod T2")
		missile_pod_t2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod T2")
		missile_pod_t2_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The T2 fires medium, tracking missiles to help defend against enemy ships")
		missile_pod_t2_db:setImage("radar/smallstation.png")
		missile_pod_t2_db:setKeyValue("Class","Small")
		missile_pod_t2_db:setKeyValue("Size",300)
		missile_pod_t2_db:setKeyValue("Shield",50)
		missile_pod_t2_db:setKeyValue("Hull",35)
		missile_pod_t2_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_t2_db:setKeyValue("Tube 0","12-17 Sec")
		missile_pod_t2_db:setKeyValue("Storage Homing",400)
		missile_pod_t2_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_t2_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTI2(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TI2")
	if ship_template["Missile Pod TI2"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TI2"].short_range_radar)
	end
	ship:setWeaponTubeCount(2)
	ship:setTubeLoadTime(0,random(12,17)):setWeaponTubeDirection(0,-90)
	ship:setTubeLoadTime(1,random(12,17)):setWeaponTubeDirection(1,90)
	ship:setTubeSize(0,"small"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"small"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_ti2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI2")
	if missile_pod_ti2_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TI2")
		missile_pod_ti2_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI2")
		missile_pod_ti2_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TI2 fires small, tracking missiles from two tubes to help defend against enemy ships")
		missile_pod_ti2_db:setImage("radar/smallstation.png")
		missile_pod_ti2_db:setKeyValue("Class","Small")
		missile_pod_ti2_db:setKeyValue("Size",300)
		missile_pod_ti2_db:setKeyValue("Shield",50)
		missile_pod_ti2_db:setKeyValue("Hull",35)
		missile_pod_ti2_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_ti2_db:setKeyValue("Small Tube 90","12-17 Sec")
		missile_pod_ti2_db:setKeyValue("Small Tube 270","12-17 Sec")
		missile_pod_ti2_db:setKeyValue("Storage Homing",400)
		missile_pod_ti2_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_ti2_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTI4(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TI4")
	if ship_template["Missile Pod TI4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TI4"].short_range_radar)
	end
	ship:setWeaponTubeCount(2)
	ship:setTubeLoadTime(0,random(16,22)):setWeaponTubeDirection(0,-90)
	ship:setTubeLoadTime(1,random(16,22)):setWeaponTubeDirection(1,90)
	ship:setTubeSize(0,"medium"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"medium"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_ti4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI4")
	if missile_pod_ti4_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TI4")
		missile_pod_ti4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI4")
		missile_pod_ti4_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TI4 fires medium, tracking missiles from two tubes to help defend against enemy ships")
		missile_pod_ti4_db:setImage("radar/smallstation.png")
		missile_pod_ti4_db:setKeyValue("Class","Small")
		missile_pod_ti4_db:setKeyValue("Size",300)
		missile_pod_ti4_db:setKeyValue("Shield",50)
		missile_pod_ti4_db:setKeyValue("Hull",35)
		missile_pod_ti4_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_ti4_db:setKeyValue("Tube 90","16-22 Sec")
		missile_pod_ti4_db:setKeyValue("Tube 270","16-22 Sec")
		missile_pod_ti4_db:setKeyValue("Storage Homing",400)
		missile_pod_ti4_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_ti4_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTI8(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TI8")
	if ship_template["Missile Pod TI8"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TI8"].short_range_radar)
	end
	ship:setWeaponTubeCount(2)
	ship:setTubeLoadTime(0,random(21,27)):setWeaponTubeDirection(0,-90)
	ship:setTubeLoadTime(1,random(21,27)):setWeaponTubeDirection(1,90)
	ship:setTubeSize(0,"large"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"large"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_ti8_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI8")
	if missile_pod_ti8_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TI8")
		missile_pod_ti8_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TI8")
		missile_pod_ti8_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TI8 fires large, tracking missiles from two tubes to help defend against enemy ships")
		missile_pod_ti8_db:setImage("radar/smallstation.png")
		missile_pod_ti8_db:setKeyValue("Class","Small")
		missile_pod_ti8_db:setKeyValue("Size",300)
		missile_pod_ti8_db:setKeyValue("Shield",50)
		missile_pod_ti8_db:setKeyValue("Hull",35)
		missile_pod_ti8_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_ti8_db:setKeyValue("Large Tube 90","21-27 Sec")
		missile_pod_ti8_db:setKeyValue("Large Tube 270","21-27 Sec")
		missile_pod_ti8_db:setKeyValue("Storage Homing",400)
		missile_pod_ti8_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_ti8_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTX4(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TX4")
	if ship_template["Missile Pod TX4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TX4"].short_range_radar)
	end
	ship:setWeaponTubeCount(4)
	ship:setTubeLoadTime(0,random(12,19)):setWeaponTubeDirection(0,0)
	ship:setTubeLoadTime(1,random(12,19)):setWeaponTubeDirection(1,90)
	ship:setTubeLoadTime(2,random(12,19)):setWeaponTubeDirection(1,180)
	ship:setTubeLoadTime(3,random(12,19)):setWeaponTubeDirection(1,270)
	ship:setTubeSize(0,"small"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"small"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setTubeSize(2,"small"):setWeaponTubeExclusiveFor(2,"Homing")
	ship:setTubeSize(3,"small"):setWeaponTubeExclusiveFor(3,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_tx4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX4")
	if missile_pod_tx4_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TX4")
		missile_pod_tx4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX4")
		missile_pod_tx4_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TX4 fires small, tracking missiles from four tubes to help defend against enemy ships")
		missile_pod_tx4_db:setImage("radar/smallstation.png")
		missile_pod_tx4_db:setKeyValue("Class","Small")
		missile_pod_tx4_db:setKeyValue("Size",300)
		missile_pod_tx4_db:setKeyValue("Shield",50)
		missile_pod_tx4_db:setKeyValue("Hull",35)
		missile_pod_tx4_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_tx4_db:setKeyValue("Small Tube 0","12-19 Sec")
		missile_pod_tx4_db:setKeyValue("Small Tube 90","12-19 Sec")
		missile_pod_tx4_db:setKeyValue("Small Tube 180","12-19 Sec")
		missile_pod_tx4_db:setKeyValue("Small Tube 270","12-19 Sec")
		missile_pod_tx4_db:setKeyValue("Storage Homing",400)
		missile_pod_tx4_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_tx4_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTX8(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TX8")
	if ship_template["Missile Pod TX8"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TX8"].short_range_radar)
	end
	ship:setWeaponTubeCount(4)
	ship:setTubeLoadTime(0,random(16,23)):setWeaponTubeDirection(0,0)
	ship:setTubeLoadTime(1,random(16,23)):setWeaponTubeDirection(1,90)
	ship:setTubeLoadTime(2,random(16,23)):setWeaponTubeDirection(1,180)
	ship:setTubeLoadTime(3,random(16,23)):setWeaponTubeDirection(1,270)
	ship:setTubeSize(0,"medium"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"medium"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setTubeSize(2,"medium"):setWeaponTubeExclusiveFor(2,"Homing")
	ship:setTubeSize(3,"medium"):setWeaponTubeExclusiveFor(3,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_tx8_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX8")
	if missile_pod_tx8_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TX8")
		missile_pod_tx8_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX8")
		missile_pod_tx8_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TX8 fires medium, tracking missiles from four tubes to help defend against enemy ships")
		missile_pod_tx8_db:setImage("radar/smallstation.png")
		missile_pod_tx8_db:setKeyValue("Class","Small")
		missile_pod_tx8_db:setKeyValue("Size",300)
		missile_pod_tx8_db:setKeyValue("Shield",50)
		missile_pod_tx8_db:setKeyValue("Hull",35)
		missile_pod_tx8_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_tx8_db:setKeyValue("Tube 0","16-23 Sec")
		missile_pod_tx8_db:setKeyValue("Tube 90","16-23 Sec")
		missile_pod_tx8_db:setKeyValue("Tube 180","16-23 Sec")
		missile_pod_tx8_db:setKeyValue("Tube 270","16-23 Sec")
		missile_pod_tx8_db:setKeyValue("Storage Homing",400)
		missile_pod_tx8_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_tx8_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodTX16(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod TX16")
	if ship_template["Missile Pod TX16"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod TX16"].short_range_radar)
	end
	ship:setWeaponTubeCount(4)
	ship:setTubeLoadTime(0,random(21,28)):setWeaponTubeDirection(0,0)
	ship:setTubeLoadTime(1,random(21,28)):setWeaponTubeDirection(1,90)
	ship:setTubeLoadTime(2,random(21,28)):setWeaponTubeDirection(1,180)
	ship:setTubeLoadTime(3,random(21,28)):setWeaponTubeDirection(1,270)
	ship:setTubeSize(0,"large"):setWeaponTubeExclusiveFor(0,"Homing")
	ship:setTubeSize(1,"large"):setWeaponTubeExclusiveFor(1,"Homing")
	ship:setTubeSize(2,"large"):setWeaponTubeExclusiveFor(2,"Homing")
	ship:setTubeSize(3,"large"):setWeaponTubeExclusiveFor(3,"Homing")
	ship:setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 400)
	local missile_pod_tx16_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX16")
	if missile_pod_tx16_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod TX16")
		missile_pod_tx16_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod TX16")
		missile_pod_tx16_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The TX16 fires large, tracking missiles from four tubes to help defend against enemy ships")
		missile_pod_tx16_db:setImage("radar/smallstation.png")
		missile_pod_tx16_db:setKeyValue("Class","Small")
		missile_pod_tx16_db:setKeyValue("Size",300)
		missile_pod_tx16_db:setKeyValue("Shield",50)
		missile_pod_tx16_db:setKeyValue("Hull",35)
		missile_pod_tx16_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_tx16_db:setKeyValue("Large Tube 0","21-28 Sec")
		missile_pod_tx16_db:setKeyValue("Large Tube 90","21-28 Sec")
		missile_pod_tx16_db:setKeyValue("Large Tube 180","21-28 Sec")
		missile_pod_tx16_db:setKeyValue("Large Tube 270","21-28 Sec")
		missile_pod_tx16_db:setKeyValue("Storage Homing",400)
		missile_pod_tx16_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_tx16_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodS1(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod S1")
	if ship_template["Missile Pod S1"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod S1"].short_range_radar)
	end
	ship:setHullMax(55):setHull(55):setShieldsMax(50):setShields(50)
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(17,22))
	ship:setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 200)
	ship:setTubeSize(0,"Small"):setWeaponTubeExclusiveFor(0,"EMP")
	local missile_pod_s1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod S1")
	if missile_pod_s1_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod S1")
		missile_pod_s1_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod S1")
		missile_pod_s1_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The S1 fires small, shield-damaging missiles to help defend against enemy ships")
		missile_pod_s1_db:setImage("radar/smallstation.png")
		missile_pod_s1_db:setKeyValue("Class","Small")
		missile_pod_s1_db:setKeyValue("Size",300)
		missile_pod_s1_db:setKeyValue("Shield",50)
		missile_pod_s1_db:setKeyValue("Hull",55)
		missile_pod_s1_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_s1_db:setKeyValue("Small Tube 0","17-22 Sec")
		missile_pod_s1_db:setKeyValue("Storage EMP",200)
		missile_pod_s1_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_s1_db:setModelDataName("space_station_4")
	end
	return ship
end
function missilePodS4(enemyFaction)
	local ship=missilePod(enemyFaction):setTypeName("Missile Pod S4")
	if ship_template["Missile Pod S4"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Missile Pod S4"].short_range_radar)
	end
	ship:setHullMax(70):setHull(70):setShieldsMax(80):setShields(80)
	ship:setWeaponTubeCount(1)
	ship:setTubeLoadTime(0,random(45,70))
	ship:setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 200)
	ship:setTubeSize(0,"Large"):setWeaponTubeExclusiveFor(0,"EMP")
	local missile_pod_s4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod S4")
	if missile_pod_s4_db == nil then
		local missile_pod_db = queryScienceDatabase("Stations","Missile Pod")
		missile_pod_db:addEntry("Missile Pod S4")
		missile_pod_s4_db = queryScienceDatabase("Stations","Missile Pod","Missile Pod S4")
		missile_pod_s4_db:setLongDescription("A missile pod allows a limited selection of ship types to dock. The S4 fires large, shield-damaging missiles to help defend against enemy ships")
		missile_pod_s4_db:setImage("radar/smallstation.png")
		missile_pod_s4_db:setKeyValue("Class","Small")
		missile_pod_s4_db:setKeyValue("Size",300)
		missile_pod_s4_db:setKeyValue("Shield",80)
		missile_pod_s4_db:setKeyValue("Hull",70)
		missile_pod_s4_db:setKeyValue("Turn speed","5 deg/sec")
		missile_pod_s4_db:setKeyValue("Large Tube 0","45-70 Sec")
		missile_pod_s4_db:setKeyValue("Storage EMP",200)
		missile_pod_s4_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		missile_pod_s4_db:setModelDataName("space_station_4")
	end
	return ship
end
--ships that serve as stations
function commandBase(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Jump Carrier"):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	if ship_template["Command Base"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Command Base"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	table.insert(immobile_stations,ship)
	ship:setScanState("simplescan")
	ship:setTypeName("Command Base")
	ship:setRadarTrace("smallstation.png")			--different radar trace
	ship:setJumpDrive(false)						--no jump drive
	ship:setImpulseMaxSpeed(0)						--slower impulse (vs 50)
	ship:setRotationMaxSpeed(0.5)					--slower maneuver (vs 6)
	ship:setAcceleration(0)							--slower acceleration (vs 10)
	ship:setShieldsMax(500)							--stronger shields (vs 50)
	ship:setShields(500)					
	ship:setHullMax(300)							--stronger hull (vs 100)
	ship:setHull(300)
	ship:setSharesEnergyWithDocked(true)
	ship:setRepairDocked(true)
	ship:setRestocksScanProbes(true)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	10,	   45,	2000,		1,		5)
	ship:setBeamWeapon(1,	10,	  135,	2000,		1,		5)
	ship:setBeamWeapon(2,	10,	  225,	2000,		1,		5)
	ship:setBeamWeapon(3,	10,	  315,	2000,		1,		5)
--							   Arc, Dir, Rotate speed
	ship:setBeamWeaponTurret(0,	70,	 45,		 .5)
	ship:setBeamWeaponTurret(1,	70,	135,		 .5)
	ship:setBeamWeaponTurret(2,	70,	225,		 .5)
	ship:setBeamWeaponTurret(3,	70,	315,		 .5)
	ship:setWeaponTubeCount(4)						--more (vs 0)
	ship:setWeaponTubeDirection(0,0)				
	ship:setWeaponTubeDirection(1,90)				
	ship:setWeaponTubeDirection(2,180)				
	ship:setWeaponTubeDirection(3,270)				
	ship:setTubeLoadTime(0,10)						
	ship:setTubeLoadTime(1,10)						
	ship:setTubeLoadTime(2,10)						
	ship:setTubeLoadTime(3,10)						
	ship:setWeaponStorageMax("Homing",400)			--more (vs 0)
	ship:setWeaponStorage("Homing", 400)	
    ship.comms_data = {
    	friendlyness = random(1,100),
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(2,4),Mine = math.random(2,4),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,10)<8,	HVLI = random(1,10)<9,	Mine = random(1,10)<7,	Nuke = random(1,10)<5,		EMP = random(1,10)<6},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 93,
        hack_repair =			random(1,100) < 87,
        scan_repair =			random(1,100) < 83,
        combat_maneuver_repair=	random(1,100) < 73,
        self_destruct_repair=	random(1,100) < 63,
        sensor_boost = {value = math.random(5,10)*1000, cost = math.random(5,10)},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = math.random(5,9),	cost = 1},},
        trade = {	food = false, medicine = random(1,10)<3, luxury = random(1,10)<5 },
        public_relations = false,
        general_information = "",
    	history = "",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MT52 Hornet",
			DF3 = "Adder MK5",
			DF4 = "Adder MK5",
			DF5 = "Phobos T3",
			DF6 = "Phobos T3",
    	},
	}	
	local command_base_db = queryScienceDatabase("Stations","Command Base")
	if command_base_db == nil then
		local station_db = queryScienceDatabase("Stations")
		station_db:addEntry("Command Base")
		command_base_db = queryScienceDatabase("Stations","Command Base")
		command_base_db:setLongDescription("A command base allows a limited selection of ship types to dock. It has offensive weapons sytems to help defend against enemy ships")
		command_base_db:setImage("radar/smallstation.png")
		command_base_db:setKeyValue("Class","Small")
		command_base_db:setKeyValue("Size",300)
		command_base_db:setKeyValue("Shield",500)
		command_base_db:setKeyValue("Hull",300)
		command_base_db:setKeyValue("Turn speed","0.5 deg/sec")
		command_base_db:setKeyValue("Beam weapon  45:70","5.0 Dmg / 1.0 Sec")
		command_base_db:setKeyValue("Beam weapon 135:70","5.0 Dmg / 1.0 Sec")
		command_base_db:setKeyValue("Beam weapon 225:70","5.0 Dmg / 1.0 Sec")
		command_base_db:setKeyValue("Beam weapon 315:70","5.0 Dmg / 1.0 Sec")
		command_base_db:setKeyValue("Beam Range","2 Units")
		command_base_db:setKeyValue("Tube 0","10 Sec")
		command_base_db:setKeyValue("Tube 90","10 Sec")
		command_base_db:setKeyValue("Tube 180","10 Sec")
		command_base_db:setKeyValue("Tube 270","10 Sec")
		command_base_db:setKeyValue("Storage Homing",400)
		command_base_db:setKeyValue("Allowed to Dock","Starfighter/Frigate/Corvette")
		command_base_db:setModelDataName("transport_4_2")
	end
	return ship	
end
function militaryOutpost(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Defense platform"):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	if ship_template["Military Outpost"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Military Outpost"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	table.insert(immobile_stations,ship)
	ship:setScanState("simplescan")
	ship:setTypeName("Military Outpost")
	ship:setShieldsMax(150,150,150,150)				--weaker shields (vs 120,120,120,120,120,120)
	ship:setShields(150,150,150,150)					
	ship:setHullMax(300)							--stronger hull (vs 150)
	ship:setHull(300)
	ship:setSharesEnergyWithDocked(true)
	ship:setRepairDocked(true)
	ship:setRestocksScanProbes(true)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	10,	   45,	3000,		2,		8)
	ship:setBeamWeapon(1,	10,	  135,	3000,		2,		8)
	ship:setBeamWeapon(2,	10,	  225,	3000,		2,		8)
	ship:setBeamWeapon(3,	10,	  315,	3000,		2,		8)
	ship:setBeamWeapon(4,	 0,	    0,	   0,		0,		0)
	ship:setBeamWeapon(5,	 0,	    0,	   0,		0,		0)
--							   Arc, Dir, Rotate speed
	ship:setBeamWeaponTurret(0,	80,	 45,		 .5)
	ship:setBeamWeaponTurret(1,	80,	135,		 .5)
	ship:setBeamWeaponTurret(2,	80,	225,		 .5)
	ship:setBeamWeaponTurret(3,	80,	315,		 .5)
	ship:setWeaponTubeCount(4)						--more (vs 0)
	ship:setWeaponTubeDirection(0,0)				
	ship:setWeaponTubeDirection(1,90)				
	ship:setWeaponTubeDirection(2,180)				
	ship:setWeaponTubeDirection(3,270)				
	ship:setTubeLoadTime(0,10)						
	ship:setTubeLoadTime(1,10)						
	ship:setTubeLoadTime(2,10)						
	ship:setTubeLoadTime(3,10)						
	ship:setWeaponStorageMax("HVLI",400)			--more (vs 0)
	ship:setWeaponStorage("HVLI", 400)	
    ship.comms_data = {
    	friendlyness = random(1,100),
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(1,4),Mine = math.random(2,6),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,10)<8,	HVLI = random(1,10)<9,	Mine = random(1,10)<7,	Nuke = random(1,10)<5,		EMP = random(1,10)<6},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
   			hornet_reinforcements =	math.random(75,125),
			phobos_reinforcements =	math.random(175,225),
			shield_overcharge = math.random(1,5)*5,
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = true},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 83,
        hack_repair =			random(1,100) < 77,
        scan_repair =			random(1,100) < 73,
        combat_maneuver_repair=	random(1,100) < 63,
        self_destruct_repair=	random(1,100) < 53,
        sensor_boost = {value = math.random(5,10)*1000, cost = math.random(5,10)},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = math.random(5,9),	cost = 1},},
        trade = {	food = false, medicine = random(1,10)<3, luxury = random(1,10)<5 },
        public_relations = false,
        general_information = "",
    	history = "",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
			DF3 = "Adder MK5",
			DF4 = "Adder MK6",
			DF5 = "Nirvana R5",
			DF6 = "Nirvana R5A",
			DF7 = "Piranha F12",
			DF8 = "Piranha F8",
    	},
	}
	local military_outpost_db = queryScienceDatabase("Stations","Military Outpost")
	if military_outpost_db == nil then
		local station_db = queryScienceDatabase("Stations")
		station_db:addEntry("Military Outpost")
		military_outpost_db = queryScienceDatabase("Stations","Military Outpost")
		military_outpost_db:setLongDescription("A military outpost allows a limited selection of ship types to dock. It has offensive weapons sytems to help defend against enemy ships")
		military_outpost_db:setImage("radar/smallstation.png")
		military_outpost_db:setKeyValue("Class","Small")
		military_outpost_db:setKeyValue("Size",300)
		military_outpost_db:setKeyValue("Shield","150/150/150/150")
		military_outpost_db:setKeyValue("Hull",300)
		military_outpost_db:setKeyValue("Turn speed","0.5 deg/sec")
		military_outpost_db:setKeyValue("Beam weapon  45:70","8.0 Dmg / 2.0 Sec")
		military_outpost_db:setKeyValue("Beam weapon 135:70","8.0 Dmg / 2.0 Sec")
		military_outpost_db:setKeyValue("Beam weapon 225:70","8.0 Dmg / 2.0 Sec")
		military_outpost_db:setKeyValue("Beam weapon 315:70","8.0 Dmg / 2.0 Sec")
		military_outpost_db:setKeyValue("Beam Range","3 Units")
		military_outpost_db:setKeyValue("Tube 0","10 Sec")
		military_outpost_db:setKeyValue("Tube 90","10 Sec")
		military_outpost_db:setKeyValue("Tube 180","10 Sec")
		military_outpost_db:setKeyValue("Tube 270","10 Sec")
		military_outpost_db:setKeyValue("Storage HVLI",400)
		military_outpost_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		military_outpost_db:setModelDataName("space_station_4")
	end
	return ship	
end
function sniperTower(enemyFaction)
	local ship = CpuShip():setFaction(enemyFaction):setTemplate("Defense platform"):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
	setBeamColor(ship)
	if ship_template["Sniper Tower"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Sniper Tower"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	table.insert(immobile_stations,ship)
	ship:setScanState("simplescan")
	ship:setTypeName("Sniper Tower")
	ship:setRotationMaxSpeed(3)			--faster maneuver (vs .5)
	ship:setSharesEnergyWithDocked(true)
	ship:setRepairDocked(true)
	ship:setRestocksScanProbes(true)
--				   Index,  Arc,	  Dir, Range,	Cycle,	Damage
	ship:setBeamWeapon(0,	10,	   0,	6000,		6,		6)
	ship:setBeamWeapon(1,	10,	   90,	6000,		6,		6)
	ship:setBeamWeapon(2,	10,	  180,	6000,		6,		6)
	ship:setBeamWeapon(3,	10,	  270,	6000,		6,		6)
	ship:setBeamWeapon(4,	 0,	    0,	   0,		0,		0)
	ship:setBeamWeapon(5,	 0,	    0,	   0,		0,		0)
    ship.comms_data = {
    	friendlyness = random(1,100),
        weapons = 			{Homing = "neutral",		HVLI = "neutral", 		Mine = "neutral",		Nuke = "friend", 			EMP = "friend"},
        weapon_cost =		{Homing = math.random(1,5), HVLI = math.random(1,4),Mine = math.random(2,6),Nuke = math.random(12,18),	EMP = math.random(9,15) },
        weapon_available = 	{Homing = random(1,10)<8,	HVLI = random(1,10)<9,	Mine = random(1,10)<7,	Nuke = random(1,10)<5,		EMP = random(1,10)<6},
        service_cost = 		{
        	supplydrop = math.random(80,120), 
        	reinforcements = math.random(125,175),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        system_repair = {
        	["reactor"] =		{cost = math.random(0,9),	max = random(.8, .99),	avail = random(1,100)<40},
        	["beamweapons"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["missilesystem"] =	{cost = math.random(0,9),	max = random(.5, .99),	avail = random(1,100)<30},
        	["maneuver"] =		{cost = math.random(0,9),	max = random(.9, .99),	avail = random(1,100)<40},
        	["impulse"] =		{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<80},
        	["warp"] =			{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<70},
        	["jumpdrive"] =		{cost = math.random(0,9),	max = random(.6, .99),	avail = random(1,100)<60},
        	["frontshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = true},
        	["rearshield"] =	{cost = math.random(0,9),	max = random(.7, .99),	avail = random(1,100)<45},
        },
        probe_launch_repair =	random(1,100) < 83,
        hack_repair =			random(1,100) < 77,
        scan_repair =			random(1,100) < 73,
        combat_maneuver_repair=	random(1,100) < 63,
        self_destruct_repair=	random(1,100) < 53,
        sensor_boost = {value = math.random(5,10)*1000, cost = math.random(5,10)},
        reputation_cost_multipliers = {friend = 1.0, neutral = 1.5},
        max_weapon_refill_amount = {friend = 1.0, neutral = 0.5 },
        goods = {	food = 		{quantity = math.random(5,9),	cost = 1},},
        trade = {	food = false, medicine = random(1,10)<3, luxury = random(1,10)<5 },
        public_relations = false,
        general_information = "",
    	history = "",
    	idle_defense_fleet = {
			DF1 = "MT52 Hornet",
			DF2 = "MU52 Hornet",
    	},
	}
	local sniper_tower_db = queryScienceDatabase("Stations","Sniper Tower")
	if sniper_tower_db == nil then
		local station_db = queryScienceDatabase("Stations")
		station_db:addEntry("Sniper Tower")
		sniper_tower_db = queryScienceDatabase("Stations","Sniper Tower")
		sniper_tower_db:setLongDescription("A sniper tower allows a limited selection of ship types to dock. It has offensive weapons sytems to help defend against enemy ships")
		sniper_tower_db:setImage("radar/smallstation.png")
		sniper_tower_db:setKeyValue("Class","Small")
		sniper_tower_db:setKeyValue("Size",150)
		sniper_tower_db:setKeyValue("Shield","120/120/120/120/120/120")
		sniper_tower_db:setKeyValue("Hull",300)
		sniper_tower_db:setKeyValue("Turn speed","2 deg/sec")
		sniper_tower_db:setKeyValue("Beam weapon   0:10","6.0 Dmg / 6.0 Sec")
		sniper_tower_db:setKeyValue("Beam weapon  90:10","6.0 Dmg / 6.0 Sec")
		sniper_tower_db:setKeyValue("Beam weapon 180:10","6.0 Dmg / 6.0 Sec")
		sniper_tower_db:setKeyValue("Beam weapon 270:10","6.0 Dmg / 6.0 Sec")
		sniper_tower_db:setKeyValue("Beam Range","6 Units")
		sniper_tower_db:setKeyValue("Allowed to Dock","Starfighter/Frigate")
		sniper_tower_db:setModelDataName("space_station_4")
	end
	return ship	
end
--unarmed ships
function spaceSedan(enemyFaction)
	local ship = CpuShip():setTemplate("Personnel Jump Freighter 3")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Space Sedan"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Space Sedan"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Space Sedan"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Space Sedan")
	addFreighter("Space Sedan",ship)	--update science database if applicable
	return ship
end
function courier(enemyFaction)
	local ship = CpuShip():setTemplate("Personnel Freighter 1")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Courier"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Courier"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Courier"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Courier")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(1500)
	ship:setRotationMaxSpeed(20)
	addFreighter("Courier",ship)	--update science database if applicable
	return ship
end
function workWagon(enemyFaction)
	local ship = CpuShip():setTemplate("Equipment Freighter 2")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Work Wagon"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Work Wagon"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Work Wagon"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Work Wagon")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(200)
	addFreighter("Work Wagon",ship)	--update science database if applicable
	return ship
end
function omnibus(enemyFaction)
	local ship = CpuShip():setTemplate("Personnel Jump Freighter 5")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Omnibus"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Omnibus"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Omnibus"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Omnibus")
	addFreighter("Omnibus",ship)	--update science database if applicable
	return ship
end
function ladenLorry(enemyFaction)
	local ship = CpuShip():setTemplate("Goods Freighter 3")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Laden Lorry"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Laden Lorry"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Laden Lorry"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Laden Lorry")
	ship:setWarpDrive(true)
	ship:setWarpSpeed(150)
	addFreighter("Laden Lorry",ship)	--update science database if applicable
	return ship
end
function serviceJonque(enemyFaction)
	local ship = CpuShip():setTemplate("Equipment Jump Freighter 4")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Service Jonque"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Service Jonque"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Service Jonque"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Service Jonque"):setCommsScript(""):setCommsFunction(commsServiceJonque)
	addFreighter("Service Jonque",ship)	--update science database if applicable
	return ship
end
function physicsResearch(enemyFaction)
	local ship = CpuShip():setTemplate("Garbage Freighter 3")
	if enemyFaction ~= nil then
		ship:setFaction(enemyFaction)
	end
	ship:setTypeName("Physics Research"):setCommsScript(""):setCommsFunction(commsShip)
	if ship_template["Physics Research"].short_range_radar ~= nil then
		ship:setShortRangeRadarRange(ship_template["Physics Research"].short_range_radar)
	end
	ship:onTakingDamage(npcShipDamage)
	ship:setTypeName("Physics Research")
	ship:setImpulseMaxSpeed(65)				--faster impulse (vs 45)
	ship:setRotationMaxSpeed(10)			--faster maneuver (vs 6)
	ship:setShieldsMax(80, 80)				--stronger shields (vs 50, 50)
	ship:setShields(80, 80)					
	addFreighter("Physics Research",ship)	--update science database if applicable
	return ship
end
--	*											   *  --
--	**											  **  --
--	************************************************  --
--	****				Order Fleet				****  --
--	************************************************  --
--	**											  **  --
--	*											   *  --
------------------------------------------------------------------
--	Order Fleet > Select Fleet (Select Fleet To Give Order To)  --
------------------------------------------------------------------
-- -ORDER FLEET		F	orderFleet
-- Button for each fleet, numbered and with a representative ship name
function selectOrderFleet()
	clearGMFunctions()
	addGMFunction("-Order Fleet",orderFleet)
	for i=1,8 do
		local fl = fleet_list[i]
		if fl ~= nil then
			local sample_name = ""
			local fleet_member = nil
			local member_index = 0
			for j=1,#fl do
				fleet_member = fl[j]
				member_index = j
				if fleet_member ~= nil and fleet_member:isValid() then
					sample_name = fleet_member:getCallSign()
					break
				end
			end
			addGMFunction(string.format("%i %s",i,sample_name),function()
				selected_fleet_representative = fleet_member
				selected_fleet_index = i
				selected_fleet_representative_index = member_index
				orderFleet()
			end)
		end
	end
end
------------------------------------------------------------
--	Order Fleet > Roaming (Set Order For Selected Fleet)  --
------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- ROAMING*			*	inline, orderFleet		asterisk = current selection
-- IDLE 			*	inline, orderFleet		
-- STAND GROUND		*	inline, orderFleet
-- ATTACK			*	inline, orderFleet
-- DEFEND			*	inline, orderFleet
-- FLY TO			*	inline, orderFleet
-- FLY BLINDLY TO	*	inline, orderFleet
-- DOCK				*	inline, orderFleet
-- +FLY FORMATION	*	inline, orderFlyFormation
function changeFleetOrder()
	clearGMFunctions()
	--addGMFunction("-Order Fleet",orderFleet)
	local order_roaming = "Roaming"
	if existing_fleet_order == "Roaming" then
		order_roaming = "Roaming*"
	end
	addGMFunction(order_roaming,function()
		existing_fleet_order = "Roaming"
		orderFleet()
	end)
	local order_idle = "Idle"
	if existing_fleet_order == "Idle" then
		order_idle = "Idle*"
	end
	addGMFunction(order_idle,function()
		existing_fleet_order = "Idle"
		orderFleet()
	end)
	local order_stand_ground = "Stand Ground"
	if existing_fleet_order == "Stand Ground" then
		order_stand_ground = "Stand Ground*"
	end
	addGMFunction(order_stand_ground,function()
		existing_fleet_order = "Stand Ground"
		orderFleet()
	end)
	local order_attack = "Attack"
	if existing_fleet_order == "Attack" then
		order_attack = "Attack*"
	end
	addGMFunction(order_attack,function()
		existing_fleet_order = "Attack"
		orderFleet()
	end)
	local order_defend = "Defend"
	if existing_fleet_order == "Defend" then
		order_defend = "Defend*"
	end
	addGMFunction(order_defend,function()
		existing_fleet_order = "Defend"
		orderFleet()
	end)
	local order_fly_to = "Fly To"
	if existing_fleet_order == "Fly To" then
		order_fly_to = "Fly To*"
	end
	addGMFunction(order_fly_to,function()
		existing_fleet_order = "Fly To"
		orderFleet()
	end)
	local order_fly_blindly_to = "Fly Blindly To"
	if existing_fleet_order == "Fly Blindly To" then
		order_fly_blindly_to = "Fly Blindly To*"
	end
	addGMFunction(order_fly_blindly_to,function()
		existing_fleet_order = "Fly Blindly To"
		orderFleet()
	end)
	local order_dock = "Dock"
	if existing_fleet_order == "Dock" then
		order_dock = "Dock*"
	end
	addGMFunction(order_dock,function()
		existing_fleet_order = "Dock"
		orderFleet()
	end)
	local order_fly_formation = "Fly Formation"
	if existing_fleet_order == "Fly Formation" then
		order_fly_formation = "Fly Formation*"
	end
	addGMFunction(string.format("+%s",order_fly_formation),flyFormationParameters)
end
----------------------------------------------------------------------------
--	Order Fleet > Roaming (Set Order For Selected Fleet) > Fly Formation  --
----------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -ORDER FLEET		F	orderFleet
-- +FORMATION V		D	changeFormation
-- +LEAD shipname	D	changeFormationLead
function flyFormationParameters()
	existing_fleet_order = "Fly Formation"
	if formation_type == nil then
		formation_type = "V"
	end
	if formation_lead == nil then
		formation_lead = selected_fleet_representative
		formation_lead_index = selected_fleet_representative_index
	end
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	addGMFunction(string.format("+Formation %s",formation_type),changeFormation)
	if formation_lead ~= nil then
		addGMFunction(string.format("+Lead %s",formation_lead:getCallSign()),changeFormationLead)
	end
end
----------------------------------------------------------------------------------------
--	Order Fleet > Roaming (Set Order For Selected Fleet) > Fly Formation > Formation  --
----------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- FORMATION V*			*	inline, flyFormationParameters		asterisk = current selection
-- FORMATION A			*	inline, flyFormationParameters
-- FORMATION CIRCLE		*	inline, flyFormationParameters
-- FORMATION SQUARE		*	inline, flyFormationParameters
function changeFormation()
	clearGMFunctions()
	local formation_v = "V"
	if formation_type == "V" then
		formation_v = "V*"
	end
	addGMFunction(string.format("Formation %s",formation_v),function()
		formation_type = "V"
		flyFormationParameters()
	end)
	local formation_a = "A"
	if formation_type == "A" then
		formation_a = "A*"
	end
	addGMFunction(string.format("Formation %s",formation_a),function()
		formation_type = "A"
		flyFormationParameters()
	end)
	local formation_circle = "circle"
	if formation_type == "circle" then
		formation_circle = "circle*"
	end
	addGMFunction(string.format("Formation %s",formation_circle),function()
		formation_type = "circle"
		flyFormationParameters()
	end)
	local formation_square = "square"
	if formation_type == "square" then
		formation_square = "square*"
	end
	addGMFunction(string.format("Formation %s",formation_square),function()
		formation_type = "square"
		flyFormationParameters()
	end)
end
----------------------------------------------------------------------------------------
--	Order Fleet > Roaming (Set Order For Selected Fleet) > Fly Formation > Lead Ship  --
----------------------------------------------------------------------------------------
-- Button for each ship in the selected fleet including ship name.
function changeFormationLead()
	clearGMFunctions()
	if fleet_list ~= nil and #fleet_list > 0 then
		if selected_fleet_index ~= nil and selected_fleet_index > 0 then
			local fl = fleet_list[selected_fleet_index]
			if fl ~= nil then
				local fleet_member = nil
				local fleet_member_count = 0
				--local member_index = 0
				for j=1,#fl do
					fleet_member = fl[j]
					--member_index = j
					if fleet_member ~= nil and fleet_member:isValid() then
						fleet_member_count = fleet_member_count + 1
						addGMFunction(fleet_member:getCallSign(),function()
							formation_lead = fleet_member
							flyFormationParameters()
						end)
					end
				end
				if fleet_member_count < 1 then
					addGMMessage("No valid members in selected fleet")
				end
			else
				addGMMessage("selected fleet is nil")
			end
		else
			addGMMessage("No selected fleet")
		end
	else
		addGMMessage("No fleets spawned")
	end
end
------------------------------------------------------------------------------------------------------
--	Order Fleet > Reorganize Fleet (Take Elements From Existing Fleets and Combine Into New Fleet)  --
------------------------------------------------------------------------------------------------------
-- Incomplete 
function orderFleetChange()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Reorg Flt",orderFleet)
	local object_list = getGMSelection()
	local cpu_ship_count = 0
	local cpu_ship_faction = nil
	local factions_match = true
	local new_fleet = {}
	for i=1,#object_list do
		local current_selected_object = object_list[i]
		if isObjectType(current_selected_object,"CpuShip") then
			cpu_ship_count = cpu_ship_count + 1
			local current_faction = current_selected_object:getFaction()
			if cpu_ship_faction == nil then
				cpu_ship_faction = current_faction
			else
				if current_faction ~= cpu_ship_faction then
					factions_match = false
				end
			end
			table.insert(new_fleet,current_selected_object)
		end
	end
	if cpu_ship_count < 1 then
		addGMMessage("no ships selected")
	elseif not factions_match then
		addGMMessage("Ships selected are not all the same faction")
	end
	addGMMessage("incomplete function. Need to complete later")
end
-------------------------------------
--	Order fleet > Average Impulse  --
-------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM AVG IMP		F	initialGMFunctions
-- -ORDER FLEET				F	orderFleet
-- SELECTED SHIPS			F	inline
-- 1 ship-in-fleet			D	inline
function averageImpulse()
	clearGMFunctions()
	addGMFunction("-Main from Avg Imp",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	addGMFunction("Selected ships",function()
		local object_list = getGMSelection()
		if #object_list < 1 then
			addGMMessage("Average impulse failed - nothing selected. No action taken") 
			return
		end
		local selected_matches_npc_ship = true
		for i=1,#object_list do
			local current_selected_object = object_list[i]
			if not isObjectType(current_selected_object,"CpuShip") then
				selected_matches_npc_ship = false
				break
			end
		end
		if selected_matches_npc_ship then
			local avg_impulse = 0
			for i=1,#object_list do
				avg_impulse = avg_impulse + object_list[i]:getImpulseMaxSpeed()
			end
			avg_impulse = avg_impulse/#object_list
			for i=1,#object_list do
				object_list[i]:setImpulseMaxSpeed(avg_impulse)
			end
			addGMMessage(string.format("Changed %i selected ships' max impulse to %.1f",#object_list,avg_impulse))
		else
			addGMMessage("Something other than a CpuShip was selected. No action taken")
		end
	end)
	local select_fleet_label = "Select Fleet"
	if selected_fleet_representative ~= nil and selected_fleet_representative:isValid() then
		if selected_fleet_index ~= nil and fleet_list[selected_fleet_index] ~= nil then
			local fl = fleet_list[selected_fleet_index]
			if fl ~= nil then
				if selected_fleet_representative_index ~= nil then
					if selected_fleet_representative == fl[selected_fleet_representative_index] then
						select_fleet_label = string.format("%i %s",selected_fleet_index,selected_fleet_representative:getCallSign())
					end
				end
			end
		end
	end
	if select_fleet_label ~= "Select Fleet" then
		addGMFunction(string.format("%s",select_fleet_label),function()
			local avg_impulse = 0
			local ship_count = 0
			for _, fm in pairs(fleet_list[selected_fleet_index]) do
				if fm ~= nil and fm:isValid() then
					avg_impulse = avg_impulse + fm:getImpulseMaxSpeed()
					ship_count = ship_count + 1
				end
			end
			avg_impulse = avg_impulse/ship_count
			for _, fm in pairs(fleet_list[selected_fleet_index]) do
				if fm ~= nil and fm:isValid() then
					fm:setImpulseMaxSpeed(avg_impulse)
				end
			end
			addGMMessage(string.format("Changed max impulse of %i ships in fleet %i to %.1f",ship_count,selected_fleet_index,avg_impulse))
		end)
	end
end
--Order fleet to be idle - do nothing
function orderFleetIdle()
	clearGMFunctions()
	addGMFunction("-Main from Ord Idle",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	for i=1,8 do
		local fl = fleet_list[i]
		if fl ~= nil then
			local sampleName = ""
			for j=1,#fl do
				local fm = fl[j]
				if fm ~= nil and fm:isValid() then
					sampleName = fm:getCallSign()
					break
				end
			end
			local GMOrderFleetIdle = string.format("%i %s",i,sampleName)
			addGMFunction(GMOrderFleetIdle, function () orderFleetIdleGivenFleet(fleet_list[i]) end)
		else
			break
		end
	end
end
function orderFleetIdleGivenFleet(fto)
	for _, fm in pairs(fto) do
		if fm ~= nil and fm:isValid() then
			fm:orderIdle()
		end
	end	
end
--Order fleet to roam, attack any and all enemies
function orderFleetRoaming()
	clearGMFunctions()
	addGMFunction("-Main from Ord Roam",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	for i=1,8 do
		local fl = fleet_list[i]
		if fl ~= nil then
			local sampleName = ""
			for j=1,#fl do
				local fm = fl[j]
				if fm ~= nil and fm:isValid() then
					sampleName = fm:getCallSign()
					break
				end
			end
			GMOrderFleetRoaming = string.format("%i %s",i,sampleName)
			addGMFunction(GMOrderFleetRoaming,function () orderFleetRoamingGivenFleet(fleet_list[i]) end)
		else
			break
		end
	end
end
function orderFleetRoamingGivenFleet(fto)
	for _, fm in pairs(fto) do
		if fm ~= nil and fm:isValid() then
			fm:orderRoaming()	--set fleet member order
		end
	end
end
--Order fleet to stand ground, attacking nearby enemies
function orderFleetStandGround()
	clearGMFunctions()
	addGMFunction("-Main from Ord Stnd",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	for i=1,8 do
		local fl = fleet_list[i]
		if fl ~= nil then
			local sampleName = ""
			for j=1,#fl do
				local fm = fl[j]
				if fm ~= nil and fm:isValid() then
					sampleName = fm:getCallSign()
					break
				end
			end
			GMOrderFleetStandGround = string.format("%i %s",i,sampleName)
			addGMFunction(GMOrderFleetStandGround,function () orderFleetStandGroundGivenFleet(fleet_list[i]) end)
		else
			break
		end
	end
end
function orderFleetStandGroundGivenFleet(fto)
	for _, fm in pairs(fto) do
		if fm ~= nil and fm:isValid() then
			fm:orderStandGround()
		end
	end	
end
--Order fleet to attack GM selected object
function orderFleetAttack()
	clearGMFunctions()
	addGMFunction("-Main from Ord Attk",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	for fleet_index, fleet in ipairs(fleet_list) do
		if fleet ~= nil and #fleet > 0 then
			local sample_name = nil
			local valid_ship_count = 0
			for ship_index, ship in ipairs(fleet) do
				if ship ~= nil and ship:isValid() then
					sample_name = ship:getCallSign()
					valid_ship_count = valid_ship_count + 1
				end
			end
			if valid_ship_count > 0 then
				addGMFunction(string.format("%i(%i) %s",fleet_index,valid_ship_count,sample_name),function()
					string.format("")
					orderFleetAttack(fleet_index)
				end)
			end
		end
	end
end
function orderFleetAttack(fleet_index)
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Select a target for the fleet to attack")
	else
		local fleet = fleet_list[fleet_index]
		if fleet ~= nil and #fleet > 0 then
			for _, ship in ipairs(fleet) do
				if ship ~= nil and ship:isValid() then
					ship:orderAttack(object_list[1])
				end
			end
		else
			addGMMessage("Invalid fleet")
		end
	end
end
--Order fleet to defend GM selected object
function orderFleetDefend()
	clearGMFunctions()
	addGMFunction("-Main Frm Ord Defend",initialGMFunctions)
	addGMFunction("-Order Fleet",orderFleet)
	for fleet_index, fleet in ipairs(fleet_list) do
		if fleet ~= nil and #fleet > 0 then
			local sample_name = nil
			local valid_ship_count = 0
			for ship_index, ship in ipairs(fleet) do
				if ship ~= nil and ship:isValid() then
					sample_name = ship:getCallSign()
					valid_ship_count = valid_ship_count + 1
				end
			end
			if valid_ship_count > 0 then
				addGMFunction(string.format("%i(%i) %s",fleet_index,valid_ship_count,sample_name),function()
					string.format("")
					orderFleetDefend(fleet_index)
				end)
			end
		end
	end
end
function orderFleetDefend(fleet_index)
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMMessage("Select a target for the fleet to defend")
	else
		local fleet = fleet_list[fleet_index]
		if fleet ~= nil and #fleet > 0 then
			for _, ship in ipairs(fleet) do
				if ship ~= nil and ship:isValid() then
					ship:orderDefendTarget(object_list[1])
				end
			end
		else
			addGMMessage("Invalid fleet")
		end
	end
end
--	*											   *  --
--	**											  **  --
--	************************************************  --
--	****				Order Ship				****  --
--	************************************************  --
--	**											  **  --
--	*											   *  --
-------------------------------------
--	Order Ship > Warp/Jump Jammer  --
-------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN FROM JAMMER		F	initialGMFunctions
-- -ORDER SHIP				F	orderShip
-- JAM RANGE 10 - 5 = 5U	D	inline
-- JAM RANGE 10 + 5 = 15U	D	inline
-- DROP JAMMER 10U			D	dropJammer
function warpJumpJammer()
	clearGMFunctions()
	addGMFunction("-Main from Jammer",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	if jammer_range > 5000 then
		addGMFunction(string.format("Jam range %i - %i = %iU",jammer_range/1000,5,(jammer_range-5000)/1000),function()
			jammer_range = jammer_range - 5000
			warpJumpJammer()
		end)
	end
	if jammer_range < 50000 then
		addGMFunction(string.format("Jam range %i + %i = %iU",jammer_range/1000,5,(jammer_range+5000)/1000),function()
			jammer_range = jammer_range + 5000
			warpJumpJammer()
		end)
	end
	addGMFunction(string.format("Drop Jammer %iU",jammer_range/1000),dropJammer)
end
function dropJammer()
	local object_list = getGMSelection()
	if #object_list < 1 then
		addGMMessage("Jammer drop failed - nothing selected for location determination") 
		return
	end
	local selected_matches_npc_ship = false
	for i=1,#object_list do
		local current_selected_object = object_list[i]
		if isObjectType(current_selected_object,"CpuShip") then
			local csox, csoy = current_selected_object:getPosition()
			local vx, vy = vectorFromAngle(current_selected_object:getHeading()+90,500)
			WarpJammer():setRange(jammer_range):setPosition(csox+vx,csoy+vy):setFaction(current_selected_object:getFaction())
		end
	end
end
-----------------------------
--	Order Ship > Specials  --
-----------------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN FROM SPECIALS		F	initialGMFunctions
-- -ORDER SHIP				F	orderShip
-- +SELECT SHIP				F	changeSpecialShip
-- +CHANGE FROM ...			D	changeSpecialShip
-- +CHG ... TO ...			D	changeSpecialShip
-- +SELECT ...				D	changeSpecialShip
-- +SHLD DRAIN BEAMS ...	*D	setShieldDrainBeamFactor
-- +SKIP BEAM ...			*D	setSkipBeamFactor
-- SHIELD FREQ ADJUST		F	inline
-- +TACTICAL HOP ...		*D	setTacticalHop
-- +SPIKY SPIN ...			*D	setSpikySpin
-- +SPECIAL FACTOR ...		D	setShipEnhancementFactor
-- SPECIAL GM MSG ON/OFF	D	inline
function setSpecialsOnNPS()
	clearGMFunctions()
	addGMFunction("-Main from Specials",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	local button_label = ""
	local special_ship_selected = false
	local selection_label = "+Select Ship"
	if special_ship ~= nil and special_ship:isValid() then
		special_ship_selected = true
	end
	if special_ship_selected then
		selection_label = string.format("+Change from %s",special_ship:getCallSign())
	end
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(tempObject,"CpuShip") then
			if special_ship_selected then
				if special_ship ~= temp_object then
					selection_label = string.format("+Chg %s to %s",special_ship:getCallSign(),temp_object:getCallSign())
				end
			else
				selection_label = string.format("+Select %s",temp_object:getCallSign())
			end
		end
	end
	addGMFunction(selection_label,changeSpecialShip)
	if special_ship_selected then
		addGMFunction("+Select Special",selectSpecial)
	end
	addGMFunction(string.format("+Special Factor %i",ship_enhancement_factor),setShipEnhancementFactor)
	button_label = "Special GM Msg"
	if enhancement_warning_message then
		button_label = button_label .. " On"
	else
		button_label = button_label .. " Off"
	end
	addGMFunction(button_label,function()
		if enhancement_warning_message then
			enhancement_warning_message = false
		else
			enhancement_warning_message = true
		end
		setSpecialsOnNPS()
	end)
end
function selectSpecialWeapons()
	clearGMFunctions()
	addGMFunction("-Main from special weapons",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("-Specials",setSpecialsOnNPS)
	addGMFunction("-Select Special",selectSpecial)
	local button_label = "+Shld Drain Beams"
	if special_ship.shield_drain_beam_factor ~= nil then
		button_label = string.format("%s* %i",button_label,special_ship.shield_drain_beam_factor)
	end
	addGMFunction(button_label,setShieldDrainBeamFactor)
	button_label = "+Skip Beam"
	if special_ship.skip_beam_factor ~= nil then
		button_label = string.format("%s* %i",button_label,special_ship.skip_beam_factor)
	end
	addGMFunction(button_label,setSkipBeamFactor)
	button_label = "+PDC"
	if special_ship.pdc_factor ~= nil then
		button_label = string.format("%s* %i",button_label,special_ship.pdc_factor)
	end
	addGMFunction(button_label,setPdcFactor)
	button_label = "+Cyber Attack"
	if special_ship.cyber_attack_factor ~= nil then
		button_label = string.format("+Cyber I%i F%i",special_ship.cyber_attack_interval,special_ship.cyber_attack_factor)
	end
	addGMFunction(button_label,setCyberAttack)
end
function selectSpecial()
	clearGMFunctions()
	addGMFunction("-Main from select special",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("-Specials",setSpecialsOnNPS)
	if special_ship ~= nil and special_ship:isValid() then
		addGMFunction(string.format("+Change from %s",special_ship:getCallSign()),changeSpecialShip)
	else
		addGMFunction("+Select Special Ship",changeSpecialShip)
	end
	addGMFunction("+Special Weapons",selectSpecialWeapons)
	local button_label = "+Boost Impulse"
	if special_ship.boost_impulse_factor ~= nil then
		button_label = string.format("%s* %s",button_label,special_ship.boost_impulse_factor)
	end
	addGMFunction(button_label,setBoostImpulseFactor)
	button_label = "Shield Freq Adjust"
	if special_ship.adjust_shield_frequency_automatically ~= nil and special_ship.adjust_shield_frequency_automatically then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		if special_ship.adjust_shield_frequency_automatically == nil then
			special_ship.adjust_shield_frequency_automatically = true
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Shield Frequency Adjuster")
		else
			if special_ship.adjust_shield_frequency_automatically then
				special_ship.adjust_shield_frequency_automatically = false
				setSpecialDescription(special_ship)
			else
				special_ship.adjust_shield_frequency_automatically = true
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Shield Frequency Adjuster")
			end
		end
		selectSpecial()
	end)
	button_label = "+Tactical Hop"
	if special_ship.tactical_hop ~= nil then
		button_label = string.format("%s %s",button_label,special_ship.tactical_hop)
	end
	addGMFunction(button_label,setTacticalHop)
	button_label = "+Spiky Spin"
	if special_ship.spiky_spin ~= nil then
		button_label = string.format("%s %s",button_label,special_ship.spiky_spin)
	end
	addGMFunction(button_label,setSpikySpin)
end
----------------------------------------------
--	Order Ship > Specials > Special factor  --
----------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN FRM SPCL FCTR		F	initialGMFunctions
-- -ORDER SHIP				F	orderShip
-- -SPECIALS				F	setSpecialsOnNPS
-- -SPECIAL FACTOR ...		D*	inline
function setShipEnhancementFactor()
	clearGMFunctions()
	addGMFunction("-Main frm Spcl Fctr",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("-Specials",setSpecialsOnNPS)
	local button_label = "Special Factor 0"
	if ship_enhancement_factor == 0 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 0
		setShipEnhancementFactor()
	end)
	local button_label = "Special Factor 1"
	if ship_enhancement_factor == 1 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 1
		setShipEnhancementFactor()
	end)
	button_label = "Special Factor 2"
	if ship_enhancement_factor == 2 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 2
		setShipEnhancementFactor()
	end)
	button_label = "Special Factor 3"
	if ship_enhancement_factor == 3 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 3
		setShipEnhancementFactor()
	end)
	button_label = "Special Factor 5"
	if ship_enhancement_factor == 5 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 5
		setShipEnhancementFactor()
	end)
	button_label = "Special Factor 8"
	if ship_enhancement_factor == 8 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		ship_enhancement_factor = 8
		setShipEnhancementFactor()
	end)
end
function changeSpecialShip()
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(temp_object,"CpuShip") then
			special_ship = temp_object
		else
			addGMMessage("Select CPU ship. No action taken")
		end
	else
		addGMMessage("Select one CPU ship. No action taken")
	end
	setSpecialsOnNPS()
end
function setBoostImpulseFactor()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		local button_label = "No Impulse Boost"
		if special_ship.boost_impulse_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.boost_impulse_factor = nil
			special_ship.boost_impulse_time_factor = nil
			special_ship.boost_impulse_degree_factor = nil
			setSpecialDescription(special_ship)
			setBoostImpulseFactor()
		end)
		local current_index = 3
		if special_ship.boost_impulse_time_factor ~= nil then
			for index, factor in ipairs(impulse_boost_time_factors) do
				if special_ship.boost_impulse_time_factor == factor then
					current_index = index
					break
				end
			end
		end
		if current_index > 1 then
			if current_index > #impulse_boost_time_factors - 1 then
				for i=#impulse_boost_time_factors-2,#impulse_boost_time_factors do
					local factor = impulse_boost_time_factors[i]
					button_label = string.format("Boost Seconds:%i",factor)
					if special_ship.boost_impulse_time_factor == factor then
						button_label = button_label .. "*"
					end
					addGMFunction(button_label,function()
						string.format("")
						special_ship.boost_impulse_time_factor = factor
						if special_ship.boost_impulse_degree_factor == nil then
							special_ship.boost_impulse_degree_factor = 2
						end
						special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
						setSpecialDescription(special_ship)
						addEnhancementToScienceDatabase("Boost Impulse")
						setBoostImpulseFactor()
					end)
				end
			else
				for i=current_index-1,current_index+1 do
					local factor = impulse_boost_time_factors[i]
					button_label = string.format("Boost Seconds:%i",factor)
					if special_ship.boost_impulse_time_factor == factor then
						button_label = button_label .. "*"
					end
					addGMFunction(button_label,function()
						string.format("")
						special_ship.boost_impulse_time_factor = factor
						if special_ship.boost_impulse_degree_factor == nil then
							special_ship.boost_impulse_degree_factor = 2
						end
						special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
						setSpecialDescription(special_ship)
						addEnhancementToScienceDatabase("Boost Impulse")
						setBoostImpulseFactor()
					end)
				end
			end
		else
			for i=1,3 do
				local factor = impulse_boost_time_factors[i]
				button_label = string.format("Boost Seconds:%i",factor)
				if special_ship.boost_impulse_time_factor == factor then
					button_label = button_label .. "*"
				end
				addGMFunction(button_label,function()
					string.format("")
					special_ship.boost_impulse_time_factor = factor
					if special_ship.boost_impulse_degree_factor == nil then
						special_ship.boost_impulse_degree_factor = 2
					end
					special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
					setSpecialDescription(special_ship)
					addEnhancementToScienceDatabase("Boost Impulse")
					setBoostImpulseFactor()
				end)
			end
		end
		current_index = 3
		if special_ship.boost_impulse_degree_factor ~= nil then
			for index, factor in ipairs(impulse_boost_degree_factors) do
				if special_ship.boost_impulse_degree_factor == factor then
					current_index = index
					break
				end
			end
		end
		if current_index > 1 then
			if current_index > #impulse_boost_degree_factors - 1 then
				for i=#impulse_boost_degree_factors-2,#impulse_boost_degree_factors do
					local factor = impulse_boost_degree_factors[i]
					button_label = string.format("Boost Degree:%s",factor)
					if special_ship.boost_impulse_degree_factor == factor then
						button_label = button_label .. "*"
					end
					addGMFunction(button_label,function()
						string.format("")
						special_ship.boost_impulse_degree_factor = factor
						if special_ship.boost_impulse_time_factor == nil then
							special_ship.boost_impulse_time_factor = 8
						end
						special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
						setSpecialDescription(special_ship)
						addEnhancementToScienceDatabase("Boost Impulse")
						setBoostImpulseFactor()
					end)
				end
			else
				for i=current_index-1,current_index+1 do
					local factor = impulse_boost_degree_factors[i]
					button_label = string.format("Boost Degree:%s",factor)
					if special_ship.boost_impulse_degree_factor == factor then
						button_label = button_label .. "*"
					end
					addGMFunction(button_label,function()
						string.format("")
						special_ship.boost_impulse_degree_factor = factor
						if special_ship.boost_impulse_time_factor == nil then
							special_ship.boost_impulse_time_factor = 8
						end
						special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
						setSpecialDescription(special_ship)
						addEnhancementToScienceDatabase("Boost Impulse")
						setBoostImpulseFactor()
					end)
				end
			end
		else
			for i=1,3 do
				local factor = impulse_boost_degree_factors[i]
				button_label = string.format("Boost Degree:%s",factor)
				if special_ship.boost_impulse_degree_factor == factor then
					button_label = button_label .. "*"
				end
				addGMFunction(button_label,function()
					string.format("")
					special_ship.boost_impulse_degree_factor = factor
					if special_ship.boost_impulse_time_factor == nil then
						special_ship.boost_impulse_time_factor = 8
					end
					special_ship.boost_impulse_factor = string.format("%ix%s",special_ship.boost_impulse_time_factor,special_ship.boost_impulse_degree_factor)
					setSpecialDescription(special_ship)
					addEnhancementToScienceDatabase("Boost Impulse")
					setBoostImpulseFactor()
				end)
			end
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
--------------------------------------------------
--	Order Ship > Specials > Shield drain beams  --
--------------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -(ship name) SPECIALS	D	setSpecialsOnNPS
-- NO SHIELD DRAIN			*	inline
-- SHLD DRAIN FCTR: ...		D*	inline
function setShieldDrainBeamFactor()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		local button_label = "No Shield Drain"
		if special_ship.shield_drain_beam_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.shield_drain_beam_factor = nil
			setSpecialDescription(special_ship)
			setShieldDrainBeamFactor()
		end)
		for _, factor in ipairs(beam_factors) do
			button_label = string.format("Shld Drain Fctr:%i",factor)
			if special_ship.shield_drain_beam_factor ~= nil and special_ship.shield_drain_beam_factor == factor then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				string.format("")
				special_ship.shield_drain_beam_factor = factor
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Shield Drain Beam")
				setShieldDrainBeamFactor()
			end)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
-----------------------------------------
--	Order Ship > Specials > Skip beam  --
-----------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -(ship name) SPECIALS	D	selectSpecial
-- NO SKIP BEAM				*	inline
-- SKIP BEAM FACTOR: ...	D*	inline
function setSkipBeamFactor()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		local button_label = "No Skip Beam"
		if special_ship.skip_beam_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.skip_beam_factor = nil
			setSpecialDescription(special_ship)
			setSkipBeamFactor()
		end)
		for i=1,5 do
			button_label = string.format("Skip Beam Factor:%i",i)
			if special_ship.skip_beam_factor ~= nil and special_ship.skip_beam_factor == i then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				string.format("")
				special_ship.skip_beam_factor = i
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Skip Beam")
				setSkipBeamFactor()
			end)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
function setPdcFactor()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		local button_label = "No PDC"
		if special_ship.pdc_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.pdc_factor = nil
			setSpecialDescription(special_ship)
			setPdcFactor()
		end)
		for _, factor in ipairs(pdc_factors) do
			button_label = string.format("PDC Factor: %i",factor)
			if special_ship.pdc_factor ~= nil and special_ship.pdc_factor == factor then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				string.format("")
				special_ship.pdc_factor = factor
				table.insert(pdc_ships,special_ship)
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Point Defense Cannon")
				setPdcFactor()
			end)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
function setCyberAttack()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		local button_label = "No Cyber Attack"
		if special_ship.cyber_attack_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.cyber_attack_factor = nil
			special_ship.cyber_attack_interval = nil
			setSpecialDescription(special_ship)
			setCyberAttack()
		end)
		button_label = "+Cyber Factor"
		if special_ship.cyber_attack_factor ~= nil then
			button_label = string.format("%s %s",button_label,special_ship.cyber_attack_factor)
		end
		addGMFunction(button_label,setCyberAttackFactor)
		button_label = "+Cyber Interval"
		if special_ship.cyber_attack_interval ~= nil then
			button_label = string.format("%s %s",button_label,special_ship.cyber_attack_interval)
		end
		addGMFunction(button_label,setCyberAttackInterval)
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
function setCyberAttackFactor()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		addGMFunction("-Cyber Attack",setCyberAttack)
		local button_label = "No Cyber Attack"
		if special_ship.cyber_attack_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.cyber_attack_factor = nil
			special_ship.cyber_attack_interval = nil
			setSpecialDescription(special_ship)
			setCyberAttackFactor()
		end)
		for i, factor in ipairs(cyber_attack_factors) do
			button_label = string.format("Cyber Factor: %i",factor)
			if special_ship.cyber_attack_factor ~= nil and special_ship.cyber_attack_factor == factor then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				string.format("")
				special_ship.cyber_attack_factor = factor
				table.insert(cyber_attack_ships,special_ship)
				if special_ship.cyber_attack_interval == nil then
					special_ship.cyber_attack_interval = 60
				end
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Cyber Attack")
				setCyberAttackFactor()
			end)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
function setCyberAttackInterval()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		addGMFunction("-Special Weapons",selectSpecialWeapons)
		addGMFunction("-Cyber Attack",setCyberAttack)
		local button_label = "No Cyber Attack"
		if special_ship.cyber_attack_factor == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.cyber_attack_factor = nil
			special_ship.cyber_attack_interval = nil
			setSpecialDescription(special_ship)
			setCyberAttackFactor()
		end)
		for i, interval in ipairs(cyber_attack_intervals) do
			button_label = string.format("Cyber Interval: %i",interval)
			if special_ship.cyber_attack_interval ~= nil and special_ship.cyber_attack_interval == interval then
				button_label = button_label .. "*"
			end
			addGMFunction(button_label,function()
				string.format("")
				special_ship.cyber_attack_interval = interval
				table.insert(cyber_attack_ships,special_ship)
				if special_ship.cyber_attack_factor == nil then
					special_ship.cyber_attack_factor = 75
				end
				setSpecialDescription(special_ship)
				addEnhancementToScienceDatabase("Cyber Attack")
				setCyberAttackInterval()
			end)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
--------------------------------------------
--	Order Ship > Specials > Tactical hop  --
--------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -(ship name) SPECIALS	D	selectSpecial
-- NO TACTICAL HOP			*	inline
-- +HOP TYPE ...			D	setHopType
-- +HOP CHANCE ...			D	setHopChance
function setTacticalHop()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		local button_label = "No Tactical Hop"
		if special_ship.tactical_hop == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.tactical_hop = nil
			special_ship.tactical_hop_chance = nil
			setSpecialDescription(special_ship)
			setTacticalHop()
		end)
		button_label = "+Hop Type"
		if special_ship.tactical_hop ~= nil then
			button_label = string.format("%s %s",button_label,special_ship.tactical_hop)
		end
		addGMFunction(button_label,setHopType)
		if special_ship.tactical_hop ~= nil then
			button_label = "+Hop Chance"
			if special_ship.tactical_hop_chance ~= nil then
				button_label = string.format("%s %i",button_label,special_ship.tactical_hop_chance)
			end
			addGMFunction(button_label,setHopChance)
		end
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
------------------------------------------
--	Order Ship > Specials > Spiky spin  --
------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -(ship name) SPECIALS	D	setSpecialsOnNPS
-- NO SPIKY SPIN			*	inline
-- SPIKY SPIN 10			*	inline
-- SPIKY SPIN 25			*	inline
-- SPIKY SPIN 50			*	inline
-- SPIKY SPIN 75			*	inline
-- SPIKY SPIN 90			*	inline
function setSpikySpin()
	if special_ship ~= nil then
		clearGMFunctions()
		addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
		local button_label = "No Spiky Spin"
		if special_ship.spiky_spin == nil then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = nil
			setSpecialDescription(special_ship)
			setSpikySpin()
		end)
		button_label = "Spiky Spin 10"
		if special_ship.spiky_spin == 10 then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = 10
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Spiky Spin")
			setSpikySpin()
		end)
		button_label = "Spiky Spin 25"
		if special_ship.spiky_spin == 25 then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = 25
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Spiky Spin")
			setSpikySpin()
		end)
		button_label = "Spiky Spin 50"
		if special_ship.spiky_spin == 50 then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = 50
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Spiky Spin")
			setSpikySpin()
		end)
		button_label = "Spiky Spin 75"
		if special_ship.spiky_spin == 75 then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = 75
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Spiky Spin")
			setSpikySpin()
		end)
		button_label = "Spiky Spin 90"
		if special_ship.spiky_spin == 90 then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			string.format("")
			special_ship.spiky_spin = 90
			setSpecialDescription(special_ship)
			addEnhancementToScienceDatabase("Spiky Spin")
			setSpikySpin()
		end)
	else
		addGMMessage("Must select CPU ship. No action taken")
		selectSpecial()
	end
end
-------------------------------------------------------
--	Order Ship > Specials > Tactical hop > Hop type  --
-------------------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -(ship name) SPECIALS	D	setSpecialsOnNPS
-- -TACTICAL HOP			F	setTacticalHop
-- HOP TYPE 1				*	inline
-- HOP TYPE 2				*	inline
-- HOP TYPE 3				*	inline
-- HOP TYPE 4				*	inline
-- HOP TYPE 5				*	inline
function setHopType()
	clearGMFunctions()
	addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
	addGMFunction("-Tactical Hop",setTacticalHop)
	local button_label = "Hop Type 1"
	if special_ship.tactical_hop == 1 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		string.format("")
		special_ship.tactical_hop = 1
		setSpecialDescription(special_ship)
		addEnhancementToScienceDatabase("Tactical Hop")
		setTacticalHop()
	end)
	button_label = "Hop Type 2"
	if special_ship.tactical_hop == 2 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		string.format("")
		special_ship.tactical_hop = 2
		setSpecialDescription(special_ship)
		addEnhancementToScienceDatabase("Tactical Hop")
		setTacticalHop()
	end)
	button_label = "Hop Type 3"
	if special_ship.tactical_hop == 3 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		string.format("")
		special_ship.tactical_hop = 3
		setSpecialDescription(special_ship)
		addEnhancementToScienceDatabase("Tactical Hop")
		setTacticalHop()
	end)
	button_label = "Hop Type 4"
	if special_ship.tactical_hop == 4 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		string.format("")
		special_ship.tactical_hop = 4
		setSpecialDescription(special_ship)
		addEnhancementToScienceDatabase("Tactical Hop")
		setTacticalHop()
	end)
	button_label = "Hop Type 5"
	if special_ship.tactical_hop == 5 then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		string.format("")
		special_ship.tactical_hop = 5
		setSpecialDescription(special_ship)
		addEnhancementToScienceDatabase("Tactical Hop")
		setTacticalHop()
	end)
end
---------------------------------------------------------
--	Order Ship > Specials > Tactical hop > Hop chance  --
---------------------------------------------------------
-- Button Text				   DF*	Related Function(s)
-- -(ship name) SPECIALS		D	setSpecialsOnNPS
-- -TACTICAL HOP				F	setTacticalHop
-- ... HOP CHANCE - 1 = ...		D	inline
-- ... HOP CHANCE - 5 = ...		D	inline
-- ... HOP CHANCE - 10 = ...	D	inline
-- ... HOP CHANCE + 1 = ...		D	inline
-- ... HOP CHANCE + 5 = ...		D	inline
-- ... HOP CHANCE + 10 = ...	D	inline
function setHopChance()
	clearGMFunctions()
	addGMFunction(string.format("-%s Specials",special_ship:getCallSign()),selectSpecial)
	addGMFunction("-Tactical Hop",setTacticalHop)
	if special_ship.tactical_hop_chance == nil then
		special_ship.tactical_hop_chance = 25
	end
	if special_ship.tactical_hop_chance > 5 then
		addGMFunction(string.format("%i Hop Chance - 1 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance - 1),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance - 1
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
	if special_ship.tactical_hop_chance >= 10 then
		addGMFunction(string.format("%i Hop Chance - 5 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance - 5),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance - 5
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
	if special_ship.tactical_hop_chance >= 15 then
		addGMFunction(string.format("%i Hop Chance - 10 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance - 10),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance - 10
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
	if special_ship.tactical_hop_chance < 90 then
		addGMFunction(string.format("%i Hop Chance + 1 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance + 1),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance + 1
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
	if special_ship.tactical_hop_chance <= 85 then
		addGMFunction(string.format("%i Hop Chance + 5 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance + 5),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance + 5
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
	if special_ship.tactical_hop_chance <= 80 then
		addGMFunction(string.format("%i Hop Chance + 10 = %i",special_ship.tactical_hop_chance,special_ship.tactical_hop_chance + 10),function()
			special_ship.tactical_hop_chance = special_ship.tactical_hop_chance + 10
			setSpecialDescription(special_ship)
			setHopChance()
		end)
	end
end
function setSpecialDescription(ship)
	local special_description = ""
	if ship.shield_drain_beam_factor ~= nil then
		special_description = string.format("Factor %i shield draining beams.",ship.shield_drain_beam_factor)
	end
	if ship.boost_impulse_factor ~= nil then
		if special_description == "" then
			special_description = string.format("Boost Impulse %s.",ship.boost_impulse_factor)
		else
			special_description = string.format("%s Boost Impulse %s.",special_description,ship.boost_impulse_factor)
		end
	end
	if ship.skip_beam_factor ~= nil then
		if special_description == "" then
			special_description = string.format("Factor %i skip beam.",ship.skip_beam_factor)
		else
			special_description = string.format("%s Factor %i skip beam.",special_description,ship.skip_beam_factor)
		end
	end
	if ship.adjust_shield_frequency_automatically ~= nil and ship.adjust_shield_frequency_automatically then
		if special_description == "" then
			special_description = "Automated shield frequency adjusters."			
		else
			special_description = string.format("%s Automated shield frequency adjusters.",special_description)
		end
	end
	if ship.tactical_hop ~= nil then
		if ship.tactical_hop_chance == nil then
			ship.tactical_hop_chance = 25
		end
		if special_description == "" then
			special_description = string.format("Tactical Hop %i.%i.",ship.tactical_hop,ship.tactical_hop_chance)
		else
			special_description = string.format("%s Tactical Hop %i.%i.",special_description,ship.tactical_hop,ship.tactical_hop_chance)
		end
	end
	if ship.spiky_spin ~= nil then
		if special_description == "" then
			special_description = string.format("Spiky Spin %i.",ship.spiky_spin)
		else
			special_description = string.format("%s Spiky Spin %i.",special_description,ship.spiky_spin)
		end
	end
	if ship.pdc_factor ~= nil then
		if special_description == "" then
			special_description = string.format("Factor %i%% Point Defense Cannons.",ship.pdc_factor)
		else
			special_description = string.format("%s Factor %i%% Point Defense Cannons.",special_description,ship.pdc_factor)
		end
	end
	if ship.cyber_attack_factor ~= nil then
		if special_description == "" then
			special_description = string.format("Cyber Attack %i.%i.",ship.cyber_attack_interval,ship.cyber_attack_factor)
		else
			special_description = string.format("%s Cyber Attack %i.%i.",special_description,ship.cyber_attack_interval,ship.cyber_attack_factor)
		end
	end
	if special_description == "" then
		ship:setDescriptionForScanState("notscanned"," ")
		ship:setDescriptionForScanState("friendorfoeidentified"," ")
		ship:setDescriptionForScanState("simplescan"," ")
		ship:setDescriptionForScanState("fullscan"," ")
	else	
		ship:setDescriptionForScanState("notscanned"," ")
		ship:setDescriptionForScanState("friendorfoeidentified"," ")
		ship:setDescriptionForScanState("simplescan",string.format("Enhanced %s",ship:getTypeName()))
		ship:setDescriptionForScanState("fullscan",special_description)
	end
end
---------------------------
--	Order Ship > Patrol  --
---------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM PATROL	F	initialGMFunctions
-- -ORDER SHIP			F	orderShip
-- +SELECT SHIP			D	changePatrolShip
function setPatrolPoints()
	clearGMFunctions()
	addGMFunction("-Main from Patrol",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	local patrol_ship_selected = false
	local selection_label = "+Select ship"
	if patrol_ship ~= nil and patrol_ship:isValid() then
		patrol_ship_selected = true
	end
	if patrol_ship_selected then
		selection_label = string.format("+Change from %s",patrol_ship:getCallSign())
	end
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(temp_object,"CpuShip") then
			if patrol_ship_selected then
				if patrol_ship ~= temp_object then
					selection_label = string.format("+Chg %s to %s",patrol_ship:getCallSign(),temp_object:getCallSign())
				end
			else
				selection_label = string.format("+Select %s",temp_object:getCallSign())
			end
		end
	end
	addGMFunction(selection_label,changePatrolShip)
	if patrol_ship_selected then
		local add_point_label = "Add patrol point"
		if patrol_ship.patrol_points ~= nil then
			add_point_label = string.format("%s %i",add_point_label,#patrol_ship.patrol_points + 1)
		end
		if gm_click_mode == "add patrol point" then
			addGMFunction(string.format(">%s<",add_point_label),addPatrolPoint)
		else
			addGMFunction(string.format("%s",add_point_label),addPatrolPoint)
		end
		if patrol_ship.patrol_points ~= nil then
			addGMFunction("Del Patrol Points",function()
				patrol_ship.patrol_points = nil
				addGMMessage(string.format("All patrol points deleted from %s",patrol_ship:getCallSign()))
				setPatrolPoints()
			end)
		end
	end
end
function addPatrolPoint()
	if gm_click_mode == "add patrol point" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "add patrol point"
		onGMClick(gmClickAddPatrolPoint)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   add patrol point\nGM click mode.",prev_mode))
		end
	end
	setPatrolPoints()
end
function changePatrolShip()
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(temp_object,"CpuShip") then
			patrol_ship = temp_object
		else
			addGMMessage("Select CPU ship. No action taken")
		end
	else
		addGMMessage("Select one CPU ship. No action taken")
	end
	setPatrolPoints()
end
function gmClickAddPatrolPoint(x,y)
	if patrol_ship ~= nil and patrol_ship:isValid() then
		if patrol_ship.patrol_points ~= nil then
			table.insert(patrol_ship.patrol_points,{x = x, y = y})
		else
			local px, py = patrol_ship:getPosition()
			local patrol_points = {
				{x = px, y = py},
				{x = x, y = y},
			}
			--						obj,			patrol_points,	patrol_point_index,	patrol_check_timer_interval
			update_system:addPatrol(patrol_ship,	patrol_points,	2,					5)
			patrol_ship:orderFlyTowards(x,y)
		end
		setPatrolPoints()
	end
end
-----------------------
--	Order Ship > AI  --
-----------------------
-- Button Text		   FD*	Related Function(s)
-- DEFAULT*				D	inline
-- FIGHTER				D	inline
-- MISSILEVOLLEY		D	inline
-- EVASION				D	inline
function setShipAI()
	local object_list = getGMSelection()
	--[[
	if #object_list ~= 1 then
		addGMMessage("You need to select a CPU ship. No action taken.")
		return
	end
	local obj = object_list[1]
	if obj ~= nil then
		if not isObjectType(obj,"CpuShip") then
			addGMMessage("What you have selected is not a CPU ship. No action taken.")
			return
		end
	else
		return
	end
	--]]
	if #object_list < 1 then
		addGMMessage("You need to select a CPU ship. No action taken.")
		return
	end
	local cpu_ship_count = 0
	for _, ship in ipairs(object_list) do
		if isObjectType(ship,"CpuShip") then
			cpu_ship_count = cpu_ship_count + 1
		end
	end
	if cpu_ship_count == 0 then
		addGMMessage("You can only set AI on CPU ships. You need to select a CPU ship. No action taken.")
		return
	end
	clearGMFunctions()
	local button_label = "default"
	if #object_list == 1 then
		if object_list[1] ~= nil and object_list[1]:isValid() then
			if isObjectType(object_list[1],"CpuShip") then
				if object_list[1].AI == "default" then
					button_label = button_label .. "*"
				end
			end
		end
	end
--	if obj.AI == "default" then
--		button_label = button_label .. "*"
--	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		local ai_list = {}
		for _, ship in ipairs(object_list) do
			if ship ~= nil and ship:isValid() then
				if isObjectType(ship,"CpuShip") then
					ship:setAI("default")
					ship.AI = "default"
					table.insert(ai_list,ship)
				end
			end
		end
		if #ai_list > 0 then
			local msg = "The following ships had their AI set to default:\n     "
			for _, ship in ipairs(ai_list) do
				msg = msg .. ship:getCallSign() .. " "
			end
			addGMMessage(msg)
		else
			addGMMessage("No CPU ships in selection. No action taken")
		end
		--obj:setAI("default")
		--obj.AI = "default"
		orderShip()
	end)
	button_label = "fighter"
	if #object_list == 1 then
		if object_list[1] ~= nil and object_list[1]:isValid() then
			if isObjectType(object_list[1],"CpuShip") then
				if object_list[1].AI == "fighter" then
					button_label = button_label .. "*"
				end
			end
		end
	end
--	if obj.AI == "fighter" then
--		button_label = button_label .. "*"
--	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		local ai_list = {}
		for _, ship in ipairs(object_list) do
			if ship ~= nil and ship:isValid() then
				if isObjectType(ship,"CpuShip") then
					ship:setAI("fighter")
					ship.AI = "fighter"
					table.insert(ai_list,ship)
				end
			end
		end
		if #ai_list > 0 then
			local msg = "The following ships had their AI set to fighter:\n     "
			for _, ship in ipairs(ai_list) do
				msg = msg .. ship:getCallSign() .. " "
			end
			addGMMessage(msg)
		else
			addGMMessage("No CPU ships in selection. No action taken")
		end
		--obj:setAI("fighter")
		--obj.AI = "fighter"
		orderShip()
	end)
	button_label = "missilevolley"
	if #object_list == 1 then
		if object_list[1] ~= nil and object_list[1]:isValid() then
			if isObjectType(object_list[1],"CpuShip") then
				if object_list[1].AI == "missilevolley" then
					button_label = button_label .. "*"
				end
			end
		end
	end
--	if obj.AI == "missilevolley" then
--		button_label = button_label .. "*"
--	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		local ai_list = {}
		for _, ship in ipairs(object_list) do
			if ship ~= nil and ship:isValid() then
				if isObjectType(ship,"CpuShip") then
					ship:setAI("missilevolley")
					ship.AI = "missilevolley"
					table.insert(ai_list,ship)
				end
			end
		end
		if #ai_list > 0 then
			local msg = "The following ships had their AI set to missilevolley:\n     "
			for _, ship in ipairs(ai_list) do
				msg = msg .. ship:getCallSign() .. " "
			end
			addGMMessage(msg)
		else
			addGMMessage("No CPU ships in selection. No action taken")
		end
		--obj:setAI("missilevolley")
		--obj.AI = "missilevolley"
		orderShip()
	end)
	button_label = "evasion"
	if #object_list == 1 then
		if object_list[1] ~= nil and object_list[1]:isValid() then
			if isObjectType(object_list[1],"CpuShip") then
				if object_list[1].AI == "evasion" then
					button_label = button_label .. "*"
				end
			end
		end
	end
--	if obj.AI == "evasion" then
--		button_label = button_label .. "*"
--	end
	addGMFunction(button_label,function()
		local object_list = getGMSelection()
		local ai_list = {}
		for _, ship in ipairs(object_list) do
			if ship ~= nil and ship:isValid() then
				if isObjectType(ship,"CpuShip") then
					ship:setAI("evasion")
					ship.AI = "evasion"
					table.insert(ai_list,ship)
				end
			end
		end
		if #ai_list > 0 then
			local msg = "The following ships had their AI set to evasion:\n     "
			for _, ship in ipairs(ai_list) do
				msg = msg .. ship:getCallSign() .. " "
			end
			addGMMessage(msg)
		else
			addGMMessage("No CPU ships in selection. No action taken")
		end
		--obj:setAI("evasion")
		--obj.AI = "evasion"
		orderShip()
	end)
end
------------------------------
--	Order Ship > Formation  --
------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM FORMATION	F	initialGMFunctions
-- -ORDER SHIP			F	orderShip
-- +SELECT SHIP			F	changeFormationShip
-- +CHANGE FROM ...		D	changeFormationShip
-- +CHG ... TO ...		D	changeFormationShip
-- +SELECT ...			D	changeFormationShip
-- SET FORMATION TARGET F	setFormationTarget
-- +SHAPE				D	setFormationShape
-- +SPACING				D	setFormationSpacing
-- CREATE FORMATION		F	inline
-- REMOVE FORMATION		F	inline
function setFormation()
	clearGMFunctions()
	addGMFunction("-Main from Formation",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	local formation_ship_selected = false
	local select_label = "+Select Ship"
	if formation_ship ~= nil and formation_ship:isValid() then
		formation_ship_selected = true
	end
	if formation_ship_selected then
		select_label = string.format("+Change from %s",formation_ship:getCallSign())
	end
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(temp_object,"CpuShip") then
			if formation_ship_selected then
				if formation_ship ~= temp_object then
					select_label = string.format("+Chg %s to %s",formation_ship:getCallSign(),temp_object:getCallSign())
				end
			else
				select_label = string.format("+Select %s",temp_object:getCallSign())
			end
		end
	end
	addGMFunction(select_label,changeFormationShip)
	local button_label = "Set Formation Target"
	if formation_ship_selected and formation_target_angle ~= nil then
		local tva = VisualAsteroid():setPosition(formation_target_x,formation_target_y)
		local sector_name = tva:getSectorName()
		tva:destroy()
		button_label = string.format("Form. Target %s,%i",sector_name,math.floor(formation_target_angle))
	end
	if gm_click_mode == "set formation target" then
		button_label = string.format(">%s<",button_label)
	end
	addGMFunction(button_label,setFormationTarget)
	button_label = "+Shape"
	if formation_shape ~= nil then
		button_label = string.format("%s %s",button_label,formation_shape)
	end
	addGMFunction(button_label,setFormationShape)
	button_label = "+Spacing"
	if formation_spacing ~= nil then
		button_label = string.format("%s %.1f",button_label,formation_spacing/1000)
	end
	addGMFunction(button_label,setFormationSpacing)
	if formation_spacing ~= nil and formation_shape ~= nil and formation_ship_selected and formation_target_angle ~= nil then
		if formation_ship.formation_ships == nil then
			addGMFunction("Create Formation",function()
				local leader_x, leader_y = formation_ship:getPosition()
				local fleet_prefix = generateCallSignPrefix()
				formation_ship.formation_ships = {}
				for _, form in ipairs(fly_formation[formation_shape]) do
					local template = formation_ship:getTypeName()
					local ship = ship_template[template].create(formation_ship:getFaction(),template)
					local form_x, form_y = vectorFromAngleNorth(formation_target_angle + form.angle, form.dist * formation_spacing)
					local form_prime_x, form_prime_y = vectorFromAngle(form.angle, form.dist * formation_spacing)
					ship:setPosition(leader_x + form_x, leader_y + form_y):setHeading(formation_target_angle):orderFlyFormation(formation_ship,form_prime_x,form_prime_y)
					ship:setCallSign(generateCallSign(fleet_prefix))
					if ship:hasWarpDrive() then
						ship:setWarpSpeed(ship:getWarpSpeed()*1.1)
					end
					ship:setAcceleration(ship:getAcceleration()*1.1)
					ship:setImpulseMaxSpeed(ship:getImpulseMaxSpeed()*1.1)
					table.insert(formation_ship.formation_ships,ship)
				end
				formation_ship:orderFlyTowards(formation_target_x,formation_target_y)
				--update_system:addFormationLeaderCommandUpdate(formation_ship,formation_trigger)
				setFormation()
			end)
		else
			addGMFunction("Remove Formation",function()
				for _, ship in ipairs(formation_ship.formation_ships) do
					if ship ~= nil and ship:isValid() then
						ship:destroy()
					end
				end
				formation_ship.formation_ships = nil
				setFormation()
			end)
		end
	end
end
function setFormationTrigger()
	clearGMFunctions()
	for i=1000,8000,1000 do
		local button_label = string.format("Trigger %i",i/1000)
		if formation_trigger == i then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_trigger = i
			setFormation()
		end)
	end
end
----------------------------------------
--	Order Ship > Formation > Spacing  --
----------------------------------------
-- Button Text FD*	Related Function(s)
-- SPACING: ...	D	inline
function setFormationSpacing()
	clearGMFunctions()
	if formation_spacing > 1200 then
		formation_spacing = 1200
	end
	for i=500,1200,100 do
		local button_label = string.format("Spacing: %.1f",i/1000)
		if formation_spacing == i then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_spacing = i
			setFormation()
		end)
	end
end
--------------------------------------
--	Order Ship > Formation > Shape  --
--------------------------------------
-- Button Text FD*	Related Function(s)
-- +V			F	setFormationCategoryV
-- +A			F	setFormationCategoryA
-- +LINE		F	setFormationCategoryLine
-- +M			F	setFormationCategoryM
-- +W			F	setFormationCategoryW
-- +X			F	setFormationCategoryX
function setFormationShape()
	clearGMFunctions()
	addGMFunction("+V",setFormationCategoryV)
	addGMFunction("+A",setFormationCategoryA)
	addGMFunction("+Line",setFormationCategoryLine)
	addGMFunction("+M",setFormationCategoryM)
	addGMFunction("+W",setFormationCategoryW)
	addGMFunction("+X",setFormationCategoryX)
	--[[
	for form, slots in pairs(fly_formation) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
	--]]
end
------------------------------------------
--	Order Ship > Formation > Shape > X  --
------------------------------------------
-- Button Text FD*	Related Function(s)
-- X			*	inline
-- X8			*	inline
-- XAC			*	inline
-- XAC8			*	inline
function setFormationCategoryX()
	clearGMFunctions()
	local form_list = {"X","X8","Xac","Xac8"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
------------------------------------------
--	Order Ship > Formation > Shape > W  --
------------------------------------------
-- Button Text FD*	Related Function(s)
-- W			*	inline
-- W6			*	inline
-- WAC			*	inline
-- WAC6			*	inline
function setFormationCategoryW()
	clearGMFunctions()
	local form_list = {"W","W6","Wac","Wac6"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
------------------------------------------
--	Order Ship > Formation > Shape > M  --
------------------------------------------
-- Button Text FD*	Related Function(s)
-- M			*	inline
-- M6			*	inline
-- MAC			*	inline
-- MAC6			*	inline
function setFormationCategoryM()
	clearGMFunctions()
	local form_list = {"M","M6","Mac","Mac6"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
---------------------------------------------
--	Order Ship > Formation > Shape > Line  --
---------------------------------------------
-- Button Text FD*	Related Function(s)
-- /			*	inline
-- /AC			*	inline
-- -			*	inline
-- -4			*	inline
-- \			*	inline
-- \AC			*	inline
-- |			*	inline
-- |4			*	inline
function setFormationCategoryLine()
	clearGMFunctions()
	local form_list = {"/","/ac","-","-4","\\","\\ac","|","|4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
------------------------------------------
--	Order Ship > Formation > Shape > A  --
------------------------------------------
-- Button Text FD*	Related Function(s)
-- A			*	inline
-- A4			*	inline
-- AAC			*	inline
-- AAC4			*	inline
function setFormationCategoryA()
	clearGMFunctions()
	local form_list = {"A","A4","Aac","Aac4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
------------------------------------------
--	Order Ship > Formation > Shape > V  --
------------------------------------------
-- Button Text FD*	Related Function(s)
-- V			*	inline
-- V4			*	inline
-- VAC			*	inline
-- VAC4			*	inline
function setFormationCategoryV()
	clearGMFunctions()
	local form_list = {"V","V4","Vac","Vac4"}
	for _, form in ipairs(form_list) do
		local button_label = form
		if form == formation_shape then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			formation_shape = form
			setFormation()
		end)
	end
end
function changeFormationShip()
	local object_list = getGMSelection()
	if #object_list == 1 then
		local temp_object = object_list[1]
		if isObjectType(temp_object,"CpuShip") then
			formation_ship = temp_object
		else
			addGMMessage("Select CPU ship. No action taken")
		end
	else
		addGMMessage("Select one CPU ship. No action taken")
	end
	setFormation()
end
function setFormationTarget()
	if gm_click_mode == "set formation target" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "set formation target"
		onGMClick(gmClickSetFormationTarget)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   set formation target\nGM click mode.",prev_mode))
		end
	end
	setFormation()
end
function gmClickSetFormationTarget(x,y)
	if formation_ship ~= nil and formation_ship:isValid() then
		local fs_x, fs_y = formation_ship:getPosition()
		formation_target_x = x
		formation_target_y = y
		formation_target_angle = angleFromVectorNorth(x,y,fs_x,fs_y)
		formation_ship:setHeading(formation_target_angle)
	else
		addGMMessage("The formation lead ship is not valid. No action taken. GM click mode reset.")
	end
	gm_click_mode = nil
	onGMClick(nil)
	setFormation()
end
---------------------------
--	Order Ship > Revert  --
---------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REVERT SHIP	F	initialGMFunctions
-- -ORDER SHIP				F	orderShip
-- LIST OF REVERTS			F	inline
-- +SELECT SHIP				F	inline
-- REVERT					F	inline
function revertShip()
	clearGMFunctions()
	addGMFunction("-Main from revert ship",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("List of Reverts",function()
		if enemy_reverts == nil then
			addGMMessage("No revert list")
		else
			if #enemy_reverts < 1 then
				addGMMessage("Empty revert list")
			else
				local msg = "The following ships have been convinced by a player Relay officer to do something other than their original orders:"
				msg = string.format("Next revert check in %.1f seconds. Revert interval: %i\n%s",revert_timer,revert_timer_interval,msg)
				for revert_index, ship in ipairs(enemy_reverts) do
					msg = string.format("%s\n    %s in %s (index %i)",msg,ship:getCallSign(),ship:getSectorName(),revert_index)
					if ship.original_order ~= nil then
						msg = string.format("%s original order:%s",msg,ship.original_order)
					end
					if ship.original_faction ~= nil then
						msg = string.format("%s original faction:%s",msg,ship.original_faction)
					end
					if ship.original_target ~= nil and ship.original_target:isValid() then
						msg = string.format("%s\n        original target:%s",msg,ship.original_target:getCallSign())
					end
					if ship.original_target_x ~= nil then
						msg = string.format("%s\n        original target coordinates:%.1f,%.1f",msg,ship.original_target_x,original_target_y)
					end
				end
				addGMMessage(msg)
			end
		end
		revertShip()
	end)
	local object_list = getGMSelection()
	if #object_list ~= 1 then
		addGMFunction("+Select Ship",revertShip)
	else
		if not isObjectType(object_list[1],"CpuShip") then
			addGMFunction("+Select Ship",revertShip)
		else
			addGMFunction(string.format("Revert %s",object_list[1]:getCallSign()),function()
				if object_list[1] ~= nil and object_list[1]:isValid() then
					local revert_ship = nil
					local revert_ship_index = nil
					for revert_index, ship in ipairs(enemy_reverts) do
						if ship == object_list[1] then
							revert_ship = ship
							revert_ship_index = revert_index
							break
						end
					end
					if revert_ship ~= nil then
						msg = string.format("Ship %s has been reverted (index %i)",revert_ship:getCallSign(),revert_ship_index)
						local oo = revert_ship.original_order
						local otx = revert_ship.original_target_x
						local oty = revert_ship.original_target_y
						local ot = revert_ship.original_target
						if oo ~= nil then
							if oo == "Attack" then
								if ot ~= nil and ot:isValid() then
									revert_ship:orderAttack(ot)
								else
									revert_ship:orderRoaming()
								end
							elseif oo == "Dock" then
								if ot ~= nil and ot:isValid() then
									revert_ship:orderDock(ot)
								else
									revert_ship:orderRoaming()
								end
							elseif oo == "Defend Target" then
								if ot ~= nil and ot:isValid() then
									revert_ship:orderDefendTarget(ot)
								else
									revert_ship:orderRoaming()
								end
							elseif oo == "Fly towards" then
								if otx ~= nil and oty ~= nil then
									revert_ship:orderFlyTowards(otx,oty)
								else
									revert_ship:orderRoaming()
								end
							elseif oo == "Defend Location" then
								if otx ~= nil and oty ~= nil then
									revert_ship:orderDefendLocation(otx,oty)
								else
									revert_ship:orderRoaming()
								end
							elseif oo == "Fly towards (ignore all)" then
								if otx ~= nil and oty ~= nil then
									revert_ship:orderFlyTowardsBlind(otx,oty)
								else
									revert_ship:orderRoaming()
								end
							else
								revert_ship:orderRoaming()
							end
						else
							revert_ship:orderRoaming()
						end
						--print("reverting ship:",enemy:getCallSign(),"original faction:",enemy.original_faction)
						if revert_ship.original_faction ~= nil then
							revert_ship:setFaction(revert_ship.original_faction)
						end
						if revert_ship.original_order ~= nil then
							msg = string.format("%s\nOriginal order:%s",msg,revert_ship.original_order)
						else
							msg = string.format("%s\nOriginal order: nil",msg)
						end
						if revert_ship.original_faction ~= nil then
							msg = string.format("%s\nOriginal faction:%s",msg,revert_ship.original_faction)
						else
							msg = string.format("%s\nOriginal faction: nil",msg)
						end
						if revert_ship.original_target ~= nil then
							if revert_ship.original_target:isValid() then
								msg = string.format("%s\nOriginal target:%s",msg,revert_ship.original_target:getCallSign())
							else
								msg = string.format("%s\nOriginal target: has become invalid")
							end
						else
							msg = string.format("%s\nOriginal target: nil",msg)
						end
						if revert_ship.original_target_x ~= nil then
							msg = string.format("%s\nOriginal target coordinates:%.1f,%.1f",msg,revert_ship.original_target_x,revert_ship.original_target_y)
						else
							msg = string.format("%s\nOriginal target coordinates: nil",msg)
						end
						addGMMessage(msg)
						revert_ship.original_order = nil
						revert_ship.original_target_x = nil
						revert_ship.original_target_y = nil
						revert_ship.original_target = nil
						revert_ship.original_faction = nil
						revert_ship.taunt_may_expire = false
						revert_ship.amenability_may_expire = false
						enemy_reverts[revert_ship_index] = enemy_reverts[#enemy_reverts]
						enemy_reverts[#enemy_reverts] = nil
					else
						addGMMessage("Selected ship not in revert list")
					end
				else
					addGMMessage("Selected ship is invalid")
				end
				revertShip()
			end)
		end
	end
end
----------------------------------
--	Order Ship > Attach/Detach  --
----------------------------------
-- Button Text		   FD*	Related Function(s)
function attachDetach()
	clearGMFunctions()
	addGMFunction("-Main from Attach/Detach",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("+Attach To Ship",attachAnythingToNPS)
	addGMFunction("+Detach",detachAnythingFromNPS)
end
-------------------------------------------
--	Order Ship > Attach/Detach > Detach  --
-------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM DETACH	F	initialGMFunctions
-- -ORDER SHIP			F	orderShip
-- +SELECT OBJECT		F	detachAnythingFromNPS
function detachAnythingFromNPS()
	clearGMFunctions()
	addGMFunction("-Main from detach",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("-Attach/Detach",attachDetach)
	local object_list = getGMSelection()
	if #object_list < 1 then
		addGMFunction("+Select object(s)",detachAnythingFromNPS)
		return
	end
	for _,current_selected_object in ipairs(object_list) do
		update_system:removeUpdateNamed(current_selected_object,"attached")
	end
end
-------------------------------------------
--	Order Ship > Attach/Detach > Attach  --
-------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM ATTACH	F	initialGMFunctions
-- -ORDER SHIP			F	orderShip
-- +SELECT OBJECT		F	attachAnythingToNPS
-- Three buttons for the nearest three CpuShips
function attachAnythingToNPS()
	clearGMFunctions()
	addGMFunction("-Main from attach",initialGMFunctions)
	addGMFunction("-Order Ship",orderShip)
	addGMFunction("-Attach/Detach",attachDetach)
	local object_list = getGMSelection()
	if #object_list < 1 then
		addGMFunction("+Select object(s)",attachAnythingToNPS)
		return
	end
	local current_selected_object = object_list[1]
	local pod_x, pod_y = current_selected_object:getPosition()
	local nearby_objects = getObjectsInRadius(pod_x, pod_y, 40000)
	cpu_ship_list = {}
	for i=1,#nearby_objects do
		local temp_object = nearby_objects[i]
		if isObjectType(temp_object,"CpuShip") and (not isInGMSelection(temp_object)) then
			if distance_diagnostic then
				print("distance_diagnostic 10 temp_object:",temp_object,"current_selected_object:",current_selected_object)
			end		
			local ship_distance = distance(temp_object,current_selected_object)
			table.insert(cpu_ship_list,{distance = ship_distance, ship = temp_object})
		end
	end
	if #cpu_ship_list > 0 then
		table.sort(cpu_ship_list,function(a,b)
			return a.distance < b.distance
		end)
		if #cpu_ship_list >= 1 then
			addGMFunction(string.format("Attach to %s",cpu_ship_list[1].ship:getCallSign()), function()
				for _,obj in ipairs(object_list) do -- we need to rename these
					local pod_x, pod_y = obj:getPosition()
					local attach_target_x, attach_target_y = cpu_ship_list[1].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(obj,cpu_ship_list[1].ship,relative_attach_x,relative_attach_y)
				end
			end)
		end
		if #cpu_ship_list >= 2 then
			addGMFunction(string.format("Attach to %s",cpu_ship_list[2].ship:getCallSign()), function()
				for _,obj in ipairs(object_list) do -- we need to rename these
					local pod_x, pod_y = obj:getPosition()
					local attach_target_x, attach_target_y = cpu_ship_list[2].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(obj,cpu_ship_list[2].ship,relative_attach_x,relative_attach_y)
				end
			end)
		end
		if #cpu_ship_list >= 3 then
			addGMFunction(string.format("Attach to %s",cpu_ship_list[3].ship:getCallSign()), function()
				for _,obj in ipairs(object_list) do -- we need to rename these
					local pod_x, pod_y = obj:getPosition()
					local attach_target_x, attach_target_y = cpu_ship_list[3].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(obj,cpu_ship_list[3].ship,relative_attach_x,relative_attach_y)
				end
			end)
		end
		if #cpu_ship_list >= 4 then
			addGMFunction(string.format("Attach to %s",cpu_ship_list[4].ship:getCallSign()), function()
				for _,obj in ipairs(object_list) do -- we need to rename these
					local pod_x, pod_y = obj:getPosition()
					local attach_target_x, attach_target_y = cpu_ship_list[4].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(obj,cpu_ship_list[4].ship,relative_attach_x,relative_attach_y)
				end
			end)
		end
		if #cpu_ship_list >= 5 then
			addGMFunction(string.format("Attach to %s",cpu_ship_list[5].ship:getCallSign()), function()
				for _,obj in ipairs(object_list) do -- we need to rename these
					local pod_x, pod_y = obj:getPosition()
					local attach_target_x, attach_target_y = cpu_ship_list[5].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(obj,cpu_ship_list[5].ship,relative_attach_x,relative_attach_y)
				end
			end)
		end
	else
		addGMMessage("No CPU Ships within 40 units of selected object")
		addGMFunction("+Select drop point",attachAnythingToNPS)
	end
end
--	*											   *  --
--	**											  **  --
--	************************************************  --
--	****				Artifacts				****  --
--	************************************************  --
--	**											  **  --
--	*											   *  --
-------------------------------
--	Artifacts > Drop Points  --
-------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM DROP PNT		F	initialGMFunctions
-- +ESCAPE POD				F	setEscapePod
-- +MARINE POINT			F	setMarinePoint
-- +ENGINEER POINT			F	setEngineerPoint
-- +MEDICAL TEAM POINT		F	setMedicPoint
-- +CUSTOM SUPPLY			F	setCustomSupply
-- +ATTACH TO NPS			F	attachArtifact
-- +DETACH					F	detachArtifact
-- ARTIFACT TO POD			F	artifactToPod
function dropPoint()
	clearGMFunctions()
	addGMFunction("-Main from Drop Pnt",initialGMFunctions)
	addGMFunction("+Escape Pod",setEscapePod)
	addGMFunction("+Marine Point",setMarinePoint)
	addGMFunction("+Engineer Point",setEngineerPoint)
	addGMFunction("+Medical Team Point",setMedicPoint)
	addGMFunction("+Custom Supply",setCustomSupply)
	addGMFunction("+Attach to NPS",attachArtifact)
	addGMFunction("+Detach",detachArtifact)
	addGMFunction("Artifact To Pod",artifactToPod)
end
-----------------------------
--	Artifacts > Scan Clue  --
-----------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM SCAN CLUE		F	initialGMFunctions
-- +UNSCANNED DESC			F	setUnscannedDescription
-- +SCANNED DESC			F	setScannedDescription
-- SHOW DESCRIPTIONS		F	inline
-- +SCAN COMPLEX: 1			D	setScanComplexity
-- +SCAN DEPTH: 1			D	setScanDepth
-- UNRETRIEVABLE			D	inline (toggles between retrievable and unretrievable)
-- EXPIRING					F	inline (toggles between expiring and non-expiring)
-- +AT CLICK				D	setScanClueLocation
-- PLACE SCAN CLUE			D	placeScanClue
function scanClue()
	clearGMFunctions()
	addGMFunction("-Main from Scan Clue",initialGMFunctions)
	addGMFunction("+Unscanned Desc",setUnscannedDescription)
	addGMFunction("+Scanned Desc",setScannedDescription)
	addGMFunction("Show Descriptions",function()
		local unscannedDescription = unscannedClues[unscannedClueKey]
		local scannedDescription = ""
		if scannedClues1[scannedClueKey1] ~= nil and scannedClues1[scannedClueKey1] ~= "None" then
			scannedDescription = scannedDescription .. scannedClues1[scannedClueKey1] .. " "
		end
		if scannedClues2[scannedClueKey2] ~= nil and scannedClues2[scannedClueKey2] ~= "None" then
			scannedDescription = scannedDescription .. scannedClues2[scannedClueKey2] .. " "
		end
		if scannedClues3[scannedClueKey3] ~= nil and scannedClues3[scannedClueKey3] ~= "None" then
			scannedDescription = scannedDescription .. scannedClues3[scannedClueKey3] .. " "
		end
		if scannedClues4[scannedClueKey4] ~= nil and scannedClues4[scannedClueKey4] ~= "None" then
			scannedDescription = scannedDescription .. scannedClues4[scannedClueKey4] .. " "
		end
		if scannedClues5[scannedClueKey5] ~= nil and scannedClues5[scannedClueKey5] ~= "None" then
			scannedDescription = scannedDescription .. scannedClues5[scannedClueKey5] .. " "
		end
		addGMMessage(string.format("Unscanned description:\n%s\nScanned Description:\n%s",unscannedDescription,scannedDescription))
	end)
	local GMSetScanComplexity = "+Scan Complex: " .. scanComplexity
	addGMFunction(GMSetScanComplexity,setScanComplexity)
	local GMSetScanDepth = "+Scan Depth: " .. scanDepth
	addGMFunction(GMSetScanDepth,setScanDepth)
	if scan_clue_retrievable then
		addGMFunction("Retrievable",function()
			scan_clue_retrievable = false
			scanClue()
		end)
	else
		addGMFunction("Unretrievable",function()
			scan_clue_retrievable = true
			scanClue()
		end)
	end
	if scan_clue_expire then
		addGMFunction("Expiring",function()
			scan_clue_expire = false
			scanClue()
		end)
	else
		addGMFunction("Non-Expiring",function()
			scan_clue_expire = true
			scanClue()
		end)
	end
	addGMFunction(string.format("+%s",scan_clue_location),setScanClueLocation)
	if gm_click_mode == "place scan clue" then
		addGMFunction(">Place Scan Clue<",placeScanClue)
	else
		addGMFunction("Place Scan Clue",placeScanClue)
	end
end
function placeScanClue()
	if drop_point_location == "At Click" then
		if gm_click_mode == "place scan clue" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "place scan clue"
			onGMClick(gmClickPlaceScanClue)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   place scan clue\nGM click mode.",prev_mode))
			end
		end
		scanClue()
	elseif drop_point_location == "Near To" then
		scanClueNearTo()
	end
end
function gmClickPlaceScanClue(x,y)
	scanClueCreation(x, y, 0, 0)
end
function updateEditObjectValid()
	if update_edit_object == nil or not update_edit_object:isValid() then
		addGMMessage("the object being edited has been destroyed")
		updateEditor()
		return false
	else
		return true
	end
end
function numericEditControl(params)
	-- we need to be able to call the function that we are defining within itself
	-- there probably is a tidy way to do this, but I don't know it
	-- thus we are going to create a table which we will look up itself within
	local ret = {}
	ret.fun = function()
		assert(type(params)=="table")
		assert(type(params.closers)=="function")
		assert(type(params.getter)=="function")
		assert(type(params.setter)=="function")
		assert(type(params.name)=="string")
		assert(type(params.fixedAdjAmount)=="number")
		params.closers()
		addGMFunction(string.format("%.2f - %.2f",params.getter(),params.fixedAdjAmount),
			function ()
				params.setter(params.getter()-params.fixedAdjAmount)
				ret["fun"]()
			end)
		addGMFunction(string.format("%s = %.2f",params.name,params.getter()),nil)
		addGMFunction(string.format("%.2f + %.2f",params.getter(),params.fixedAdjAmount),
			function ()
				params.setter(params.getter()+params.fixedAdjAmount)
				ret["fun"]()
			end)
	end
	return ret.fun
end
---------------------------------
--	Artifacts > Sensor Jammer  --
---------------------------------
-- Button Text		   DF*	Related Function(s)
-- -MAIN FRM SENSOR JAM	F	initialGMFunctions
-- -ARTIFACTS			F	fiddleWithArtifacts
-- PLACE SENSOR JAMMER	F	placeSensorJammer
function sensorJammer()
	clearGMFunctions()
	addGMFunction("-Main Frm Sensor Jam",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("+Range and Power",setSensorJammerPowerRange)
	addGMFunction(string.format("+Scan Complex: %i",sensor_jammer_scan_complexity),setSensorJammerScanComplexity)
	addGMFunction(string.format("+Scan Depth: %i",sensor_jammer_scan_depth),setSensorJammerScanDepth)
	local button_label = "Jam Power"
	if sensor_jammer_power_units then
		button_label = button_label .. " Units"
	else
		button_label = button_label .. " Percentage"
	end
	addGMFunction(button_label,function()
		if sensor_jammer_power_units then
			sensor_jammer_power_units = false
		else
			sensor_jammer_power_units = true
		end
		sensorJammer()
	end)
	if gm_click_mode == "sensor jammer" then
		addGMFunction(">Place Sensor Jammer<",placeSensorJammer)
	else
		addGMFunction("Place Sensor Jammer",placeSensorJammer)
	end
	if gm_click_mode == "sensor jammer origin" then
		addGMFunction(">Set Jammer Origin<",setSensorJammerOrigin)
	else
		button_label = "Launch Sensor Jammer"
		if gm_click_mode == "launch sensor jammer" then
			button_label = string.format(">%s<",button_label)
		end
		addGMFunction(button_label,launchSensorJammer)
	end
end
function setSensorJammerPowerRange()
	clearGMFunctions()
	addGMFunction("-Main Frm Pwr & Rng",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Sensor Jammer",sensorJammer)
	addGMFunction(string.format("%i Jam Range ^ -> %i",sensor_jammer_range/1000,(sensor_jammer_range + 1000)/1000),function()
		if sensor_jammer_range >= 100000 then
			addGMMessage("Maximum range of 100 units reached. No action taken")
		else
			sensor_jammer_range = sensor_jammer_range + 1000
		end
		setSensorJammerPowerRange()
	end)
	addGMFunction(string.format("%i Jam Range V -> %i",sensor_jammer_range/1000,(sensor_jammer_range - 1000)/1000),function()
		if sensor_jammer_range <= 1000 then
			addGMMessage("Minimum range of 1 unit reached. No action taken")
		else
			sensor_jammer_range = sensor_jammer_range - 1000
		end
		setSensorJammerPowerRange()
	end)
	addGMFunction(string.format("%i Jam Power ^ -> %i",sensor_jammer_impact/1000,(sensor_jammer_impact + 1000)/1000),function()
		if sensor_jammer_impact >= 100000 then
			if sensor_jammer_power_units then
				addGMMessage("Maximum power of 100 units reached. No action taken")
			else
				addGMMessage("Maximum power of 100 percent reached. No action taken")
			end
		else
			sensor_jammer_impact = sensor_jammer_impact + 1000
		end
		setSensorJammerPowerRange()
	end)
	addGMFunction(string.format("%i Jam Power V -> %i",sensor_jammer_impact/1000,(sensor_jammer_impact - 1000)/1000),function()
		if sensor_jammer_impact <= 1000 then
			if sensor_jammer_power_units then
				addGMMessage("Minimum power of 1 unit reached. No action taken")
			else
				addGMMessage("Minimum power of 1 percent reached. No action taken")
			end
		else
			sensor_jammer_impact = sensor_jammer_impact - 1000
		end
		setSensorJammerPowerRange()
	end)
end
function setSensorJammerScanComplexity()
	clearGMFunctions()
	addGMFunction("-Main Frm Complexity",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Sensor Jammer",sensorJammer)
	addGMFunction(string.format("%i Up to %i",sensor_jammer_scan_complexity,sensor_jammer_scan_complexity + 1),function()
		if sensor_jammer_scan_complexity >= 4 then
			addGMMessage("Maximum sensor jammer scan complexity reached: 4. No action taken")
		else
			sensor_jammer_scan_complexity = sensor_jammer_scan_complexity + 1
		end
		setSensorJammerScanComplexity()
	end)
	addGMFunction(string.format("%i Down to %i",sensor_jammer_scan_complexity,sensor_jammer_scan_complexity - 1),function()
		if sensor_jammer_scan_complexity <= 1 then
			addGMMessage("Minimum sensor jammer scan complexity reached: 1. No action taken")
		else
			sensor_jammer_scan_complexity = sensor_jammer_scan_complexity - 1
		end
		setSensorJammerScanComplexity()
	end)
end
function setSensorJammerScanDepth()
	clearGMFunctions()
	addGMFunction("-Main Frm Depth",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Sensor Jammer",sensorJammer)
	addGMFunction(string.format("%i Up to %i",sensor_jammer_scan_depth,sensor_jammer_scan_depth + 1),function()
		if sensor_jammer_scan_depth >= 4 then
			addGMMessage("Maximum sensor jammer scan depth reached: 4. No action taken")
		else
			sensor_jammer_scan_depth = sensor_jammer_scan_depth + 1
		end
		setSensorJammerScanDepth()
	end)
	addGMFunction(string.format("%i Down to %i",sensor_jammer_scan_depth,sensor_jammer_scan_depth - 1),function()
		if sensor_jammer_scan_depth <= 1 then
			addGMMessage("Minimum sensor jammer scan depth reached: 1. No action taken")
		else
			sensor_jammer_scan_depth = sensor_jammer_scan_depth - 1
		end
		setSensorJammerScanDepth()
	end)
end
function launchSensorJammer()
	if gm_click_mode == "launch sensor jammer" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "launch sensor jammer"
		onGMClick(gmClickLaunchSensorJammer)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   launch sensor jammer\nGM click mode.",prev_mode))
		end
	end
	sensorJammer()
end
function placeSensorJammer()
	if gm_click_mode == "sensor jammer" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "sensor jammer"
		onGMClick(gmClickSensorJammer)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   sensor jammer\nGM click mode.",prev_mode))
		end
	end
	sensorJammer()
end
function gmClickLaunchSensorJammer(x,y)
	--set fleet target
	launch_sensor_jammer_x = x
	launch_sensor_jammer_y = y
	gm_click_mode = "sensor jammer origin"
	onGMClick(gmClickSetSensorJammerOrigin)
	sensorJammer()
end
function setSensorJammerOrigin()
	if gm_click_mode == "sensor jammer origin" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "sensor jammer origin"
		onGMClick(gmClickSetSensorJammerOrigin)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   sensor jammer origin\nGM click mode.",prev_mode))
		end
	end
end
function gmClickSetSensorJammerOrigin(x,y)
	-- -main from probes
	local launched_probe = ScanProbe():setPosition(x,y):setFaction(fleetSpawnFaction):setTarget(launch_sensor_jammer_x,launch_sensor_jammer_y)
	launched_probe.sensor_jammer_scan_complexity = sensor_jammer_scan_complexity
	launched_probe.sensor_jammer_scan_depth = sensor_jammer_scan_depth
	artifactNumber = artifactNumber + math.random(1,4)
	local random_suffix = string.char(math.random(65,90))
	launched_probe.jammer_call_sign = string.format("SJ%i%s",artifactNumber,random_suffix)
	launched_probe.sensor_jammer_range = sensor_jammer_range
	launched_probe.sensor_jammer_impact = sensor_jammer_impact
	launched_probe.sensor_jammer_power_units = sensor_jammer_power_units
	launched_probe:onArrival(function(self,x,y)
		string.format("")
		artifactCounter = artifactCounter + 1
		local sensor_jammer = Artifact():setPosition(x,y):setScanningParameters(self.sensor_jammer_scan_complexity,self.sensor_jammer_scan_depth):setRadarSignatureInfo(.2,.4,.1):setModel("SensorBuoyMKIII"):setDescriptions("Source of unusual emanations","Source of emanations interfering with long range sensors"):setCallSign(self.jammer_call_sign)
		sensor_jammer:onPickUp(sensorJammerPickupProcess)
		sensor_jammer_list[self.jammer_call_sign] = sensor_jammer
		sensor_jammer.jam_range = self.sensor_jammer_range
		sensor_jammer.jam_impact = self.sensor_jammer_impact
		sensor_jammer.jam_impact_units = self.sensor_jammer_power_units
		self:destroy()
	end)
	gm_click_mode = nil
	onGMClick(nil)
	sensorJammer()
end
function gmClickSensorJammer(x,y)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,4)
	local random_suffix = string.char(math.random(65,90))
	local jammer_call_sign = string.format("SJ%i%s",artifactNumber,random_suffix)
	local sensor_jammer = Artifact():setPosition(x,y):setScanningParameters(sensor_jammer_scan_complexity,sensor_jammer_scan_depth):setRadarSignatureInfo(.2,.4,.1):setModel("SensorBuoyMKIII"):setDescriptions("Source of unusual emanations","Source of emanations interfering with long range sensors"):setCallSign(jammer_call_sign)
	sensor_jammer:onPickUp(sensorJammerPickupProcess)
	sensor_jammer_list[jammer_call_sign] = sensor_jammer
	sensor_jammer.jam_range = sensor_jammer_range
	sensor_jammer.jam_impact = sensor_jammer_impact
	sensor_jammer.jam_impact_units = sensor_jammer_power_units
end
function sensorJammerPickupProcess(self,retriever)
	local jammer_call_sign = self:getCallSign()
	sensor_jammer_list[jammer_call_sign] = nil
	if not self:isScannedBy(retriever) then
		retriever:setCanScan(false)
	end
end
-----------------------------
--	Artifacts > Set Model  --
-----------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM MODEL		F	initialGMFunctions
-- -ARTIFACTS			F	fiddleWithArtifacts
-- +NORMAL				F	normalArtifactModels
-- +UTILITY				F	utilityArtifactModels
-- +STATION				F	stationArtifactModels
-- +SHIP				F	shipArtifactModels
function setArtifactModel()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Model",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("+Normal",normalArtifactModels)
	addGMFunction("+Utility",utilityArtifactModels)
	addGMFunction("+Station",stationArtifactModels)
	addGMFunction("+Ship",shipArtifactModels)
end
----------------------------
--	Artifacts > Set Spin  --
----------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN FROM SPIN	F	initialGMFunctions
-- -ARTIFACTS		F	fiddleWithArtifacts
-- SPIN 0.5			F	inline
-- SPIN 1			F	inline
-- SPIN 1.5			F	inline
-- SPIN 2			F	inline
function setArtifactSpin()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Spin",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	for i=1,6 do
		addGMFunction(string.format("Spin %.1f",i/2),function()
			setGivenSpin(i/2)
		end)
	end
end
function setGivenSpin(spin)
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	object_list[1]:setSpin(spin)
	addGMMessage(string.format("Spin set to %.1f",spin))
end
function setArtifactSignature()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Signature",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction(string.format("+Biological %.2f",object_list[1]:getRadarSignatureBiological()),setArtifactBiologicalSignature)
	addGMFunction(string.format("+Electrical %.2f",object_list[1]:getRadarSignatureElectrical()),setArtifactElectricalSignature)
	addGMFunction(string.format("+Gravitational %.2f",object_list[1]:getRadarSignatureGravity()),setArtifactGravitationalSignature)
end
function setArtifactBiologicalSignature()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Biological",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Signature",setArtifactSignature)
	local bio = object_list[1]:getRadarSignatureBiological()
	local elec = object_list[1]:getRadarSignatureElectrical()
	local grav = object_list[1]:getRadarSignatureGravity()
	if bio <= .9 then
		addGMFunction(string.format("%.2f add .1 -> %.2f",bio,bio + .1),function()
			object_list[1]:setRadarSignatureInfo(grav,elec,bio + .1)
			setArtifactBiologicalSignature()
		end)
	end
	if bio <= .99 then
		addGMFunction(string.format("%.2f add .01 -> %.2f",bio,bio + .01),function()
			object_list[1]:setRadarSignatureInfo(grav,elec,bio + .01)
			setArtifactBiologicalSignature()
		end)
	end
	if bio >= .1 then
		addGMFunction(string.format("%.2f del .1 -> %.2f",bio,bio - .1),function()
			object_list[1]:setRadarSignatureInfo(grav,elec,bio - .1)
			setArtifactBiologicalSignature()
		end)
	end
	if bio >= .01 then
		addGMFunction(string.format("%.2f del .01 -> %.2f",bio,bio - .01),function()
			object_list[1]:setRadarSignatureInfo(grav,elec,bio - .01)
			setArtifactBiologicalSignature()
		end)
	end
end
function setArtifactElectricalSignature()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Electrical",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Signature",setArtifactSignature)
	local bio = object_list[1]:getRadarSignatureBiological()
	local elec = object_list[1]:getRadarSignatureElectrical()
	local grav = object_list[1]:getRadarSignatureGravity()
	if elec <= .9 then
		addGMFunction(string.format("%.2f add .1 -> %.2f",elec,elec + .1),function()
			object_list[1]:setRadarSignatureInfo(grav,elec + .1,bio)
			setArtifactElectricalSignature()
		end)
	end
	if elec <= .99 then
		addGMFunction(string.format("%.2f add .01 -> %.2f",elec,elec + .01),function()
			object_list[1]:setRadarSignatureInfo(grav,elec + .01,bio)
			setArtifactElectricalSignature()
		end)
	end
	if elec >= .1 then
		addGMFunction(string.format("%.2f del .1 -> %.2f",elec,elec - .1),function()
			object_list[1]:setRadarSignatureInfo(grav,elec - .1,bio)
			setArtifactElectricalSignature()
		end)
	end
	if elec >= .01 then
		addGMFunction(string.format("%.2f del .01 -> %.2f",elec,elec - .01),function()
			object_list[1]:setRadarSignatureInfo(grav,elec - .01,bio)
			setArtifactElectricalSignature()
		end)
	end
end
function setArtifactGravitationalSignature()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-Main from Gravitational",initialGMFunctions)
	addGMFunction("-Artifacts",fiddleWithArtifacts)
	addGMFunction("-Signature",setArtifactSignature)
	local bio = object_list[1]:getRadarSignatureBiological()
	local elec = object_list[1]:getRadarSignatureElectrical()
	local grav = object_list[1]:getRadarSignatureGravity()
	if grav <= .9 then
		addGMFunction(string.format("%.2f add .1 -> %.2f",grav,grav + .1),function()
			object_list[1]:setRadarSignatureInfo(grav + .1,elec,bio)
			setArtifactGravitationalSignature()
		end)
	end
	if grav <= .99 then
		addGMFunction(string.format("%.2f add .01 -> %.2f",grav,grav + .01),function()
			object_list[1]:setRadarSignatureInfo(grav + .01,elec,bio)
			setArtifactGravitationalSignature()
		end)
	end
	if grav >= .1 then
		addGMFunction(string.format("%.2f del .1 -> %.2f",grav,grav - .1),function()
			object_list[1]:setRadarSignatureInfo(grav - .1,elec,bio)
			setArtifactGravitationalSignature()
		end)
	end
	if grav >= .01 then
		addGMFunction(string.format("%.2f del .01 -> %.2f",grav,grav - .01),function()
			object_list[1]:setRadarSignatureInfo(grav - .01,elec,bio)
			setArtifactGravitationalSignature()
		end)
	end
end
--	************************************************************  --
--	****				Artifacts Drop Points				****  --
--	************************************************************  --
-------------------------------------------
--	Artifacts > Drop Point > Escape Pod  --
-------------------------------------------
-- Button Text		   DF*	Related Function(s)
-- -MAIN FROM ESC POD	F	initialGMFunctions
-- -FROM ESCAPE POD		F	dropPoint
-- +AT CLICK			D	setDropPointLocation
-- PLACE POD			D	placePod
function setEscapePod()
	clearGMFunctions()
	addGMFunction("-Main from Esc Pod",initialGMFunctions)
	addGMFunction("-From Escape Pod",dropPoint)
	addGMFunction(string.format("+%s",drop_point_location),function()
		set_drop_point_location_caller = setEscapePod
		setDropPointLocation()
	end)
	if gm_click_mode == "escape pod" then
		addGMFunction(">Place Pod<",placePod)
	else
		addGMFunction("Place Pod",placePod)
	end
end
function placePod()
	if drop_point_location == "At Click" then
		if gm_click_mode == "escape pod" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "escape pod"
			onGMClick(gmClickDropPoint)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   escape pod\nGM click mode.",prev_mode))
			end
		end
		setEscapePod()
	elseif drop_point_location == "Associated" then
		podAssociatedTo()
	elseif drop_point_location == "Near To" then
		podNearTo()
	end
end
function gmClickDropPoint(x,y)
	podCreation(x,y,0,0)
end

--------------------------------------------------------------------------------
--	Artifacts > Drop Point > Escape Pod > At Click (set drop point location)  --
--------------------------------------------------------------------------------
-- Button Text		   DF*	Related Function(s)
-- -MAIN FRM DROP LOC	F	initialGMFunctions
-- -TO DROP POINT		F	dropPoint
-- AT CLICK*			*	inline
-- ASSOCIATED			*	inline
-- NEAR TO				*	inline
function setDropPointLocation()
	clearGMFunctions()
	addGMFunction("-Main frm Drop Loc",initialGMFunctions)
	addGMFunction("-To Drop Point",dropPoint)
	local button_label = "At Click"
	if drop_point_location == "At Click" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		drop_point_location = "At Click"
		set_drop_point_location_caller()
	end)
	button_label = "Associated"
	if drop_point_location == "Associated" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		drop_point_location = "Associated"
		set_drop_point_location_caller()
	end)
	button_label = "Near To"
	if drop_point_location == "Near To" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		drop_point_location = "Near To"
		set_drop_point_location_caller()
	end)
end
--------------------------------------------------------
--	Artifacts > Drop Point > Escape Pod > Associated  --
--------------------------------------------------------
--Create escape pod associated to selected object
--If selected object is a black hole, add these two buttons
-- NEAR RADIUS BUT SAFE		F	nearButSafe
-- EDGE BUT IN DANGER		F	edgeButDanger
--If selected object is a wormhole, add these two buttons
-- NEAR RADIUS BUT OUTSIDE	F	nearButOutside
-- EDGE BUT INSIDE			F	edgeButInside
function podAssociatedTo()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("No action taken. Selct one object for association")
		return
	end
	local tempObject = objectList[1]
	local podDistance = 5500
	if not ECS then
		podDistance = associatedTypeDistance[tempObject.typeName]
	end
	if podDistance == nil then
		addGMMessage(tempType .. ": not type which can be associated")
		return
	end
	local aox, aoy = tempObject:getPosition()
	--size of player spaceships vary, so use the values set in setConstants to determine
	if tempType == "PlayerSpaceship" then
		local tempShipType = tempObject:getTypeName()
		--local psd = playerShipDistance[tempShipType]
		local psd = playerShipStats[tempShipType].distance
		if psd ~= nil then
			podDistance = psd
		end
	end
	--size of space stations vary so use the values set in setConstants to determine
	if tempType == "SpaceStation" then
		local tempStationType = tempObject:getTypeName()
		local sd = spaceStationDistance[tempStationType]
		if sd ~= nil then
			podDistance = sd
		end
	end
	if tempType == "BlackHole" then
		addGMFunction("Near radius but safe",nearButSafe)
		addGMFunction("Edge but in danger",edgeButDanger)
		--podDistance = 5000
	elseif tempType == "WormHole" then
		addGMFunction("Near radius but outside",nearButOutside)
		addGMFunction("Edge but inside",edgeButInside)
	elseif tempType == "Asteroid" then
	    local asteroid_size = tempObject:getSize()
	    if asteroid_size == nil then
	    	asteroid_size = podDistance
	    end
	    local sox, soy = vectorFromAngle(random(0,360),asteroid_size + random(40,80))
	    podCreation(aox, aoy, sox, soy)
	else
		local sox, soy = vectorFromAngle(random(0,360),podDistance)
		podCreation(aox, aoy, sox, soy)
	end
end
--Black hole special cases
function nearButSafe()
	local objectList = getGMSelection()
	local podDistance = associatedTypeDistance["BlackHole"]
	local sox, soy = vectorFromAngle(random(0,360),podDistance)
	local aox, aoy = objectList[1]:getPosition()
	podCreation(aox, aoy, sox, soy)
end
function edgeButDanger()
	local objectList = getGMSelection()
	local podDistance = 5100
	local sox, soy = vectorFromAngle(random(0,360),podDistance)
	local aox, aoy = objectList[1]:getPosition()
	podCreation(aox, aoy, sox, soy)
end
--Worm hole special cases
function nearButOutside()
	local objectList = getGMSelection()
	local podDistance = associatedTypeDistance["WormHole"]
	local sox, soy = vectorFromAngle(random(0,360),podDistance)
	local aox, aoy = objectList[1]:getPosition()
	podCreation(aox, aoy, sox, soy)
end
function edgeButInside()
	local objectList = getGMSelection()
	local podDistance = 2600
	local sox, soy = vectorFromAngle(random(0,360),podDistance)
	local aox, aoy = objectList[1]:getPosition()
	podCreation(aox, aoy, sox, soy)
end
--[[
function cleanUpPodPrepButtons()
	for epCallSign, ep in pairs(escapePodList) do
		if not ep:isValid() then
			for i,p in ipairs(getActivePlayerShips()) do
				p:removeCustom(epCallSign)
			end
			escapePodList[epCallSign] = nil
		end
	end
end
--]]
function podPickupProcess(self,retriever)
	local current_rotation = self:getRotation()
	local podCallSign = self:getCallSign()
	local podPrepped = false
	local pod_retrieved = false
	for epCallSign, ep in pairs(escapePodList) do
		if epCallSign == podCallSign then
			escapePodList[epCallSign] = nil
		end
	end
	for rpi, rp in pairs(rendezvousPoints) do
		if rp:getCallSign() == podCallSign then
			table.remove(rendezvousPoints,rpi)
		end
	end
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			local preparerIsRetriever = false
			if p.podButton ~= nil then
				for pb, pb_item in pairs(p.podButton) do
					if pb == podCallSign then
						if not pb_item.active then
							podPrepped = true
							if p == pb_item.preparer then
								preparerIsRetriever = true
							end
							break
						end
					end
				end
			end
			if podPrepped then
				p:removeCustom(podCallSign)
			end
			if p == retriever then
				if podPrepped then
					if preparerIsRetriever then
						if p.pods > 0 then
							p.pods = p.pods - 1
							retriever:addToShipLog(string.format("Escape pod %s retrieved. %s can carry %i more. Unload escape pods at any friendly station",podCallSign,retriever:getCallSign(),p.pods),"Green")
							if retriever:getEnergy() > 50 then
								retriever:setEnergy(retriever:getEnergy() - 50)
							else
								retriever:setEnergy(0)
							end
							pod_retrieved = true
						else
							if p.pod_retrieval_failure_not_enough_space_message == nil then
								p.pod_retrieval_failure_not_enough_space_message = {}
							end
							if p.pod_retrieval_failure_not_enough_space_message[podCallSign] == nil then
								retriever:addToShipLog(string.format("Not enough room on %s to retrieve %s. Unload escape pods at any friendly station",retriever:getCallSign(),podCallSign),"Green")
								p.pod_retrieval_failure_not_enough_space_message[podCallSign] = "sent"
							end
						end
					else
						if p.pod_retrieval_failure_wrong_preparer_message == nil then
							p.pod_retrieval_failure_wrong_preparer_message = {}
						end
						if p.pod_retrieval_failure_wrong_preparer_message[podCallSign] == nil then
							p:addToShipLog(string.format("Pod retrieval failed. Transporters on %s have not been prepared for %s",p:getCallSign(),podCallSign),"Green")
							p.pod_retrieval_failure_wrong_preparer_message[podCallSign] = "sent"
						end
					end
				else
					if p.pod_retrieval_failure_unprepared_message == nil then
						p.pod_retrieval_failure_unprepared_message = {}
					end
					if p.pod_retrieval_failure_unprepared_message[podCallSign] == nil then
						retriever:addToShipLog(string.format("Not prepared to pick up %s",podCallSign),"Green")
						p.pod_retrieval_failure_unprepared_message[podCallSign] = "sent"
					end
				end
			end
		end
	end
	if not pod_retrieved then
		local rpx, rpy = self:getPosition()
		if escapePodList[podCallSign] == nil then
			local redoPod = Artifact():setPosition(rpx,rpy):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("ammo_box"):setDescriptions("Escape Pod",string.format("Escape Pod %s, life forms detected",podCallSign)):setCallSign(podCallSign)
			redoPod:setRotation(current_rotation)
			redoPod:onPickUp(podPickupProcess)
			escapePodList[podCallSign] = redoPod
			table.insert(rendezvousPoints,redoPod)
		end
	end
end
-----------------------------------------------------
--	Artifacts > Drop Point > Escape Pod > Near To  --
-----------------------------------------------------
--Create escape pod near to selected object(s)
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM NEAR TO		F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- -SET ESCAPE POD			F	setEscapePod
-- Up to 3 buttons of nearby CpuShips for association
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createPodAway
function podNearTo()
	clearGMFunctions()
	addGMFunction("-Main from Near To",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Set Escape Pod",setEscapePod)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("Select an object. No action taken")
		return
	end
	--print("got something in selection list")
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	--print(string.format("nearx: %.1f, neary: %.1f",nearx,neary))
	local nearbyObjects = getObjectsInRadius(nearx, neary, 20000)
	cpuShipList = {}
	for i=1,#nearbyObjects do
		local tempObject = nearbyObjects[i]
		if isObjectType(tempObject,"CpuShip") then
			table.insert(cpuShipList,tempObject)
		end
		if #cpuShipList >= 3 then
			break
		end
	end
	if #cpuShipList > 0 then
		if #cpuShipList >= 1 then
			local GMPodAssociatedToCpuShip1 = string.format("Associate to %s",cpuShipList[1]:getCallSign())
			addGMFunction(GMPodAssociatedToCpuShip1,function () podAssociatedToGivenCpuShip(cpuShipList[1]) end)
		end
		if #cpuShipList >= 2 then
			local GMPodAssociatedToCpuShip2 = string.format("Associate to %s",cpuShipList[2]:getCallSign())
			addGMFunction(GMPodAssociatedToCpuShip2,function () podAssociatedToGivenCpuShip(cpuShipList[2]) end)
		end
		if #cpuShipList >= 3 then
			local GMPodAssociatedToCpuShip3 = string.format("Associate to %s",cpuShipList[3]:getCallSign())
			addGMFunction(GMPodAssociatedToCpuShip3,function () podAssociatedToGivenCpuShip(cpuShipList[3]) end)
		end
	end
	callingNearTo = podNearTo
	local GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetCreateDirection),setCreateDirection)
	local GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(string.format("+%s",GMSetCreateDistance),setCreateDistance)
	local GMCreatePodAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreatePodAway,createPodAway)
end
function podAssociatedToGivenCpuShip(tempObject)
	local podDistance = associatedTypeDistance["CpuShip"]
	local aox, aoy = tempObject:getPosition()
	local tempShipType = tempObject:getTypeName()
	local csd = shipTemplateDistance[tempShipType]
	if csd ~= nil then
		podDistance = csd
	end
	local sox, soy = vectorFromAngle(random(0,360),podDistance)
	podCreation(aox, aoy, sox, soy)
end
----------------------------------------------------------------------------------------------------------------------
--	Artifacts > Drop Point > Escape Pod (or other drop point type) > Near To > +30 Units (Set Pod Create Distance)  --
----------------------------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM CREATE DIST	F	callingNearTo (set prior to invocation)
-- .5U					*	inline
-- 1U					*	inline
-- 2U					*	inline
-- 3U					*	inline
-- 5U					*	inline
-- 10U					*	inline
-- 20U					*	inline
-- 30U*					*	inline	asterisk = current selection		
function setCreateDistance()
	clearGMFunctions()
	addGMFunction("-From Create Dist",callingNearTo)
	local button_label = ".5U"
	if createDistance == .5 then
		button_label = ".5U*"
	end
	addGMFunction(button_label,function()
		createDistance = .5
		setCreateDistance()
	end)
	button_label = "1U"
	if createDistance == 1 then
		button_label = "1U*"
	end
	addGMFunction(button_label,function()
		createDistance = 1
		setCreateDistance()
	end)
	button_label = "2U"
	if createDistance == 2 then
		button_label = "2U*"
	end
	addGMFunction(button_label,function()
		createDistance = 2
		setCreateDistance()
	end)
	button_label = "3U"
	if createDistance == 3 then
		button_label = "3U*"
	end
	addGMFunction(button_label,function()
		createDistance = 3
		setCreateDistance()
	end)
	button_label = "5U"
	if createDistance == 5 then
		button_label = "5U*"
	end
	addGMFunction(button_label,function()
		createDistance = 5
		setCreateDistance()
	end)
	button_label = "10U"
	if createDistance == 10 then
		button_label = "10U*"
	end
	addGMFunction(button_label,function()
		createDistance = 10
		setCreateDistance()
	end)
	button_label = "20U"
	if createDistance == 20 then
		button_label = "20U*"
	end
	addGMFunction(button_label,function()
		createDistance = 20
		setCreateDistance()
	end)
	button_label = "30U"
	if createDistance == 30 then
		button_label = "30U*"
	end
	addGMFunction(button_label,function()
		createDistance = 30
		setCreateDistance()
	end)
end
-------------------------------------------------------------------------------------------------------------------------
--	Artifacts > Drop Point > Escape Pod (or other drop point type) > Near To > +90 Degrees (Set Pod Create Direction)  --
-------------------------------------------------------------------------------------------------------------------------
-- Button Text		   DF*	Related Function(s)
-- -FROM CREATE DIR		F	callingNearTo (set prior to invocation)
-- 0					*	inline, setCreateDirection0
-- 45					*	inline, setCreateDirection45
-- 90*					*	inline, setCreateDirection90		asterisk = current selection
-- 135					*	inline, setCreateDirection135
-- 180					*	inline, setCreateDirection180
-- 225					*	inline, setCreateDirection225
-- 270					*	inline, setCreateDirection270
-- 315					*	inline, setCreateDirection315
function setCreateDirection()
	clearGMFunctions()
	addGMFunction("-From Create Dir",callingNearTo)
	local GMSetCreateDirection0 = "0"
	if createDirection == 0 then
		GMSetCreateDirection0 = "0*"
	end
	addGMFunction(GMSetCreateDirection0,setCreateDirection0)
	local GMSetCreateDirection45 = "45"
	if createDirection == 45 then
		GMSetCreateDirection45 = "45*"
	end
	addGMFunction(GMSetCreateDirection45,setCreateDirection45)
	local GMSetCreateDirection90 = "90"
	if createDirection == 90 then
		GMSetCreateDirection90 = "90*"
	end
	addGMFunction(GMSetCreateDirection90,setCreateDirection90)
	local GMSetCreateDirection135 = "135"
	if createDirection == 135 then
		GMSetCreateDirection135 = "135*"
	end
	addGMFunction(GMSetCreateDirection135,setCreateDirection135)
	local GMSetCreateDirection180 = "180"
	if createDirection == 180 then
		GMSetCreateDirection180 = "180*"
	end
	addGMFunction(GMSetCreateDirection180,setCreateDirection180)
	local GMSetCreateDirection225 = "225"
	if createDirection == 225 then
		GMSetCreateDirection225 = "225*"
	end
	addGMFunction(GMSetCreateDirection225,setCreateDirection225)
	local GMSetCreateDirection270 = "270"
	if createDirection == 270 then
		GMSetCreateDirection270 = "270*"
	end
	addGMFunction(GMSetCreateDirection270,setCreateDirection270)
	local GMSetCreateDirection315 = "315"
	if createDirection == 315 then
		GMSetCreateDirection315 = "315*"
	end
	addGMFunction(GMSetCreateDirection315,setCreateDirection315)
end
function setCreateDirection0()
	createDirection = 0
	setCreateDirection()
end
function setCreateDirection45()
	createDirection = 45
	setCreateDirection()
end
function setCreateDirection90()
	createDirection = 90
	setCreateDirection()
end
function setCreateDirection135()
	createDirection = 135
	setCreateDirection()
end
function setCreateDirection180()
	createDirection = 180
	setCreateDirection()
end
function setCreateDirection225()
	createDirection = 225
	setCreateDirection()
end
function setCreateDirection270()
	createDirection = 270
	setCreateDirection()
end
function setCreateDirection315()
	createDirection = 315
	setCreateDirection()
end
--Pod creation after distance and direction parameters set
function createPodAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	podCreation(nearx, neary, sox, soy)
end
function artifactToPod()
-- ideally this would convert to any type of pickup
-- however I do not currently have the time to ensure it works for any
-- I think there are slight tweaks needed for each
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("Select one object. No action taken")
		return
	end
	local pod=objectList[1]
	if not isObjectType(pod,"Artifact") then
		addGMMessage("must select an artifact to convert. No action taken")
		return
	end
	local podCallSign = pod:getCallSign()
	pod:onPickUp(podPickupProcess)
	escapePodList[podCallSign] = pod
	table.insert(rendezvousPoints,pod)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if p.podButton == nil then
				p.podButton = {}
			end
			p.podButton[podCallSign] = {active = true, sequence = rv_sequence}
			rv_sequence = rv_sequence + 1
			if rv_sequence >= 200 then
				rv_sequence = 100
			end
			podPrepButton(p,"Engineering",podCallSign,string.format("Prepare to get %s",podCallSign),"Transporters on %s ready for pickup of %s")
			podPrepButton(p,"Engineering+",podCallSign,string.format("Prepare to get %s",podCallSign),"Transporters on %s ready for pickup of %s")
		end
	end
end
function podPrepButton(p,console,podCallSign,label,msg)
	p:addCustomButton(console,string.format("%s%s",podCallSign,console),label,function()
		local other_players = getActivePlayerShips()
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				for pod_name, pb_item in pairs(other_p.podButton) do
					if pb_item.active and pod_name == podCallSign then
						other_p:removeCustom(string.format("%s%s",pod_name,"Engineering"))
						other_p:removeCustom(string.format("%s%s",pod_name,"Engineering+"))
						other_p:addCustomMessage(console,"pb_gone",string.format(msg,p:getCallSign(),pod_name))
						other_p.podButton[pod_name].active = false
						other_p.podButton[pod_name].preparer = p
					end
				end
			end
		end
	end,p.podButton[podCallSign].sequence)
end
function showPodTelemetry(p)
	local pod_count = 0
	for pod_name, pod in pairs(escapePodList) do
		if pod ~= nil and pod:isValid() then
			pod_count = pod_count + 1
		end
	end
	if pod_count > 0 then
		local pod_msg = "Pod telemetry:"
		for pod_name, pod in pairs(escapePodList) do
			if pod ~= nil and pod:isValid() then
				pod_msg = string.format("%s\n%s can be found in sector %s",pod_msg,pod:getCallSign(),pod:getSectorName())
			end
		end
		p:wrappedAddCustomMessage("Relay","pod_telemetry_msg",pod_msg)
	else
		p:wrappedAddCustomMessage("Relay","no_more_pods_msg","No pod telemetry located")
	end
end
function podFloat()
	for index, flotsam in ipairs(escape_pod_floaters) do
		if flotsam ~= nil and flotsam:isValid() then
			local cur_x, cur_y = flotsam:getPosition()
			if distance(cur_x, cur_y, flotsam.debris_end_x, flotsam.debris_end_y) < 10 then
				table.remove(escape_pod_floaters,index)
				break
			else
				local mid_x = (cur_x + flotsam.debris_end_x)/2
				local mid_y = (cur_y + flotsam.debris_end_y)/2
				local quarter_x = (cur_x + mid_x)/2
				local quarter_y = (cur_y + mid_y)/2
				flotsam:setPosition((cur_x + quarter_x)/2,(cur_y + quarter_y)/2)
			end
		else
			table.remove(escape_pod_floaters,index)
			break
		end
	end
	if #escape_pod_floaters == 0 then
		escape_pod_floaters = nil
	end
end
function escapePodWhenDestroyed(self,instigator)
	local self_x,self_y = self:getPosition()
	local escape_pod = podCreation(self_x,self_y,0,0)
	local angle = random(0,360)
	if instigator ~= nil then
		local ix, iy = instigator:getPosition()
		angle = (angleFromVectorNorth(self_x,self_y,ix,iy) + random(-20,20) + 360) % 360
	end
	escape_pod.debris_end_x, escape_pod.debris_end_y = vectorFromAngleNorth(angle,random(500,2000))
	escape_pod.debris_end_x = escape_pod.debris_end_x + self_x
	escape_pod.debris_end_y = escape_pod.debris_end_y + self_y
	if escape_pod_floaters == nil then
		escape_pod_floaters = {}
	end
	table.insert(escape_pod_floaters,escape_pod)
end
function podCreation(originx, originy, vectorx, vectory)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,4)
	local randomSuffix = string.char(math.random(65,90))
	local podCallSign = string.format("Pod%i%s",artifactNumber,randomSuffix)
	local pod = Artifact():setPosition(originx+vectorx,originy+vectory):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("ammo_box"):setDescriptions("Escape Pod",string.format("Escape Pod %s, life forms detected",podCallSign)):setCallSign(podCallSign)
	pod:onPickUp(podPickupProcess)
	escapePodList[podCallSign] = pod
	table.insert(rendezvousPoints,pod)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if p.podButton == nil then
				p.podButton = {}
			end
			p.podButton[podCallSign] = {active = true, sequence = rv_sequence}
			rv_sequence = rv_sequence + 1
			if rv_sequence >= 200 then
				rv_sequence = 100
			end
			podPrepButton(p,"Engineering",podCallSign,string.format("Prepare to get %s",podCallSign),"Transporters on %s ready for pickup of %s")
			podPrepButton(p,"Engineering+",podCallSign,string.format("Prepare to get %s",podCallSign),"Transporters on %s ready for pickup of %s")
		end
	end
	return pod
end
---------------------------------------------
--	Artifacts > Drop Point > Marine Point  --
---------------------------------------------
-- Button Text		   DF*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -FROM MARINE POINT	F	dropPoint
-- DROP MARINES*		*	setDropAction		asterisk = current selection
-- EXTRACT MARINES		*	setExtractAction
-- +AT CLICK			F	setDropPointLocation
-- SET MARINE POINT		F	placeMarinePoint
function setMarinePoint()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Marine Point",dropPoint)
	dropExtractActionReturn = setMarinePoint	--tell callback function to return to this function
	local button_label = "Drop marines"
	if dropOrExtractAction == "Drop" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,setDropAction)
	button_label = "Extract marines"
	if dropOrExtractAction == "Extract" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,setExtractAction)
	addGMFunction(string.format("+%s",drop_point_location),function()
		set_drop_point_location_caller = setMarinePoint
		setDropPointLocation()
	end)
	if gm_click_mode == "marine point" then
		addGMFunction(">Set Marine Point<",placeMarinePoint)
	else
		addGMFunction("Set Marine Point",placeMarinePoint)
	end	
end
function placeMarinePoint()
	if drop_point_location == "At Click" then
		if gm_click_mode == "marine point" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "marine point"
			onGMClick(gmClickMarinePoint)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   marine point\nGM click mode.",prev_mode))
			end
		end
		setMarinePoint()
	elseif drop_point_location == "Associated" then
		marineAssociatedTo()
	elseif drop_point_location == "Near To" then
		marineNearTo()
	end
end
function gmClickMarinePoint(x,y)
	marineCreation(x,y,0,0)
end
function setDropAction()
	dropOrExtractAction = "Drop"
	dropExtractActionReturn()
end
function setExtractAction()
	dropOrExtractAction = "Extract"
	dropExtractActionReturn()
end
--Create marine point associated to selected object
function marineAssociatedTo()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("Select one object. No action taken")
		return
	end
	local tempObject = objectList[1]
	local marineDistance = 5500
	if not ECS then
		marineDistance = associatedTypeDistance[tempObject.typeName]
	end
	if marineDistance == nil then
		addGMMessage(tempType .. ": not type which can be associated. No action taken.")
		--print(tempType .. ": not type which can be associated")
		return
	end
	local aox, aoy = tempObject:getPosition()
	--size of player spaceships vary, so use the values set in setConstants to determine
	if tempType == "PlayerSpaceship" then
		local tempShipType = tempObject:getTypeName()
		--local psd = playerShipDistance[tempShipType]
		local psd = playerShipStats[tempShipType].distance
		if psd ~= nil then
			marineDistance = psd
		end
	end
	--size of space stations vary so use the values set in setConstants to determine
	if tempType == "SpaceStation" then
		local tempStationType = tempObject:getTypeName()
		local sd = spaceStationDistance[tempStationType]
		if sd ~= nil then
			marineDistance = sd
		end
	end
	local sox, soy = vectorFromAngle(random(0,360),marineDistance)
	local associatedObjectName = tempObject:getCallSign()
	marineCreation(aox, aoy, sox, soy, associatedObjectName)
end
function marineCreation(originx, originy, vectorx, vectory, associatedObjectName)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,5)
	local randomSuffix = string.char(math.random(65,90))
	local marineCallSign = string.format("Mrn%i%s",artifactNumber,randomSuffix)
	local unscannedDescription = string.format("Marine %s Point",dropOrExtractAction)
	local scannedDescription = string.format("Marine %s Point %s, standing by for marine transport",dropOrExtractAction,marineCallSign)
	if associatedObjectName ~= nil then
		scannedDescription = scannedDescription .. ": " .. associatedObjectName
	end
	local marinePoint = Artifact():setPosition(originx+vectorx,originy+vectory):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("SensorBuoyMKI"):setDescriptions(unscannedDescription,scannedDescription):setCallSign(marineCallSign)
	marinePoint:onPickUp(marinePointPickupProcess)
	marinePoint.action = dropOrExtractAction
	marinePoint.associatedObjectName = associatedObjectName
	marinePointList[marineCallSign] = marinePoint
	--table.insert(marinePointList,marinePoint)
	table.insert(rendezvousPoints,marinePoint)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if p.marinePointButton == nil then
				p.marinePointButton = {}
			end
			p.marinePointButton[marineCallSign] = {active = true, sequence = rv_sequence}
			rv_sequence = rv_sequence + 1
			if rv_sequence >= 200 then
				rv_sequence = 100
			end
			marinePointPrepButton(p,"Engineering",marineCallSign,string.format("Prep to %s via %s",dropOrExtractAction,marineCallSign),"Transporters on %s ready for marines via %s")
			marinePointPrepButton(p,"Engineering+",marineCallSign,string.format("Prep to %s via %s",dropOrExtractAction,marineCallSign),"Transporters on %s ready for marines via %s")
		end
	end
end
function marinePointPrepButton(p,console,marineCallSign,label,msg)
	p:addCustomButton(console,string.format("%s%s",marineCallSign,console),label,function()
		local other_players = getActivePlayerShips()
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				for mpb, mpb_item in pairs(other_p.marinePointButton) do
					if mpb_item.active and mpb == marineCallSign then
						other_p:removeCustom(string.format("%s%s",mpb,"Engineering"))
						other_p:removeCustom(string.format("%s%s",mpb,"Engineering+"))
						other_p:addCustomMessage(console,"mpbgone",string.format(msg,p:getCallSign(),mpb))
						other_p.marinePointButton[mpb].active = false
						other_p.marinePointButton[mpb].preparer = p
					end
				end
			end
		end
	end,p.marinePointButton[marineCallSign].sequence)
end
function cleanUpMarinePoints()
	for name,mp in pairs(marinePointList) do
		if not mp:isValid() then
			for i,p in ipairs(getActivePlayerShips()) do
				for mpb, mpb_item in pairs(p.marinePointButton) do
					if mpb == name then
						p:removeCustom(string.format("%s%s",mpb,"Engineering"))
						p:removeCustom(string.format("%s%s",mpb,"Engineering+"))
						p.marinePointButton[mpb] = nil
					end
				end
			end
			marinePointList[name] = nil
		end
	end
	cleanUpDropPoints = cleanUpEngineeringPoints
end
function marinePointPickupProcess(self,retriever)
	local current_rotation = self:getRotation()
	local marineCallSign = self:getCallSign()
	local marinePointPrepped = false
	local successful_action = false
	for mpCallSign, mp in pairs(marinePointList) do
		if mpCallSign == marineCallSign then
			marinePointList[mpCallSign] = nil
		end
	end
	for rpi, rp in pairs(rendezvousPoints) do
		if rp:getCallSign() == marineCallSign then
			table.remove(rendezvousPoints,rpi)
		end
	end
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			local preparerIsRetriever = false
			for mpb, mpb_item in pairs(p.marinePointButton) do
				if mpb == marineCallSign then
					if not mpb_item.active then
						marinePointPrepped = true
						if p == mpb_item.preparer then
							preparerIsRetriever = true
						end
						break
					end
				end
			end
			if marinePointPrepped then
				p:removeCustom(marineCallSign)
			end
			if p == retriever then
				if marinePointPrepped then
					if preparerIsRetriever then
						if self.action == "Drop" then
							if p:getRepairCrewCount() > 0 then
								successful_action = true
								p:setRepairCrewCount(p:getRepairCrewCount() - 1)
								if self.associatedObjectName ~= nil then
									p:addToShipLog(string.format("Marine drop action on %s successful via %s",self.associatedObjectName,marineCallSign),"Green")
								else
									p:addToShipLog(string.format("Marine drop action successful via %s",marineCallSign),"Green")
								end
							else
								if p.marine_drop_failure_not_enough_crew_message == nil then
									p.marine_drop_failure_not_enough_crew_message = {}
								end
								if p.marine_drop_failure_not_enough_crew_message[marineCallSign] == nil then
									p:addToShipLog(string.format("Not enough marines to drop team at %s. Critical team member could not be obtained from %s repair crew personnel",marineCallSign,p:getCallSign()),"Green")
									p.marine_drop_failure_not_enough_crew_message[marineCallSign] = "sent"
								end
							end
						else
							successful_action = true
							p:setRepairCrewCount(p:getRepairCrewCount() + 1)
							if self.associatedObjectName ~= nil then
								p:addToShipLog(string.format("Marine extract action from %s successful via %s",self.associatedObjectName,marineCallSign),"Green")
							else
								p:addToShipLog(string.format("Marine extract action successful via %s",marineCallSign),"Green")
							end
						end
					else
						if p.marine_drop_failure_wrong_preparer_message == nil then
							p.marine_drop_failure_wrong_preparer_message = {}
						end
						if p.marine_drop_failure_wrong_preparer_message[marineCallSign] == nil then
							p:addToShipLog(string.format("Marine %s action failed. Transporters on %s have not been prepared for %s",self.action,p:getCallSign(),marineCallSign),"Green")
							p.marine_drop_failure_wrong_preparer_message[marineCallSign] = "sent"
						end
					end
				else
					if self.action == "Drop" then
						if p.marine_drop_failure_unprepared_message == nil then
							p.marine_drop_failure_unprepared_message = {}
						end
						if p.marine_drop_failure_unprepared_message[marineCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to drop marines at %s",marineCallSign),"Green")
							p.marine_drop_failure_unprepared_message[marineCallSign] = "sent"
						end
					else
						if p.marine_extract_failure_unprepared_message == nil then
							p.marine_extract_failure_unprepared_message = {}
						end
						if p.marine_extract_failure_unprepared_message[marineCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to extract marines at %s",marineCallSign),"Green")
							p.marine_extract_failure_unprepared_message[marineCallSign] = "sent"
						end
					end
				end
				if successful_action then
					if self.action == "Drop" then
						retriever:wrappedAddCustomMessage("Engineering","mprcd","One of your repair crew deployed with the marine team. They will return when the marines are picked up")
					end
					if retriever:getEnergy() > 50 then
						retriever:setEnergy(retriever:getEnergy() - 50)
					else
						retriever:setEnergy(0)
					end
				end	--successful action branch
			end	--retriever matches player branch
		end	--player is valid branch
	end	--end of player loop
	if not successful_action then
		local rpx, rpy = self:getPosition()
		local unscannedDescription = string.format("Marine %s Point",self.action)
		local scannedDescription = string.format("Marine %s Point %s, standing by for marine transport",self.action,marineCallSign)
		if self.associatedObjectName ~= nil then
			scannedDescription = scannedDescription .. ": " .. self.associatedObjectName
		end
		if marinePointList[marineCallSign] == nil then
			local redoMarinePoint = Artifact():setPosition(rpx,rpy):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("SensorBuoyMKI"):setDescriptions(unscannedDescription,scannedDescription):setCallSign(marineCallSign)
			redoMarinePoint:setRotation(current_rotation)
			redoMarinePoint:onPickUp(marinePointPickupProcess)
			redoMarinePoint.action = self.action
			redoMarinePoint.associatedObjectName = self.associatedObjectName
			marinePointList[marineCallSign] = redoMarinePoint
			table.insert(rendezvousPoints,redoMarinePoint)
		end
	end
end
-------------------------------------------------------
--	Artifacts > Drop Point > Marine Point > Near To  --
-------------------------------------------------------
--Create marine point near to selected object(s)
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- -FROM NEAR TO			F	setMarinePoint
-- Up to 3 buttons of nearby CpuShips for association
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createMarineAway
function marineNearTo()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Near To",setMarinePoint)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("Select object. No action taken")
		return
	end
	--print("got something in selection list")
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	print(string.format("nearx: %.1f, neary: %.1f",nearx,neary))
	local nearbyObjects = getObjectsInRadius(nearx, neary, 20000)
	cpuShipList = {}
	for i=1,#nearbyObjects do
		local tempObject = nearbyObjects[i]
		if isObjectType(tempObject,"CpuShip") then
			table.insert(cpuShipList,tempObject)
		end
		if #cpuShipList >= 3 then
			break
		end
	end
	if #cpuShipList > 0 then
		if #cpuShipList >= 1 then
			GMMarineAssociatedToCpuShip1 = string.format("Associate to %s",cpuShipList[1]:getCallSign())
			addGMFunction(GMMarineAssociatedToCpuShip1,function () marineAssociatedToGivenCpuShip(cpuShipList[1]) end)
		end
		if #cpuShipList >= 2 then
			GMMarineAssociatedToCpuShip2 = string.format("Associate to %s",cpuShipList[2]:getCallSign())
			addGMFunction(GMMarineAssociatedToCpuShip2,function () marineAssociatedToGivenCpuShip(cpuShipList[2]) end)
		end
		if #cpuShipList >= 3 then
			GMMarineAssociatedToCpuShip3 = string.format("Associate to %s",cpuShipList[3]:getCallSign())
			addGMFunction(GMMarineAssociatedToCpuShip3,function () marineAssociatedToGivenCpuShip(cpuShipList[3]) end)
		end
	end
	callingNearTo = marineNearTo
	GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(GMSetCreateDirection,setCreateDirection)
	GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(GMSetCreateDistance,setCreateDistance)
	GMCreateMarineAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreateMarineAway,createMarineAway)
end
function marineAssociatedToGivenCpuShip(tempObject)
	local marineDistance = associatedTypeDistance["CpuShip"]
	local aox, aoy = tempObject:getPosition()
	local tempShipType = tempObject:getTypeName()
	local csd = shipTemplateDistance[tempShipType]
	if csd ~= nil then
		marineDistance = csd
	end
	local sox, soy = vectorFromAngle(random(0,360),marineDistance)
	marineCreation(aox, aoy, sox, soy)
end
--Marine point creation after distance and direction parameters set
function createMarineAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	marineCreation(nearx, neary, sox, soy)
end
-----------------------------------------------
--	Artifacts > Drop Point > Engineer Point  --
-----------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -FROM ENGINEER POINT		F	dropPoint
-- DROP ENGINEERS*			*	setDropAction		asterisk = current selection
-- EXTRACT ENGINEERS		*	setExtractAction
-- +AT CLICK				D	setDropPointLocation
-- SET ENGINEER POINT		D	placeEngineerPoint
function setEngineerPoint()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Engineer Point",dropPoint)
	dropExtractActionReturn = setEngineerPoint
	local GMEngineerDrop = "Drop engineers"
	if dropOrExtractAction == "Drop" then
		GMEngineerDrop = "Drop engineers*"
	end
	addGMFunction(GMEngineerDrop,setDropAction)
	local GMEngineerExtract = "Extract engineers"
	if dropOrExtractAction == "Extract" then
		GMEngineerExtract = "Extract engineers*"
	end
	addGMFunction(GMEngineerExtract,setExtractAction)
	addGMFunction(string.format("+%s",drop_point_location),function()
		set_drop_point_location_caller = setEngineerPoint
		setDropPointLocation()
	end)
	if gm_click_mode == "engineer point" then
		addGMFunction(">Set Engineer Point<",placeEngineerPoint)
	else
		addGMFunction("Set Engineer Point",placeEngineerPoint)
	end	
end
function placeEngineerPoint()
	if drop_point_location == "At Click" then
		if gm_click_mode == "engineer point" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "engineer point"
			onGMClick(gmClickEngineerPoint)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   engineer point\nGM click mode.",prev_mode))
			end
		end
		setEngineerPoint()
	elseif drop_point_location == "Associated" then
		engineerAssociatedTo()
	elseif drop_point_location == "Near To" then
		engineerNearTo()
	end
end
function gmClickEngineerPoint(x,y)
	engineerCreation(x,y,0,0)
end
--Create engineer point associated to selected object(s)
function engineerAssociatedTo()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("You need to select an object. No action taken")
		return
	end
	local tempObject = objectList[1]
	local engineerDistance = 5500
	if not ECS then
		engineerDistance = associatedTypeDistance[tempObject.typeName]
	end
	if engineerDistance == nil then
		addGMMessage(string.format("The type of the object selected (%s) is not a type that can be associate. No action taken",tempType))
		--print(tempType .. ": not type which can be associated")
		return
	end
	local aox, aoy = tempObject:getPosition()
	--size of player spaceships vary, so use the values set in setConstants to determine
	if tempType == "PlayerSpaceship" then
		local tempShipType = tempObject:getTypeName()
		--local psd = playerShipDistance[tempShipType]
		local psd = playerShipStats[tempShipType].distance
		if psd ~= nil then
			engineerDistance = psd
		end
	end
	--size of space stations vary so use the values set in setConstants to determine
	if tempType == "SpaceStation" then
		local tempStationType = tempObject:getTypeName()
		local sd = spaceStationDistance[tempStationType]
		if sd ~= nil then
			engineerDistance = sd
		end
	end
	local sox, soy = vectorFromAngle(random(0,360),engineerDistance)
	local associatedObjectName = tempObject:getCallSign()
	engineerCreation(aox, aoy, sox, soy, associatedObjectName)
end
function engineerCreation(originx, originy, vectorx, vectory, associatedObjectName)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,5)
	local randomSuffix = string.char(math.random(65,90))
	local engineerCallSign = string.format("Eng%i%s",artifactNumber,randomSuffix)
	local unscannedDescription = string.format("Engineer %s Point",dropOrExtractAction)
	local scannedDescription = string.format("Engineer %s Point %s, standing by for engineer transport",dropOrExtractAction,engineerCallSign)
	if associatedObjectName ~= nil then
		scannedDescription = scannedDescription .. ": " .. associatedObjectName
	end
	local engineerPoint = Artifact():setPosition(originx+vectorx,originy+vectory):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("SensorBuoyMKI"):setDescriptions(unscannedDescription,scannedDescription):setCallSign(engineerCallSign)
	engineerPoint:onPickUp(engineerPointPickupProcess)
	engineerPoint.action = dropOrExtractAction
	engineerPoint.associatedObjectName = associatedObjectName
	engineerPointList[engineerCallSign] = engineerPoint
	table.insert(rendezvousPoints,engineerPoint)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if p.engineerPointButton == nil then
				p.engineerPointButton = {}
			end
			p.engineerPointButton[engineerCallSign] = {active = true, sequence = rv_sequence}
			rv_sequence = rv_sequence + 1
			if rv_sequence >= 200 then
				rv_sequence = 100
			end
			engineerPointPrepButton(p,"Engineering",engineerCallSign,string.format("Prep to %s via %s",dropOrExtractAction,engineerCallSign),"Transporters on %s ready for engineers via %s")
			engineerPointPrepButton(p,"Engineering+",engineerCallSign,string.format("Prep to %s via %s",dropOrExtractAction,engineerCallSign),"Transporters on %s ready for engineers via %s")
		end
	end
end
function engineerPointPrepButton(p,console,engineerCallSign,label,msg)
	p:addCustomButton(console,string.format("%s%s",engineerCallSign,console),label,function()
		local other_players = getActivePlayerShips()
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				if other_p.engineerPointButton ~= nil then
					for epb, epb_item in pairs(other_p.engineerPointButton) do
						if epb_item.active and epb == engineerCallSign then
							other_p:removeCustom(string.format("%s%s",epb,"Engineering"))
							other_p:removeCustom(string.format("%s%s",epb,"Engineering+"))
							other_p:addCustomMessage(console,"epbgone",string.format(msg,p:getCallSign(),epb))
							other_p.engineerPointButton[epb].active = false
							other_p.engineerPointButton[epb].preparer = p
						end
					end
				end
			end
		end
	end,p.engineerPointButton[engineerCallSign].sequence)
end
function cleanUpEngineeringPoints()
	for name,ep in pairs(engineerPointList) do
		if not ep:isValid() then
			for i,p in ipairs(getActivePlayerShips()) do
				for epb, epb_item in pairs(p.engineerPointButton) do
					if epb == name then
						p:removeCustom(string.format("%s%s",epb,"Engineering"))
						p:removeCustom(string.format("%s%s",epb,"Engineering+"))
						p.engineerPointButton[epb] = nil
					end
				end
			end
			engineerPointList[name] = nil
		end
	end
	cleanUpDropPoints = cleanUpMedicPoints
end
function engineerPointPickupProcess(self,retriever)
	local current_rotation = self:getRotation()
	local engineerCallSign = self:getCallSign()
	local engineerPointPrepped = false
	local successful_action = false
	for epCallSign, ep in pairs(engineerPointList) do
		if epCallSign == engineerCallSign then
			engineerPointList[epCallSign] = nil
		end
	end
	for rpi, rp in pairs(rendezvousPoints) do
		if rp:getCallSign() == engineerCallSign then
			table.remove(rendezvousPoints,rpi)
		end
	end
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			local preparerIsRetriever = false
			for epb, epb_item in pairs(p.engineerPointButton) do
				if epb == engineerCallSign then
					if not epb_item.active then
						engineerPointPrepped = true
						if p == epb_item.preparer then
							preparerIsRetriever = true
						end
						break
					end
				end
			end
			if engineerPointPrepped then
				p:removeCustom(engineerCallSign)
			end
			if p == retriever then
				if engineerPointPrepped then
					if preparerIsRetriever then
						if self.action == "Drop" then
							if p:getRepairCrewCount() > 0 then
								successful_action = true
								p:setRepairCrewCount(p:getRepairCrewCount() - 1)
								if self.associatedObjectName ~= nil then
									p:addToShipLog(string.format("Engineer drop action on %s successful via %s",self.associatedObjectName,engineerCallSign),"Green")
								else
									p:addToShipLog(string.format("Engineer drop action successful via %s",engineerCallSign),"Green")
								end
							else
								if p.engineer_drop_failure_not_enough_crew_message == nil then
									p.engineer_drop_failure_not_enough_crew_message = {}
								end
								if p.engineer_drop_failure_not_enough_crew_message[engineerCallSign] == nil then
									p:addToShipLog(string.format("Not enough engineers to drop team at %s. Critical team member could not be obtained from %s repair crew personnel",engineerCallSign,p:getCallSign()),"Green")
									p.engineer_drop_failure_not_enough_crew_message[engineerCallSign] = "sent"
								end
							end
						else
							successful_action = true
							p:setRepairCrewCount(p:getRepairCrewCount() + 1)
							if self.associatedObjectName ~= nil then
								p:addToShipLog(string.format("Engineer extract action from %s successful via %s",self.associatedObjectName,engineerCallSign),"Green")
							else
								p:addToShipLog(string.format("Engineer extract action successful via %s",engineerCallSign),"Green")
							end
						end
					else
						if p.engineer_drop_failure_wrong_preparer_message == nil then
							p.engineer_drop_failure_wrong_preparer_message = {}
						end
						if p.engineer_drop_failure_wrong_preparer_message[engineerCallSign] == nil then
							p:addToShipLog(string.format("Engineer %s action failed. Transporters on %s have not been prepared for %s",self.action,p:getCallSign(),engineerCallSign),"Green")
							p.engineer_drop_failure_wrong_preparer_message[engineerCallSign] = "sent"
						end
					end
				else
					if self.action == "Drop" then
						if p.engineer_drop_failure_unprepared_message == nil then
							p.engineer_drop_failure_unprepared_message = {}
						end
						if p.engineer_drop_failure_unprepared_message[engineerCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to drop engineers at %s",engineerCallSign),"Green")
							p.engineer_drop_failure_unprepared_message[engineerCallSign] = "sent"
						end
					else
						if p.engineer_extract_failure_unprepared_message == nil then
							p.engineer_extract_failure_unprepared_message = {}
						end
						if p.engineer_extract_failure_unprepared_message[engineerCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to extract engineers at %s",engineerCallSign),"Green")
							p.engineer_extract_failure_unprepared_message[engineerCallSign] = "sent"
						end
					end
				end
				if successful_action then
					if self.action == "Drop" then
						retriever:wrappedAddCustomMessage("Engineering","eprcd","One of your repair crew deployed with the engineering team. They will return when the engineers are picked up")
					end
					if retriever:getEnergy() > 50 then
						retriever:setEnergy(retriever:getEnergy() - 50)
					else
						retriever:setEnergy(0)
					end
				end	--successful action branch
			end	--retriever matches player branch
		end	--player is valid branch
	end	--end of player loop
	if not successful_action then
		local rpx, rpy = self:getPosition()
		local unscannedDescription = string.format("Engineer %s Point",self.action)
		local scannedDescription = string.format("Engineer %s Point %s, standing by for engineer transport",self.action,engineerCallSign)
		if self.associatedObjectName ~= nil then
			scannedDescription = scannedDescription .. ": " .. self.associatedObjectName
		end
		if engineerPointList[engineerCallSign] == nil then
			local redoEngineerPoint = Artifact():setPosition(rpx,rpy):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("SensorBuoyMKI"):setDescriptions(unscannedDescription,scannedDescription):setCallSign(engineerCallSign)
			redoEngineerPoint:setRotation(current_rotation)
			redoEngineerPoint:onPickUp(engineerPointPickupProcess)
			redoEngineerPoint.action = self.action
			redoEngineerPoint.associatedObjectName = self.associatedObjectName
			engineerPointList[engineerCallSign] = redoEngineerPoint
			table.insert(rendezvousPoints,redoEngineerPoint)
		end
	end
end
---------------------------------------------------------
--	Artifacts > Drop Point > Engineer Point > Near To  --
---------------------------------------------------------
--Create engineer point near to selected object(s)
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- -FROM ENG NEAR TO		F	setEngineerPoint
-- Up to 3 buttons of nearby CpuShips for association
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createEngineerAway
function engineerNearTo()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Eng Near To",setEngineerPoint)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("You need to select something. No action taken")
		return
	end
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	print(string.format("nearx: %.1f, neary: %.1f",nearx,neary))
	local nearbyObjects = getObjectsInRadius(nearx, neary, 20000)
	cpuShipList = {}
	for i=1,#nearbyObjects do
		local tempObject = nearbyObjects[i]
		if isObjectType(tempObject,"CpuShip") then
			table.insert(cpuShipList,tempObject)
		end
		if #cpuShipList >= 3 then
			break
		end
	end
	if #cpuShipList > 0 then
		if #cpuShipList >= 1 then
			GMEngineerAssociatedToCpuShip1 = string.format("Associate to %s",cpuShipList[1]:getCallSign())
			addGMFunction(GMEngineerAssociatedToCpuShip1,function () engineerAssociatedToGivenCpuShip(cpuShipList[1]) end)
		end
		if #cpuShipList >= 2 then
			GMEngineerAssociatedToCpuShip2 = string.format("Associate to %s",cpuShipList[2]:getCallSign())
			addGMFunction(GMEngineerAssociatedToCpuShip2,function () engineerAssociatedToGivenCpuShip(cpuShipList[2]) end)
		end
		if #cpuShipList >= 3 then
			GMEngineerAssociatedToCpuShip3 = string.format("Associate to %s",cpuShipList[3]:getCallSign())
			addGMFunction(GMEngineerAssociatedToCpuShip3,function () engineerAssociatedToGivenCpuShip(cpuShipList[3]) end)
		end
	end
	callingNearTo = engineerNearTo
	GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetCreateDirection),setCreateDirection)
	GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(string.format("+%s",GMSetCreateDistance),setCreateDistance)
	GMCreateEngineerAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreateEngineerAway,createEngineerAway)
end
function engineerAssociatedToGivenCpuShip(tempObject)
	local engineerDistance = associatedTypeDistance["CpuShip"]
	local aox, aoy = tempObject:getPosition()
	local tempShipType = tempObject:getTypeName()
	local csd = shipTemplateDistance[tempShipType]
	if csd ~= nil then
		engineerDistance = csd
	end
	local sox, soy = vectorFromAngle(random(0,360),engineerDistance)
	engineerCreation(aox, aoy, sox, soy)
end
--Engineer point creation after distance and direction parameters set
function createEngineerAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	engineerCreation(nearx, neary, sox, soy)
end
---------------------------------------------------
--	Artifacts > Drop Point > Medical Team Point  --
---------------------------------------------------
-- Button Text			   DF*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -FROM MEDIC POINT		F	dropPoint
-- DROP MEDICAL TEAM*		F	setDropAction		asterisk = current selection
-- EXTRACT MEDICAL TEAM		F	setExtractAction
-- +AT CLICK				D	setDropPointLocation
-- SET MEDIC POINT			D	placeMedicPoint
function setMedicPoint()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Medic Point",dropPoint)
	dropExtractActionReturn = setMedicPoint
	local GMMedicDrop = "Drop Medical Team"
	if dropOrExtractAction == "Drop" then
		GMMedicDrop = "Drop Medical Team*"
	end
	addGMFunction(GMMedicDrop,setDropAction)
	local GMMedicExtract = "Extract medical team"
	if dropOrExtractAction == "Extract" then
		GMMedicExtract = "Extract medical team*"
	end
	addGMFunction(GMMedicExtract,setExtractAction)
	addGMFunction(string.format("+%s",drop_point_location),function()
		set_drop_point_location_caller = setMedicPoint
		setDropPointLocation()
	end)
	if gm_click_mode == "medic point" then
		addGMFunction(">Set Medic Point<",placeMedicPoint)
	else
		addGMFunction("Set Medic Point",placeMedicPoint)
	end	
end
function placeMedicPoint()
	if drop_point_location == "At Click" then
		if gm_click_mode == "medic point" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "medic point"
			onGMClick(gmClickMedicPoint)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   medic point\nGM click mode.",prev_mode))
			end
		end
		setMedicPoint()
	elseif drop_point_location == "Associated" then
		medicAssociatedTo()
	elseif drop_point_location == "Near To" then
		medicNearTo()
	end
end
function gmClickMedicPoint(x,y)
	medicCreation(x,y,0,0)
end
--Create medical team point associated to selected object(s)
function medicAssociatedTo()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("You need to select an object. No action taken")
		return
	end
	local tempObject = objectList[1]
	local medicDistance = 5500
	if not ECS then
		medicDistance = associatedTypeDistance[tempObject.typeName] 
	end
	if medicDistance == nil then
		addGMMessage(string.format("Type of object selected (%s) cannot be associated. No action taken",tempType))
		--print(tempType .. ": not type which can be associated")
		return
	end
	local aox, aoy = tempObject:getPosition()
	--size of player spaceships vary, so use the values set in setConstants to determine
	if tempType == "PlayerSpaceship" then
		local tempShipType = tempObject:getTypeName()
		--local psd = playerShipDistance[tempShipType]
		local psd = playerShipStats[tempShipType].distance
		if psd ~= nil then
			medicDistance = psd
		end
	end
	--size of space stations vary so use the values set in setConstants to determine
	if tempType == "SpaceStation" then
		local tempStationType = tempObject:getTypeName()
		local sd = spaceStationDistance[tempStationType]
		if sd ~= nil then
			medicDistance = sd
		end
	end
	local sox, soy = vectorFromAngle(random(0,360),medicDistance)
	local associatedObjectName = tempObject:getCallSign()
	medicCreation(aox, aoy, sox, soy, associatedObjectName)
end
function medicCreation(originx, originy, vectorx, vectory, associatedObjectName)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,5)
	local randomSuffix = string.char(math.random(65,90))
	local medicCallSign = string.format("Med%i%s",artifactNumber,randomSuffix)
	local unscannedDescription = string.format("Medical Team %s Point",dropOrExtractAction)
	local scannedDescription = string.format("Medical Team %s Point %s, standing by for medical team transport",dropOrExtractAction,medicCallSign)
	if associatedObjectName ~= nil then
		scannedDescription = scannedDescription .. ": " .. associatedObjectName
	end
	local medicPoint = Artifact():setPosition(originx+vectorx,originy+vectory):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setModel("SensorBuoyMKI"):setDescriptions(unscannedDescription,scannedDescription):setCallSign(medicCallSign)
	medicPoint:onPickUp(medicPointPickupProcess)
	medicPoint.action = dropOrExtractAction
	medicPoint.associatedObjectName = associatedObjectName
	medicPoint.initial_rotation = medicPoint:getRotation()
	medicPointList[medicCallSign] = medicPoint
	table.insert(rendezvousPoints,medicPoint)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if p.medicPointButton == nil then
				p.medicPointButton = {}
			end
			p.medicPointButton[medicCallSign] = {active = true, sequence = rv_sequence}
			rv_sequence = rv_sequence + 1
			if rv_sequence >= 200 then
				rv_sequence = 100
			end
			medicPointPrepButton(p,"Engineering",medicCallSign,string.format("Prep to %s via %s",dropOrExtractAction,medicCallSign),"Transporters on %s ready for medical team via %s")
			medicPointPrepButton(p,"Engineering+",medicCallSign,string.format("Prep to %s via %s",dropOrExtractAction,medicCallSign),"Transporters on %s ready for medical team via %s")
		end
	end
	if med_point_diagnostic then
		print("Med point creation")
		for other_pidx, other_p in ipairs(players) do
			if other_p:isValid() then
				print("other player:",other_p:getCallSign())
				for mpb, mpb_item in pairs(other_p.medicPointButton) do
					print(mpb,mpb_item.active,mpb_item.sequence)
					if mpb_item.preparer ~= nil then
						if mpb_item.preparer:isValid() then
							print("preparer:",mpb_item.preparer,mpb_item.preparer:getCallSign())
						else
							print("preparer:",mpb_item.preparer,"(invalid)")
						end
					else
						print("no preparer")
					end
				end
			else
				print("invalid other player:",other_pidx,other_p)
			end
		end 
	end
end
function medicPointPrepButton(p,console,medicCallSign,label,msg)
	p:addCustomButton(console,string.format("%s%s",medicCallSign,console),label,function()
		local other_players = getActivePlayerShips()
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				for mpb, mpb_item in pairs(other_p.medicPointButton) do
					if mpb_item.active and mpb == medicCallSign then
						other_p:removeCustom(string.format("%s%s",mpb,"Engineering"))
						other_p:removeCustom(string.format("%s%s",mpb,"Engineering+"))
						other_p:addCustomMessage(console,"mtpbgone",string.format(msg,p:getCallSign(),mpb))
						other_p.medicPointButton[mpb].active = false
						other_p.medicPointButton[mpb].preparer = p
					end
				end
			end
		end
		if med_point_diagnostic then
			print("Med point prep after click by:",p:getCallSign(),"via console:",console)
			for other_pidx, other_p in ipairs(other_players) do
				if other_p:isValid() then
					print("other player:",other_p:getCallSign())
					for mpb, mpb_item in pairs(other_p.medicPointButton) do
						print(mpb,mpb_item.active,mpb_item.sequence)
						if mpb_item.preparer ~= nil then
							if mpb_item.preparer:isValid() then
								print("preparer:",mpb_item.preparer,mpb_item.preparer:getCallSign())
							else
								print("preparer:",mpb_item.preparer,"(invalid)")
							end
						else
							print("no preparer")
						end
					end
				else
					print("invalid other player:",other_pidx,other_p)
				end
			end 
		end
	end,p.medicPointButton[medicCallSign].sequence)
end
function cleanUpMedicPoints()
	for name,mp in pairs(medicPointList) do
		if not mp:isValid() then
			for i,p in ipairs(getActivePlayerShips()) do
				for mpb, mpb_item in pairs(p.medicPointButton) do
					if mpb == name then
						p:removeCustom(string.format("%s%s",mpb,"Engineering"))
						p:removeCustom(string.format("%s%s",mpb,"Engineering+"))
						p.medicPointButton[mpb] = nil
					end
				end
			end
			medicPointList[name] = nil
		end
	end
	cleanUpDropPoints = cleanUpMarinePoints
end
function medicPointPickupProcess(self,retriever)
	local current_rotation = self:getRotation()
	local medicCallSign = self:getCallSign()
	local medicPointPrepped = false
	local successful_action = false
	local other_players = getActivePlayerShips()
	if med_point_diagnostic then
		print("Top of med point pickup by:",retriever:getCallSign())
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				print("other player:",other_p:getCallSign())
				for mpb, mpb_item in pairs(other_p.medicPointButton) do
					print(mpb,mpb_item.active,mpb_item.sequence)
					if mpb_item.preparer ~= nil then
						if mpb_item.preparer:isValid() then
							print("preparer:",mpb_item.preparer,mpb_item.preparer:getCallSign())
						else
							print("preparer:",mpb_item.preparer,"(invalid)")
						end
					else
						print("no preparer")
					end
				end
			else
				print("invalid other player:",other_pidx,other_p)
			end
		end 
	end
	for mpCallSign, mp in pairs(medicPointList) do
		if mpCallSign == medicCallSign then
			medicPointList[medicCallSign] = nil
		end
	end
	for rpi, rp in pairs(rendezvousPoints) do
		if rp:getCallSign() == medicCallSign then
			table.remove(rendezvousPoints,rpi)
		end
	end
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			local preparerIsRetriever = false
			for mpb, mpb_item in pairs(p.medicPointButton) do
				if mpb == medicCallSign then
					if not mpb_item.active then
						medicPointPrepped = true
						if p == mpb_item.preparer then
							preparerIsRetriever = true
						end
						break
					end
				end
			end
			if medicPointPrepped then
				p:removeCustom(string.format("%s%s",medicCallSign,"Engineering"))
				p:removeCustom(string.format("%s%s",medicCallSign,"Engineering+"))
			end
			if p == retriever then
				if medicPointPrepped then
					if preparerIsRetriever then
						if self.action == "Drop" then
							if p:getRepairCrewCount() > 0 then
								successful_action = true
								p:setRepairCrewCount(p:getRepairCrewCount() - 1)
								if self.associatedObjectName ~= nil then
									p:addToShipLog(string.format("Medical team drop action on %s successful via %s",self.associatedObjectName,medicCallSign),"Green")
								else
									p:addToShipLog(string.format("Medical team drop action successful via %s",medicCallSign),"Green")
								end
							else
								if p.medic_drop_failure_not_enough_crew_message == nil then
									p.medic_drop_failure_not_enough_crew_message = {}
								end
								if p.medic_drop_failure_not_enough_crew_message[medicCallSign] == nil then
									p:addToShipLog(string.format("Not enough medics to drop team at %s. Critical team member could not be obtained from %s repair crew personnel",medicCallSign,p:getCallSign()),"Green")
									p.medic_drop_failure_not_enough_crew_message[medicCallSign] = "sent"
								end
							end
						else
							successful_action = true
							p:setRepairCrewCount(p:getRepairCrewCount() + 1)
							if self.associatedObjectName ~= nil then
								p:addToShipLog(string.format("Medical team extract action from %s successful via %s",self.associatedObjectName,medicCallSign),"Green")
							else
								p:addToShipLog(string.format("Medical team extract action successful via %s",medicCallSign),"Green")
							end
						end
					else
						if p.medic_drop_failure_wrong_preparer_message == nil then
							p.medic_drop_failure_wrong_preparer_message = {}
						end
						if p.medic_drop_failure_wrong_preparer_message[medicCallSign] == nil then
							p:addToShipLog(string.format("Medical team %s action failed. Transporters on %s have not been prepared for %s",self.action,p:getCallSign(),medicCallSign),"Green")
							p.medic_drop_failure_wrong_preparer_message[medicCallSign] = "sent"
						end
					end
				else
					if self.action == "Drop" then
						if p.medic_drop_failure_unprepared_message == nil then
							p.medic_drop_failure_unprepared_message = {}
						end
						if p.medic_drop_failure_unprepared_message[medicCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to drop medics at %s",medicCallSign),"Green")
							p.medic_drop_failure_unprepared_message[medicCallSign] = "sent"
						end
					else
						if p.medic_extract_failure_unprepared_message == nil then
							p.medic_extract_failure_unprepared_message = {}
						end
						if p.medic_extract_failure_unprepared_message[medicCallSign] == nil then
							p:addToShipLog(string.format("Not prepared to pick up medics at %s",medicCallSign),"Green")
							p.medic_extract_failure_unprepared_message[medicCallSign] = "sent"
						end
					end
				end
				if successful_action then
					if self.action == "Drop" then
						retriever:wrappedAddCustomMessage("Engineering","mdprcd","One of your repair crew deployed with the medical team. They will return when the medical team is picked up")
					end
					if retriever:getEnergy() > 50 then
						retriever:setEnergy(retriever:getEnergy() - 50)
					else
						retriever:setEnergy(0)
					end
				end
			end
		end	--player valid branch
	end	--player loop
	if successful_action then
		for pidx, p in ipairs(players) do
			if p ~= nil and p:isValid() then
				p.medicPointButton[medicCallSign] = nil
			end
		end
	else
		local rpx, rpy = self:getPosition()
		local unscannedDescription = string.format("Medical team %s Point",self.action)
		local scannedDescription = string.format("Medical team %s Point %s, standing by for medical team transport",self.action,medicCallSign)
		if self.associatedObjectName ~= nil then
			scannedDescription = scannedDescription .. ": " .. self.associatedObjectName
		end
		if medicPointList[medicCallSign] == nil then
			local redoMedicalPoint = Artifact():setModel("SensorBuoyMKI"):setRotation(self.initial_rotation):setPosition(rpx,rpy):setScanningParameters(1,1):setRadarSignatureInfo(1,.5,0):setDescriptions(unscannedDescription,scannedDescription):setCallSign(medicCallSign)
			redoMedicalPoint:setRotation(current_rotation)
			redoMedicalPoint:onPickUp(medicPointPickupProcess)
			redoMedicalPoint.action = self.action
			redoMedicalPoint.associatedObjectName = self.associatedObjectName
			redoMedicalPoint.initial_rotation = self.initial_rotation
			medicPointList[medicCallSign] = redoMedicalPoint
			table.insert(rendezvousPoints,redoMedicalPoint)
		end
	end
	if med_point_diagnostic then
		print("Bottom of med point pickup by:",retriever:getCallSign())
		for other_pidx, other_p in ipairs(other_players) do
			if other_p:isValid() then
				print("other player:",other_p:getCallSign())
				for mpb, mpb_item in pairs(other_p.medicPointButton) do
					print(mpb,mpb_item.active,mpb_item.sequence)
					if mpb_item.preparer ~= nil then
						if mpb_item.preparer:isValid() then
							print("preparer:",mpb_item.preparer,mpb_item.preparer:getCallSign())
						else
							print("preparer:",mpb_item.preparer,"(invalid)")
						end
					else
						print("no preparer")
					end
				end
			else
				print("invalid other player:",other_pidx,other_p)
			end
		end 
	end
end
-------------------------------------------------------------
--	Artifacts > Drop Point > Medical Team Point > Near To  --
-------------------------------------------------------------
--Create medical team point near to selected object(s)
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- -FROM ENG NEAR TO		F	setMedicPoint
-- Up to 3 buttons of nearby CpuShips for association
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createMedicAway
function medicNearTo()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Medic Near To",setMedicPoint)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("Nothing selected. No action taken.")
		return
	end
	--print("got something in selection list")
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	--print(string.format("nearx: %.1f, neary: %.1f",nearx,neary))
	local nearbyObjects = getObjectsInRadius(nearx, neary, 20000)
	cpuShipList = {}
	for i=1,#nearbyObjects do
		local tempObject = nearbyObjects[i]
		if isObjectType(tempObject,"CpuShip") then
			table.insert(cpuShipList,tempObject)
		end
		if #cpuShipList >= 3 then
			break
		end
	end
	if #cpuShipList > 0 then
		if #cpuShipList >= 1 then
			GMMedicAssociatedToCpuShip1 = string.format("Associate to %s",cpuShipList[1]:getCallSign())
			addGMFunction(GMMedicAssociatedToCpuShip1,function () medicAssociatedToGivenCpuShip(cpuShipList[1]) end)
		end
		if #cpuShipList >= 2 then
			GMMedicAssociatedToCpuShip2 = string.format("Associate to %s",cpuShipList[2]:getCallSign())
			addGMFunction(GMMedicAssociatedToCpuShip2,function () medicAssociatedToGivenCpuShip(cpuShipList[2]) end)
		end
		if #cpuShipList >= 3 then
			GMMedicAssociatedToCpuShip3 = string.format("Associate to %s",cpuShipList[3]:getCallSign())
			addGMFunction(GMMedicAssociatedToCpuShip3,function () medicAssociatedToGivenCpuShip(cpuShipList[3]) end)
		end
	end
	callingNearTo = medicNearTo
	GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetCreateDirection),setCreateDirection)
	GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(string.format("+%s",GMSetCreateDistance),setCreateDistance)
	GMCreateMedicAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreateMedicAway,createMedicAway)
end
function medicAssociatedToGivenCpuShip(tempObject)
	local medicDistance = associatedTypeDistance["CpuShip"]
	local aox, aoy = tempObject:getPosition()
	local tempShipType = tempObject:getTypeName()
	local csd = shipTemplateDistance[tempShipType]
	if csd ~= nil then
		medicDistance = csd
	end
	local sox, soy = vectorFromAngle(random(0,360),medicDistance)
	medicCreation(aox, aoy, sox, soy)
end
--Medical team point creation after distance and direction parameters set
function createMedicAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	medicCreation(nearx, neary, sox, soy)
end
----------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point  --
----------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -FROM SUPPLY			F	dropPoint
-- +MISSILES N1E1M2H4	D	setCustomMissiles
-- +ENERGY 500			D	setSupplyEnergy
-- +REPAIR CREW 0		D	setSupplyRepairCrew
-- +COOLANT 0			D	setSupplyCoolant
-- +PROBES 0			D	setSupplyProbes
-- +NEAR TO				F	supplyNearTo
function setCustomSupply()
	--Default supply drop gives:
	--500 energy
	--4 Homing
	--1 Nuke
	--2 Mines
	--1 EMP
	clearGMFunctions()
	addGMFunction("-From Supply",dropPoint)
	if supply_drop_info == nil then
		supply_drop_info = "Scan"	--default upon Sandbox launch
	end
	addGMFunction(string.format("Info: %s",supply_drop_info),function()
		local supply_info_explained = "Stock: No information about supply drop (just like stock EE)\nLabel: Supply drop call sign has supply drop info\nScan: Scan reveals supply drop info in description"
		if supply_drop_info == "Label" then
			supply_info_explained = "Previous: Label\n\n" .. supply_info_explained .. "\n\nSwitched to Scan"
			supply_drop_info = "Scan"
		elseif supply_drop_info == "Scan" then
			supply_info_explained = "Previous: Scan\n\n" .. supply_info_explained .. "\n\nSwitched to Stock"
			supply_drop_info = "Stock"
		elseif supply_drop_info == "Stock" then
			supply_info_explained = "Previous: Stock\n\n" .. supply_info_explained .. "\n\nSwitched to Label"
			supply_drop_info = "Label"
		end
		addGMMessage(supply_info_explained)
		setCustomSupply()
	end)
	local missile_label = ""
	if supply_nuke_range_max > 0 then
		missile_label = string.format("%sN%i",missile_label,supply_nuke_range_max)
	end
	if supply_emp_range_max > 0 then
		missile_label = string.format("%sE%i",missile_label,supply_emp_range_max)
	end
	if supply_mine_range_max > 0 then
		missile_label = string.format("%sM%i",missile_label,supply_mine_range_max)
	end
	if supply_homing_range_max > 0 then
		missile_label = string.format("%sH%i",missile_label,supply_homing_range_max)
	end
	if supply_hvli_range_max > 0 then
		missile_label = string.format("%sL%i",missile_label,supply_hvli_range_max)
	end
	missile_label = string.format("+Missiles %s",missile_label)
	addGMFunction(missile_label,setCustomMissiles)
	addGMFunction(string.format("+Energy %i-%i %i-%i",supply_energy_range_min,supply_energy_range_max,math.floor(supply_jump_charge_energy_range_min/1000),math.floor(supply_jump_charge_energy_range_max/1000)),setSupplyEnergy)
	addGMFunction(string.format("+Repair Crew %i-%i",supply_repair_crew_range_min,supply_repair_crew_range_max),setSupplyRepairCrew)
	addGMFunction(string.format("+Coolant %i-%i",supply_coolant_range_min,supply_coolant_range_max),setSupplyCoolant)
	addGMFunction(string.format("+Probes %i-%i",supply_probes_range_min,supply_probes_range_max),setSupplyProbes)
	addGMFunction(string.format("+Armor %i-%i",supply_armor_range_min,supply_armor_range_max),setSupplyArmor)
	if drop_point_location == "Associated" then
		drop_point_location = "At Click"
	end
	addGMFunction(string.format("+%s",drop_point_location),setSupplyDropLocation)
	if gm_click_mode == "supply drop" then
		addGMFunction(">Set Supply Drop<",placeSupplyDrop)
	else
		addGMFunction("Set Supply Drop",placeSupplyDrop)
	end	
--	addGMFunction("+Near to",supplyNearTo)	
end
function placeSupplyDrop()
	if drop_point_location == "At Click" then
		if gm_click_mode == "supply drop" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "supply drop"
			onGMClick(gmClickSupplyDrop)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   supply drop\nGM click mode.",prev_mode))
			end
		end
		setCustomSupply()
	elseif drop_point_location == "Near To" then
		supplyNearTo()
	end
end
function gmClickSupplyDrop(x,y)
	supplyCreation(x,y,0,0)
end
---------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Missiles  --
---------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM MISSILES	F	initialGMFunctions
-- -DROP POINT			F	dropPoint
-- -SUPPLY				F	setCustomSupply
-- +NUKE 1				D	setSupplyNuke
-- +EMP 1				D	setSupplyEMP
-- +MINE 2				D	setSupplyMine
-- +HOMING 4			D	setSupplyHoming
-- +HVLI 0				D	setSupplyHVLI
function setCustomMissiles()
	clearGMFunctions()
	addGMFunction("-Main From Missiles",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Supply",setCustomSupply)
	addGMFunction(string.format("+Nuke %i-%i",supply_nuke_range_min,supply_nuke_range_max),setSupplyNuke)
	addGMFunction(string.format("+EMP %i-%i",supply_emp_range_min,supply_emp_range_max),setSupplyEMP)
	addGMFunction(string.format("+Mine %i-%i",supply_mine_range_min,supply_mine_range_max),setSupplyMine)
	addGMFunction(string.format("+Homing %i-%i",supply_homing_range_min,supply_homing_range_max),setSupplyHoming)
	addGMFunction(string.format("+HVLI %i-%i",supply_hvli_range_min,supply_hvli_range_max),setSupplyHVLI)
end
-------------------------------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > At Click (drop point location)  --
-------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM DROP LOC	F	initialGMFunctions
-- -TO DROP POINT		F	dropPoint
-- -SUPPLY				F	setCustomSupply
-- AT CLICK*			*	inline
-- NEAR TO				*	inline
function setSupplyDropLocation()
	clearGMFunctions()
	addGMFunction("-Main frm Drop Loc",initialGMFunctions)
	addGMFunction("-To Drop Point",dropPoint)
	addGMFunction("-Supply",setCustomSupply)
	local button_label = "At Click"
	if drop_point_location == "At Click" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		drop_point_location = "At Click"
		setCustomSupply()
	end)
	button_label = "Near To"
	if drop_point_location == "Near To" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		drop_point_location = "Near To"
		setCustomSupply()
	end)
end
-------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Energy  --
-------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -FROM ENERGY		F	setCustomSupply
-- 500-100=400		D	subtract100Energy
-- 500+100=600		D	add100Energy
function setSupplyEnergy()
	clearGMFunctions()
--	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Energy",setCustomSupply)
	if supply_energy_range_min > 0 then
		addGMFunction(string.format("Min %i-100=%i",supply_energy_range_min,supply_energy_range_min - 100),subtract100EnergyMin)
	end
	if supply_energy_range_min < 1000 then
		addGMFunction(string.format("Min %i+100=%i",supply_energy_range_min,supply_energy_range_min + 100),add100EnergyMin)
	end
	if supply_energy_range_max > 0 then
		addGMFunction(string.format("Max %i-100=%i",supply_energy_range_max,supply_energy_range_max - 100),subtract100EnergyMax)
	end
	if supply_energy_range_max < 1000 then
		addGMFunction(string.format("Max %i+100=%i",supply_energy_range_max,supply_energy_range_max + 100),add100EnergyMax)
	end
	if supply_jump_charge_energy_range_min > 0 then
		addGMFunction(string.format("Jump Min %ik-5k=%ik",supply_jump_charge_energy_range_min/1000,supply_jump_charge_energy_range_min/1000-5),function()
			supply_jump_charge_energy_range_min = supply_jump_charge_energy_range_min - 5000
			setSupplyEnergy()
		end)
	end
	if supply_jump_charge_energy_range_min < 50000 then
		addGMFunction(string.format("Jump Min %ik+5k=%ik",supply_jump_charge_energy_range_min/1000,supply_jump_charge_energy_range_min/1000+5),function()
			if supply_jump_charge_energy_range_min == supply_jump_charge_energy_range_max then
				addGMMessage(string.format("Minimum of %ik cannot exceed maximum of %ik",supply_jump_charge_energy_range_min/1000,supply_jump_charge_energy_range_max/1000))
			else
				supply_jump_charge_energy_range_min = supply_jump_charge_energy_range_min + 5000
			end
			setSupplyEnergy()
		end)
	end
	if supply_jump_charge_energy_range_max > 0 then
		addGMFunction(string.format("Jump Max %ik-5k=%ik",supply_jump_charge_energy_range_max/1000,supply_jump_charge_energy_range_max/1000-5),function()
			if supply_jump_charge_energy_range_max == supply_jump_charge_energy_range_min then
				addGMMessage(string.format("Maximum of %ik cannot go below minimum of %ik",supply_jump_charge_energy_range_max/1000,supply_jump_charge_energy_range_max/1000))
			else
				supply_jump_charge_energy_range_max = supply_jump_charge_energy_range_max - 5000
			end
			setSupplyEnergy()
		end)
	end
	if supply_jump_charge_energy_range_max < 55000 then
		addGMFunction(string.format("Jump Max %ik+5k=%ik",supply_jump_charge_energy_range_max/1000,supply_jump_charge_energy_range_max/1000+5),function()
			supply_jump_charge_energy_range_max = supply_jump_charge_energy_range_max + 5000
			setSupplyEnergy()
		end)
	end
end
function subtract100EnergyMax()
	if supply_energy_range_min == supply_energy_range_max then
		addGMMessage(string.format("Maximum of %i cannot go below minimum of %i",supply_energy_range_max,supply_energy_range_max))
	else
		supply_energy_range_max = supply_energy_range_max - 100
	end
	setSupplyEnergy()
end
function subtract100EnergyMin()
	supply_energy_range_min = supply_energy_range_min - 100
	setSupplyEnergy()
end
function add100EnergyMax()
	supply_energy_range_max = supply_energy_range_max + 100
	setSupplyEnergy()
end
function add100EnergyMin()
	if supply_energy_range_min == supply_energy_range_max then
		addGMMessage(string.format("Minimum of %i cannot exceed maximum of %i",supply_energy_range_max,supply_energy_range_max))
	else
		supply_energy_range_min = supply_energy_range_min + 100
	end
	setSupplyEnergy()
end
-----------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Nuke  --
-----------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -CUSTOM SUPPLY	F	setCustomSupply
-- -FROM NUKE		F	setCustomMissiles
-- 1-1=0			D	subtractANuke
-- 1+1=2			D	addANuke
function setSupplyNuke()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Custom Supply",setCustomSupply)
	addGMFunction("-From Nuke",setCustomMissiles)
	if supply_nuke_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_nuke_range_min,supply_nuke_range_min - 1),subtractANukeMin)
	end
	if supply_nuke_range_min < 20 then
		addGMFunction(string.format("Min %i+1=%i",supply_nuke_range_min,supply_nuke_range_min + 1),addANukeMin)
	end
	if supply_nuke_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_nuke_range_max,supply_nuke_range_max - 1),subtractANukeMax)
	end
	if supply_nuke_range_max < 20 then
		addGMFunction(string.format("Max %i+1=%i",supply_nuke_range_max,supply_nuke_range_max + 1),addANukeMax)
	end
end
function subtractANukeMin()
	supply_nuke_range_min = supply_nuke_range_min - 1
	setSupplyNuke()
end
function addANukeMin()
	if supply_nuke_range_min == supply_nuke_range_max then
		addGMMessage(string.format("Minimum nuke range %i cannot exceed maximum nuke range %i",supply_nuke_range_max,supply_nuke_range_max))
	else
		supply_nuke_range_min = supply_nuke_range_min + 1
	end
	setSupplyNuke()
end
function subtractANukeMax()
	if supply_nuke_range_max == supply_nuke_range_min then
		addGMMessage(string.format("Maximum nuke range %i cannot go below minimum nuke range %i",supply_nuke_range_max,supply_nuke_range_max))
	else
		supply_nuke_range_max = supply_nuke_range_max - 1
	end
	setSupplyNuke()
end
function addANukeMax()
	supply_nuke_range_max = supply_nuke_range_max + 1
	setSupplyNuke()
end
----------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > EMP  --
----------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -CUSTOM SUPPLY	F	setCustomSupply
-- -FROM EMP		F	setCustomMissiles
-- 1-1=0			D	subtractAnEMP
-- 1+1=2			D	addAnEMP
function setSupplyEMP()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Custom Supply",setCustomSupply)
	addGMFunction("-From EMP",setCustomMissiles)
	if supply_emp_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_emp_range_min,supply_emp_range_min - 1),subtractAnEMPMin)
	end
	if supply_emp_range_min < 20 then
		addGMFunction(string.format("Min %i+1=%i",supply_emp_range_min,supply_emp_range_min + 1),addAnEMPMin)
	end
	if supply_emp_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_emp_range_max,supply_emp_range_max - 1),subtractAnEMPMax)
	end
	if supply_emp_range_max < 20 then
		addGMFunction(string.format("Max %i+1=%i",supply_emp_range_max,supply_emp_range_max + 1),addAnEMPMax)
	end
end
function subtractAnEMPMin()
	supply_emp_range_min = supply_emp_range_min - 1
	setSupplyEMP()
end
function addAnEMPMin()
	if supply_emp_range_min == supply_emp_range_max then
		addGMMessage(string.format("Minimum EMP range of %i cannot exceed maximum EMP range %i",supply_emp_range_min,supply_emp_range_min))
	else
		supply_emp_range_min = supply_emp_range_min + 1
	end
	setSupplyEMP()
end
function subtractAnEMPMax()
	if supply_emp_range_min == supply_emp_range_max then
		addGMMessage(string.format("Maximum EMP range of %i cannot go below minimum EMP range of %i",supply_emp_range_min,supply_emp_range_min))
	else
		supply_emp_range_max = supply_emp_range_max - 1
	end
	setSupplyEMP()
end
function addAnEMPMax()
	supply_emp_range_max = supply_emp_range_max + 1
	setSupplyEMP()
end
-----------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Mine  --
-----------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -CUSTOM SUPPLY	F	setCustomSupply
-- -FROM MINE		F	setCustomMissiles
-- 2-1=1			D	subtractAMine
-- 2+1=3			D	addAMine
function setSupplyMine()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Custom Supply",setCustomSupply)
	addGMFunction("-From Mine",setCustomMissiles)
	if supply_mine_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_mine_range_min,supply_mine_range_min - 1),subtractAMineMin)
	end
	if supply_mine_range_min < 20 then
		addGMFunction(string.format("Min %i+1=%i",supply_mine_range_min,supply_mine_range_min + 1),addAMineMin)
	end
	if supply_mine_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_mine_range_max,supply_mine_range_max - 1),subtractAMineMax)
	end
	if supply_mine_range_max < 20 then
		addGMFunction(string.format("Max %i+1=%i",supply_mine_range_max,supply_mine_range_max + 1),addAMineMax)
	end
end
function subtractAMineMin()
	supply_mine_range_min = supply_mine_range_min - 1
	setSupplyMine()
end
function addAMineMin()
	if supply_mine_range_min == supply_mine_range_max then
		addGMMessage(string.format("Minimum mine range of %i cannot exceed maximum mine range of %i",supply_mine_range_max,supply_mine_range_max))
	else
		supply_mine_range_min = supply_mine_range_min + 1
	end
	setSupplyMine()
end
function subtractAMineMax()
	if supply_mine_range_min == supply_mine_range_max then
		addGMMessage(string.format("Maximum mine range of %i cannot go below minimum mine range of %i",supply_mine_range_max,supply_mine_range_max))
	else
		supply_mine_range_max = supply_mine_range_max - 1
	end
	setSupplyMine()
end
function addAMineMax()
	supply_mine_range_max = supply_mine_range_max + 1
	setSupplyMine()
end
-------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Homing  --
-------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -CUSTOM SUPPLY	F	setCustomSupply
-- -FROM HOMING		F	setCustomMissiles
-- 4-1=3			D	subtractAHoming
-- 4+1=5			D	addAHoming
function setSupplyHoming()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Custom Supply",setCustomSupply)
	addGMFunction("-From Homing",setCustomMissiles)
	if supply_homing_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_homing_range_min,supply_homing_range_min - 1),subtractAHomingMin)
	end
	if supply_homing_range_min < 20 then
		addGMFunction(string.format("Min %i+1=%i",supply_homing_range_min,supply_homing_range_min + 1),addAHomingMin)
	end
	if supply_homing_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_homing_range_max,supply_homing_range_max - 1),subtractAHomingMax)
	end
	if supply_homing_range_max < 20 then
		addGMFunction(string.format("Max %i+1=%i",supply_homing_range_max,supply_homing_range_max + 1),addAHomingMax)
	end
end
function subtractAHomingMin()
	supply_homing_range_min = supply_homing_range_min - 1
	setSupplyHoming()
end
function addAHomingMin()
	if supply_homing_range_min == supply_homing_range_max then
		addGMMessage(string.format("Minimum homing range of %i cannot exceed maximum homing range of %i",supply_homing_range_min,supply_homing_range_min))
	else
		supply_homing_range_min = supply_homing_range_min + 1
	end
	setSupplyHoming()
end
function subtractAHomingMax()
	if supply_homing_range_min == supply_homing_range_max then
		addGMMessage(string.format("Maximum homing range of %i cannot go below minimum homing range of %i",supply_homing_range_min,supply_homing_range_min))
	else
		supply_homing_range_max = supply_homing_range_max - 1
	end
	setSupplyHoming()
end
function addAHomingMax()
	supply_homing_range_max = supply_homing_range_max + 1
	setSupplyHoming()
end
-----------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > HVLI  --
-----------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -CUSTOM SUPPLY	F	setCustomSupply
-- -FROM HVLI		F	setCustomMissiles
-- 0+1=1			D	addAnHVLI
function setSupplyHVLI()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-Custom Supply",setCustomSupply)
	addGMFunction("-From HVLI",setCustomMissiles)
	if supply_hvli_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_hvli_range_min,supply_hvli_range_min - 1),subtractAnHVLIMin)
	end
	if supply_hvli_range_min < 20 then
		addGMFunction(string.format("Min %i+1=%i",supply_hvli_range_min,supply_hvli_range_min + 1),addAnHVLIMin)
	end
	if supply_hvli_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_hvli_range_max,supply_hvli_range_max - 1),subtractAnHVLIMax)
	end
	if supply_hvli_range_max < 20 then
		addGMFunction(string.format("Max %i+1=%i",supply_hvli_range_max,supply_hvli_range_max + 1),addAnHVLIMax)
	end
end
function subtractAnHVLIMin()
	supply_hvli_range_min = supply_hvli_range_min - 1
	setSupplyHVLI()
end
function addAnHVLIMin()
	if supply_hvli_range_min == supply_hvli_range_max then
		addGMMessage(string.format("Minimum HVLI range of %i cannot exceed maximum HVLI range of %i",supply_hvli_range_min,supply_hvli_range_min))
	else
		supply_hvli_range_min = supply_hvli_range_min + 1
	end
	setSupplyHVLI()
end
function subtractAnHVLIMax()
	if supply_hvli_range_min == supply_hvli_range_max then
		addGMMessage(string.format("Maximum HVLI range of %i cannot go below minimum HVLI range of %i",supply_hvli_range_min,supply_hvli_range_min))
	else
		supply_hvli_range_max = supply_hvli_range_max - 1
	end
	setSupplyHVLI()
end
function addAnHVLIMax()
	supply_hvli_range_max = supply_hvli_range_max + 1
	setSupplyHVLI()
end
------------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Repair Crew  --
------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -DROP POINT			F	dropPoint
-- -FROM REPAIR CREW	F	setCustomSupply
-- 0+1=1				D	addARepairCrew
function setSupplyRepairCrew()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Repair Crew",setCustomSupply)
	if supply_repair_crew_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_repair_crew_range_min,supply_repair_crew_range_min - 1),subtractARepairCrewMin)
	end
	if supply_repair_crew_range_min < 3 then
		addGMFunction(string.format("Min %i+1=%i",supply_repair_crew_range_min,supply_repair_crew_range_min + 1),addARepairCrewMin)
	end
	if supply_repair_crew_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_repair_crew_range_max,supply_repair_crew_range_max - 1),subtractARepairCrewMax)
	end
	if supply_repair_crew_range_max < 3 then
		addGMFunction(string.format("Max %i+1=%i",supply_repair_crew_range_max,supply_repair_crew_range_max + 1),addARepairCrewMax)
	end
end
function subtractARepairCrewMin()
	supply_repair_crew_range_min = supply_repair_crew_range_min - 1
	setSupplyRepairCrew()
end
function addARepairCrewMin()
	if supply_repair_crew_range_min == supply_repair_crew_range_max then
		addGMMessage(string.format("Minimum repair crew range of %i cannot exceed maximum repair crew range of %i",supply_repair_crew_range_min,supply_repair_crew_range_min))
	else
		supply_repair_crew_range_min = supply_repair_crew_range_min + 1
	end
	setSupplyRepairCrew()
end
function subtractARepairCrewMax()
	if supply_repair_crew_range_min == supply_repair_crew_range_max then
		addGMMessage(string.format("Maximum repair crew range of %i cannot go below minimum repair crew range of %i",supply_repair_crew_range_min,supply_repair_crew_range_min))
	else
		supply_repair_crew_range_max = supply_repair_crew_range_max - 1
	end
	setSupplyRepairCrew()
end
function addARepairCrewMax()
	supply_repair_crew_range_max = supply_repair_crew_range_max + 1
	setSupplyRepairCrew()
end
--------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Coolant  --
--------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -DROP POINT		F	dropPoint
-- -FROM COOLANT	F	setCustomSupply
-- 0+1=1			D	addCoolant
function setSupplyCoolant()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Coolant",setCustomSupply)
	if supply_coolant_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_coolant_range_min,supply_coolant_range_min - 1),subtractCoolantMin)
	end
	if supply_coolant_range_min < 5 then
		addGMFunction(string.format("Min %i+1=%i",supply_coolant_range_min,supply_coolant_range_min + 1),addCoolantMin)
	end
	if supply_coolant_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_coolant_range_max,supply_coolant_range_max - 1),subtractCoolantMax)
	end
	if supply_coolant_range_max < 5 then
		addGMFunction(string.format("Max %i+1=%i",supply_coolant_range_max,supply_coolant_range_max + 1),addCoolantMax)
	end
end
function subtractCoolantMin()
	supply_coolant_range_min = supply_coolant_range_min - 1
	setSupplyCoolant()
end
function addCoolantMin()
	if supply_coolant_range_min == supply_coolant_range_max then
		addGMMessage(string.format("Minimum coolant range of %i cannot exceed maximum coolant range of %i",supply_coolant_range_min,supply_coolant_range_min))
	else
		supply_coolant_range_min = supply_coolant_range_min + 1
	end
	setSupplyCoolant()
end
function subtractCoolantMax()
	if supply_coolant_range_min == supply_coolant_range_max then
		addGMMessage(string.format("Maximum coolant range of %i cannot go below minimum coolant range of %i",supply_coolant_range_min,supply_coolant_range_min))
	else
		supply_coolant_range_max = supply_coolant_range_max - 1
	end
	setSupplyCoolant()
end
function addCoolantMax()
	supply_coolant_range_max = supply_coolant_range_max + 1
	setSupplyCoolant()
end
function setSupplyProbes()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Probes",setCustomSupply)
	if supply_probes_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_probes_range_min,supply_probes_range_min - 1), function()
			supply_probes_range_min = supply_probes_range_min - 1
			setSupplyProbes()
		end)
	end
	if supply_probes_range_min < 50 then
		addGMFunction(string.format("Min %i+1=%i",supply_probes_range_min,supply_probes_range_min + 1), function()
			if supply_probes_range_min == supply_probes_range_max then
				addGMMessage(string.format("Minimum probes range of %i cannot exceed maximum probe range of %i",supply_probes_range_min,supply_probes_range_min))
			else
				supply_probes_range_min = supply_probes_range_min + 1
			end
			setSupplyProbes()
		end)
	end
	if supply_probes_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_probes_range_max,supply_probes_range_max - 1), function()
			if supply_probes_range_min == supply_probes_range_max then
				addGMMessage(string.format("Maximum probes range of %i cannot go below minimum probe range of %i",supply_probes_range_min,supply_probes_range_min))
			else
				supply_probes_range_max = supply_probes_range_max - 1
			end
			setSupplyProbes()
		end)
	end
	if supply_probes_range_max < 50 then
		addGMFunction(string.format("Max %i+1=%i",supply_probes_range_max,supply_probes_range_max + 1), function()
			supply_probes_range_max = supply_probes_range_max + 1
			setSupplyProbes()
		end)
	end
end
function setSupplyArmor()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Armor",setCustomSupply)
	if supply_armor_range_min > 0 then
		addGMFunction(string.format("Min %i-1=%i",supply_armor_range_min,supply_armor_range_min - 1), function()
			supply_armor_range_min = supply_armor_range_min - 1
			setSupplyArmor()
		end)
	end
	if supply_armor_range_min < 50 then
		addGMFunction(string.format("Min %i+1=%i",supply_armor_range_min,supply_armor_range_min + 1), function()
			if supply_armor_range_min == supply_armor_range_max then
				addGMMessage(string.format("Minimum armor range of %i cannot exceed the maximum armor range of %i",supply_armor_range_min,supply_armor_range_min))
			else
				supply_armor_range_min = supply_armor_range_min + 1
			end
			setSupplyArmor()
		end)
	end
	if supply_armor_range_max > 0 then
		addGMFunction(string.format("Max %i-1=%i",supply_armor_range_max,supply_armor_range_max - 1), function()
			if supply_armor_range_min == supply_armor_range_max then
				addGMMessage(string.format("Maximum armor range of %i cannot go below the minimum armor range of %i",supply_armor_range_min,supply_armor_range_min))
			else
				supply_armor_range_max = supply_armor_range_max - 1
			end
			setSupplyArmor()
		end)
	end
	if supply_armor_range_max < 50 then
		addGMFunction(string.format("Max %i+1=%i",supply_armor_range_max,supply_armor_range_max + 1), function()
			supply_armor_range_max = supply_armor_range_max + 1
			setSupplyArmor()
		end)
	end
end
--------------------------------------------------------------
--	Artifacts > Drop Point > Custom Supply Point > Near To  --
--------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- -FROM SUPPLY NEAR TO		F	setCustomSupply
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createSupplyAway
function supplyNearTo()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Drop Point",dropPoint)
	addGMFunction("-From Supply Near To",setCustomSupply)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("Nothing selected to relate to supply drop. No action taken")
		return
	end
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	local nearbyObjects = getObjectsInRadius(nearx, neary, 20000)
	callingNearTo = supplyNearTo
	GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetCreateDirection),setCreateDirection)
	GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(string.format("+%s",GMSetCreateDistance),setCreateDistance)
	GMCreateSupplyAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreateSupplyAway,createSupplyAway)
end
function createSupplyAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	supplyCreation(nearx, neary, sox, soy)
end
function supplyCreation(originx, originy, vectorx, vectory)
	local supplyEnergy = math.random(supply_energy_range_min,supply_energy_range_max)
	local supplyJumpCharge = math.random(supply_jump_charge_energy_range_min,supply_jump_charge_energy_range_max)
	local supplyNuke = math.random(supply_nuke_range_min,supply_nuke_range_max)
	local supplyEMP = math.random(supply_emp_range_min,supply_emp_range_max)
	local supplyMine = math.random(supply_mine_range_min,supply_mine_range_max)
	local supplyHoming = math.random(supply_homing_range_min,supply_homing_range_max)
	local supplyHVLI = math.random(supply_hvli_range_min,supply_hvli_range_max)
	local supplyRepairCrew = math.random(supply_repair_crew_range_min,supply_repair_crew_range_max)
	local supplyCoolant = math.random(supply_coolant_range_min,supply_coolant_range_max)
	local supplyProbes = math.random(supply_probes_range_min,supply_probes_range_max)
	local supplyArmor = math.random(supply_armor_range_min,supply_armor_range_max)
	createSupplyDrop({x = originx+vectorx, y = originy+vectory},supplyEnergy,supplyHoming,supplyNuke,supplyMine,supplyEMP,supplyHVLI,supplyRepairCrew,supplyCoolant,supplyProbes,supplyArmor,supplyJumpCharge)
end
function createSupplyDrop(location,energy,homing,nuke,mine,emp,hvli,repairCrew,coolant,probes,armour,jump_charge)
	print(location.x,location.y,energy,homing,nuke,mine,emp,hvli,repairCrew,coolant,probes,armour)
	local customSupplyDrop = SupplyDrop():setEnergy(energy):setFaction("Human Navy"):setPosition(location.x,location.y)
	customSupplyDrop:setWeaponStorage("Nuke",nuke)
	customSupplyDrop:setWeaponStorage("EMP",emp)
	customSupplyDrop:setWeaponStorage("Homing",homing)
	customSupplyDrop:setWeaponStorage("Mine",mine)
	customSupplyDrop:setWeaponStorage("HVLI",hvli)
	if repairCrew > 0 then
		customSupplyDrop.repairCrew = repairCrew
	end
	if coolant > 0 then
		customSupplyDrop.coolant = coolant
	end
	if probes > 0 then
		customSupplyDrop.probes = probes
	end
	if armour > 0 then
		customSupplyDrop.armor = armour
	end
	if jump_charge ~= nil then
		if jump_charge > 0 then
			customSupplyDrop.jump_charge = jump_charge
		end
	end
	local supplyLabel = ""
	local wordy_label = ""
	if energy > 0 then
		supplyLabel = supplyLabel .. string.format("B%i ",energy)
		wordy_label = wordy_label .. string.format("Battery Power:%i ",energy)
	end
	if nuke > 0 then
		supplyLabel = supplyLabel .. string.format("N%i ",nuke)
		wordy_label = wordy_label .. string.format("Nukes:%i ",nuke)
	end
	if emp > 0 then
		supplyLabel = supplyLabel .. string.format("E%i ",emp)
		wordy_label = wordy_label .. string.format("EMPs:%i ",emp)
	end
	if mine > 0 then
		supplyLabel = supplyLabel .. string.format("M%i ",mine)
		wordy_label = wordy_label .. string.format("Mines:%i ",mine)
	end
	if homing > 0 then
		supplyLabel = supplyLabel .. string.format("H%i ",homing)
		wordy_label = wordy_label .. string.format("Homing Missiles:%i ",homing)
	end
	if hvli > 0 then
		supplyLabel = supplyLabel .. string.format("L%i ",hvli)
		wordy_label = wordy_label .. string.format("High Velocity Lead Impactors:%i ",hvli)
	end
	if repairCrew > 0 then
		supplyLabel = supplyLabel .. string.format("R%i ",repairCrew)
		wordy_label = wordy_label .. string.format("Robotic Repair Crew:%i ",repairCrew)
	end
	if coolant > 0 then
		supplyLabel = supplyLabel .. string.format("C%i ",coolant)
		wordy_label = wordy_label .. string.format("Coolant:%i ",coolant)
	end
	if probes > 0 then
		supplyLabel = supplyLabel .. string.format("P%i ",probes)
		wordy_label = wordy_label .. string.format("Probes:%i ",probes)
	end
	if armour > 0 then
		supplyLabel = supplyLabel .. string.format("A%i ",armour)
		wordy_label = wordy_label .. string.format("Armor:%i ",armour)
	end
	if jump_charge > 0 then
		supplyLabel = supplyLabel .. string.format("J%i ",math.floor(jump_charge/1000))
		wordy_label = wordy_label .. string.format("Jump Charge:%ik ",math.floor(jump_charge/1000))
	end
	-- this really wants to be a function argument, but that will want enum support for the web interface ideally
	-- aka this is on the list but cant be done right now
--	print(supplyLabel,wordy_label)
	if supply_drop_info == "Label" then
		customSupplyDrop:setCallSign(supplyLabel)
	elseif supply_drop_info == "Scan" then
		customSupplyDrop:setScanningParameters(2,2)
		customSupplyDrop:setDescriptionForScanState("notscanned","Supply Drop")
		customSupplyDrop:setDescriptionForScanState("friendorfoeidentified","Supply Drop")
		customSupplyDrop:setDescriptionForScanState("simplescan",supplyLabel)
		customSupplyDrop:setDescriptionForScanState("fullscan",wordy_label)
	end
	customSupplyDrop:onPickUp(supplyPickupProcess)
	return customSupplyDrop
end
describeFunction(	
	"createSupplyDrop",
	"create a custom supply drop at a location",
	{	
		{"location","position"},
		{"energy","number", {call = "irandom", min = 0, max = 500}, min = 0},
		{"homing","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"nuke","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"mine","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"emp","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"hvli","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"repairCrew","number", {call = "irandom", min = 0, max = 1}, min = 0},
		{"coolant","number", {call = "irandom", min = 0, max = 2}, min = 0},
		{"probes","number", {call = "irandom", min = 0, max = 5}, min = 0},
		{"armour","number", {call = "irandom", min = 0, max = 30}, min = 0},
	}
)
function supplyPickupProcess(self, player)
	if self.repairCrew ~= nil then
		player:setRepairCrewCount(player:getRepairCrewCount() + self.repairCrew)
	end
	if self.coolant ~= nil then
		player:setMaxCoolant(player:getMaxCoolant() + self.coolant)
	end
	if self.probes ~= nil then
		player:setScanProbeCount(math.min(player:getScanProbeCount() + self.probes,player:getMaxScanProbeCount()))
	end
	if self.armor ~= nil then
		player:setHull(math.min(player:getHull() + self.armor,player:getHullMax()))
	end
	if player:hasJumpDrive() then
		if self.jump_charge ~= nil then
			player:setJumpDriveCharge(player:getJumpDriveCharge() + self.jump_charge)
		end
	end
end
----------------------------------------
--	Artifacts > Drop Points > Attach  --
----------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM ATTACH		F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- +SELECT DROP POINT		F	attachArtifact
-- or list of CCPU Ships to attach
function attachArtifact()
	clearGMFunctions()
	addGMFunction("-Main from attach",initialGMFunctions)
	addGMFunction("-Drop point",dropPoint)
	local object_list = getGMSelection()
	if #object_list < 1 or #object_list > 1 then
		addGMFunction("+Select drop point",attachArtifact)
		return
	end
	local current_selected_object = object_list[1]
	if not isObjectType(current_selected_object,"Artifact") and not isObjectType(current_selected_object,"SupplyDrop") then
		addGMFunction("+Select drop point",attachArtifact)
	else
		if isObjectType(current_selected_object,"Artifact") then
			if escapePodList[current_selected_object:getCallSign()] == nil then
				addGMFunction("+Select drop point",attachArtifact)
				return
			end
		else	--supply drop
			if current_selected_object:getCallSign() == nil then
				addGMFunction("+Select drop point",attachArtifact)
				return
			end
		end
		local pod_x, pod_y = current_selected_object:getPosition()
		local nearby_objects = getObjectsInRadius(pod_x, pod_y, 40000)
		cpu_ship_list = {}
		for i=1,#nearby_objects do
			local temp_object = nearby_objects[i]
			if isObjectType(temp_object,"CpuShip") then
				if distance_diagnostic then
					print("distance_diagnostic 11 temp_object:",temp_object,"current_selected_object:",current_selected_object)
				end		
				local ship_distance = distance(temp_object,current_selected_object)
				table.insert(cpu_ship_list,{distance = ship_distance, ship = temp_object})
			end
		end
		if #cpu_ship_list > 0 then
			table.sort(cpu_ship_list,function(a,b)
				return a.distance < b.distance
			end)
			if #cpu_ship_list >= 1 then
				addGMFunction(string.format("Attach to %s",cpu_ship_list[1].ship:getCallSign()), function()
					local attach_target_x, attach_target_y = cpu_ship_list[1].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(current_selected_object,cpu_ship_list[1].ship,relative_attach_x,relative_attach_y)
				end)
			end
			if #cpu_ship_list >= 2 then
				addGMFunction(string.format("Attach to %s",cpu_ship_list[2].ship:getCallSign()), function()
					local attach_target_x, attach_target_y = cpu_ship_list[2].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(current_selected_object,cpu_ship_list[2].ship,relative_attach_x,relative_attach_y)
				end)
			end
			if #cpu_ship_list >= 3 then
				addGMFunction(string.format("Attach to %s",cpu_ship_list[3].ship:getCallSign()), function()
					local attach_target_x, attach_target_y = cpu_ship_list[3].ship:getPosition()
					local relative_attach_x = pod_x - attach_target_x
					local relative_attach_y = pod_y - attach_target_y
					update_system:addAttachedUpdate(current_selected_object,cpu_ship_list[3],relative_attach_x,relative_attach_y)
				end)
			end
		else
			if current_selected_object_type == "Artifact" then
				addGMMessage("No CPU Ships within 40 units of selected escape pod")
			else
				addGMMessage("No CPU Ships within 40 units of selected supply drop")
			end
			addGMFunction("+Select drop point",attachArtifact)
		end
	end
end
----------------------------------------
--	Artifacts > Drop Points > Detach  --
----------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM DETACH		F	initialGMFunctions
-- -DROP POINT				F	dropPoint
-- +SELECT DROP POINT		F	detachArtifact
function detachArtifact()
	clearGMFunctions()
	addGMFunction("-Main from detach",initialGMFunctions)
	addGMFunction("-Drop point",dropPoint)
	local object_list = getGMSelection()
	if #object_list < 1 or #object_list > 1 then
		addGMFunction("+Select drop point",detachArtifact)
		return
	end
	local current_selected_object = object_list[1]
	if not isObjectType(current_selected_object,"Artifact") and not isObjectType(current_selected_object,"SupplyDrop") then
		addGMFunction("+Select drop point",detachArtifact)
	else
		if isObjectType(current_selected_object,"Artifact") then
			if escapePodList[current_selected_object:getCallSign()] == nil then
				addGMFunction("+Select drop point",detachArtifact)
				return
			end
		else	--supply drop
			if current_selected_object:getCallSign() == nil then
				addGMFunction("+Select drop point",detachArtifact)
				return
			end
		end
		update_system:removeUpdateNamed(current_selected_object,"attached")
	end
end
--	********************************************************  --
--	****				Artifacts Scan Clue				****  --
--	********************************************************  --
-----------------------------------------------------
--  Artifacts > Scan Clue > Unscanned Description  --
-----------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -FROM UNSCAN DESC	F	scanClue
-- Buttons listing unscanned choices in table unscannedClues defined in constants
function setUnscannedDescription()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Unscan Desc",scanClue)
	for uck, ucv in pairs(unscannedClues) do
		local GMShortUnscannedClue = uck
		if uck == unscannedClueKey then
			GMShortUnscannedClue = uck .. "*"
		end
		addGMFunction(GMShortUnscannedClue,function()
			unscannedClueKey = uck
			setUnscannedDescription()
		end)
	end
end
---------------------------------------------------
--	Artifacts > Scan Clue > Scanned Description  --
---------------------------------------------------
-- -MAIN			F	initialGMFunctions
-- -FROM SCAN DESC	F	scanClue
-- +NONE			D	scannedClue1
-- +NONE			D	scannedClue2
-- +NONE			D	scannedClue3
-- +NONE			D	scannedClue4
-- +NONE			D	scannedClue5
function setScannedDescription()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Scan Desc",scanClue)
	addGMFunction(string.format("+%s",scannedClueKey1),scannedClue1)
	addGMFunction(string.format("+%s",scannedClueKey2),scannedClue2)
	addGMFunction(string.format("+%s",scannedClueKey3),scannedClue3)
	addGMFunction(string.format("+%s",scannedClueKey4),scannedClue4)
	addGMFunction(string.format("+%s",scannedClueKey5),scannedClue5)
end
------------------------------------------------------------------------
--	Artifacts > Scan Clue > Scan Complexity (Set How Many Scan Bars)  --
------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- COMPLEXITY: 1*	*	inline		asterisk = current selection
-- COMPLEXITY: 2	*	inline
-- COMPLEXITY: 3	*	inline
-- COMPLEXITY: 4	*	inline
function setScanComplexity()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	for i=1,4 do
		local GMSetScanComplexityIndex = "Complexity: " .. i
		if scanComplexity == i then
			GMSetScanComplexityIndex = "Complexity: " .. i .. "*"
		end
		addGMFunction(GMSetScanComplexityIndex, function()
			scanComplexity = i
			setScanComplexity()
		end)
	end
end
----------------------------------------------------------------------
--	Artifacts > Scan Clue > Scan Depth (Set How Many Scan Screens)  --
----------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- DEPTH: 1*		*	inline		asterisk = current selection
-- DEPTH: 2			*	inline
-- DEPTH: 3			*	inline
-- DEPTH: 4			*	inline
function setScanDepth()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	for i=1,8 do
		local GMSetScanDepthIndex = "Depth: " .. i
		if scanDepth == i then
			GMSetScanDepthIndex = "Depth: " .. i .. "*"
		end
		addGMFunction(GMSetScanDepthIndex, function()
			scanDepth = i
			setScanDepth()
		end)
	end
end
-----------------------------------------------------------------
--	Artifacts > Scan Clue > At Click (Set scan clue location)  --
-----------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FRM CLUE LOC		F	initialGMFunctions
-- -TO SCAN CLUE			F	scanClue
-- AT CLICK*				*	inline
-- NEAR TO					*	inline
function setScanClueLocation()
	clearGMFunctions()
	addGMFunction("-Main frm Clue Loc",initialGMFunctions)
	addGMFunction("-To Scan Clue",scanClue)
	local button_label = "At Click"
	if scan_clue_location == "At Click" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		scan_clue_location = "At Click"
		scanClue()
	end)
	button_label = "Near To"
	if scan_clue_location == "Near To" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		scan_clue_location = "Near To"
		scanClue()
	end)
end
----------------------------------------
--	Artifacts > Scan Clue >  Near To  --
----------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -FROM SCAN NEAR TO		F	scanClue
-- +90 DEGREES				D	setCreateDirection
-- +30 UNITS				D	setCreateDistance
-- CREATE AT 90 DEG, 30U	D	createScanClueAway
function scanClueNearTo()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Scan Near To",scanClue)
	local objectList = getGMSelection()
	if #objectList < 1 then
		addGMMessage("You need to select something. No action taken")
		return
	end
	nearx = 0
	neary = 0
	if #objectList > 1 then
		nearx, neary = centerOfSelected(objectList)
	else
		nearx, neary = objectList[1]:getPosition()	
	end
	--print(string.format("nearx: %.1f, neary: %.1f",nearx,neary))
	callingNearTo = scanClueNearTo
	GMSetCreateDirection = createDirection .. " Degrees"
	addGMFunction(string.format("+%s",GMSetCreateDirection),setCreateDirection)
	GMSetCreateDistance = createDistance .. " Units"
	addGMFunction(string.format("+%s",GMSetCreateDistance),setCreateDistance)
	GMCreateScanClueAway = "Create at " .. createDirection .. " Deg, " .. createDistance .. "U"
	addGMFunction(GMCreateScanClueAway,createScanClueAway)
end
function createScanClueAway()
	local angle = createDirection + 270
	if angle > 360 then 
		angle = angle - 360
	end
	local sox, soy = vectorFromAngle(angle,createDistance*1000)
	scanClueCreation(nearx, neary, sox, soy)
end
function scanClueCreation(originx, originy, vectorx, vectory, associatedObjectName)
	artifactCounter = artifactCounter + 1
	artifactNumber = artifactNumber + math.random(1,5)
	local randomPrefix = string.char(math.random(65,90))
	local medicCallSign = string.format("%s%i",randomPrefix,artifactNumber)
	local unscannedDescription = unscannedClues[unscannedClueKey]
	local scannedDescription = ""
	if scannedClues1[scannedClueKey1] ~= nil and scannedClues1[scannedClueKey1] ~= "None" then
		scannedDescription = scannedDescription .. scannedClues1[scannedClueKey1] .. " "
	end
	if scannedClues2[scannedClueKey2] ~= nil and scannedClues2[scannedClueKey2] ~= "None" then
		scannedDescription = scannedDescription .. scannedClues2[scannedClueKey2] .. " "
	end
	if scannedClues3[scannedClueKey3] ~= nil and scannedClues3[scannedClueKey3] ~= "None" then
		scannedDescription = scannedDescription .. scannedClues3[scannedClueKey3] .. " "
	end
	if scannedClues4[scannedClueKey4] ~= nil and scannedClues4[scannedClueKey4] ~= "None" then
		scannedDescription = scannedDescription .. scannedClues4[scannedClueKey4] .. " "
	end
	if scannedClues5[scannedClueKey5] ~= nil and scannedClues5[scannedClueKey5] ~= "None" then
		scannedDescription = scannedDescription .. scannedClues5[scannedClueKey5] .. " "
	end
	local scanCluePoint = Artifact():setPosition(originx+vectorx,originy+vectory):setScanningParameters(scanComplexity,scanDepth):setRadarSignatureInfo(random(0.5,1),random(0.5,1),random(0.5,1)):setDescriptions(unscannedDescription,scannedDescription)
	if scan_clue_retrievable then
		scanCluePoint:allowPickup(true)
	else
		scanCluePoint:allowPickup(false)
	end
	if scan_clue_expire then
		update_system:addTimeToLiveUpdate(scanCluePoint)
	end
end
--	********************************************************  --
--	****				Artifacts Set Model				****  --
--	********************************************************  --
--------------------------------------
--	Artifacts > Set Model > Normal  --
--------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM NORMAL			F	setArtifactModel
-- ARTIFACT1			D	inline
-- ARTIFACT2			D	inline
-- ARTIFACT3			D	inline
-- ARTIFACT4			D	inline
-- ARTIFACT5			D	inline
-- ARTIFACT6			D	inline
-- ARTIFACT7			D	inline
-- ARTIFACT8			D	inline
function normalArtifactModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Normal",setArtifactModel)
	local normal_models = {
		"artifact1",
		"artifact2",
		"artifact3",
		"artifact4",
		"artifact5",
		"artifact6",
		"artifact7",
		"artifact8",		
	}
	for _, model_name in ipairs(normal_models) do
		addGMFunction(model_name,function()
			local object_list = getGMSelection()
			if object_list == nil or #object_list ~= 1 then
				fiddleWithArtifacts()
			else
				if not isObjectType(object_list[1],"Artifact") then
					fiddleWithArtifacts()
				end
			end
			object_list[1]:setModel(model_name)
			addGMMessage(string.format("Artifact model set to %s",model_name))
			setArtifactModel()
		end)
	end
end
---------------------------------------
--	Artifacts > Set Model > Utility  --
---------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM UTILITY		F	setArtifactModel
-- SENSORBUOYMKI		D	inline
-- SENSORBUOYMKII		D	inline
-- SENSORBUOYMKIII		D	inline
-- AMMO_BOX				D	inline
-- SHIELD_GENERATOR		D	inline
function utilityArtifactModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
		end
	end
	clearGMFunctions()
	addGMFunction("-From Utility",setArtifactModel)
	local utility_models = {
		"SensorBuoyMKI",
		"SensorBuoyMKII",
		"SensorBuoyMKIII",
		"ammo_box",
		"shield_generator",
	}
	for _, model_name in ipairs(utility_models) do
		addGMFunction(model_name,function()
			local object_list = getGMSelection()
			if object_list == nil or #object_list ~= 1 then
				fiddleWithArtifacts()
			else
				if not isObjectType(object_list[1],"Artifact") then
					fiddleWithArtifacts()
				end
			end
			object_list[1]:setModel(model_name)
			addGMMessage(string.format("Artifact model set to %s",model_name))
			setArtifactModel()
		end)
	end
end
---------------------------------------
--	Artifacts > Set Model > Station  --
---------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM STATION		F	setArtifactModel
-- SPACE_STATION_4		D	inline
-- SPACE_STATION_3		D	inline
-- SPACE_STATION_2		D	inline
-- SPACE_STATION_1		D	inline
function stationArtifactModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
		end
	end
	clearGMFunctions()
	addGMFunction("-From Station",setArtifactModel)
	local station_models = {
		"space_station_4",
		"space_station_3",
		"space_station_2",
		"space_station_1",
	}
	for _, model_name in ipairs(station_models) do
		addGMFunction(model_name,function()
			local object_list = getGMSelection()
			if #object_list ~= 1 then
				fiddleWithArtifacts()
			else
				if not isObjectType(object_list[1],"Artifact") then
					fiddleWithArtifacts()
				end
			end
			object_list[1]:setModel(model_name)
			addGMMessage(string.format("Artifact model set to %s",model_name))
			setArtifactModel()
		end)
	end
end
------------------------------------
--	Artifacts > Set Model > Ship  --
------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM SHIP			F	setArtifactModel
-- +MISC				F	miscShipModels
-- +BATTLESHIPS			F	battleshipShipModels
-- +KTLITANS			F	ktlitanShipModels
-- +SMALL FRIGATES		F	smallFrigateShipModels
-- +COLOR GROUPS		F	colorGroupShipModels
-- +TRANSPORTS			F	transportShipModels
function shipArtifactModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
		end
	end
	clearGMFunctions()
	addGMFunction("-From Ship",setArtifactModel)
	addGMFunction("+Misc",miscShipModels)
	addGMFunction("+Battleships",battleshipShipModels)
	addGMFunction("+Ktlitans",ktlitanShipModels)
	addGMFunction("+Small Frigates",smallFrigateShipModels)
	addGMFunction("+Color Groups",colorGroupShipModels)
	addGMFunction("+Transports",transportShipModels)
end
--	************************************************************  --
--	****				Artifacts Set Model	Ship			****  --
--	************************************************************  --
-------------------------------------------
--	Artifacts > Set Model > Ship > Misc  --
-------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM MISC			F	shipArtifactModels
-- PLAYER FIGHTER		D	inline
-- ADV. STRIKER			D	inline
-- TUG					D	inline
-- SPACE_FRIGATE_6		D	inline
-- MISSILE CRUISER		D	inline
function miscShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
		end
	end
	clearGMFunctions()
	addGMFunction("-From Misc",shipArtifactModels)
	local misc_ship_models = {
		{model_name = "small_fighter_1", game_name = {"Player Fighter"}},
		{model_name = "dark_fighter_6", game_name = {"Adv. Striker"}},
		{model_name = "space_tug", game_name = {"Tug"}},
		{model_name = "space_frigate_6", game_name = {"Not Used"}},
		{model_name = "space_cruiser_4", game_name = {"Missile Cruiser","Weapons platfrom","Player Missile Cr."}},
	}
	addShipModelButtons(misc_ship_models)
end
--------------------------------------------------
--	Artifacts > Set Model > Ship > Battleships  --
--------------------------------------------------
-- Button Text					   FD*	Related Function(s)
-- -FROM BATTLESHIPS				F	shipArtifactModels
-- ATLANTIS X23						D	inline
-- BATTLESHIP_DESTROYER_2_UPGRADED	D	inline
-- BLOCKADE RUNNER					D	inline
-- GUNSHIP							D	inline
-- PLAYER CRUISER					D	inline
-- BATTLESTATION					D	inline
function battleshipShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Battleships",shipArtifactModels)
	local battleship_ship_models = {
		{model_name = "battleship_destroyer_1_upgraded", game_name = {"Atlantis X23","Atlantis","Dreadnought"}},
		{model_name = "battleship_destroyer_2_upgraded", game_name = {"Not Used"}},
		{model_name = "battleship_destroyer_3_upgraded", game_name = {"Blockade Runner"}},
		{model_name = "battleship_destroyer_4_upgraded", game_name = {"Gunship","Starhammer II"}},
		{model_name = "battleship_destroyer_5_upgraded", game_name = {"Player Cruiser"}},
		{model_name = "Ender Battlecruiser", game_name = {"Battlestation","Ender"}},
	}
	addShipModelButtons(battleship_ship_models)
end
-----------------------------------------------
--	Artifacts > Set Model > Ship > Ktlitans  --
-----------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM KTLITANS		F	shipArtifactModels
-- KTLITAN FIGHTER		D	inline
-- KTLITAN BREAKER		D	inline
-- KTLITAN WORKER		D	inline
-- KTLITAN DRONE		D	inline
-- KTLITAN FEEDER		D	inline
-- KTLITAN SCOUT		D	inline
-- KTLITAN DESTROYER	D	inline
-- KTLITAN QUEEN		D	inline
function ktlitanShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Ktlitans",shipArtifactModels)
	local ktlitan_ship_models = {
		{model_name = "sci_fi_alien_ship_1", game_name = {"Ktlitan Fighter"}},
		{model_name = "sci_fi_alien_ship_2", game_name = {"Ktlitan Breaker"}},
		{model_name = "sci_fi_alien_ship_3", game_name = {"Ktlitan Worker"}},
		{model_name = "sci_fi_alien_ship_4", game_name = {"Ktlitan Drone"}},
		{model_name = "sci_fi_alien_ship_5", game_name = {"Ktlitan Feeder"}},
		{model_name = "sci_fi_alien_ship_6", game_name = {"Ktlitan Scout"}},
		{model_name = "sci_fi_alien_ship_7", game_name = {"Ktlitan Destroyer"}},
		{model_name = "sci_fi_alien_ship_8", game_name = {"Ktlitan Queen"}},
	}
	addShipModelButtons(ktlitan_ship_models)
end
-----------------------------------------------------
--	Artifacts > Set Model > Ship > Small Frigates  --
-----------------------------------------------------
-- Button Text				   FD*	Related Function(s)
-- -MAIN FROM SMALL FRIGATES	F	shipArtifactModels
-- SMALL_FRIGATE_1				D	inline
-- SMALL_FRIGATE_2				D	inline
-- STRIKESHIP					D	inline
-- KARNACK						D	inline
-- NIRVANA R5					D	inline
function smallFrigateShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Small Frigates",shipArtifactModels)
	local small_frigate_ship_models = {
		{model_name = "small_frigate_1", game_name = {"Not Used"}},
		{model_name = "small_frigate_2", game_name = {"Not Used"}},
		{model_name = "small_frigate_3", game_name = {"Strikeship"}},
		{model_name = "small_frigate_4", game_name = {"Karnack","Cruiser"}},
		{model_name = "small_frigate_5", game_name = {"Nirvana R5","Nirvana R5A","Nirvana R3"}},
	}
	addShipModelButtons(small_frigate_ship_models)
end
---------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups  --
---------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM COLOR GROUPS	F	shipArtifactModels
-- +ADLERS				F	adlerShipModels
-- +ATLAS				F	atlasShipModels
-- +LINDWORMS			F	lindwormShipModels
-- +WESPE SCOUTS		F	wespeShipModels
-- +CORVETTES			F	corvetteShipModels
function colorGroupShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Color Groups",shipArtifactModels)
	addGMFunction("+Adlers",adlerShipModels)
	addGMFunction("+Atlas",atlasShipModels)
	addGMFunction("+Lindworms",lindwormShipModels)
	addGMFunction("+Wespe Scouts",wespeShipModels)
	addGMFunction("+Corvettes",corvetteShipModels)
end
-------------------------------------------------
--	Artifacts > Set Model > Ship > Transports  --
-------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM TRANSPORTS			F	shipArtifactModels
-- PERSONNEL FREIGHTER 1	D	inline
-- PERSONNEL FREIGHTER 2	D	inline
-- PERSONNEL FREIGHTER 3	D	inline
-- PERSONNEL FREIGHTER 4	D	inline
-- PERSONNEL FREIGHTER 5	D	inline
-- GOODS FREIGHTER 1		D	inline
-- GOODS FREIGHTER 2		D	inline
-- GOODS FREIGHTER 3		D	inline
-- GOODS FREIGHTER 4		D	inline
-- GOODS FREIGHTER 5		D	inline
-- GARBAGE FREIGHTER 1		D	inline
-- GARBAGE FREIGHTER 2		D	inline
-- GARBAGE FREIGHTER 3		D	inline
-- GARBAGE FREIGHTER 4		D	inline
-- GARBAGE FREIGHTER 5		D	inline
-- EQUIPMENT FREIGHTER 1	D	inline
-- EQUIPMENT FREIGHTER 2	D	inline
-- EQUIPMENT FREIGHTER 3	D	inline
-- EQUIPMENT FREIGHTER 4	D	inline
-- EQUIPMENT FREIGHTER 5	D	inline
-- FUEL FREIGHTER 1			D	inline
-- FUEL FREIGHTER 2			D	inline
-- FUEL FREIGHTER 3			D	inline
-- FUEL FREIGHTER 4			D	inline
-- FUEL FREIGHTER 5			D	inline
function transportShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Transports",shipArtifactModels)
	local transport_ship_models = {
		{model_name = "transport_1_1", game_name = {"Personnel Freighter 1","Transport1x1"}},
		{model_name = "transport_1_2", game_name = {"Personnel Freighter 2","Transport1x2"}},
		{model_name = "transport_1_3", game_name = {"Personnel Freighter 3","Personnel Jump Freighter 3","Transport1x3"}},
		{model_name = "transport_1_4", game_name = {"Personnel Freighter 4","Personnel Jump Freighter 4","Transport1x4"}},
		{model_name = "transport_1_5", game_name = {"Personnel Freighter 5","Personnel Jump Freighter 5","Transport1x5"}},
		{model_name = "transport_2_1", game_name = {"Goods Freighter 1","Transport2x1"}},
		{model_name = "transport_2_2", game_name = {"Goods Freighter 2","Transport2x2"}},
		{model_name = "transport_2_3", game_name = {"Goods Freighter 3","Goods Jump Freighter 3","Transport2x3"}},
		{model_name = "transport_2_4", game_name = {"Goods Freighter 4","Goods Jump Freighter 4","Transport2x4"}},
		{model_name = "transport_2_5", game_name = {"Goods Freighter 5","Goods Jump Freighter 5","Transport2x5"}},
		{model_name = "transport_3_1", game_name = {"Garbage Freighter 1","Transport3x1"}},
		{model_name = "transport_3_2", game_name = {"Garbage Freighter 2","Transport3x2"}},
		{model_name = "transport_3_3", game_name = {"Garbage Freighter 3","Garbage Jump Freighter 3","Transport3x3"}},
		{model_name = "transport_3_4", game_name = {"Garbage Freighter 4","Garbage Jump Freighter 4","Transport3x4"}},
		{model_name = "transport_3_5", game_name = {"Garbage Freighter 5","Garbage Jump Freighter 5","Transport3x5"}},
		{model_name = "transport_4_1", game_name = {"Equipment Freighter 1","Transport4x1"}},
		{model_name = "transport_4_2", game_name = {"Equipment Freighter 2","Transport4x2"}},
		{model_name = "transport_4_3", game_name = {"Equipment Freighter 3","Equipment Jump Freighter 3","Transport4x3"}},
		{model_name = "transport_4_4", game_name = {"Equipment Freighter 4","Equipment Jump Freighter 4","Transport4x4"}},
		{model_name = "transport_4_5", game_name = {"Equipment Freighter 5","Equipment Jump Freighter 5","Transport4x5"}},
		{model_name = "transport_5_1", game_name = {"Fuel Freighter 1","Transport5x1"}},
		{model_name = "transport_5_2", game_name = {"Fuel Freighter 2","Transport5x2"}},
		{model_name = "transport_5_3", game_name = {"Fuel Freighter 3","Equipment Jump Freighter 3","Transport5x3"}},
		{model_name = "transport_5_4", game_name = {"Fuel Freighter 4","Equipment Jump Freighter 4","Transport5x4"}},
		{model_name = "transport_5_5", game_name = {"Fuel Freighter 5","Equipment Jump Freighter 5","Transport5x5"}},
	}
	addShipModelButtons(transport_ship_models)
end
--	************************************************************************  --
--	****				Artifacts Set Model	Ship Color Groups			****  --
--	************************************************************************  --
---------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes  --
---------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -FROM CORVETTES	F	colorGroupShipModels
-- +HEAVY			F	heavyCorvetteShipModels
-- +LASER			F	laserCorvetteShipModels
-- +LIGHT			F	lightCorvetteShipModels
-- +MINE LAYER		F	mineLayerCorvetteShipModels
-- +MISSILE			F	missileCorvetteShipModels
-- +MULTIGUN		F	multiGunCorvetteShipModels
function corvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Corvettes",colorGroupShipModels)
	addGMFunction("+Heavy",heavyCorvetteShipModels)
	addGMFunction("+Laser",laserCorvetteShipModels)
	addGMFunction("+Light",lightCorvetteShipModels)
	addGMFunction("+Mine Layer",mineLayerCorvetteShipModels)
	addGMFunction("+Missile",missileCorvetteShipModels)
	addGMFunction("+Multigun",multiGunCorvetteShipModels)
end
------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Adlers  --
------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM ADLERS				F	colorGroupShipModels
-- ADDER MK4				D	inline
-- ADDER MK7				D	inline
-- ADLERLONGRANGESCOUTGREY	D	inline
-- ADDER MK6				D	inline
-- ADLERLONGRANGESCOUTWHITE	D	inline
-- ADDER MK5				D	inline
function adlerShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Adlers",colorGroupShipModels)
	local adler_ship_models = {
		{model_name = "AdlerLongRangeScoutBlue", game_name = {"Adder MK4","Adder MK3"}},
		{model_name = "AdlerLongRangeScoutGreen", game_name = {"Adder MK7","Adder MK8"}},
		{model_name = "AdlerLongRangeScoutGrey", game_name = {"Not Used"}},
		{model_name = "AdlerLongRangeScoutRed", game_name = {"Adder MK6","Adder MK9"}},
		{model_name = "AdlerLongRangeScoutWhite", game_name = {"Not Used"}},
		{model_name = "AdlerLongRangeScoutYellow", game_name = {"Adder MK5"}},
	}
	addShipModelButtons(adler_ship_models)
end
-----------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Atlas  --
-----------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM ATLAS				F	colorGroupShipModels
-- ATLASHEAVYFIGHTERBLUE	D	inline
-- ATLASHEAVYFIGHTERGREEN	D	inline
-- ATLASHEAVYFIGHTERGREY	D	inline
-- PHOBOS M3				D	inline
-- ATLASHEAVYFIGHTERWHITE	D	inline
-- PHOBOS T3				D	inline
function atlasShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Atlas",colorGroupShipModels)
	local atlas_ship_models = {
		{model_name = "AtlasHeavyFighterBlue", game_name = {"Not Used"}},
		{model_name = "AtlasHeavyFighterGreen", game_name = {"Not Used"}},
		{model_name = "AtlasHeavyFighterGrey", game_name = {"Not Used"}},
		{model_name = "AtlasHeavyFighterRed", game_name = {"Phobos M3"}},
		{model_name = "AtlasHeavyFighterWhite", game_name = {"Not Used"}},
		{model_name = "AtlasHeavyFighterYellow", game_name = {"Phobos T3","Elara P2","Phobos M3P"}},
	}
	addShipModelButtons(atlas_ship_models)
end
--------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Lindworm  --
--------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM LINDWORM			F	colorGroupShipModels
-- ZX-LINDWORM				D	inline
-- LINDWURMFIGHTERGREEN		D	inline
-- LINDWURMFIGHTERGREY		D	inline
-- LINDWURMFIGHTERRED		D	inline
-- LINDWURMFIGHTERWHITE		D	inline
-- WX-LINDWORM				D	inline
function lindwormShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Lindworms",colorGroupShipModels)
	local lindworm_ship_models = {
		{model_name = "LindwurmFighterBlue", game_name = {"ZX-Lindworm"}},
		{model_name = "LindwurmFighterGreen", game_name = {"Not Used"}},
		{model_name = "LindwurmFighterGrey", game_name = {"Not Used"}},
		{model_name = "LindwurmFighterRed", game_name = {"Not Used"}},
		{model_name = "LindwurmFighterWhite", game_name = {"Not Used"}},
		{model_name = "LindwurmFighterYellow", game_name = {"WX-Lindworm"}},
	}
	addShipModelButtons(lindworm_ship_models)
end
function addShipModelButtons(list)
	for _, model in ipairs(list) do
		local button_name = model.game_name[1]
		if button_name == "Not Used" then
			button_name = model.model_name
		end
		addGMFunction(button_name,function()
			local object_list = getGMSelection()
			if #object_list ~= 1 then
				fiddleWithArtifacts()
				return
			else
				if not isObjectType(object_list[1],"Artifact") then
					fiddleWithArtifacts()
					return
				end
			end
			object_list[1]:setModel(model.model_name)
			local out = string.format("Artifact model set to %s which is used in game for:",model.model_name)
			for _, used_name in ipairs(model.game_name) do
				out = out .. "\n" .. used_name
			end
			addGMMessage(out)
			setArtifactModel()
		end)
	end
end
------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Wespe Scouts  --
------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM WESPE SCOUTS	F	colorGroupShipModels
-- WESPESCOUTBLUE		D	inline
-- WESPESCOUTGREEN		D	inline
-- WESPESCOUTGREY		D	inline
-- MU52 HORNET			D	inline
-- WESPESCOUTWHITE		D	inline
-- MT52 HORNET			D	inline
function wespeShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Wespe Scouts",colorGroupShipModels)
	local wespe_ship_models = {
		{model_name = "WespeScoutBlue", game_name = {"Not Used"}},
		{model_name = "WespeScoutGreen", game_name = {"Not Used"}},
		{model_name = "WespeScoutGrey", game_name = {"Not Used"}},
		{model_name = "WespeScoutRed", game_name = {"MU52 Hornet","MP52 Hornet"}},
		{model_name = "WespeScoutWhite", game_name = {"Not Used"}},
		{model_name = "WespeScoutYellow", game_name = {"MT52 Hornet"}},
	}
	addShipModelButtons(wespe_ship_models)
end
--	************************************************************************************  --
--	****				Artifacts Set Model	Ship Color Groups Corvettes				****  --
--	************************************************************************************  --
-----------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Heavy  --
-----------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM HEAVY CORVETTES	F	corvetteShipModels
-- HEAVYCORVETTEBLUE		D	inline
-- HATHCOCK					D	inline
-- HEAVYCORVETTEGREY		D	inline
-- PIRANHA F12				D	inline
-- HEAVYCORVETTEWHITE		D	inline
-- STORM					D	inline
function heavyCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Heavy Corvettes",corvetteShipModels)
	local heavy_corvette_ship_models = {
		{model_name = "HeavyCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "HeavyCorvetteGreen", game_name = {"Hathcock"}},
		{model_name = "HeavyCorvetteGrey", game_name = {"Not Used"}},
		{model_name = "HeavyCorvetteRed", game_name = {"Piranha F12","Piranha F12.M","Piranha F8","Piranha"}},
		{model_name = "HeavyCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "HeavyCorvetteYellow", game_name = {"Storm"}},
	}
	addShipModelButtons(heavy_corvette_ship_models)
end
-----------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Laser  --
-----------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM LASER CORVETTES	F	corvetteShipModels
-- LASERCORVETTEBLUE		D	inline
-- MAVERICK					D	inline
-- LASERCORVETTEGREY		D	inline
-- CRUCIBLE					D	inline
-- LASERCORVETTEWHITE		D	inline
-- LASERCORVETTEYELLOW		D	inline
function laserCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Laser Corvettes",corvetteShipModels)
	local laser_corvette_ship_models = {
		{model_name = "LaserCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "LaserCorvetteGreen", game_name = {"Maverick"}},
		{model_name = "LaserCorvetteGrey", game_name = {"Not Used"}},
		{model_name = "LaserCorvetteRed", game_name = {"Crucible"}},
		{model_name = "LaserCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "LaserCorvetteYellow", game_name = {"Not Used"}},
	}
	addShipModelButtons(laser_corvette_ship_models)
end
-----------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Light  --
-----------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM LIGHT CORVETTES	F	corvetteShipModels
-- LIGHTCORVETTEBLUE		D	inline
-- LIGHTCORVETTEGREEN		D	inline
-- FLAVIA					D	inline
-- REPULSE					D	inline
-- LIGHTCORVETTEWHITE		D	inline
-- LIGHTCORVETTEYELLOW		D	inline
function lightCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Light Corvettes",corvetteShipModels)
	local light_corvette_ship_models = {
		{model_name = "LightCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "LightCorvetteGreen", game_name = {"Not Used"}},
		{model_name = "LightCorvetteGrey", game_name = {"Flavia","Flavia Falcon","Flavia P.Falcon"}},
		{model_name = "LightCorvetteRed", game_name = {"Repulse"}},
		{model_name = "LightCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "LightCorvetteYellow", game_name = {"Not Used"}},
	}
	addShipModelButtons(light_corvette_ship_models)
end
----------------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Mine Layer  --
----------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM MINE LAYER			F	corvetteShipModels
-- MINELAYERCORVETTEBLUE	D	inline
-- MINELAYERCORVETTEGREEN	D	inline
-- MINELAYERCORVETTEGREY	D	inline
-- MINELAYERCORVETTERED		D	inline
-- MINELAYERCORVETTEWHITE	D	inline
-- MINELAYERCORVETTEYELLOW	D	inline
function mineLayerCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Mine Layer",corvetteShipModels)
	local mine_layer_corvette_ship_models = {
		{model_name = "MineLayerCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "MineLayerCorvetteGreen", game_name = {"Not Used"}},
		{model_name = "MineLayerCorvetteGrey", game_name = {"Not Used"}},
		{model_name = "MineLayerCorvetteRed", game_name = {"Not Used"}},
		{model_name = "MineLayerCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "MineLayerCorvetteYellow", game_name = {"Not Used"}},
	}
	addShipModelButtons(mine_layer_corvette_ship_models)
end
-------------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Missile  --
-------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM MISSILE			F	corvetteShipModels
-- MISSILECORVETTEBLUE		D	inline
-- RANUS U					D	inline
-- MISSILECORVETTEGREY		D	inline
-- MISSILECORVETTERED		D	inline
-- MISSILECORVETTEWHITE		D	inline
-- MISSILECORVETTEYELLOW	D	inline
function missileCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Missile",corvetteShipModels)
	local missile_corvette_ship_models = {
		{model_name = "MissileCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "MissileCorvetteGreen", game_name = {"Ranus U"}},
		{model_name = "MissileCorvetteGrey", game_name = {"Not Used"}},
		{model_name = "MissileCorvetteRed", game_name = {"Not Used"}},
		{model_name = "MissileCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "MissileCorvetteYellow", game_name = {"Not Used"}},
	}
	addShipModelButtons(missile_corvette_ship_models)
end
---------------------------------------------------------------------------
--	Artifacts > Set Model > Ship > Color Groups > Corvettes > Multi Gun  --
---------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -FROM MULTIGUN			F	corvetteShipModels
-- MULTIGUNCORVETTEBLUE		D	inline
-- MULTIGUNCORVETTEGREEN	D	inline
-- MULTIGUNCORVETTEGREY		D	inline
-- MULTIGUNCORVETTERED		D	inline
-- MULTIGUNCORVETTEWHITE	D	inline
-- MULTIGUNCORVETTEYELLOW	D	inline
function multiGunCorvetteShipModels()
	local object_list = getGMSelection()
	if object_list == nil or #object_list ~= 1 then
		fiddleWithArtifacts()
		return
	else
		if not isObjectType(object_list[1],"Artifact") then
			fiddleWithArtifacts()
			return
		end
	end
	clearGMFunctions()
	addGMFunction("-From Multigun",corvetteShipModels)
	local multi_gun_corvette_ship_models = {
		{model_name = "MultiGunCorvetteBlue", game_name = {"Not Used"}},
		{model_name = "MultiGunCorvetteGreen", game_name = {"Not Used"}},
		{model_name = "MultiGunCorvetteGrey", game_name = {"Not Used"}},
		{model_name = "MultiGunCorvetteRed", game_name = {"Not Used"}},
		{model_name = "MultiGunCorvetteWhite", game_name = {"Not Used"}},
		{model_name = "MultiGunCorvetteYellow", game_name = {"Not Used"}},
	}
	addShipModelButtons(multi_gun_corvette_ship_models)
end
--	********************************************************************************  --
--	****				Artifacts Scan Clue Scanned Descriptions				****  --
--	********************************************************************************  --
-------------------------------------------------------------------
--	Artifacts > Scan Clue > Scanned Descriptions > None (first)  --
-------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- -FROM DESC 1		F	setScannedDescription
-- Button for each item in table scannedClues1 defined in constants
function scannedClue1()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	addGMFunction("-From Desc 1",setScannedDescription)
	for sck, scv in pairs(scannedClues1) do
		local GMShortScannedClue = sck
		if sck == scannedClueKey1 then
			GMShortScannedClue = sck .. "*"
		end
		addGMFunction(GMShortScannedClue, function()
			scannedClueKey1 = sck
			scannedClue1()
		end)
	end
end
--------------------------------------------------------------------
--	Artifacts > Scan Clue > Scanned Descriptions > None (second)  --
--------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- -FROM DESC 2		F	setScannedDescription
-- Button for each item in table scannedClues2 defined in constants
function scannedClue2()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	addGMFunction("-From Desc 2",setScannedDescription)
	for sck, scv in pairs(scannedClues2) do
		local GMShortScannedClue = sck
		if sck == scannedClueKey2 then
			GMShortScannedClue = sck .. "*"
		end
		addGMFunction(GMShortScannedClue, function()
			scannedClueKey2 = sck
			scannedClue2()
		end)
	end
end
-------------------------------------------------------------------
--	Artifacts > Scan Clue > Scanned Descriptions > None (third)  --
-------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- -FROM DESC 3		F	setScannedDescription
-- Button for each item in table scannedClues3 defined in constants
function scannedClue3()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	addGMFunction("-From Desc 3",setScannedDescription)
	for sck, scv in pairs(scannedClues3) do
		local GMShortScannedClue = sck
		if sck == scannedClueKey3 then
			GMShortScannedClue = sck .. "*"
		end
		addGMFunction(GMShortScannedClue, function()
			scannedClueKey3 = sck
			scannedClue3()
		end)
	end
end
--------------------------------------------------------------------
--	Artifacts > Scan Clue > Scanned Descriptions > None (fourth)  --
--------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- -FROM DESC 4		F	setScannedDescription
-- Button for each item in table scannedClues4 defined in constants
function scannedClue4()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	addGMFunction("-From Desc 4",setScannedDescription)
	for sck, scv in pairs(scannedClues4) do
		local GMShortScannedClue = sck
		if sck == scannedClueKey4 then
			GMShortScannedClue = sck .. "*"
		end
		addGMFunction(GMShortScannedClue, function()
			scannedClueKey4 = sck
			scannedClue4()
		end)
	end
end
-------------------------------------------------------------------
--	Artifacts > Scan Clue > Scanned Descriptions > None (fifth)  --
-------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -SCAN			F	scanClue
-- -FROM DESC 5		F	setScannedDescription
-- Button for each item in table scannedClues5 defined in constants
function scannedClue5()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Scan",scanClue)
	addGMFunction("-From Desc 5",setScannedDescription)
	for sck, scv in pairs(scannedClues5) do
		local GMShortScannedClue = sck
		if sck == scannedClueKey5 then
			GMShortScannedClue = sck .. "*"
		end
		addGMFunction(GMShortScannedClue, function()
			scannedClueKey5 = sck
			scannedClue5()
		end)
	end
end

--	*												   *  --
--	**												  **  --
--	****************************************************  --
--	****				Tweak Terrain				****  --
--	****************************************************  --
--	**												  **  --
--	*												   *  --
-----------------------------------
-- Tweak Terrain > Update editor --
-----------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK				F	tweakTerrain
-- +EDIT SELECTED		F	editSelected
function updateEditor()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak",tweakTerrain)
	addGMFunction("+Edit Selected",function()
		local objectList = getGMSelection()
		if #objectList ~= 1 then
			addGMMessage("to edit select one (and only one) object before selecting the edit button")
			return
		end
		update_edit_object=objectList[1]
		editSelected()
	end)
end
--------------------------------------------
--	Tweak Terrain > Station Manipulation  --
--------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- +STATION OPERATIONS	F	stationOperations
-- +STATION DEFENSE		F	stationDefense
-- +STATION REPORT		F	stationReport
-- +STATION GOODS		F	stationGoods
-- +STATION PROBES		F	stationProbes
function stationManipulation()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	if jump_corridor then
		addGMFunction("Jump Corridor On",function()
			jump_corridor = false
			stationManipulation()
		end)
	else
		addGMFunction("Jump Corridor Off",function()
			jump_corridor = true
			stationManipulation()
		end)
	end
	addGMFunction("+Station Operations",stationOperations)
	addGMFunction("+Station Defense",stationDefense)
	addGMFunction("+Station Report",stationReport)
	addGMFunction("+Station Goods",stationGoods)
	addGMFunction("+Station Probes",stationProbes)
	addGMFunction("+Station Ordnance",stationOrdnance)
end
---------------------------------
--	Tweak Terrain > Minefield  --
---------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM MINEFIELD	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- +SHAPE: ARC			D	setMineShape
-- +WIDTH: 1			D	setMineWidth
-- CENTER POINT			D	mineArcCenterPoint
function mineField()
	clearGMFunctions()
	addGMFunction("-Main From Minefield",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction(string.format("+Shape: %s",mine_shape),setMineShape)
	if mine_shape ~= "Cubic" and mine_shape ~= "Blob" then
		addGMFunction(string.format("+Width: %i",mine_width),setMineWidth)
	end
	if mine_shape == "Circle" then
		addGMFunction(string.format("+Radius: %i",mine_radius),setMineRadius)
	end
	if mine_shape == "Line" then
		if gm_click_mode == "mine line start" then
			addGMFunction(">Start Point<",mineLineStartPoint)
		elseif gm_click_mode == "mine line end" then
			addGMFunction(">End Point<",mineLineEndPoint)
		else
			addGMFunction("Start Point",mineLineStartPoint)
		end
	elseif mine_shape == "Arc" then
		if gm_click_mode == "mine arc center" then
			addGMFunction(">Center Point<",mineArcCenterPoint)
		elseif gm_click_mode == "mine arc start" then
			addGMFunction(">Start Arc<",mineArcStartPoint)
		elseif gm_click_mode == "mine arc end" then
			addGMFunction(">End Arc<",mineArcEndPoint)
		else
			addGMFunction("Center Point",mineArcCenterPoint)
		end
	elseif mine_shape == "Circle" then
		if gm_click_mode == "mine circle" then
			addGMFunction(">Center of Circle<",mineCircle)
		else
			addGMFunction("Center of Circle",mineCircle)
		end
	elseif mine_shape == "Cubic" then
		if gm_click_mode == "mine Cubic" then
			addGMFunction(">add point<",addCubicMineMarker)
		else
			addGMFunction("add point",addCubicMineMarker)
		end
		addGMFunction("finalize",
			function ()
				CubicMineUpdateObject:finalize()
				mineField()
			end)
		addGMFunction("cancel",
			function ()
				CubicMineUpdateObject:cancel()
				mineField()
			end)
	elseif mine_shape == "Blob" then
		addGMFunction("+Size",mineBlobSize)
		if gm_click_mode == "mine blob place" then
			addGMFunction(">Place<",mineBlobPlace)
		else
			addGMFunction("Place",mineBlobPlace)
		end
		if selected_mine_blob ~= nil then
			if gm_click_mode == "mine blob move" then
				addGMFunction(">Move<",mineBlobMove)
			else
				addGMFunction("Move",mineBlobMove)
			end
			addGMFunction("+Blob Rotate",mindBlobRotate)
			addGMFunction("Blob Show",mineBlobShow)
			addGMFunction("Blob Next",mineBlobNext)
		end
	end
end
function mineBlobNext()
	local blob_index = 0
	for i,blob in ipairs(mine_blob_list) do
		if blob == selected_mine_blob then
			blob_index = i
			break
		end
	end
	if blob_index > 0 then
		if selected_mine_blob ~= nil then
			if selected_mine_blob.zone ~= nil then
				selected_mine_blob.zone:destroy()
				selected_mine_blob.zone = nil
			end
			selected_mine_blob.show_clock = nil
		end
		blob_index = blob_index + 1
		if blob_index > #mine_blob_list then
			blob_index = 1
		end
		selected_mine_blob = mine_blob_list[blob_index]
		selected_mine_blob.show_clock = getScenarioTime()
	else
		if mine_blob_list[1] ~= nil then
			selected_mine_blob = mine_blob_list[1]
			selected_mine_blob.show_clock = getScenarioTime()
		else
			addGMMessage("Could not get the next mine blob. No action taken")
		end
	end
end
function mineBlobShow()
	if selected_mine_blob ~= nil then
		selected_mine_blob.show_clock = getScenarioTime()
		if selected_mine_blob[1]:isValid() then
			addGMMessage(string.format("Mine blob in sector %s",selected_mine_blob[1]:getSectorName()))
		end
	else
		addGMMessage("No selected mine blob")
	end
end
function mindBlobRotate()
	clearGMFunctions()
	addGMFunction("-Main From Minefield",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Minefield",mineField)
	addGMFunction("Rotate 1 degree",function()
		local bmx, bmy = selected_mine_blob[1]:getPosition()
		for i,mine in ipairs(selected_mine_blob) do
			if i ~= 1 then
				local mx, my = mine:getPosition()
				local angle = angleFromVectorNorth(mx, my, bmx, bmy)
				local dist = distance(bmx, bmy, mx, my)
				angle = angle + 1
				local vx, vy = vectorFromAngleNorth(angle,dist)
				mine:destroy()
				selected_mine_blob[i] = Mine():setPosition(bmx + vx, bmy + vy)
			end
		end
	end)
	addGMFunction("Rotate 5 degrees",function()
		local bmx, bmy = selected_mine_blob[1]:getPosition()
		for i,mine in ipairs(selected_mine_blob) do
			if i ~= 1 then
				local mx, my = mine:getPosition()
				local angle = angleFromVectorNorth(mx, my, bmx, bmy)
				local dist = distance(bmx, bmy, mx, my)
				angle = angle + 5
				local vx, vy = vectorFromAngleNorth(angle,dist)
				mine:destroy()
				selected_mine_blob[i] = Mine():setPosition(bmx + vx, bmy + vy)
			end
		end
	end)
	addGMFunction("Rotate 10 degrees",function()
		local bmx, bmy = selected_mine_blob[1]:getPosition()
		for i,mine in ipairs(selected_mine_blob) do
			if i ~= 1 then
				local mx, my = mine:getPosition()
				local angle = angleFromVectorNorth(mx, my, bmx, bmy)
				local dist = distance(bmx, bmy, mx, my)
				angle = angle + 10
				local vx, vy = vectorFromAngleNorth(angle,dist)
				mine:destroy()
				selected_mine_blob[i] = Mine():setPosition(bmx + vx, bmy + vy)
			end
		end
	end)
	addGMFunction("Rotate 30 degrees",function()
		local bmx, bmy = selected_mine_blob[1]:getPosition()
		for i,mine in ipairs(selected_mine_blob) do
			if i ~= 1 then
				local mx, my = mine:getPosition()
				local angle = angleFromVectorNorth(mx, my, bmx, bmy)
				local dist = distance(bmx, bmy, mx, my)
				angle = angle + 30
				local vx, vy = vectorFromAngleNorth(angle,dist)
				mine:destroy()
				selected_mine_blob[i] = Mine():setPosition(bmx + vx, bmy + vy)
			end
		end
	end)
end
function mineBlobMove()
	if gm_click_mode == "mine blob move" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine blob move"
		onGMClick(gmClickMineBlobMove)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine blob move\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
function mineBlobClean(mine_list)
	local clean = true
	repeat
		for i, mine in ipairs(mine_list) do
			if not mine:isValid() then
				mine_list[i] = mine_list[#mine_list]
				mine_list[#mine_list] = nil
				clean = false
				break
			end
		end
	until(clean)
	if #mine_list < 1 then
		for i, blob in ipairs(mine_blob_list) do
			if blob == mine_list then
				mine_blob_list[i] = mine_blob_list[#mine_blob_list]
				mine_blob_list[#mine_blob_list] = nil
				break
			end
		end
		return false
	else
		return true
	end
end
function gmClickMineBlobMove(x, y)
	if mineBlobClean(selected_mine_blob) then
		local bmx, bmy = selected_mine_blob[1]:getPosition()
		local dx = x - bmx
		local dy = y - bmy
		if selected_mine_blob.zone ~= nil then
			selected_mine_blob.zone:destroy()
		end
		selected_mine_blob.show_clock = nil
		for i, mine in ipairs(selected_mine_blob) do
			cpx, cpy = mine:getPosition()
			mine:setPosition(cpx + dx, cpy + dy)
		end
	else
		selected_mine_blob = nil
		addGMMessage("Select another mine blob. No action taken")
	end
end
function mineBlobPlace()
	if gm_click_mode == "mine blob place" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine blob place"
		onGMClick(gmClickMineBlobPlace)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine blob place\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
function gmClickMineBlobPlace(x, y)
	if mine_blob_radius == nil then
		mine_blob_radius = 3000
	end
--	print("X:",x,"y:",y)
	local mine_list = {}
	table.insert(mine_list,Mine():setPosition(x,y))
	local reached_the_edge = false
	local mine_space = 1400
--	print("initial reached the edge:",reached_the_edge,"initial mine space:",mine_space)
	repeat
		local overlay = false
--		print("initial overlay:",overlay)
		local nmx = nil
		local nmy = nil
		repeat
			overlay = false
			local base_mine_index = math.random(1,#mine_list)
			local base_mine = mine_list[base_mine_index]
			local bmx, bmy = base_mine:getPosition()
			local angle = random(0,360)
			nmx, nmy = vectorFromAngleNorth(angle,mine_space)
			nmx = nmx + bmx
			nmy = nmy + bmy
--			print("base index:",base_mine_index,"bmx:",math.floor(bmx),"bmy:",math.floor(bmy),"angle:",math.floor(angle))
			for i, mine in ipairs(mine_list) do
				if i ~= base_mine_index then
					local cmx, cmy = mine:getPosition()
					local mine_distance = distance(cmx, cmy, nmx, nmy)
--					print("index:",i,"distance:",math.floor(mine_distance),"mine space:",mine_space,"cmx:",math.floor(cmx),"cmy:",math.floor(cmy))
					if mine_distance < mine_space then
--						print("distance:",math.floor(mine_distance),"is less than mine space:",mine_space)
						overlay = true
						break
					end
--				else
--					print("index:",i,"matches base mine index:",base_mine_index,"no comparison made")
				end
			end
		until(not overlay)
		table.insert(mine_list,Mine():setPosition(nmx,nmy))
		if distance(x, y, nmx, nmy) > mine_blob_radius then
			reached_the_edge = true
		end
	until(reached_the_edge)
	if mine_blob_list == nil then
		mine_blob_list = {}
	end
	table.insert(mine_blob_list,mine_list)
	if selected_mine_blob ~= nil then
		if selected_mine_blob.zone ~= nil then
			selected_mine_blob.zone:destroy()
			selected_mine_blob.zone = nil
		end
		selected_mine_blob.show_clock = nil
	end
	selected_mine_blob = mine_list
	selected_mine_blob.radius = mine_blob_radius
end
function mineBlobSize()
	clearGMFunctions()
	addGMFunction("-Main From Minefield",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction(string.format("+Shape: %s",mine_shape),setMineShape)
	addGMFunction("-Minefield",mineField)
	if mine_blob_radius == nil then
		mine_blob_radius = 3000
	end
	addGMFunction(string.format("Radius ^1/4U from %.2fU",mine_blob_radius/1000),function()
		mine_blob_radius = mine_blob_radius + 250
		mineBlobSize()
	end)
	addGMFunction(string.format("Radius ^1/2U from %.2fU",mine_blob_radius/1000),function()
		mine_blob_radius = mine_blob_radius + 500
		mineBlobSize()
	end)
	addGMFunction(string.format("Radius ^1U from %.2fU",mine_blob_radius/1000),function()
		mine_blob_radius = mine_blob_radius + 1000
		mineBlobSize()
	end)
	addGMFunction(string.format("Radius v1U from %.2fU",mine_blob_radius/1000),function()
		if mine_blob_radius - 1000 < 1000 then
			addGMMessage("Minimum radius is 1U. No action taken")
		else
			mine_blob_radius = mine_blob_radius - 1000
		end
		mineBlobSize()
	end)
	addGMFunction(string.format("Radius v1/2U from %.2fU",mine_blob_radius/1000),function()
		if mine_blob_radius - 500 < 1000 then
			addGMMessage("Minimum radius is 1U. No action taken")
		else
			mine_blob_radius = mine_blob_radius - 500
		end
		mineBlobSize()
	end)
	addGMFunction(string.format("Radius v1/4U from %.2fU",mine_blob_radius/1000),function()
		if mine_blob_radius - 250 < 1000 then
			addGMMessage("Minimum radius is 1U. No action taken")
		else
			mine_blob_radius = mine_blob_radius - 250
		end
		mineBlobSize()
	end)
end
------------------------------
--	Tweak Terrain > Probes  --
------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM PROBES	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- STOP					F	inline
-- RESUME				F	inline
-- DIVERT				D	divertProbe
-- CREATE				D	createProbe
-- Optionally (when probe selected)
-- 1.0 ACCELERATE 1.1	D	inline
-- 1.0 DECELERATE 0.9	D	inline
function tweakProbes()
	clearGMFunctions()
	addGMFunction("-Main From Probes",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("Stop",function()
		local object_list = getGMSelection()
		if object_list == nil then
			addGMMessage("Select something first")
		else
			if #object_list < 1 or #object_list > 1 then
				addGMMessage("Select one thing")
			else
				local probe = object_list[1]
				if not isObjectType(probe,"ScanProbe") then
					addGMMessage("Select a probe")
				else
					if probe.original_target_x == nil then
						local ptx, pty = probe:getTarget()
						probe.original_target_x = ptx
						probe.original_target_y = pty
					end
					local px, py = probe:getPosition()
					probe:setTarget(px,py)
				end
			end
		end
		tweakProbes()
	end)
	addGMFunction("Resume",function()
		local object_list = getGMSelection()
		if object_list == nil then
			addGMMessage("Select something first")
		else
			if #object_list < 1 or #object_list > 1 then
				addGMMessage("Select one thing")
			else
				local probe = object_list[1]
				if not isObjectType(probe,"ScanProbe") then
					addGMMessage("Select a probe")
				else
					if probe.original_target_x == nil then
						addGMMessage("Probe was not stopped or diverted")
					else
						probe:setTarget(probe.original_target_x,probe.original_target_y)
					end
				end
			end
		end
		tweakProbes()
	end)
	if gm_click_mode == "divert probe" then
		addGMFunction(">Divert<",divertProbe)
	else
		addGMFunction("Divert",divertProbe)
	end
	if gm_click_mode == "create probe" then
		addGMFunction(">Create<",createProbe)
	else
		addGMFunction("Create",createProbe)
	end
	local accelerate_button_label = "Accelerate"
	local decelerate_button_label = "Decelerate"
	local object_list = getGMSelection()
	if object_list ~= nil then
		if #object_list == 1 then
			local probe = object_list[1]
			if isObjectType(probe,"ScanProbe") then
				accelerate_button_label = string.format("%.1f Accelerate -> %.1f",probe:getSpeed()/1000,(probe:getSpeed() + 100)/1000)
				decelerate_button_label = string.format("%.1f Decelerate -> %.1f",probe:getSpeed()/1000,(probe:getSpeed() - 100)/1000)
			end
		end
	end
	addGMFunction(accelerate_button_label,function()
		local object_list = getGMSelection()
		if object_list ~= nil then
			if #object_list == 1 then
				local probe = object_list[1]
				if isObjectType(probe,"ScanProbe") then
					if probe:getSpeed() < 5000 then
						probe:setSpeed(probe:getSpeed() + 100)
					else
						addGMMessage("Maximum probe speed reached")
					end
				else
					addGMMessage("Select a probe")
				end
			else
				addGMMessage("Select one object")
			end
		else
			addGMMessage("Select something first")
		end
		tweakProbes()
	end)
	addGMFunction(decelerate_button_label,function()
		local object_list = getGMSelection()
		if object_list ~= nil then
			if #object_list == 1 then
				local probe = object_list[1]
				if isObjectType(probe,"ScanProbe") then
					if probe:getSpeed() > 100 then
						probe:setSpeed(probe:getSpeed() - 100)
					else
						addGMMessage("Minimum probe speed reached")
					end
				else
					addGMMessage("Select a probe")
				end
			else
				addGMMessage("Select one object")
			end
		else
			addGMMessage("Select something first")
		end
		tweakProbes()
	end)
end
function createProbe()
	if gm_click_mode == "create probe" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "create probe"
		onGMClick(gmClickCreateProbe)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   create probe\nGM click mode.",prev_mode))
		end
	end
	tweakProbes()
end
function gmClickCreateProbe(x,y)
	ScanProbe():setPosition(x,y):setFaction(fleetSpawnFaction):setTarget(x,y)
end
function divertProbe()
	if gm_click_mode == "divert probe" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "divert probe"
		onGMClick(gmClickDivertProbe)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   divert probe\nGM click mode.",prev_mode))
		end
	end
	tweakProbes()
end
function gmClickDivertProbe(x,y)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Select something first")
	else
		if #object_list < 1 or #object_list > 1 then
			addGMMessage("Select one thing")
		else
			local probe = object_list[1]
			if not isObjectType(probe,"ScanProbe") then
				addGMMessage("Select a probe")
			else
				if probe.original_target_x == nil then
					local ptx, pty = probe:getTarget()
					probe.original_target_x = ptx
					probe.original_target_y = pty
				end
				probe:setTarget(x,y)
				local ntx, nty = probe:getTarget()
			end
		end
	end
	tweakProbes()
end
--	****************************************************************  --
--	****				Tweak Terrain Update Editor				****  --
--	****************************************************************  --
------------------------------------------------------------------------
-- Tweak Terrain > Update editor > List of edits for selected object  --
------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK				F	tweakTerrain
-- -UPDATE EDITOR		F	updateEditor
-- ---OBJECT EDIT---	F	none - UI element to divide buttons
-- followed by a dynamically generated list of updates on the object
function editSelected()
	if updateEditObjectValid() then
		clearGMFunctions()
		addGMFunction("-Main",initialGMFunctions)
		addGMFunction("-Tweak",tweakTerrain)
		addGMFunction("-update editor",updateEditor)
		addGMFunction("---object edit---",nil)
		local updateTypes = update_system:getUpdateNamesOnObject(update_edit_object)
		for index=1,#updateTypes do
			local name="+"..updateTypes[index].name
			local editElements=updateTypes[index].edit
			assert(editElements ~= nil)
			assert(type(editElements)=="table")
			addGMFunction(name,editUpdate(updateTypes[index].name,editElements))
		end
	end
end
--------------------------------------------------------------------
-- Tweak Terrain > Update editor > Selected object > edit update  --
--------------------------------------------------------------------
-- captures a name for the update type and then returns a function like
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK				F	tweakTerrain
-- -UPDATE EDITOR		F	updateEditor
-- -EDIT				F	editSelected
-- ---NAME EDIT---		D	none - UI element
-- REMOVE				F	inline
-- followed by a list of dynamically created edit buttons
function editUpdate(name,editElements)
	assert(type(name)=="string")
	assert(type(editElements)=="table")
	return function()
		if updateEditObjectValid() then
			clearGMFunctions()
			addGMFunction("-Main",initialGMFunctions)
			addGMFunction("-Tweak",tweakTerrain)
			addGMFunction("-update editor",updateEditor)
			addGMFunction("-edit",editSelected)
			addGMFunction("---"..name.." edit---",nil)
			addGMFunction("remove",function()
				if updateEditObjectValid() then
					update_system:removeUpdateNamed(update_edit_object,name)
					editSelected()
				end
			end)
			for index=1,#editElements do
				assert(type(editElements[index].name)=="string")
				local edit=editElements[index]
				edit.closers=function()
					clearGMFunctions()
					addGMFunction("-Main",initialGMFunctions)
					addGMFunction("-Tweak",tweakTerrain)
					addGMFunction("-update editor",updateEditor)
					addGMFunction("-edit",editSelected)
					addGMFunction("-"..name,editUpdate(name,editElements))
				end
				addGMFunction(editElements[index].name,numericEditControl(edit))
			end
		end
	end
end
--	************************************************************************  --
--	****				Tweak Terrain Station Manipulation				****  --
--	************************************************************************  --
-----------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Operations  --
-----------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- PROBES ON			D	inline
-- REPAIR ON			D	inline
-- ENERGY ON			D	inline
-- FIX PROBES ON		D	inline
-- FIX HACK ON			D	inline
-- FIX SCAN ON			D	inline
-- FIX C.MANEUVER ON	D	inline
-- FIX DESTRUCT ON		D	inline
function stationOperations()
	clearGMFunctions()
	addGMFunction("-Station Manipulation",stationManipulation)
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMFunction("+Select Station",stationOperations)
	else
		local first_object = objectList[1]
		if not isObjectType(first_object,"SpaceStation") then
			addGMFunction("+Select Station",stationOperations)
		else
			addGMFunction("+Major Repair",stationOpsMajorRepair)
			--[[	now in tweak menu
			local button_label = "Probes"
			if first_object:getRestocksScanProbes() then
				button_label = string.format("%s On->Off",button_label)
			else
				button_label = string.format("%s Off->On",button_label)
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object:getRestocksScanProbes() then
							first_object:setRestocksScanProbes(false)
						else
							first_object:setRestocksScanProbes(true)
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object:getRepairDocked() then
				button_label = "Repair On->Off"
			else
				button_label = "Repair Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object:getRepairDocked() then
							first_object:setRepairDocked(false)
						else
							first_object:setRepairDocked(true)
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object:getSharesEnergyWithDocked() then
				button_label = "Energy On-Off"
			else
				button_label = "Energy Off-On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object:getSharesEnergyWithDocked() then
							first_object:setSharesEnergyWithDocked(false)
						else
							first_object:setSharesEnergyWithDocked(true)
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			--]]
			if first_object.comms_data.probe_launch_repair then
				button_label = "Fix Probes On->Off"
			else
				button_label = "Fix Probes Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.probe_launch_repair then
							first_object.comms_data.probe_launch_repair = false
						else
							first_object.comms_data.probe_launch_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object.comms_data.hack_repair then
				button_label = "Fix Hack On->Off"
			else
				button_label = "Fix Hack Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.hack_repair then
							first_object.comms_data.hack_repair = false
						else
							first_object.comms_data.hack_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object.comms_data.scan_repair then
				button_label = "Fix Scan On->Off"
			else
				button_label = "Fix Scan Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.scan_repair then
							first_object.comms_data.scan_repair = false
						else
							first_object.comms_data.scan_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object.comms_data.combat_maneuver_repair then
				button_label = "Fix C.Maneuver On->Off"
			else
				button_label = "Fix C.Maneuver Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.combat_maneuver_repair then
							first_object.comms_data.combat_maneuver_repair = false
						else
							first_object.comms_data.combat_maneuver_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object.comms_data.self_destruct_repair then
				button_label = "Fix Destruct On->Off"
			else
				button_label = "Fix Destruct Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.self_destruct_repair then
							first_object.comms_data.self_destruct_repair = false
						else
							first_object.comms_data.self_destruct_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
			if first_object.comms_data.tube_slow_down_repair then
				button_label = "Fix Slow Tube On->Off"
			else
				button_label = "Fix Slow Tube Off->On"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						if first_object.comms_data.tube_slow_down_repair then
							first_object.comms_data.tube_slow_down_repair = false
						else
							first_object.comms_data.tube_slow_down_repair = true
						end
						stationOperations()
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("Select only one object. No action taken")
				end
			end)
		end
	end
end
function stationOpsMajorRepair()
	clearGMFunctions()
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("-Station Operations",stationOperations)
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMFunction("+Select Station",stationOpsMajorRepair)
	else
		local first_object = objectList[1]
		if not isObjectType(first_object,"SpaceStation") then
			addGMFunction("+Select Station",stationOpsMajorRepair)
		else
			--list major systems 
			for sys,blob in pairs(first_object.comms_data.system_repair) do
				local button_label = sys
				if blob.avail then
					button_label = button_label .. "*"
				end
				addGMFunction(button_label,function()
					if blob.avail then
						blob.avail = false
					else
						blob.avail = true
						if blob.cost == nil then
							blob.cost = math.random(1,9)
						end
						if blob.max == nil then
							blob.max = random(.8, .99)
						end
					end
					stationOpsMajorRepair()
				end)
			end
		end
	end
end
--	****************************************************************************************  --
--	****				Tweak Terrain Station Manipulation Station Defense				****  --
--	****************************************************************************************  --
--------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense  --
--------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- +DEFENSIVE FLEET		F	stationDefensiveFleet
-- +INNER RING			F	stationDefensiveInnerRing
-- +OUTER RING			F	stationDefensiveOuterRing
-- AUTOROTATE NO		D	inline
function stationDefense()
	clearGMFunctions()
	addGMFunction("-Station Manipulation",stationManipulation)
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMFunction("+Select Station",stationDefense)
	else
		local first_object = objectList[1]
		if not isObjectType(first_object,"SpaceStation") then
			addGMFunction("+Select Station",stationDefense)
		else
			addGMFunction("+Defensive Fleet",stationDefensiveFleet)
			addGMFunction("+Inner Ring",stationDefensiveInnerRing)
			addGMFunction("+Outer Ring",stationDefensiveOuterRing)
			if rotate_station == nil then
				rotate_station = {}
			end
			local found_rotate_station = false
			for i=1,#rotate_station do
				if rotate_station[i] == first_object then
					found_rotate_station = true
					break
				end
			end
			local button_label = "Autorotate No"
			if found_rotate_station then
				button_label = "Autorotate Yes"
			end
			addGMFunction(button_label,function()
				local objectList = getGMSelection()
				if #objectList == 1 then
					local first_object = objectList[1]
					if isObjectType(first_object,"SpaceStation") then
						local found_rotate_station = false
						local found_station_index = 0
						for i=1,#rotate_station do
							if rotate_station[i] == first_object then
								found_rotate_station = true
								found_station_index = i
								break
							end
						end
						if found_rotate_station then
							table.remove(rotate_station,found_station_index)
						else
							table.insert(rotate_station,first_object)
						end
					else
						addGMMessage("Station not selected. No action taken")
					end
				else
					addGMMessage("No object selected. No action taken")
				end
				stationDefense()
			end)
		end
	end
end
--------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Defensive Fleet  --
--------------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN					F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION DEFENSE			F	stationDefense
-- AVG SPEED OFF			D	inline
-- +1 PLAYER STRENGTH: n*	D	/Asterisk on selection between		setDefensiveFleetStrength
-- +SET FIXED STRENGTH		D	\relative and fixed strength		setDefensiveFleetFixedStrength
-- +RANDOM					D	(composition)						setFleetComposition
-- SPAWN DEF FLEET			F	spawnDefensiveFleet
function stationDefensiveFleet()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	local button_label = "off"
	if station_defensive_fleet_speed_average then
		button_label = "on"
	end
	addGMFunction(string.format("Avg Speed %s",button_label),function()
		if station_defensive_fleet_speed_average then
			station_defensive_fleet_speed_average = false
			stationDefensiveFleet()
		else
			station_defensive_fleet_speed_average = true
			stationDefensiveFleet()
		end
	end)
	if fleet_spawn_type == "relative" then
		local calcStr = math.floor(playerPower()*fleetStrengthByPlayerStrength)
		local GMSetGMFleetStrength = fleetStrengthByPlayerStrength .. "*player strength: " .. calcStr
		if fleetStrengthByPlayerStrength == .25 then
			GMSetGMFleetStrength = "1/4 Player Strength: " .. calcStr
		elseif fleetStrengthByPlayerStrength == .5 then
			GMSetGMFleetStrength = "1/2 Player Strength: " .. calcStr
		end
		addGMFunction("+" .. GMSetGMFleetStrength,setDefensiveFleetStrength)
	elseif fleet_spawn_type == "fixed" then
		addGMFunction(string.format("+Fixed Strength %i",fleetStrengthFixedValue),setDefensiveFleetFixedStrength)
	elseif fleet_spawn_type == "prebuilt" then
		calcStr = math.floor(playerPower()*fleetStrengthByPlayerStrength)
		GMSetGMFleetStrength = fleetStrengthByPlayerStrength .. "*player strength: " .. calcStr
		if fleetStrengthByPlayerStrength == .25 then
			GMSetGMFleetStrength = "1/4 Player Strength: " .. calcStr
		elseif fleetStrengthByPlayerStrength == .5 then
			GMSetGMFleetStrength = "1/2 Player Strength: " .. calcStr
		end
		addGMFunction("+" .. GMSetGMFleetStrength,setDefensiveFleetStrength)
	end
	local exclusion_string = ""
	for name, details in pairs(fleet_exclusions) do
		if details.exclude then
			if exclusion_string == "" then
				exclusion_string = "-"
			end
			exclusion_string = exclusion_string .. details.letter
		end
	end
	addGMFunction(string.format("+%s%s",fleetComposition,exclusion_string),function()
		setFleetComposition(stationDefensiveFleet)
	end)
	addGMFunction("Spawn Def Fleet",spawnDefensiveFleet)
end
function spawnDefensiveFleet()
	local objectList = getGMSelection()
	if #objectList ~= 1 then
		addGMMessage("You need to select a station. No action taken")
		return
	end
	local station = objectList[1]
	if not isObjectType(station,"SpaceStation") then
		addGMMessage("You need to select a station. No action taken")
		return		
	end
	local fsx, fsy = station:getPosition()
	local fleet = nil
	local fleet_distance = {
		["Small Station"]	= 2,
		["Medium Station"]	= 3,
		["Large Station"]	= 4,
		["Huge Station"]	= 4,
	}
	local station_type = station:getTypeName()
	if station_type == nil then
		station_type = "Small Station"
	end
	fleet = spawnRandomArmed(fsx, fsy, #fleet_list + 1, "ambush", fleet_distance[station_type])
	local total_speed = 0
	local average_speed = 0
	if station_defensive_fleet_speed_average then
		for i=1,#fleet do
			total_speed = total_speed + fleet[i]:getImpulseMaxSpeed()
		end
		average_speed = total_speed/#fleet
	end
	for i=1,#fleet do
		local ship = fleet[i]
		ship:orderDefendTarget(station)
		ship:setFaction(station:getFaction())
		if station_defensive_fleet_speed_average then
			ship:setImpulseMaxSpeed(average_speed)
		end
	end
	table.insert(fleet_list,fleet)
end
---------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Inner Ring  --
---------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FRM IN RING		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION DEFENSE			F	stationDefense
-- +PLATFORMS: 3			D	setInnerPlatformCount
-- +ORBIT: NO				D	setInnerPlatformOrbit
-- SPAWN DEF PLATFORMS		D	inline
function stationDefensiveInnerRing()
	clearGMFunctions()
	addGMFunction("-Main Frm In Ring",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction(string.format("+Platforms: %i",inner_defense_platform_count),setInnerPlatformCount)
	addGMFunction(string.format("+Orbit: %s",inner_defense_platform_orbit),setInnerPlatformOrbit)
	local button_label = "Spawn Def Platform"
	if inner_defense_platform_count > 1 then
		button_label = string.format("%ss",button_label)
	end
	addGMFunction(button_label,function()
		local objectList = getGMSelection()
		if #objectList ~= 1 then
			addGMMessage("You need to select a station. No action taken")
			return
		end
		local station = objectList[1]
		if not isObjectType(station,"SpaceStation") then
			addGMMessage("You need to select a station. No action taken")
			return		
		end
		local fsx, fsy = station:getPosition()
		local faction = station:getFaction()
		local angle = random(0,360)
		local increment = 360/inner_defense_platform_count
		local station_type = station:getTypeName()
		local platform_distance = spaceStationDistance[station_type] * 2
		local fleet = {}
		for i=1,inner_defense_platform_count do
			local ax, ay = vectorFromAngle(angle,platform_distance)
			local dp = CpuShip():setTemplate("Defense platform"):setFaction(faction):setPosition(fsx+ax,fsy+ay):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
			setBeamColor(dp)
			if inner_defense_platform_orbit ~= "No" then
				update_system:addOrbitUpdate(dp,fsx,fsy,platform_distance,orbit_increment[inner_defense_platform_orbit],angle)
			end
			angle = angle + increment
			if angle > 360 then
				angle = angle - 360
			end
			table.insert(fleet,dp)
		end
		table.insert(fleet_list,fleet)
	end)
end
function createOrbitingObject(obj,travel_angle,orbit_speed,origin_x,origin_y,distance)
	local mx, my = vectorFromAngle(travel_angle,distance)
	obj:setPosition(origin_x+mx,origin_y+my)
	if  orbit_speed ~= nil then
		update_system:addOrbitUpdate(obj,origin_x,origin_y,distance,orbit_speed,travel_angle)
	end
end
---------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring  --
---------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FRM OUT RING		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION DEFENSE			F	stationDefense
-- +PLATFORMS: 3			D	setInnerPlatformCount
-- +MINES: NO				D	setOuterMines
-- +DP ORBIT: NO			D	setOuterPlatformOrbit
-- SPAWN OUTER DEFENSE		F	inline
function stationDefensiveOuterRing()
	clearGMFunctions()
	addGMFunction("-Main Frm Out Ring",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction(string.format("+Platforms: %i",outer_defense_platform_count),setOuterPlatformCount)
	addGMFunction(string.format("+Mines: %s",outer_mines,setOuterMines),setOuterMines)
	addGMFunction(string.format("+DP Orbit: %s",outer_defense_platform_orbit),setOuterPlatformOrbit)
	if outer_defense_platform_count > 0 or outer_mines ~= "No" then
		addGMFunction("Spawn outer defense",function()
			local objectList = getGMSelection()
			if #objectList ~= 1 then
				addGMMessage("You need to select a station. No action taken")
				return
			end
			local station = objectList[1]
			if not isObjectType(station,"SpaceStation") then
				addGMMessage("You need to select a station. No action taken")
				return		
			end
			local fsx, fsy = station:getPosition()
			local faction = station:getFaction()
			local angle = random(0,360)
			local station_type = station:getTypeName()
			local outer_platform_distance = {
					["Small Station"] 	= 7500,
					["Medium Station"]	= 9100,
					["Large Station"]	= 9700,
					["Huge Station"]	= 10100,
				}
			--local platform_distance = spaceStationDistance[station_type] * 4
			local platform_distance = outer_platform_distance[station_type]
			--print(string.format("outer defense platform count: %i, platform distance: %i",outer_defense_platform_count,platform_distance))
			local inline_num_gaps
			if outer_defense_platform_count > 0 then
				local increment = 360/outer_defense_platform_count
				local fleet = {}
				for i=1,outer_defense_platform_count do
					local dp = CpuShip():setTemplate("Defense platform"):setFaction(faction):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
					setBeamColor(dp)
					createOrbitingObject(dp,angle,orbit_increment[outer_defense_platform_orbit], fsx, fsy, platform_distance)
					angle = (angle + increment) % 360
					table.insert(fleet,dp)
				end
				table.insert(fleet_list,fleet)
				inline_num_gaps = outer_defense_platform_count
			else
				inline_num_gaps = inline_mine_gap_count
			end
			mineRingShim{
				speed=orbit_increment[outer_defense_platform_orbit],
				x=fsx,
				y=fsy,
				dist=platform_distance-((inline_mines-1)*250),
				num_rows=inline_mines,
				segments=inline_num_gaps,
				angle=angle
			}
			mineRingShim{
				speed=orbit_increment[inside_mine_orbit],
				x=fsx,
				y=fsy,
				dist=platform_distance-2000-((inside_mines-1)*250),
				num_rows=inside_mines,
				segments=inside_mine_gap_count
			}
			mineRingShim {
				speed=orbit_increment[outside_mine_orbit],
				x=fsx,
				y=fsy,
				dist=platform_distance+3000-((outside_mines-1)*250),
				num_rows=outside_mines,
				segments=outside_mine_gap_count
			}
		end)
	end
end
----------------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Defensive Fleet > Relative Strength  --
----------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REL STR	F	initialGMFunctions
-- -STATION DEF FLT		F	stationDefensiveFleet
-- .5					*	inline
-- 1*					*	inline		asterisk = current selection
-- 2					*	inline
-- 3					*	inline
-- 4					*	inline
-- 5					*	inline
function setDefensiveFleetStrength()
	clearGMFunctions()
	addGMFunction("-Main from Rel Str",initialGMFunctions)
	addGMFunction("-Station Def Flt",stationDefensiveFleet)
	addGMFunction("Switch to Fixed Strength",function()
		fleet_spawn_type = "fixed"
		fleetStrengthFixed = true
		stationDefensiveFleet()
	end)
	setFleetStrength(setDefensiveFleetStrength)
end
-------------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Defensive Fleet > Fixed Strength  --
-------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REL STR	F	initialGMFunctions
-- -STATION DEF FLT		F	stationDefensiveFleet
-- -FIXED STRENGTH 250	D	spawnGMFleet
-- 250 - 50 = 200		D	inline
-- 250 + 50 = 250		D	inline
function setDefensiveFleetFixedStrength()
	clearGMFunctions()
	addGMFunction("-Main from Fix Str",initialGMFunctions)
	addGMFunction("-Station Def Flt",stationDefensiveFleet)
	addGMFunction("-Fixed Strength " .. fleetStrengthFixedValue,stationDefensiveFleet)
	addGMFunction("Switch to Relative",function()
		fleet_spawn_type = "relative"
		fleetStrengthFixed = false
		stationDefensiveFleet()
	end)
	fixFleetStrength(setDefensiveFleetFixedStrength)
end
--------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Inner Ring > Platform Count  --
--------------------------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FRM DP NO.			F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION DEFENSE			F	stationDefense
-- -INNER RING				F	stationDefensiveInnerRing
-- V FROM 3 TO 2			D	inline
-- ^ FROM 3 TO 4			D	inline 
function setInnerPlatformCount()
	clearGMFunctions()
	addGMFunction("-Main Frm DP No.",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction("-Inner Ring",stationDefensiveInnerRing)
	if inner_defense_platform_count > 1 then
		addGMFunction(string.format("v from %i to %i",inner_defense_platform_count,inner_defense_platform_count - 1), function()
			inner_defense_platform_count = inner_defense_platform_count - 1
			setInnerPlatformCount()
		end)
	end
	if inner_defense_platform_count < 6 then
		addGMFunction(string.format("^ from %i to %i",inner_defense_platform_count,inner_defense_platform_count + 1), function()
			inner_defense_platform_count = inner_defense_platform_count + 1
			setInnerPlatformCount()
		end)
	end
end
-----------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Inner Ring > Orbit  --
-----------------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -INNER RING		F	stationDefensiveInnerRing
-- ORBIT > FAST		*	inline
-- ORBIT > NORMAL	*	inline
-- ORBIT > SLOW		*	inline
-- NO				*	inline
-- ORBIT < FAST		*	inline
-- ORBIT < NORMAL	*	inline
-- ORBIT < SLOW		*	inline
function setInnerPlatformOrbit()
	clearGMFunctions()
	addGMFunction("-Inner Ring",stationDefensiveInnerRing)
	local button_label = "Orbit > Fast"
	if inner_defense_platform_orbit == "Orbit > Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit > Fast"
		setInnerPlatformOrbit()
	end)
	button_label = "Orbit > Normal"
	if inner_defense_platform_orbit == "Orbit > Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit > Normal"
		setInnerPlatformOrbit()
	end)
	button_label = "Orbit > Slow"
	if inner_defense_platform_orbit == "Orbit > Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit > Slow"
		setInnerPlatformOrbit()
	end)
	button_label = "No"
	if inner_defense_platform_orbit == "No" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "No"
		setInnerPlatformOrbit()
	end)
	button_label = "Orbit < Fast"
	if inner_defense_platform_orbit == "Orbit < Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit < Fast"
		setInnerPlatformOrbit()
	end)
	button_label = "Orbit < Normal"
	if inner_defense_platform_orbit == "Orbit < Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit < Normal"
		setInnerPlatformOrbit()
	end)
	button_label = "Orbit < Slow"
	if inner_defense_platform_orbit == "Orbit < Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inner_defense_platform_orbit = "Orbit < Slow"
		setInnerPlatformOrbit()
	end)
end
--------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Platform Count  --
--------------------------------------------------------------------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FRM OUT RING		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION DEFENSE			F	stationDefense
-- -OUTER RING				F	stationDefensiveOuterRing
-- V FROM 3 TO 2			D	inline
-- A FROM 3 TO 4			D	inline 
function setOuterPlatformCount()
	clearGMFunctions()
	addGMFunction("-Main Frm Out Ring",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction("-Outer Ring",stationDefensiveOuterRing)
	if outer_defense_platform_count > 0 then
		addGMFunction(string.format("v from %i to %i",outer_defense_platform_count,outer_defense_platform_count - 1), function()
			outer_defense_platform_count = outer_defense_platform_count - 1
			setOuterPlatformCount()
		end)
	end
	if outer_defense_platform_count < 6 then
		addGMFunction(string.format("^ from %i to %i",outer_defense_platform_count,outer_defense_platform_count + 1), function()
			outer_defense_platform_count = outer_defense_platform_count + 1
			setOuterPlatformCount()
		end)
	end
end
-----------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines  --
-----------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM MINES		F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -STATION DEFENSE		F	stationDefense
-- -OUTER RING			F	stationDefensiveOuterRing
-- +INLINE 0			D	setInlineMines
-- +INSIDE: 0			D	setInsideMines
-- +OUTSIDE: 0			D	setOutsideMines
function setOuterMines()
	clearGMFunctions()
	addGMFunction("-Main From Mines",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction("-Outer Ring",stationDefensiveOuterRing)
	addGMFunction(string.format("+Inline: %i",inline_mines),setInlineMines)
	addGMFunction(string.format("+Inside: %i",inside_mines),setInsideMines)
	addGMFunction(string.format("+Outside: %i",outside_mines),setOutsideMines)
end
--------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Platform Orbit  --
--------------------------------------------------------------------------------------------
-- -OUTER FRM DP ORBIT
-- ORBIT > FAST		*	inline
-- ORBIT > NORMAL	*	inline
-- ORBIT > SLOW		*	inline
-- NO				*	inline
-- ORBIT < FAST		*	inline
-- ORBIT < NORMAL	*	inline
-- ORBIT < SLOW		*	inline
function setOuterPlatformOrbit()
	clearGMFunctions()
	addGMFunction("-Outer Frm DP Orbit",stationDefensiveOuterRing)
	setCommonOuterOrbit(setOuterPlatformOrbit)
end
--------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Inline  --
--------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM INLINE MINE	F	setOuterMines
-- ^ FROM 0 TO 1		D	inline
-- +ORBIT: NO			D	setOuterMineOrbit
-- V GAPS FROM 3 TO 2	D	inline
-- ^ GAPS FROM 3 TO 4	D	inline
function setInlineMines()
	clearGMFunctions()
	addGMFunction("-From Inline Mine",setOuterMines)
	if inline_mines > 0 then
		addGMFunction(string.format("V From %i to %i",inline_mines,inline_mines - 1),function()
			inline_mines = inline_mines - 1
			setInlineMines()
		end)
	end
	if inline_mines < 3 then
		addGMFunction(string.format("^ From %i to %i",inline_mines,inline_mines + 1),function()
			inline_mines = inline_mines + 1
			setInlineMines()
		end)
	end
	if inline_mines == 0 and inside_mines == 0 and outside_mines == 0 then
		outer_mines = "No"
	else
		outer_mines = "Yes"
	end
	addGMFunction(string.format("+Orbit: %s",outer_defense_platform_orbit),setOuterMineOrbit)
	if outer_defense_platform_count == 0 then
		if inline_mine_gap_count > 1 then
			addGMFunction(string.format("V Gaps from %i to %i",inline_mine_gap_count,inline_mine_gap_count - 1),function()
				inline_mine_gap_count = inline_mine_gap_count - 1
				setInlineMines()
			end)
		end
		if inline_mine_gap_count < 6 then
			addGMFunction(string.format("^ Gaps from %i to %i",inline_mine_gap_count,inline_mine_gap_count + 1),function()
				inline_mine_gap_count = inline_mine_gap_count + 1
				setInlineMines()
			end)
		end
	end
end
--------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Inside  --
--------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM INSIDE	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -STATION DEFENSE		F	stationDefense
-- -OUTER RING			F	stationDefensiveOuterRing
-- -MINES				F	setOuterMines
-- ^ FROM 0 TO 1		D	inline
-- +ORBIT: NO			D	setOuterInnerMineOrbit
-- V GAPS FROM 3 TO 2	D	inline
-- ^ GAPS FROM 3 TO 4	D	inline
function setInsideMines()
	clearGMFunctions()
	addGMFunction("-Main From Inside",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction("-Outer Ring",stationDefensiveOuterRing)
	addGMFunction("-Mines",setOuterMines)
	if inside_mines > 0 then
		addGMFunction(string.format("V From %i to %i",inside_mines,inside_mines - 1),function()
			inside_mines = inside_mines - 1
			setInsideMines()
		end)
	end
	if inside_mines < 3 then
		addGMFunction(string.format("^ From %i to %i",inside_mines,inside_mines + 1),function()
			inside_mines = inside_mines + 1
			setInsideMines()
		end)
	end
	if inline_mines == 0 and inside_mines == 0 and outside_mines == 0 then
		outer_mines = "No"
	else
		outer_mines = "Yes"
	end
	addGMFunction(string.format("+Orbit: %s",inside_mine_orbit),setOuterInnerMineOrbit)
	if inside_mine_gap_count > 1 then
		addGMFunction(string.format("V Gaps from %i to %i",inside_mine_gap_count,inside_mine_gap_count - 1),function()
			inside_mine_gap_count = inside_mine_gap_count - 1
			setInsideMines()
		end)
	end
	if inside_mine_gap_count < 6 then
		addGMFunction(string.format("^ Gaps from %i to %i",inside_mine_gap_count,inside_mine_gap_count + 1),function()
			inside_mine_gap_count = inside_mine_gap_count + 1
			setInsideMines()
		end)
	end
end
---------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Outside  --
---------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM OUTSIDE	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -STATION DEFENSE		F	stationDefense
-- -OUTER RING			F	stationDefensiveOuterRing
-- -MINES				F	setOuterMines
-- ^ FROM 0 TO 1		D	inline
-- +ORBIT: NO			D	setOuterInnerMineOrbit
-- V GAPS FROM 3 TO 2	D	inline
-- ^ GAPS FROM 3 TO 4	D	inline
function setOutsideMines()
	clearGMFunctions()
	addGMFunction("-Main From Outside",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Defense",stationDefense)
	addGMFunction("-Outer Ring",stationDefensiveOuterRing)
	addGMFunction("-Mines",setOuterMines)
	if outside_mines > 0 then
		addGMFunction(string.format("V From %i to %i",outside_mines,outside_mines - 1),function()
			outside_mines = outside_mines - 1
			setOutsideMines()
		end)
	end
	if outside_mines < 3 then
		addGMFunction(string.format("^ From %i to %i",outside_mines,outside_mines + 1),function()
			outside_mines = outside_mines + 1
			setOutsideMines()
		end)
	end
	if inline_mines == 0 and inside_mines == 0 and outside_mines == 0 then
		outer_mines = "No"
	else
		outer_mines = "Yes"
	end
	addGMFunction(string.format("+Orbit: %s",outside_mine_orbit),setOuterOuterMineOrbit)
	if outside_mine_gap_count > 1 then
		addGMFunction(string.format("V Gaps from %i to %i",outside_mine_gap_count,outside_mine_gap_count - 1),function()
			outside_mine_gap_count = outside_mine_gap_count - 1
			setOutsideMines()
		end)
	end
	if outside_mine_gap_count < 6 then
		addGMFunction(string.format("^ Gaps from %i to %i",outside_mine_gap_count,outside_mine_gap_count + 1),function()
			outside_mine_gap_count = outside_mine_gap_count + 1
			setOutsideMines()
		end)
	end
end
----------------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Inline > Orbit  --
----------------------------------------------------------------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -Outer RING		F	stationDefensiveOuterRing
-- ORBIT > FAST		*	inline
-- ORBIT > NORMAL	*	inline
-- ORBIT > SLOW		*	inline
-- NO				*	inline
-- ORBIT < FAST		*	inline
-- ORBIT < NORMAL	*	inline
-- ORBIT < SLOW		*	inline
function setOuterMineOrbit()
	clearGMFunctions()
	addGMFunction("-Inline Mine",setInlineMines)
	setCommonOuterOrbit(setOuterMineOrbit)
end
function setCommonOuterOrbit(caller)
	local button_label = "Orbit > Fast"
	if outer_defense_platform_orbit == "Orbit > Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit > Fast"
		caller()
	end)
	button_label = "Orbit > Normal"
	if outer_defense_platform_orbit == "Orbit > Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit > Normal"
		caller()
	end)
	button_label = "Orbit > Slow"
	if outer_defense_platform_orbit == "Orbit > Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit > Slow"
		caller()
	end)
	button_label = "No"
	if outer_defense_platform_orbit == "No" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "No"
		caller()
	end)
	button_label = "Orbit < Fast"
	if outer_defense_platform_orbit == "Orbit < Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit < Fast"
		caller()
	end)
	button_label = "Orbit < Normal"
	if outer_defense_platform_orbit == "Orbit < Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit < Normal"
		caller()
	end)
	button_label = "Orbit < Slow"
	if outer_defense_platform_orbit == "Orbit < Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outer_defense_platform_orbit = "Orbit < Slow"
		caller()
	end)
end
----------------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Inside > Orbit  --
----------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -OUTER MINES INSIDE	F	setInsideMines
-- ORBIT > FAST			*	inline
-- ORBIT > NORMAL		*	inline
-- ORBIT > SLOW			*	inline
-- NO					*	inline
-- ORBIT < FAST			*	inline
-- ORBIT < NORMAL		*	inline
-- ORBIT < SLOW			*	inline
function setOuterInnerMineOrbit()
	clearGMFunctions()
	addGMFunction("-Outer Mines Inside",setInsideMines)
	local button_label = "Orbit > Fast"
	if inside_mine_orbit == "Orbit > Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit > Fast"
		setOuterInnerMineOrbit()
	end)
	button_label = "Orbit > Normal"
	if inside_mine_orbit == "Orbit > Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit > Normal"
		setOuterInnerMineOrbit()
	end)
	button_label = "Orbit > Slow"
	if inside_mine_orbit == "Orbit > Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit > Slow"
		setOuterInnerMineOrbit()
	end)
	button_label = "No"
	if inside_mine_orbit == "No" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "No"
		setOuterInnerMineOrbit()
	end)
	button_label = "Orbit < Fast"
	if inside_mine_orbit == "Orbit < Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit < Fast"
		setOuterInnerMineOrbit()
	end)
	button_label = "Orbit < Normal"
	if inside_mine_orbit == "Orbit < Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit < Normal"
		setOuterInnerMineOrbit()
	end)
	button_label = "Orbit < Slow"
	if inside_mine_orbit == "Orbit < Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		inside_mine_orbit = "Orbit < Slow"
		setOuterInnerMineOrbit()
	end)
end
-----------------------------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station Defense > Outer Ring > Mines > Outside > Orbit  --
-----------------------------------------------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -OUTER MINES OUTSIDE	F	setOutsideMines
-- ORBIT > FAST			*	inline
-- ORBIT > NORMAL		*	inline
-- ORBIT > SLOW			*	inline
-- NO					*	inline
-- ORBIT < FAST			*	inline
-- ORBIT < NORMAL		*	inline
-- ORBIT < SLOW			*	inline
function setOuterOuterMineOrbit()
	clearGMFunctions()
	addGMFunction("-Outer Mines Outside",setOutsideMines)
	local button_label = "Orbit > Fast"
	if outside_mine_orbit == "Orbit > Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit > Fast"
		setOuterOuterMineOrbit()
	end)
	button_label = "Orbit > Normal"
	if outside_mine_orbit == "Orbit > Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit > Normal"
		setOuterOuterMineOrbit()
	end)
	button_label = "Orbit > Slow"
	if outside_mine_orbit == "Orbit > Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit > Slow"
		setOuterOuterMineOrbit()
	end)
	button_label = "No"
	if outside_mine_orbit == "No" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "No"
		setOuterOuterMineOrbit()
	end)
	button_label = "Orbit < Fast"
	if outside_mine_orbit == "Orbit < Fast" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit < Fast"
		setOuterOuterMineOrbit()
	end)
	button_label = "Orbit < Normal"
	if outside_mine_orbit == "Orbit < Normal" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit < Normal"
		setOuterOuterMineOrbit()
	end)
	button_label = "Orbit < Slow"
	if outside_mine_orbit == "Orbit < Slow" then
		button_label = string.format("%s*",button_label)
	end
	addGMFunction(button_label,function()
		outside_mine_orbit = "Orbit < Slow"
		setOuterOuterMineOrbit()
	end)
end
--	****************************************************************************************  --
--	****				Tweak Terrain Station Manipulation Station Report				****  --
--	****************************************************************************************  --
-------------------------------------------------------------
--	Tweak Terrain > Station manipulation > Station report  --
-------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FRM STN RPT	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -STN MANIPULATION	F	stationManipulation
-- List of regional stations, one per button which calls inline function
function stationReport()
	clearGMFunctions()
	addGMFunction("-Main Frm Stn Rpt",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Stn Manipulation",stationManipulation)
	if regionStations ~= nil and #regionStations > 0 then
		for _, station in ipairs(regionStations) do
			if station ~= nil and station:isValid() and station.comms_data ~= nil then
				addGMFunction(string.format("%s %s",station:getCallSign(),station:getSectorName()),function()
					local out = string.format("%s %s  %s  %s  Friendliness:%s",station:getSectorName(),station:getCallSign(),station:getTypeName(),station:getFaction(),station.comms_data.friendlyness)
					out = string.format("%s\nShares Energy: %s,  Repairs Hull: %s,  Restocks Scan Probes: %s",out,station:getSharesEnergyWithDocked(),station:getRepairDocked(),station:getRestocksScanProbes())
					out = string.format("%s\nFix Probes: %s,  Fix Hack: %s,  Fix Scan: %s,  Fix Combat Maneuver: %s,  Fix Destruct: %s, Fix Slow Tube: %s",out,station.comms_data.probe_launch_repair,station.comms_data.hack_repair,station.comms_data.scan_repair,station.comms_data.combat_maneuver_repair,station.comms_data.self_destruct_repair,station.comms_data.self_destruct_repair,station.comms_data.tube_slow_down_repair)
					out = string.format("%s\nHoming: %s %s %s,   Nuke: %s %s %s,   Mine: %s %s %s,   EMP: %s %s %s,   HVLI: %s %s %s",out,station.comms_data.weapon_available.Homing,station.comms_data.weapons.Homing,station.comms_data.weapon_cost.Homing,station.comms_data.weapon_available.Nuke,station.comms_data.weapons.Nuke,station.comms_data.weapon_cost.Nuke,station.comms_data.weapon_available.Mine,station.comms_data.weapons.Mine,station.comms_data.weapon_cost.Mine,station.comms_data.weapon_available.EMP,station.comms_data.weapons.EMP,station.comms_data.weapon_cost.EMP,station.comms_data.weapon_available.HVLI,station.comms_data.weapons.HVLI,station.comms_data.weapon_cost.HVLI)
					out = string.format("%s\n      Cost multipliers and Max Refill:   Friend: %.1f %.1f,   Neutral: %.1f %.1f",out,station.comms_data.reputation_cost_multipliers.friend,station.comms_data.max_weapon_refill_amount.friend,station.comms_data.reputation_cost_multipliers.neutral,station.comms_data.max_weapon_refill_amount.neutral)
					out = string.format("%s\nServices and their costs:",out)
					for service, cost in pairs(station.comms_data.service_cost) do
						if service == "shield_overcharge" then
							out = string.format("%s\n      %s: %s (%s)",out,service,cost,station.comms_data.shield_overcharge)
						else
							out = string.format("%s\n      %s: %s",out,service,cost)
						end
					end
					if station.comms_data.fast_probes ~= nil then
						out = string.format("%s\nFast Probes: Name:%s   Cost:%s   Quantity:%s   Speed:%s",out,station.comms_data.fast_probes.name,station.comms_data.fast_probes.cost,station.comms_data.fast_probes.quantity,station.comms_data.fast_probes.speed/1000)
					end
					if station.comms_data.remote_warp_jammer ~= nil then
						out = string.format("%s\nRemote Warp Jammer: Name:%s   Cost:%s   Quantity:%s   Speed:%s   Jam Range:%s",out,station.comms_data.remote_warp_jammer.name,station.comms_data.remote_warp_jammer.cost,station.comms_data.remote_warp_jammer.quantity,station.comms_data.remote_warp_jammer.speed/1000,station.comms_data.remote_warp_jammer.warp_jam_range/1000)
					end
					if station.comms_data.sensor_boost ~= nil then
						out = string.format("%s\nSensor Boost: Range:%s   Cost:%s",out,station.comms_data.sensor_boost.value/1000,station.comms_data.sensor_boost.cost)
					end
					if station.comms_data.idle_defense_fleet ~= nil then
						local df_list = ""
						local df_count = 0
						for name, template in pairs(station.comms_data.idle_defense_fleet) do
							if name ~= nil then
								df_count = df_count + 1
								if df_list == "" then
									df_list = string.format("    %s:%s",name,template)
								else
									df_list = string.format("%s, %s:%s",df_list,name,template)
								end
							end
						end
						if df_count > 0 then
							out = string.format("%s\n%i ships in the idle defense fleet:\n%s",out,df_count,df_list)
						end
					end
					if station.comms_data.goods ~= nil or station.comms_data.trade ~= nil or station.comms_data.buy ~= nil then
						out = string.format("%s\nGoods:",out)
						if station.comms_data.goods ~= nil then
							out = string.format("%s\n    Sell:",out)
							for good, good_detail in pairs(station.comms_data.goods) do
								out = string.format("%s\n        %s: Cost:%s   Quantity:%s",out,good,good_detail.cost,good_detail.quantity)
							end
						end
						if station.comms_data.trade ~= nil then
							out = string.format("%s\n    Trade:",out)
							for good, trade in pairs(station.comms_data.trade) do
								out = string.format("%s\n        %s: %s",out,good,trade)
							end
						end
						if station.comms_data.buy ~= nil then
							out = string.format("%s\n    Buy:",out)
							for good, amount in pairs(station.comms_data.buy) do
								out = string.format("%s\n        %s: %s",out,good,amount)
							end
						end
					end
					addGMMessage(out)
					stationReport()
				end)
			end
		end
	else
		addGMMessage("No region stations. No Action taken. Set player start point to get region stations")
	end
end
--	****************************************************************************************  --
--	****				Tweak Terrain Station Manipulation Station Goods				****  --
--	****************************************************************************************  --
------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods  --
------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -MAIN FROM GOODS			F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION MANIPULATION	F	stationManipulation
-- +SELL COMPONENTS			F	stationSellComponents
-- +SELL MINERALS			F	stationSellMinerals
-- +BUY COMPONENTS			F	stationBuyComponents
-- +BUY MINERALS			F	stationBuyMinerals
-- +TRADE GOODS				F	stationTradeGoods
function stationGoods()
	clearGMFunctions()
	addGMFunction("-Main from Goods",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("+Sell Components",stationSellComponents)
	addGMFunction("+Sell Minerals",stationSellMinerals)
	addGMFunction("+Buy Components",stationBuyComponents)
	addGMFunction("+Buy Minerals",stationBuyMinerals)
	addGMFunction("+Trade Goods",stationTradeGoods)
end
------------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods > Sell components  --
------------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -FROM SELL COMPONENTS	F	stationGoods
-- +SELECT STATION			F	stationSellComponents
-- +CHG FRM ...				D	stationSellComponents
-- (good name):... ADD		D	inline (one for each type of component good)
-- (good name):... DEL		D	inline (one for each type of component good)
function stationSellComponents()
	clearGMFunctions()
	addGMFunction("-From Sell Components",stationGoods)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationSellComponents)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationSellComponents)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationSellComponents)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationSellComponents)
			table.sort(componentGoods)
			for _, good in ipairs(componentGoods) do
				local good_quantity = 0
				if selected_station.comms_data ~= nil and selected_station.comms_data.goods ~= nil then
					for station_good, good_detail in pairs(selected_station.comms_data.goods) do
						if station_good == good and good_detail.quantity > 0 then
							good_quantity = good_detail.quantity
						end
					end
				end
				addGMFunction(string.format("%s:%i Add",good,good_quantity),function()
					string.format("")
					if selected_station.comms_data == nil then
						selected_station.comms_data = {}
					end
					if selected_station.comms_data.goods == nil then
						selected_station.comms_data.goods = {}
					end
					if selected_station.comms_data.goods[good] == nil then
						selected_station.comms_data.goods[good] = {cost = math.random(50,80), quantity = 1}
					else
						selected_station.comms_data.goods[good].quantity = selected_station.comms_data.goods[good].quantity + 1
					end
					stationSellComponents()
				end)
				if good_quantity > 0 then
					addGMFunction(string.format("%s:%i Del",good,good_quantity),function()
						selected_station.comms_data.goods[good].quantity = selected_station.comms_data.goods[good].quantity - 1
						stationSellComponents()
					end)
				end
			end
		end
	end
end
----------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods > Sell minerals  --
----------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -FROM SELL MINERALS		F	stationGoods
-- +SELECT STATION			F	stationSellMinerals
-- +CHG FRM ...				D	stationSellMinerals
-- (good name):... ADD		D	inline (one for each type of mineral good)
-- (good name):... DEL		D	inline (one for each type of mineral good)
function stationSellMinerals()
	clearGMFunctions()
	addGMFunction("-From Sell Minerals",stationGoods)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationSellMinerals)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationSellMinerals)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationSellMinerals)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationSellMinerals)
			table.sort(mineralGoods)
			for _, good in ipairs(mineralGoods) do
				local good_quantity = 0
				if selected_station.comms_data ~= nil and selected_station.comms_data.goods ~= nil then
					for station_good, good_detail in pairs(selected_station.comms_data.goods) do
						if station_good == good and good_detail.quantity > 0 then
							good_quantity = good_detail.quantity
						end
					end
				end
				addGMFunction(string.format("%s:%i Add",good,good_quantity),function()
					string.format("")
					if selected_station.comms_data == nil then
						selected_station.comms_data = {}
					end
					if selected_station.comms_data.goods == nil then
						selected_station.comms_data.goods = {}
					end
					if selected_station.comms_data.goods[good] == nil then
						selected_station.comms_data.goods[good] = {cost = math.random(50,80), quantity = 1}
					else
						selected_station.comms_data.goods[good].quantity = selected_station.comms_data.goods[good].quantity + 1
					end
					stationSellMinerals()
				end)
				if good_quantity > 0 then
					addGMFunction(string.format("%s:%i Del",good,good_quantity),function()
						selected_station.comms_data.goods[good].quantity = selected_station.comms_data.goods[good].quantity - 1
						stationSellMinerals()
					end)
				end
			end
		end
	end
end
-----------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods > Buy components  --
-----------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -FROM BUY COMPONENTS		F	stationGoods
-- +SELECT STATION			F	stationBuyComponents
-- +CHG FRM ...				D	stationBuyComponents
-- (good name): ADD			D	inline (one for each type of component good)
-- (good name): DEL			D	inline (one for each type of component good)
function stationBuyComponents()
	clearGMFunctions()
	addGMFunction("-From Buy Components",stationGoods)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationBuyComponents)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationBuyComponents)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationBuyComponents)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationBuyComponents)
			table.sort(componentGoods)
			for _, good in ipairs(componentGoods) do
				local good_price = 0
				if selected_station.comms_data ~= nil and selected_station.comms_data.buy ~= nil then
					for station_good, price in pairs(selected_station.comms_data.buy) do
						if station_good == good then
							good_price = price
						end
					end
				end
				if good_price == 0 then
					addGMFunction(string.format("%s Add",good),function()
						string.format("")
						if selected_station.comms_data == nil then
							selected_station.comms_data = {}
						end
						if selected_station.comms_data.buy == nil then
							selected_station.comms_data.buy = {}
						end
						selected_station.comms_data.buy[good] = math.random(70,100)
						stationBuyComponents()
					end)
				else
					addGMFunction(string.format("%s Del",good),function()
						selected_station.comms_data.buy[good] = nil
						stationBuyComponents()
					end)
				end
			end
		end
	end
end
---------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods > Buy minerals  --
---------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -FROM BUY MINERALS		F	stationGoods
-- +SELECT STATION			F	stationBuyMinerals
-- +CHG FRM ...				D	stationBuyMinerals
-- (good name): ADD			D	inline (one for each type of mineral good)
-- (good name): DEL			D	inline (one for each type of mineral good)
function stationBuyMinerals()
	clearGMFunctions()
	addGMFunction("-From Buy Minerals",stationGoods)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationBuyMinerals)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationBuyMinerals)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationBuyMinerals)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationBuyMinerals)
			table.sort(mineralGoods)
			for _, good in ipairs(mineralGoods) do
				local good_price = 0
				if selected_station.comms_data ~= nil and selected_station.comms_data.buy ~= nil then
					for station_good, price in pairs(selected_station.comms_data.buy) do
						if station_good == good then
							good_price = price
						end
					end
				end
				if good_price == 0 then
					addGMFunction(string.format("%s Add",good),function()
						string.format("")
						if selected_station.comms_data == nil then
							selected_station.comms_data = {}
						end
						if selected_station.comms_data.buy == nil then
							selected_station.comms_data.buy = {}
						end
						selected_station.comms_data.buy[good] = math.random(mineralPriceMin,mineralPriceMax)
						stationBuyMinerals()
					end)
				else
					addGMFunction(string.format("%s Del",good),function()
						selected_station.comms_data.buy[good] = nil
						stationBuyMinerals()
					end)
				end
			end
		end
	end
end
--------------------------------------------------------------------------
--	Tweak Terrain > Station Manipulation > Station goods > Trade goods  --
--------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -FROM TRADE GOODS		F	stationGoods
-- +SELECT STATION			F	stationTradeGoods
-- +CHG FRM ...				D	stationTradeGoods
-- FOOD ADD/DEL				D	inline
-- MEDICINE ADD/DEL			D	inline
-- LUXURY ADD/DEL			D	inline
function stationTradeGoods()
	clearGMFunctions()
	addGMFunction("-From Trade Goods",stationGoods)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationTradeGoods)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationTradeGoods)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationTradeGoods)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationTradeGoods)
			local tradeGoods = {"food","medicine","luxury"}
			for _, good in ipairs(tradeGoods) do
				local good_trade = false
				if selected_station.comms_data ~= nil and selected_station.comms_data.trade ~= nil then
					for station_good, val in pairs(selected_station.comms_data.trade) do
						if station_good == good then
							if val then
								good_trade = true
							end
						end
					end
				end
				if good_trade then
					addGMFunction(string.format("%s Del",good),function()
						selected_station.comms_data.trade[good] = false
						stationTradeGoods()
					end)
				else
					addGMFunction(string.format("%s Add",good),function()
						string.format("")
						if selected_station.comms_data == nil then
							selected_station.comms_data = {}
						end
						if selected_station.comms_data.trade == nil then
							selected_station.comms_data.trade = {}
						end
						selected_station.comms_data.trade[good] = true
						stationTradeGoods()
					end)
				end
			end
		end
	end
end
--	****************************************************************************************  --
--	****				Tweak Terrain Station Manipulation Station Probes				****  --
--	****************************************************************************************  --
-------------------------------------------------------------
--	Tweak Terrain > Station manipulation > Station probes  --
-------------------------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM PROBES	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -STN MANIPULATION	F	stationManipulation
-- +FASTER PROBES		F	fastStationProbes
-- +WARP JAMMER PROBES	F	warpJammerStationProbes
-- +SENSOR BOOST PROBES	F	sensorBoostStationProbes
function stationProbes()
	clearGMFunctions()
	addGMFunction("-Main from probes",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("+Faster Probes",fastStationProbes)
	addGMFunction("+Warp Jammer Probes",warpJammerStationProbes)
	addGMFunction("+Sensor Boost Probes",sensorBoostStationProbes)
end
function stationOrdnance()
	clearGMFunctions()
	addGMFunction("-Main From Ordnance",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Stn Manipulation",stationManipulation)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",stationOrdnance)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",stationOrdnance)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",stationOrdnance)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),stationOrdnance)
			if selected_station.comms_data ~= nil then
				if selected_station.comms_data.weapon_available ~= nil then
					for i, missile_type in ipairs(missile_types) do
						local ord_avail = "N"
						if selected_station.comms_data.weapon_available[missile_type] ~= nil then
							if selected_station.comms_data.weapon_available[missile_type] then
								ord_avail = "Y"
							end
						end
						addGMFunction(string.format("%s %s %i",missile_type,ord_avail,math.floor(selected_station.comms_data.weapon_cost[missile_type])),function()
							string.format("")
							if ord_avail == "Y" then
								selected_station.comms_data.weapon_available[missile_type] = false
							else
								selected_station.comms_data.weapon_available[missile_type] = true
							end
							stationOrdnance()
						end)
					end
				else
					addGMMessage(string.format("No initialized weapon_available list in comms_data for station %s. No action taken",selected_station:getCallSign()))
					stationOrdnance()
				end
			else
				addGMMessage(string.format("No comms_data for station %s. No action taken",selected_station:getCallSign()))
				stationOrdnance()
			end
		end
	end
end

---------------------------------------------------------------------------
--	Tweak Terrain > Station manipulation > Station probes > Fast probes  --
---------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -MAIN FROM FAST		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION MANIPULATION	F	stationManipulation
-- -PROBES					F	stationProbes
-- +SELECT STATION			F	fastStationProbes
-- +CHG FRM ...				D	fastStationProbes
-- MARK 3:... ADD			D	inline
-- GOGO:... ADD				D	inline
-- SCREAMER:... ADD			D	inline
-- MARK 3:... DEL			D	inline
-- GOGO:... DEL				D	inline
-- SCREAMER:... DEL			D	inline
function fastStationProbes()
	clearGMFunctions()
	addGMFunction("-Main from Fast",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("-Probes",stationProbes)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",fastStationProbes)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",fastStationProbes)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",fastStationProbes)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),fastStationProbes)
			local fast_probe_types = {
				["Mark 3"] = 0,
				["Gogo"] = 0,
				["Screamer"] = 0,
			}
			local qty = 0
			local name = ""
			if selected_station.comms_data ~= nil and selected_station.comms_data.fast_probes ~= nil then
				if selected_station.comms_data.fast_probes.quantity ~= nil then
					qty = selected_station.comms_data.fast_probes.quantity
				end
				if selected_station.comms_data.fast_probes.name ~= nil then
					name = selected_station.comms_data.fast_probes.name
				end
				fast_probe_types[name] = qty
			end
			for probe_name, quantity in pairs(fast_probe_types) do
				addGMFunction(string.format("%s:%i Add",probe_name,quantity), function()
					local speed_list = {
						["Mark 3"] = 2000,
						["Gogo"] = 3000,
						["Screamer"] = 4000,
					}
					if selected_station.comms_data ~= nil and selected_station.comms_data.fast_probes ~= nil and selected_station.comms_data.fast_probes.name == probe_name then
						selected_station.comms_data.fast_probes.quantity = selected_station.comms_data.fast_probes.quantity + 1
					else
						selected_station.comms_data.fast_probes = {name = probe_name, cost = math.random(3,8), quantity = 1, speed = speed_list[probe_name]}
					end
					fastStationProbes()
				end)
				if quantity > 0 then
					addGMFunction(string.format("%s:%i Del",probe_name,quantity), function()
						selected_station.comms_data.fast_probes.quantity = selected_station.comms_data.fast_probes.quantity - 1
						fastStationProbes()
					end)
				end
			end
		end
	end
end
----------------------------------------------------------------------------------
--	Tweak Terrain > Station manipulation > Station probes > Warp jammer probes  --
----------------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -MAIN FROM WARP JAM		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION MANIPULATION	F	stationManipulation
-- -PROBES					F	stationProbes
-- +SELECT STATION			F	warpJammerStationProbes
-- +CHG FRM ...				D	warpJammerStationProbes
-- MIRE:... ADD				D	inline
-- SNAG:... ADD				D	inline
-- SWAMP:... ADD			D	inline
-- MIRE:... DEL				D	inline
-- SNAG:... DEL				D	inline
-- SWAMP:... DEL			D	inline
function warpJammerStationProbes()
	clearGMFunctions()
	addGMFunction("-Main from Warp jam",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("-Probes",stationProbes)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",warpJammerStationProbes)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",warpJammerStationProbes)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",warpJammerStationProbes)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),warpJammerStationProbes)
			local warp_jammer_probe_types = {
				["Mire"] = 0,
				["Snag"] = 0,
				["Swamp"] = 0,
			}
			local qty = 0
			local name = ""
			if selected_station.comms_data ~= nil and selected_station.comms_data.remote_warp_jammer ~= nil then
				if selected_station.comms_data.remote_warp_jammer.quantity ~= nil then
					qty = selected_station.comms_data.remote_warp_jammer.quantity
				end
				if selected_station.comms_data.remote_warp_jammer.name ~= nil then
					name = selected_station.comms_data.remote_warp_jammer.name
				end
				warp_jammer_probe_types[name] = qty
			end
			for probe_name, quantity in pairs(warp_jammer_probe_types) do
				addGMFunction(string.format("%s:%i Add",probe_name,quantity), function()
					local speed_list = {
						["Mire"] = 2000,
						["Snag"] = 2500,
						["Swamp"] = 1500,
					}
					local warp_jam_range_list = {
						["Mire"] = 15000,
						["Snag"] = 10000,
						["Swamp"] = 20000,
					}
					if selected_station.comms_data ~= nil and selected_station.comms_data.remote_warp_jammer ~= nil and selected_station.comms_data.remote_warp_jammer.name == probe_name then
						selected_station.comms_data.remote_warp_jammer.quantity = selected_station.comms_data.remote_warp_jammer.quantity + 1
					else
						selected_station.comms_data.remote_warp_jammer = {name = probe_name, cost = math.random(9,20), quantity = 1, speed = speed_list[probe_name], warp_jam_range = warp_jam_range_list[probe_name]}
					end
					warpJammerStationProbes()
				end)
				if quantity > 0 then
					addGMFunction(string.format("%s:%i Del",probe_name,quantity), function()
						selected_station.comms_data.remote_warp_jammer.quantity = selected_station.comms_data.remote_warp_jammer.quantity - 1
						warpJammerStationProbes()
					end)
				end
			end
		end
	end
end
-----------------------------------------------------------------------------------
--	Tweak Terrain > Station manipulation > Station probes > Sensor boost probes  --
-----------------------------------------------------------------------------------
-- Button Text		 	   FD*	Related Function(s)
-- -MAIN FROM SENSOR		F	initialGMFunctions
-- -TWEAK TERRAIN			F	tweakTerrain
-- -STATION MANIPULATION	F	stationManipulation
-- -PROBES					F	stationProbes
-- +SELECT STATION			F	sensorBoostStationProbes
-- +CHG FRM ...				D	sensorBoostStationProbes
-- SPECTACLE:... ADD		D	inline
-- BINOC:... ADD			D	inline
-- SCOPE:... ADD			D	inline
-- SPECTACLE:... DEL		D	inline
-- BINOC:... DEL			D	inline
-- SCOPE:... DEL			D	inline
function sensorBoostStationProbes()
	clearGMFunctions()
	addGMFunction("-Main From Sensor",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Station Manipulation",stationManipulation)
	addGMFunction("-Probes",stationProbes)
	local object_list = getGMSelection()
	if object_list == nil then
		addGMMessage("Nothing selected. Select a station. No action taken")
		addGMFunction("+Select Station",sensorBoostStationProbes)
	else
		local station_count = 0
		local selected_station = nil
		for _, obj in ipairs(object_list) do
			if isObjectType(obj,"SpaceStation") then
				selected_station = obj
				station_count = station_count + 1
			end
		end
		if station_count < 1 then
			addGMMessage("No station selected. Select a station. No action taken")
			addGMFunction("+Select Station",sensorBoostStationProbes)
		elseif station_count > 1 then
			addGMMessage("Select only one station. Select a station. No action taken")
			addGMFunction("+Select Station",sensorBoostStationProbes)
		else
			addGMFunction(string.format("+Chg Frm %s",selected_station:getCallSign()),sensorBoostStationProbes)
			local sensor_boost_probe_types = {
				["Spectacle"] = 0,
				["Binoc"] = 0,
				["Scope"] = 0,
			}
			local qty = 0
			local name = ""
			if selected_station.comms_data ~= nil and selected_station.comms_data.sensor_boost_probes ~= nil then
				if selected_station.comms_data.sensor_boost_probes.quantity ~= nil then
					qty = selected_station.comms_data.sensor_boost_probes.quantity
				end
				if selected_station.comms_data.sensor_boost_probes.name ~= nil then
					name = selected_station.comms_data.sensor_boost_probes.name
				end
				sensor_boost_probe_types[name] = qty
			end
			for probe_name, quantity in pairs(sensor_boost_probe_types) do
				addGMFunction(string.format("%s:%i Add",probe_name,quantity), function()
					local speed_list = {
						["Spectacle"] = 1000,
						["Binoc"] = 1000,
						["Scope"] = 1000,
					}
					local sensor_range_list = {
						["Spectacle"] = 30,
						["Binoc"] = 40,
						["Scope"] = 50,
					}
					local sensor_boost_list = {
						["Spectacle"] = 10,
						["Binoc"] = 20,
						["Scope"] = 30,
					}
					local sensor_cost_list = {
						["Spectacle"] = math.random(16,38),
						["Binoc"] = math.random(39,55),
						["Scope"] = math.random(57,78),
					}
					if selected_station.comms_data ~= nil and selected_station.comms_data.sensor_boost_probes ~= nil and selected_station.comms_data.sensor_boost_probes.name == probe_name then
						selected_station.comms_data.sensor_boost_probes.quantity = selected_station.comms_data.sensor_boost_probes.quantity + 1
					else
						selected_station.comms_data.sensor_boost_probes = {name = probe_name, cost = sensor_cost_list[probe_name], quantity = 1, speed = speed_list[probe_name], range = sensor_range_list[probe_name], boost = sensor_boost_list[probe_name]}
					end
					sensorBoostStationProbes()
				end)
				if quantity > 0 then
					addGMFunction(string.format("%s:%i Del",probe_name,quantity), function()
						selected_station.comms_data.sensor_boost_probes.quantity = selected_station.comms_data.sensor_boost_probes.quantity - 1
						sensorBoostStationProbes()
					end)
				end
			end
		end
	end
end
--	****************************************************************  --
--	****				Tweak Terrain Minefield					****  --
--	****************************************************************  --
-----------------------------------------
--	Tweak Terrain > Minefield > Shape  --
-----------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM SHAPE		F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -MINEFIELD			F	mineField
-- ARC*					*	inline
-- LINE					*	inline
-- CIRCLE				*	inline
-- CUBIC INTERPRETATION	*	inline
-- BLOB					*	inline
function setMineShape()
	clearGMFunctions()
	addGMFunction("-Main From Shape",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Minefield",mineField)
	local button_label = "Arc"
	if mine_shape == "Arc" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		mine_shape = "Arc"
		if  gm_click_mode ~= nil and gm_click_mode:sub(1,4) == "mine" and gm_click_mode:sub(1,8) ~= "mine arc" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		setMineShape()
	end)
	button_label = "Line"
	if mine_shape == "Line" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		mine_shape = "Line"
		if gm_click_mode ~= nil and gm_click_mode:sub(1,4) == "mine" and gm_click_mode:sub(1,9) ~= "mine line" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		setMineShape()
	end)
	button_label = "Circle"
	if mine_shape == "Circle" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		mine_shape = "Circle"
		if  gm_click_mode ~= nil and gm_click_mode:sub(1,4) == "mine" and gm_click_mode:sub(1,11) ~= "mine circle" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		setMineShape()
	end)
	button_label = "Cubic interpolation"
	if mine_shape == "Cubic" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		mine_shape = "Cubic"
		if  gm_click_mode ~= nil and gm_click_mode:sub(1,4) == "mine" and gm_click_mode:sub(1,11) ~= "mine Cubic" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		setMineShape()
	end)
	button_label = "Blob"
	if mine_shape == "Blob" then
		button_label = button_label .. "*"
	end
	addGMFunction(button_label,function()
		mine_shape = "Blob"
		if gm_click_mode ~= nil and gm_click_mode:sub(1,4) == "mine" and gm_click_mode:sub(1,9) ~= "mine blob" then
			gm_click_mode = nil
			onGMClick(nil)
		end
		setMineShape()
	end)
end
-----------------------------------------
--	Tweak Terrain > Minefield > Width  --
-----------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM WIDTH		F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -MINEFIELD			F	mineField
-- WIDTH 1*				*	inline
-- WIDTH 2				*	inline
-- WIDTH 3				*	inline
function setMineWidth()
	clearGMFunctions()
	addGMFunction("-Main From Width",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Minefield",mineField)
	for i=1,3 do
		local button_label = string.format("Width %i",i)
		if mine_width == i then
			button_label = button_label .. "*"
		end
		addGMFunction(button_label,function()
			mine_width = i
			setMineWidth()
		end)
	end
end
------------------------------------------
--	Tweak Terrain > Minefield > Radius  --
------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM RADIUS	F	initialGMFunctions
-- -TWEAK TERRAIN		F	tweakTerrain
-- -MINEFIELD			F	mineField
-- RADIUS 1				*	inline
-- RADIUS 2				*	inline
-- RADIUS 3*			*	inline
-- RADIUS 4				*	inline
-- RADIUS 5				*	inline
function setMineRadius()
	clearGMFunctions()
	addGMFunction("-Main From Radius",initialGMFunctions)
	addGMFunction("-Tweak Terrain",tweakTerrain)
	addGMFunction("-Minefield",mineField)
	if mine_radius > 1 then
		addGMFunction(string.format("Radius %i -> %i",mine_radius,mine_radius - 1),function()
			mine_radius = mine_radius - 1
			setMineRadius()
		end)
	end
	if mine_radius < 25 then
		addGMFunction(string.format("Radius %i -> %i",mine_radius,mine_radius + 1),function()
			mine_radius = mine_radius + 1
			setMineRadius()
		end)
	end
end
--	Minefield functions
function angleFromVectorNorth(p1x,p1y,p2x,p2y)
	TWOPI = 6.2831853071795865
	RAD2DEG = 57.2957795130823209
	atan2parm1 = p2x - p1x
	atan2parm2 = p2y - p1y
	theta = math.atan2(atan2parm1, atan2parm2)
	if theta < 0 then
		theta = theta + TWOPI
	end
	return (360 - (RAD2DEG * theta)) % 360
end
function vectorFromAngleNorth(angle,distance)
--	print("input angle to vectorFromAngleNorth:")
--	print(angle)
	angle = (angle + 270) % 360
	local x, y = vectorFromAngle(angle,distance)
	return x, y
end
--	Line shaped minefield functions
function mineLineStartPoint()
	if gm_click_mode == "mine line start" then
		gm_click_mode = nil
		onGMClick(nil)	
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine line start"
		onGMClick(gmClickMineLineStart)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine line start\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
function mineLineEndPoint()
	if gm_click_mode == "mine end point" then
		gm_click_mode = nil
		onGMClick(nil)
		if mine_line_start_marker ~= nil and mine_line_start_marker:isValid() then
			mine_line_start_marker:destroy()
		end
	end
	mineField()
end
function gmClickMineLineStart(x,y)
	mine_line_start_x = x
	mine_line_start_y = y
	mine_line_start_marker = Asteroid():setPosition(x,y)
	gm_click_mode = "mine line end"
	onGMClick(gmClickMineLineEnd)
	mineField()
end
function gmClickMineLineEnd(x,y)
	mine_line_start_marker:destroy()
	if distance_diagnostic then
		print("distance_diagnostic 12 mine_line_start_x:",mine_line_start_x,"mine_line_start_y:",mine_line_start_y,"x:",x,"y:",y)
	end		
	local line_length = distance(mine_line_start_x,mine_line_start_y,x,y)
	local angle = angleFromVectorNorth(x,y,mine_line_start_x,mine_line_start_y)
	local mine_count = 0
	local placed_mine = Mine():setPosition(mine_line_start_x,mine_line_start_y)
	local mx, my = vectorFromAngleNorth(angle,mine_count*1200)
	local line_angle = 0
	repeat
		mine_count = mine_count + 1
		mx, my = vectorFromAngleNorth(angle,mine_count*1200)
		placed_mine = Mine():setPosition(mine_line_start_x+mx,mine_line_start_y+my)
	until(distance(placed_mine,mine_line_start_x,mine_line_start_y) > line_length)
	if mine_width > 1 then
		line_angle = (angle + 90) % 360
		mx, my = vectorFromAngleNorth(line_angle,1200)
		local start_line_2_x = mine_line_start_x + mx
		local start_line_2_y = mine_line_start_y + my
		placed_mine = Mine():setPosition(start_line_2_x,start_line_2_y)
		mine_count = 0
		repeat
			mine_count = mine_count + 1
			mx, my = vectorFromAngleNorth(angle,mine_count*1200)
			placed_mine = Mine():setPosition(start_line_2_x + mx,start_line_2_y + my)
		until(distance(placed_mine,start_line_2_x,start_line_2_y) > line_length)
	end
	if mine_width > 2 then
		line_angle = (angle + 270) % 360
		mx, my = vectorFromAngleNorth(line_angle,1200)
		local start_line_3_x = mine_line_start_x + mx
		local start_line_3_y = mine_line_start_y + my
		placed_mine = Mine():setPosition(start_line_3_x,start_line_3_y)
		mine_count = 0
		repeat
			mine_count = mine_count + 1
			mx, my = vectorFromAngleNorth(angle,mine_count*1200)
			placed_mine = Mine():setPosition(start_line_3_x + mx,start_line_3_y + my)
		until(distance(placed_mine,start_line_3_x,start_line_3_y) > line_length)
	end
	onGMClick(gmClickMineLineStart)
	gm_click_mode = "mine line start"
	mineField()
end
CubicMineObject = { markers = {}, ghostMines = {} }
function CubicMineObject:cancel()
	assert(type(self)=="table")
	self.markers = destroyEEtable(self.markers)
	self.ghostMines = destroyEEtable(self.ghostMines)
	if gm_click_mode == "mine Cubic" then
		gm_click_mode = nil
		onGMClick(nil)
	end
end
function CubicMineObject:addMarker(x,y)
	assert(type(self)=="table")
	assert(type(x)=="number")
	assert(type(y)=="number")
	table.insert(self.markers,Artifact():setPosition(x,y))
	self:updateNow()
end
function CubicMineObject.isValid() -- the update system checks if we are valid like a SpaceObject
	return true
end
function CubicMineObject:finalize()
	assert(type(self) == "table")
	self:updateNow()
	for i=1,#self.ghostMines do
		if self.ghostMines[i]:isValid() then
			local x,y=self.ghostMines[i]:getPosition()
			Mine():setPosition(x,y)
		end
	end
	self:cancel()
end
function CubicMineObject:updateNow()
	assert(type(self) == "table")
	-- if we have no ghost mines and wont generate any
	if #self.ghostMines==0 and #self.markers<4 then
		return
	end

	-- the markers can become invalid if destroyed by the GM or eaten by blackholes
	self.markers = removeInvalidFromEETable(self.markers)

	local pos_tbl = {}
	for i=1,#self.markers do
		local x,y=self.markers[i]:getPosition()
		table.insert(pos_tbl,{x=x,y=y})
	end

	-- destroying and recreating the artifacts is very expensive in terms of network IO
	-- there is also some major oddities if the server window is on main screen or engineering
	-- presumibly relating to objects being tracked somewhere in that client
	-- so while it is more of a pain we are going to reuse the old artifacts
	local artifactsToReuse=removeInvalidFromEETable(self.ghostMines)
	self.ghostMines={}

	-- there probably is a nice algorithm to figure out given a curve with these parameters
	-- where is the next point along it that is X units from the previous one
	-- I do not know it
	-- We could do a algorithm along the lines of
	-- at T=0 and T=1 the difference is 10k, we want a difference of 500, therefore try T=0.05
	-- that sounds complicated vs what we want
	-- some inaccuracy in mine placement is unlikely to be noticed
	-- so what we do is
	-- Pick a small delta value to itterate along the curve and to figure out if the next mine is placed at that increment
	-- the delta value wants to be large enough to be fast, but small enough to get all mine points on a large curve
	-- if too large mine gaps are observed, it may be worth tweaking these two values
	local max_dist = 200 * 1000
	local min_mine_dist = 1000
	local delta = 1/(max_dist/min_mine_dist)
	local last_x = nil
	local last_y = nil
	if #self.markers>=4 then
		for t=1,#self.markers-2,delta do
			local x,y = extraMath.CubicInterpolate2DTable(pos_tbl,t)
			local x,y = extraMath.CubicInterpolate2DTable(pos_tbl,t)
			if last_x == nil or distance(last_x,last_y,x,y) > min_mine_dist then
				last_x,last_y=x,y
				local newArtifact=nil
				if not (#artifactsToReuse==0) then
					-- techincally this flips the order of the artifacts
					-- which probably doesnt matter but is kind of odd if players get a scan on one
					-- this in turn probably doesnt matter as this should be off screen vs the players
					-- I am going to leave it this way round as it should be higher perfomance removing
					-- elements from the end of the array
					newArtifact=artifactsToReuse[#artifactsToReuse]
					table.remove(artifactsToReuse,#artifactsToReuse)
				else
					newArtifact=Artifact()
				end
				newArtifact:setPosition(x,y)
				table.insert(self.ghostMines,newArtifact)
			end
		end
	end
	destroyEEtable(artifactsToReuse)
end
function CubicMineObject:addToUpdate()
	assert(type(self)=="table")
	local update_data = {
		update = function (self, obj, delta)
			-- in testing network use and CPU is minimal, so call the recalculation each update
			obj:updateNow(delta)
		end
	}
	update_system:addUpdate(self,"Cubic GM control",update_data)
end
function addCubicMineMarker()
	if gm_click_mode == "mine Cubic" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine Cubic"
		onGMClick(function (x,y) CubicMineObject:addMarker(x,y) end)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine Cubic\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
--	Arc shaped minefield functions
function mineArcCenterPoint()
	if gm_click_mode == "mine arc center" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine arc center"
		onGMClick(gmClickMineArcCenter)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine arc center\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
function mineArcStartPoint()
	if gm_click_mode == "mine arc start" then
		gm_click_mode = nil
		onGMClick(nil)
		if mine_arc_center_marker ~= nil and mine_arc_center_marker:isValid() then
			mine_arc_center_marker:destroy()
		end
	end
	mineField()
end
function mineArcEndPoint()
	if gm_click_mode == "mine arc end" then
		gm_click_mode = nil
		onGMClick(nil)
		if mine_arc_center_marker ~= nil and mine_arc_center_marker:isValid() then
			mine_arc_center_marker:destroy()
		end
		if mine_arc_start_marker ~= nil and mine_arc_start_marker:isValid() then
			mine_arc_start_marker:destroy()
		end
	end
	mineField()
end
function gmClickMineArcCenter(x,y)
	mine_arc_center_x = x
	mine_arc_center_y = y
	mine_arc_center_marker = Asteroid():setPosition(x,y)
	gm_click_mode = "mine arc start"
	onGMClick(gmClickMineArcStart)
	mineField()
end
function gmClickMineArcStart(x,y)
	mine_arc_start_x = x
	mine_arc_start_y = y
	mine_arc_center_marker:setSize(1000)
	mine_arc_start_marker = Asteroid():setPosition(x,y)
	gm_click_mode = "mine arc end"
	onGMClick(gmClickMineArcEnd)
	mineField()
end
function gmClickMineArcEnd(x,y)
	mine_arc_start_marker:destroy()
	mine_arc_center_marker:destroy()
	if distance_diagnostic then
		print("distance_diagnostic 13 mine_arc_start_x:",mine_arc_start_x,"mine_arc_start_y:",mine_arc_start_y,"mine_arc_center_x:",mine_arc_center_x,"mine_arc_center_y:",mine_arc_center_y)
	end		
	local arc_radius = distance(mine_arc_center_x,mine_arc_center_y,mine_arc_start_x,mine_arc_start_y)
	local angle = angleFromVectorNorth(mine_arc_start_x,mine_arc_start_y,mine_arc_center_x,mine_arc_center_y)
	local final_angle = angleFromVectorNorth(x,y,mine_arc_center_x,mine_arc_center_y)
	local mine_count = 0
	local mx, my = vectorFromAngleNorth(angle,arc_radius)
	local placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
	local angle_increment = 0
	repeat
		angle_increment = angle_increment + 0.1
		mx, my = vectorFromAngleNorth(angle + angle_increment,arc_radius)
	until(distance(placed_mine,mine_arc_center_x+mx,mine_arc_center_y+my) > 1200)
	if final_angle <= angle then
		final_angle = final_angle + 360
	end
	local start_angle = angle
	repeat
		angle = angle + angle_increment
		mx, my = vectorFromAngleNorth(angle,arc_radius)
		placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
	until(angle > final_angle)
	if mine_width > 1 then
		angle = start_angle
		mx, my = vectorFromAngleNorth(angle,arc_radius+1200)
		placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
		repeat
			angle_increment = angle_increment + 0.1
			mx, my = vectorFromAngleNorth(angle + angle_increment,arc_radius + 1200)
		until(distance(placed_mine,mine_arc_center_x+mx,mine_arc_center_y+my) > 1200)
		repeat
			angle = angle + angle_increment
			mx, my = vectorFromAngleNorth(angle,arc_radius + 1200)
			placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
		until(angle > final_angle)
	end
	if mine_width > 2 then
		angle = start_angle
		mx, my = vectorFromAngleNorth(angle,arc_radius+2400)
		placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
		repeat
			angle_increment = angle_increment + 0.1
			mx, my = vectorFromAngleNorth(angle + angle_increment,arc_radius + 2400)
		until(distance(placed_mine,mine_arc_center_x+mx,mine_arc_center_y+my) > 1200)
		repeat
			angle = angle + angle_increment
			mx, my = vectorFromAngleNorth(angle,arc_radius + 2400)
			placed_mine = Mine():setPosition(mine_arc_center_x+mx,mine_arc_center_y+my)
		until(angle > final_angle)
	end
	onGMClick(gmClickMineArcCenter)
	gm_click_mode = "mine arc center"
	mineField()
end
--	Circle shaped minefield functions
function mineCircle()
	if gm_click_mode == "mine circle" then
		gm_click_mode = nil
		onGMClick(nil)
	else
		local prev_mode = gm_click_mode
		gm_click_mode = "mine circle"
		onGMClick(gmClickMineCircle)
		if prev_mode ~= nil then
			addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   mine circle\nGM click mode.",prev_mode))
		end
	end
	mineField()
end
function gmClickMineCircle(x,y)
	local angle = random(0,360)
	local mx = 0
	local my = 0
	local mine_circle = {
		{inner_count = 4,	mid_count = 10,		outer_count = 15},	--1
		{inner_count = 9,	mid_count = 15,		outer_count = 20},	--2
		{inner_count = 15,	mid_count = 20,		outer_count = 25},	--3
		{inner_count = 20,	mid_count = 25,		outer_count = 30},	--4
		{inner_count = 25,	mid_count = 30,		outer_count = 36},	--5
		{inner_count = 30,	mid_count = 36,		outer_count = 40},	--6
		{inner_count = 36,	mid_count = 40,		outer_count = 45},	--7
		{inner_count = 40,	mid_count = 45,		outer_count = 50},	--8
		{inner_count = 45,	mid_count = 50,		outer_count = 55},	--9
		{inner_count = 50,	mid_count = 55,		outer_count = 60},	--10
		{inner_count = 55,	mid_count = 60,		outer_count = 66},	--11
		{inner_count = 60,	mid_count = 66,		outer_count = 72},	--12
		{inner_count = 66,	mid_count = 72,		outer_count = 78},	--13
		{inner_count = 72,	mid_count = 78,		outer_count = 84},	--14
		{inner_count = 78,	mid_count = 84,		outer_count = 90},	--15
		{inner_count = 84,	mid_count = 90,		outer_count = 95},	--16
		{inner_count = 90,	mid_count = 95,		outer_count = 100},	--17
		{inner_count = 95,	mid_count = 100,	outer_count = 105},	--18
		{inner_count = 100,	mid_count = 105,	outer_count = 110},	--19
		{inner_count = 105,	mid_count = 110,	outer_count = 115},	--20
		{inner_count = 110,	mid_count = 115,	outer_count = 120},	--21
		{inner_count = 115,	mid_count = 120,	outer_count = 125},	--22
		{inner_count = 120,	mid_count = 125,	outer_count = 130},	--23
		{inner_count = 125,	mid_count = 130,	outer_count = 135},	--24
		{inner_count = 130,	mid_count = 135,	outer_count = 140},	--25
	}
	for i=1,mine_circle[mine_radius].inner_count do
		mx, my = vectorFromAngle(angle,mine_radius*1000)
		Mine():setPosition(x+mx,y+my)
		angle = (angle + (360/mine_circle[mine_radius].inner_count)) % 360
	end
	if mine_width > 1 then
		for i=1,mine_circle[mine_radius].mid_count do
			mx, my = vectorFromAngle(angle,mine_radius*1000 + 1200)
			Mine():setPosition(x+mx,y+my)
			angle = (angle + (360/mine_circle[mine_radius].mid_count)) % 360
		end
	end
	if mine_width > 2 then
		for i=1,mine_circle[mine_radius].outer_count do
			mx, my = vectorFromAngle(angle,mine_radius*1000 + 2400)
			Mine():setPosition(x+mx,y+my)
			angle = (angle + (360/mine_circle[mine_radius].outer_count)) % 360
		end
	end
end
--	*												   *  --
--	**												  **  --
--	****************************************************  --
--	****				Countdown Timer				****  --
--	****************************************************  --
--	**												  **  --
--	*												   *  --
---------------------------------
--	Countdown Timer > Display  --
---------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM TIMER		F	initialGMFunctions
-- -FROM DISPLAY		F	countdownTimer
-- HELM					*	inline	(choices are not mutually exclusive)
-- WEAPONS				*	inline
-- ENGINEER				*	inline
-- SCIENCE				*	inline
-- RELAY				*	inline
function GMTimerDisplay()
	clearGMFunctions()
	addGMFunction("-Main from Timer",initialGMFunctions)
	addGMFunction("-From Display",countdownTimer)
	local timer_label = "Helm"
	if timer_display_helm then
		timer_label = timer_label .. "*"
	end
	addGMFunction(timer_label, function()
		if timer_display_helm then
			timer_display_helm = false
		else
			timer_display_helm = true
		end
		GMTimerDisplay()
	end)
	timer_label = "Weapons"
	if timer_display_weapons then
		timer_label = timer_label .. "*"
	end
	addGMFunction(timer_label, function()
		if timer_display_weapons then
			timer_display_weapons = false
		else
			timer_display_weapons = true
		end
		GMTimerDisplay()
	end)
	timer_label = "Engineer"
	if timer_display_engineer then
		timer_label = timer_label .. "*"
	end
	addGMFunction(timer_label, function()
		if timer_display_engineer then
			timer_display_engineer = false
		else
			timer_display_engineer = true
		end
		GMTimerDisplay()
	end)
	timer_label = "Science"
	if timer_display_science then
		timer_label = timer_label .. "*"
	end
	addGMFunction(timer_label, function()
		if timer_display_science then
			timer_display_science = false
		else
			timer_display_science = true
		end
		GMTimerDisplay()
	end)
	timer_label = "Relay"
	if timer_display_relay then
		timer_label = timer_label .. "*"
	end
	addGMFunction(timer_label, function()
		if timer_display_relay then
			timer_display_relay = false
		else
			timer_display_relay = true
		end
		GMTimerDisplay()
	end)
end
--------------------------------
--	Countdown Timer > Length  --
--------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM TIMER		F	initialGMFunctions
-- -FROM LENGTH			F	countdownTimer
-- 1 MINUTE				*	inline
-- 3 MINUTES			*	inline
-- 5 MINUTES*			*	inline		asterisk = current selection
-- 10 MINUTES			*	inline
-- 15 MINUTES			*	inline
-- 20 MINUTES			*	inline
-- 30 MINUTES			*	inline
-- 45 MINUTES			*	inline
function GMTimerLength()
	clearGMFunctions()
	addGMFunction("-Main from Timer",initialGMFunctions)
	addGMFunction("-From Length",countdownTimer)
	local length_label = ""
	if timer_start_length == 1 then
		length_label = "1 Minute*"
	else
		length_label = "1 Minute"
	end
	addGMFunction(length_label, function()
		timer_start_length = 1
		GMTimerLength()
	end)
	if timer_start_length == 3 then
		length_label = "3 Minutes*"
	else
		length_label = "3 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 3
		GMTimerLength()
	end)
	if timer_start_length == 5 then
		length_label = "5 Minutes*"
	else
		length_label = "5 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 5
		GMTimerLength()
	end)
	if timer_start_length == 10 then
		length_label = "10 Minutes*"
	else
		length_label = "10 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 10
		GMTimerLength()
	end)
	if timer_start_length == 15 then
		length_label = "15 Minutes*"
	else
		length_label = "15 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 15
		GMTimerLength()
	end)
	if timer_start_length == 20 then
		length_label = "20 Minutes*"
	else
		length_label = "20 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 20
		GMTimerLength()
	end)
	if timer_start_length == 30 then
		length_label = "30 Minutes*"
	else
		length_label = "30 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 30
		GMTimerLength()
	end)
	if timer_start_length == 45 then
		length_label = "45 Minutes*"
	else
		length_label = "45 Minutes"
	end
	addGMFunction(length_label, function()
		timer_start_length = 45
		GMTimerLength()
	end)
end
---------------------------------
--	Countdown Timer > Purpose  --
---------------------------------
-- Button Text			   FD*	Related Function(s)
-- -MAIN FROM TIMER			F	initialGMFunctions
-- -FROM PURPOSE			F	countdownTimer
-- TIMER*					*	inline		asterisk = current selection
-- DEATH					*	inline
-- BREAKDOWN				*	inline
-- MISSION					*	inline
-- DEPARTURE				*	inline
-- DESTRUCTION				*	inline
-- DISCOVERY				*	inline
-- USE SELECTED OBJ DESC	F*	inline
-- USOD: ...				D*	inline
function GMTimerPurpose()
	clearGMFunctions()
	addGMFunction("-Main from Timer",initialGMFunctions)
	addGMFunction("-From Purpose",countdownTimer)
	if purpose_label == nil then
		purpose_label = {
			"Timer"				,
			"Death"				,
			"Breakdown"			,
			"Mission"			,
			"Departure"			,
			"Destruction"		,
			"Discovery"			,
		}
	end
	local button_label = nil
	for i=1,#purpose_label do
		local current_purpose = purpose_label[i]
		if timer_purpose == current_purpose then
			button_label = string.format("%s*",current_purpose)
		else
			button_label = current_purpose
		end
		addGMFunction(button_label,function()
			timer_purpose = current_purpose
			GMTimerPurpose()
		end)
	end
	button_label = "Use Selected Obj Desc"
	if object_description_timer_text ~= nil then
		button_label = string.format("USOD: %s",object_description_timer_text)
		if timer_purpose == object_description_timer_text then
			button_label = string.format("%s*",button_label)
		end
	end
	addGMFunction(button_label, function()
		local obj_list = getGMSelection()
		if #obj_list ~= 1 then
			addGMMessage("Select one object. No action taken. You should already have the unscanned description field of the object you select contain the desired timer label text")
		else
			local desc = obj_list[1]:getDescription("notscanned")
			if desc ~= nil and desc ~= "" then
				object_description_timer_text = desc
			else
				addGMMessage("Select one object. No action taken. You should already have the unscanned description field of the object you select contain the desired timer label text")
			end
		end
		if object_description_timer_text ~= nil then
			timer_purpose = object_description_timer_text
		end
		GMTimerPurpose()
	end)
end
------------------------------
--	Countdown Timer > Type  --
------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM TYPE			F	countdownTimer
-- -TIME				*	inline
-- -PERCENT				*	inline
function GMTimerType()
	clearGMFunctions()
	addGMFunction("-From Type",countdownTimer)
	local label = "time"
	if timer_type == "time" then
		label = "time*"
	end
	addGMFunction(label, function()
		timer_type = "time"
		GMTimerType()
	end)
	label = "Percent"
	if timer_type == "Percent" then
		label = "Percent*"
	end
	addGMFunction(label, function()
		timer_type = "Percent"
		GMTimerType()
	end)
end
--	Designed to be called from a web service
function setTimerPurpose(purpose)
	timer_purpose = purpose
end
describeFunction(
	"setTimerPurpose",
	"change the purpose of the current timer",
	{
		{"Purpose", "string"},
	}
)
-------------------------------------
--	Countdown Timer > Add Seconds  --
-------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -FROM ADD SECONDS	F	countdownTimer
-- ADD 1 SECONDS		F	inline
-- ADD 3 SECONDS		F	inline
-- ADD 5 SECONDS		F	inline
-- ADD 10 SECONDS		F	inline
function addSecondsToTimer()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Add Seconds",countdownTimer)
	addGMFunction("Add 1 second",function()
		local prev_timer_value = timer_value
		timer_value = timer_value + 1
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Add 3 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value + 3
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Add 5 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value + 5
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Add 10 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value + 10
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
end
----------------------------------------
--	Countdown Timer > Delete Seconds  --
----------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -FROM DEL SECONDS	F	countdownTimer
-- DEL 1 SECONDS		F	inline
-- DEL 3 SECONDS		F	inline
-- DEL 5 SECONDS		F	inline
-- DEL 10 SECONDS		F	inline
function deleteSecondsFromTimer()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Del Seconds",countdownTimer)
	addGMFunction("Del 1 second",function()
		local prev_timer_value = timer_value
		timer_value = timer_value - 1
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Del 3 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value - 3
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Del 5 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value - 5
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
	addGMFunction("Del 10 seconds",function()
		local prev_timer_value = timer_value
		timer_value = timer_value - 10
		addGMMessage(string.format("Timer changed from %.1f to %.1f",prev_timer_value,timer_value))
	end)
end
--------------------------------------
--	Countdown Timer > Change Speed  --
--------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN				F	initialGMFunctions
-- -FROM CHANGE SPEED	F	countdownTimer
-- SLOW DOWN			D	inline
-- NORMALIZE			F	inline
-- SPEED UP				D	inline
function changeTimerSpeed()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-From Change Speed",countdownTimer)
	local button_label = "Speed up"
	if timer_scale > 1 then
		button_label = string.format("%s %.3f",button_label,timer_scale)
	end
	addGMFunction(button_label,function()
		setTimerScale(timer_scale + .05)
		changeTimerSpeed()
	end)
	addGMFunction("Normalize",function()
		setTimerScale(1)
		changeTimerSpeed()
	end)
	button_label = "Slow down"
	if timer_scale < 1 then
		button_label = string.format("%s %.3f",button_label,timer_scale)
	end
	addGMFunction(button_label,function()
		setTimerScale(timer_scale - .05)
		changeTimerSpeed()
	end)
end
--	Designed to be called from a web service
function setTimerScale(scale)
	timer_scale = scale
end
describeFunction(
	"setTimerScale",
	"change the scale current timer",
	{
		{"scale", "number",1},
	}
)
--	*											   *  --
--	**											  **  --
--	************************************************  --
--	****				End Session				****  --
--	************************************************  --
--	**											  **  --
--	*											   *  --
-----------------------------------
--	End Session > Region Report  --
-----------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM REGION	F	initialGMFunctions
-- -END SESSION			F	endSession
-- ICARUS REPORT		F	inline
function regionReport()
	clearGMFunctions()
	addGMFunction("-Main From Region",initialGMFunctions)
	addGMFunction("-End Session",endSession)
	if icarus_color then
		addGMFunction("Icarus Report",function()
			local icarus_report = "Icarus Region Report:"
			local stations_destroyed = ""
			local all_survived = true
			for name, station in pairs(station_names) do
				if station[2] == nil or not station[2]:isValid() then
					all_survived = false
					stations_destroyed = string.format("%s\n    %s %s",stations_destroyed,station[1],name)
				end
			end
			if all_survived then
				icarus_report = icarus_report .. "\n  All stations survived"
			else
				icarus_report = string.format("%s\n  Stations Destroyed:%s",icarus_report,stations_destroyed)
			end
			addGMMessage(icarus_report)
			print(icarus_report)
		end)
	end
	if kentar_color then
		addGMFunction("Kentar Report",function()
			local kentar_report = "Kentar Region Report:"
			local stations_destroyed = ""
			local all_survived = true
			for name, station in pairs(station_names) do
				if station[2] == nil or not station[2]:isValid() then
					all_survived = false
					stations_destroyed = string.format("%s\n    %s %s",stations_destroyed,station[1],name)
				end
			end
			if all_survived then
				kentar_report = kentar_report .. "\n  All stations survived"
			else
				kentar_report = string.format("%s\n  Stations Destroyed:%s",kentar_report,stations_destroyed)
			end
			addGMMessage(kentar_report)
			print(kentar_report)
		end)
	end
end
-------------------------------------
--	End Session > Faction Victory  --
-------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -FROM VICTORY		F	inline
-- HUMAN VICTORY		F	inline
-- KRAYLOR VICTORY		F	inline
-- EXUARI VICTORY		F	inline
-- GHOST VICTORY		F	inline
-- ARLENIAN VICTORY		F	inline
-- INDEPENDENT VICTORY	F	inline
-- KTLITAN VICTORY		F	inline
-- TSN VICTORY			F	inline
-- USN VICTORY			F	inline
-- CUF VICTORY			F	inline
function endMission()
	clearGMFunctions()
	addGMFunction("-from Victory",endSession)
	addGMFunction("Human Victory",function()
		victory("Human Navy")
	end)
	addGMFunction("Kraylor Victory",function()
		victory("Kraylor")
	end)
	addGMFunction("Exuari Victory",function() 
		victory("Exuari")
	end)
	addGMFunction("Ghost Victory",function() 
		victory("Ghosts")
	end)
	addGMFunction("Arlenian Victory",function() 
		victory("Arlenians")	
	end)
	addGMFunction("Independent Victory",function() 
		victory("Independent")
	end)
	addGMFunction("Ktlitan Victory",function() 
		victory("Ktlitans")
	end)
	addGMFunction("TSN Victory",function()
		victory("TSN")
	end)
	addGMFunction("USN Victory",function()
		victory("USN")
	end)
	addGMFunction("CUF Victory",function()
		victory("CUF")
	end)
end
--	*										   *  --
--	**										  **  --
--	********************************************  --
--	****				Custom				****  --
--	********************************************  --
--	**										  **  --
--	*										   *  --
-------------------------
--	Custom > Snippets  --
-------------------------
--Due to the intent of this being high churn I am skipping the customary list of buttons

-- these are fragments of code which may be of use as is
-- they currently don't live in a menu that they should eventually
-- and they may lack being generic enough to be part of the sandbox proper
-- note to people adding to them
-- please put a reason as to at least one of
-- 1) why they exist
-- 2) why they aren't in a menu
-- 3) why they aren't generic enough to be in a menu
function snippetButtons()
	clearGMFunctions()
	addGMFunction("-Main From snippet",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	-- set up for moons game for 2020-07-18
	-- there are parameters in there that where tunned for that game
	-- it detestably should be moved elsewhere
	-- ideally it would be made so the tunned parameters could be set at run time
	addGMFunction("+callsign cycle",callsignCycle)
	-- starry suggested replacement for scan points menu
	-- currently the stock EE build lacks onGMClick and tweak menu additions
	addGMFunction("Expire Selected", function ()
		for k,v in pairs(getGMSelection()) do
			update_system:addTimeToLiveUpdate(v)
		end
	end)
	-- Test science database content
	-- Can't think of a good section for this
	addGMFunction("+Science DB",scienceDatabase)
	-- Customize the sound made when the tractor beam is engaged
	-- Will remove once experimentation is complete (and defaults set)
	addGMFunction("+Tractor Sound",tractorSound)
end
-------------------------
--	Custom > One-Offs  --
-------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM 1-OFFS	F	initialGMFunctions
-- -CUSTOM				F	customButtons
-- +MOTM				F	mmotmOneOff
-- +STARRY				F	starryOneOff
-- +KOSAI				F	kosaiOneOff
function oneOffs()
	clearGMFunctions()
	addGMFunction("-Main From 1-Offs",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("+MMOTM",mmotmOneOff)
	addGMFunction("+Starry",starryOneOff)
	addGMFunction("+Kosai",kosaiOneOff)
	addGMFunction("+Xansta",xanstaOneOff)
end
----------------------------------------------
--	Custom > Dangerous description grabber  --
----------------------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN			F	initialGMFunctions
-- -CUSTOM			F	customButtons
-- BREAK MY GAME	F	inline
function mollyGuardLoadDescription()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("break my game",singleObjectFunction(function(o)load(o:getDescription("notscanned"))()end))
end
-- eh this should live somewhere else, but let it be a reminder to simplify other code
-- there also should be some similar ones for playerships, spaceships etc
function singleObjectFunction(fn)
	return function ()
		local object_list = getGMSelection()
		if #object_list ~= 1 then
			addGMMessage("you must select one object")
			return
		end
		fn(object_list[1])
	end
end
--	****************************************************************  --
--	****				Custom Snippets							****  --
--	****************************************************************  --
-------------------------------------------
--	Custom > Snippets > Call Sign Cycle  --
-------------------------------------------
-- -MAIN		F	initialGMFunctions
-- -CUSTOM		F	customButtons
-- -SNIPPETS	F	snippetButtons
-- List of buttons to select a parameter
function callsignCycle()
	clearGMFunctions()
	addGMFunction("-Main",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-Snippets",snippetButtons)
	local params = {
		{"setup",450,200,1,2,0},
		{"drone",75,60,1,2,200},
		{"fighter",50,60,1,2,100},
		{"beam",100,150,1,2,400},
		{"missile",100,150,1,2,600},
		{"chaser",50,30,1,2,500},
		{"adder",75,60,1,2,350}
	}
	for param_index=1,#params do
		local param = params[param_index]
		addGMFunction(param[1],function()
			local objectList = getGMSelection()
			if #objectList == 0 then
				addGMMessage("Need to select a target(s) for this to apply to")
				return
			end
			for index = 1,#objectList do
				local callbackFunction = function(self,obj)
					local num=param[2]*(param[3]*math.cos(getScenarioTime()*param[4])/getScenarioTime()*param[5])+param[6]
					local str=string.format("%.2f",num)
					self:setCallSign(str)
				end
				update_system:addPeriodicCallback(objectList[index],callbackFunction,0.1);
			end
		end)
	end
end
--------------------------------------------
--	Custom > Snippets > Science Database  --
--------------------------------------------
-- -MAIN FROM SCIENCE DB	F	initialGMFunctions
-- -CUSTOM					F	customButtons
-- -SNIPPETS				F	snippetButtons
-- TRAVERSE					F	inline
-- DUMP						F	inline
function scienceDatabase()
	clearGMFunctions()
	addGMFunction("-Main From Science DB",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-Snippets",snippetButtons)
	addGMFunction("Traverse",function()
		local function printDb(entry, indent)
			indent = indent or 0
			local pad = ""
			for _=1,indent do 
				pad = pad .. " " 
			end
			print(pad .. "* " .. entry:getName())
			if (entry:hasEntries()) then
				for _, child in pairs(entry:getEntries()) do
					printDb(child, indent + 2)
				end
			end
		end
		for _, entry in pairs(getScienceDatabases()) do
			printDb(entry)
		end
	end)
	addGMFunction("Dump",function()
		local dump_db = queryScienceDatabase("Ships", "Corvette", "Atlantis X23")
		print(dump_db:getName() .. "\n\n" .. dump_db:getLongDescription())
		local extracted_image = dump_db:getImage()
		print(extracted_image)
		for key, value in pairs(dump_db:getKeyValues()) do
			print(string.format("%20s: %25s", key, value))
		end
	end)
end
-----------------------------------------
--	Custom > Snippets > Tractor Sound  --
-----------------------------------------
-- -MAIN FROM TRACTOR SOUND	F	initialGMFunctions
-- -CUSTOM					F	customButtons
-- -SNIPPETS				F	snippetButtons
-- 0.2 POWER ^ -> 1.2		D	inline
-- 0.2 POWER ^ -> 0.3		D	inline
-- 0.2 POWER V -> -0.8		D	inline
-- 0.2 POWER V -> 0.1		D	inline
-- List of sound types to choose from with * on current selection
function tractorSound()
	clearGMFunctions()
	addGMFunction("-Main From Tractor Sound",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-Snippets",snippetButtons)
	addGMFunction(string.format("%.1f Power ^ -> %.1f",tractor_sound_power, tractor_sound_power + 1),function()
		tractor_sound_power = tractor_sound_power + 1
		tractorSound()
	end)
	addGMFunction(string.format("%.1f Power ^ -> %.1f",tractor_sound_power, tractor_sound_power + .1),function()
		tractor_sound_power = tractor_sound_power + .1
		tractorSound()
	end)
	addGMFunction(string.format("%.1f Power V -> %.1f",tractor_sound_power, tractor_sound_power - 1),function()
		tractor_sound_power = tractor_sound_power - 1
		tractorSound()
	end)
	addGMFunction(string.format("%.1f Power V -> %.1f",tractor_sound_power, tractor_sound_power - .1),function()
		tractor_sound_power = tractor_sound_power - .1
		tractorSound()
	end)
	local stock_sounds = {
		["Button"] = "button.wav",
		["Explosion"] = "explosion.wav",
		["Laser"] = "laser.wav",
		["Missile Launch"] = "missile_launch.wav",
		["EMP Explosion"] = "sfx/emp_explosion.wav",
		["Engine Fighter"] = "sfx/engine_fighter.wav",
		["Engine"] = "sfx/engine.wav",
		["HVLI Fire"] = "sfx/hvli_fire.wav",
		["Laser Fire"] = "sfx/laser_fire.wav",
		["Nuke Explosion"] = "sfx/nuke_explosion.wav",
		["R Launch"] = "sfx/rlaunch.wav",
		["Shield Down"] = "shield_down.wav",
		["Shield Up"] = "shield_up.wav",
	}
	for sound_name, file_name in pairs(stock_sounds) do
		if tractor_sound == file_name then
			sound_name = sound_name .. "*"
		end
		addGMFunction(sound_name,function()
			tractor_sound = file_name
			local tractor_sound_message = string.format("Tractor sound set to %s",file_name)
			addGMMessage(tractor_sound_message)
			tractorSound()
		end)
	end
end
--	****************************************************************  --
--	****				Custom One-Offs							****  --
--	****************************************************************  --
---------------------------------
--	Custom > One-Offs > MMOTM  --
---------------------------------
-- Button Text	   FD*	Related Function(s)
-- -MAIN FROM MMOTM	F	initialGMFunctions
-- -CUSTOM			F	customButtons
-- -ONE-OFFS		F	oneOffs
-- GHOST SETUP		F	inline
-- BOSS BATTLE		F	inline
function mmotmOneOff()
	clearGMFunctions()
	addGMFunction("-Main From MMOTM",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	addGMFunction("ghost setup",function()
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Defense platform"):setCallSign("DP2"):setPosition(583206, 296210)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12.M"):setCallSign("NC9"):setPosition(586733, 288815):setWeaponStorage("Nuke", 0):setWeaponStorage("HVLI", 6)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12.M"):setCallSign("VS10"):setPosition(585369, 288737):setWeaponStorage("Nuke", 0):setWeaponStorage("HVLI", 6)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("SS11"):setPosition(585379, 289271)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("CV16"):setPosition(586718, 288183)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Storm"):setCallSign("UTI20"):setPosition(586045, 288149):setWeaponStorage("Homing", 10)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("VK15"):setPosition(585369, 288257)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Defense platform"):setCallSign("DP6"):setPosition(589491, 296139)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Starhammer II"):setCallSign("terminus"):setPosition(586037, 289433):setWeaponStorage("Homing", 3):setWeaponStorage("EMP", 1)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("VS12"):setPosition(586289, 289313)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12.M"):setCallSign("S8"):setPosition(585402, 303565):setWeaponStorage("Nuke", 0):setWeaponStorage("HVLI", 6)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12.M"):setCallSign("BR7"):setPosition(586766, 303705):setWeaponStorage("Nuke", 0):setWeaponStorage("HVLI", 6)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("NC18"):setPosition(586766, 304106)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("SS13"):setPosition(585660, 303233)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Starhammer II"):setCallSign("SCMODS"):setPosition(586067, 303113):setWeaponStorage("Homing", 3):setWeaponStorage("EMP", 1)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Transport5x5"):setCallSign("talos"):setPosition(586469, 302949)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Storm"):setCallSign("VK19"):setPosition(586033, 304397):setWeaponStorage("Homing", 10)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("CCN14"):setPosition(586733, 303249)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Nirvana R5A"):setCallSign("CSS17"):setPosition(585402, 304253)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Starhammer II"):setCallSign("CSS50"):setPosition(643734, 296415):orderRoaming():setWeaponStorage("Homing", 3):setWeaponStorage("EMP", 1)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("WX-Lindworm"):setCallSign("SS56"):setPosition(642146, 297017):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Starhammer II"):setCallSign("UTI51"):setPosition(643661, 299810):orderRoaming():setWeaponStorage("Homing", 3):setWeaponStorage("EMP", 1)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12"):setCallSign("SS55"):setPosition(644829, 299901):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 4):setWeaponStorage("HVLI", 16)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12"):setCallSign("S52"):setPosition(645157, 297255):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 4):setWeaponStorage("HVLI", 16)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Strikeship"):setCallSign("CSS58"):setPosition(642310, 297784):orderRoaming():setJumpDrive(true):setWarpDrive(false):setWarpSpeed(0.00)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Strikeship"):setCallSign("CCN59"):setPosition(642182, 298496):orderRoaming():setJumpDrive(true):setWarpDrive(false):setWarpSpeed(0.00)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("WX-Lindworm"):setCallSign("VK57"):setPosition(642274, 299335):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12"):setCallSign("NC54"):setPosition(645522, 298989):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 4):setWeaponStorage("HVLI", 16)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Piranha F12"):setCallSign("CCN53"):setPosition(645522, 298039):orderRoaming():setJumpDrive(true):setWeaponStorage("Homing", 4):setWeaponStorage("HVLI", 16)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Strikeship"):setCallSign("VK61"):setPosition(641251, 298623):orderRoaming():setJumpDrive(true):setWarpDrive(false):setWarpSpeed(0.00)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Ghosts"):setTemplate("Strikeship"):setCallSign("CV60"):setPosition(641233, 297912):orderRoaming():setJumpDrive(true):setWarpDrive(false):setWarpSpeed(0.00)
		setBeamColor(ship)
	end)
	addGMFunction("boss battle",function()
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("DS3209"):setPosition(603890, 596151)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("DS3210"):setPosition(603862, 603779)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("DS3211"):setPosition(596356, 603757)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("DS3208"):setPosition(596308, 596165)
		SpaceStation():setTemplate("Large Station"):setFaction("Kraylor"):setCallSign("DS3206"):setPosition(600024, 600006)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("UTI44"):setPosition(601834, 599635):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("NC49"):setPosition(602814, 600718):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("UTI45"):setPosition(602824, 599604):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CSS33"):setPosition(598977, 602372):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("SS46"):setPosition(596845, 600551):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CV47"):setPosition(598084, 600739):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CV43"):setPosition(597980, 599208):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("VS32"):setPosition(604980, 591314):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("SS30"):setPosition(608741, 605018):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("NC31"):setPosition(609563, 597669):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("NC29"):setPosition(602602, 609125):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("CV28"):setPosition(595034, 608656):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CSS35"):setPosition(601070, 602580):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CSS39"):setPosition(601119, 603375):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CV34"):setPosition(600103, 602433):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("NC48"):setPosition(601678, 600843):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("CSS40"):setPosition(600703, 597848):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("VK38"):setPosition(601706, 598411):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("SS41"):setPosition(599356, 597358):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("S42"):setPosition(597511, 599072):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Strikeship"):setCallSign("SS32"):setPosition(598331, 596825):orderRoaming()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("BR27"):setPosition(597433, 590779):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("CCN25"):setPosition(590869, 602565):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Odin"):setCallSign("VS26"):setPosition(591360, 594996):orderRoaming():setWeaponStorage("Homing", 968)
		setBeamColor(ship)
	end)
end
----------------------------------
--	Custom > One-Offs > Starry  --
----------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM STARRY	F	initialGMFunctions
-- -CUSTOM				F	customButtons
-- -ONE-OFFS			F	oneOffs
-- +CHRISTMAS			F	starryChristmas
-- WJ AROUND RIGIL		F	inline
-- SALE BOUY			F	inline
function starryOneOff()
	clearGMFunctions()
	addGMFunction("-Main From Starry",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	addGMFunction("+Christmas",starryChristmas)
	addGMFunction("+Kraylor",starryKraylor)
	addGMFunction("wj around rigil",function ()
		local x,y=planet_rigil:getPosition()
		local jammers=createObjectCircle{x=x,y=y,callback=WarpJammer,number=40}
	    for i=1,#jammers do
			local orbit_distance = 59000
			local s_orbit = .95
			local f_orbit = 1.65
			jammers[i]:setRange(10000)
			jammers[i].orbit_influencer = planet_ergot
			update_system:addOrbitTargetWithInfluenceUpdate(jammers[i],planet_rigil,orbit_distance,s_orbit,f_orbit,planet_ergot,10000,30000)
		end
	end)
	addGMFunction("sale Bouy",function()
		onGMClick(function(x,y)
			local tbl={"50% off marked ships","cheapest deals in the sector","unmatched prices","best discounts for black turkey"}
			update_system:addNameCycleUpdate(Artifact():setPosition(x,y), 10,tbl,random(1,40))
		end) 
	end)
	addGMFunction("mines in monocle orbit", function ()
		-- these will be at an incorrect location for 1 update
		-- this is wrong
		-- but is only one off code
		local x,y = planet_rigil:getPosition()

		local m = Mine()
		local angle = math.random()*math.pi*2
		m:setPosition(x+math.sin(angle),y+math.cos(angle))
		m.orbit_influencer = planet_ergot
		update_system:addOrbitTargetWithInfluenceUpdate(m,planet_rigil,math.random(43759,47552),1.1,1.7,planet_ergot,10000,30000)

		m = Mine()
		m.orbit_influencer = planet_ergot
		local angle = math.random()*math.pi*2
		m:setPosition(x+math.sin(angle),y+math.cos(angle))
		update_system:addOrbitTargetWithInfluenceUpdate(m,planet_rigil,math.random(62557,69203),0.8,1.5,planet_ergot,10000,30000)
	end)
end
function starryKraylor()
	clearGMFunctions()
	addGMFunction("-Main From Kraylor",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	addGMFunction("-Starry 1-offs",starryOneOff)
	-- spawn the research base used on 2020-06-06
	-- the location is fixed, the design is fixed
	-- with both of those being fixed it is hard to make it generic
	-- and we aren't (probably) going back there making it not applicable for the sandbox
	-- but the code is something that could be edited into generic code for circular base designs in time
	addGMFunction("O6 Research Base", function ()
		local cx=27200
		local cy=227000
		local inner_ring_speed=90
		local i_rad=8200
		local i_1=21000
		local i_2=math.sqrt(2)*i_1/2
		mineRingShim{dist=30000	,x=cx		,y=cy		,gap=1,gap_size=10,speed=900,segments=6}--outer ring, easy to get in with 60 impluse boosted
		mineRingShim{dist=9000	,x=cx		,y=cy		,gap=6,gap_size=20,speed=60 ,segments=8} -- inner ring, expected method of breaching is probes
		mineRingShim{dist=i_rad ,x=cx		,y=cy+-i_1	,gap=3,gap_size=20,speed= inner_ring_speed,segments=2} -- test traversing
		mineRingShim{dist=i_rad ,x=cx		,y=cy+ i_1	,gap=3,gap_size=20,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_1	,y=cy		,gap=3,gap_size=20,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_1	,y=cy		,gap=3,gap_size=20,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+-i_2	,gap=3,gap_size=20,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+-i_2	,gap=3,gap_size=20,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+ i_2	,gap=3,gap_size=20,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+ i_2	,gap=3,gap_size=20,speed=-inner_ring_speed,segments=2}
		createObjectCircle{radius=i_1,x=cx	,y=cy	,number=8,	callback=function() return SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Control Station") end}
		createObjectCircle{radius=i_1-i_rad,	start_angle=(360/16)	,x=cx	,y=cy	,number=8,callback=function() return WarpJammer():setFaction("Kraylor") end}
		createObjectCircle{radius=27000,	start_angle=(360/16)	,x=cx	,y=cy	,number=8,callback=function() return WarpJammer():setFaction("Kraylor") end}
		createObjectCircle{radius=2000,x=cx	,y=cy	,number=4,callback=function() return WarpJammer():setFaction("Kraylor"):setRange(6000) end}
		leech("Kraylor"):setPosition(cx+2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-1")
		leech("Kraylor"):setPosition(cx+2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-2")
		leech("Kraylor"):setPosition(cx-2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-3")
		leech("Kraylor"):setPosition(cx-2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-4")
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Research 6"):setPosition(cx+6000,cy+0)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Research 15"):setPosition(cx-6000,cy+0)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Research 35"):setPosition(cx+0,cy+6000)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("Research 27"):setPosition(cx+0,cy-6000)
		Artifact():setPosition(cx+0,cy+0):setDescription("Contains long range jumpNav calculation"):setCallSign("computer core")
		--Jammer ring
		cx=27200
		cy=227000
		i_1=21500
		i_2=math.sqrt(2)*i_1/2
		WarpJammer():setFaction("Kraylor"):setPosition(cx+i_1,cy+0)
		WarpJammer():setFaction("Kraylor"):setPosition(cx-i_1,cy+0)
		WarpJammer():setFaction("Kraylor"):setPosition(cx+0,cy+i_1)
		WarpJammer():setFaction("Kraylor"):setPosition(cx+0,cy-i_1)
		WarpJammer():setFaction("Kraylor"):setPosition(cx+i_2,cy+i_2)
		WarpJammer():setFaction("Kraylor"):setPosition(cx+i_2,cy-i_2)
		WarpJammer():setFaction("Kraylor"):setPosition(cx-i_2,cy+i_2)
		WarpJammer():setFaction("Kraylor"):setPosition(cx-i_2,cy-i_2)
	end)
	addGMFunction("W22 Auto dfnd base", function ()
		local create = function ()
			local ship = CpuShip():setTemplate("Defense platform"):setFaction("Kraylor"):orderRoaming():setCommsScript(""):setCommsFunction(commsStation)
			setBeamColor(ship)
			return ship
		end
		local jammer_create = function ()
			return WarpJammer():setRange(12000):setFaction("Kraylor")
		end
		mineRingShim({dist=9000, x=340000+18000,y=340000+18000,	gap=5  ,gap_size=30,segments = 3, angle = 225})
		mineRingShim({dist=7500, x=340000+18000,y=340000+18000,	gap=140,gap_size=0,segments = 3, angle = 225+180, create_fn = jammer_create})
		mineRingShim({dist=9000, x=340000+18000,y=340000+18000,	gap=120,gap_size=30,segments = 3, angle = 225-15, create_fn = create})
		mineRingShim({dist=9000, x=340000,		y=340000+18000,	gap=5  ,gap_size=30,segments = 3, angle = 225+90})
		mineRingShim({dist=7500, x=340000,		y=340000+18000,	gap=140,gap_size=0,segments = 3, angle = 225+90+180, create_fn = jammer_create})
		mineRingShim({dist=9000, x=340000,		y=340000+18000,	gap=120,gap_size=30,segments = 3, angle = 225+90-15, create_fn = create})
		mineRingShim({dist=9000, x=340000,		y=340000,		gap=5  ,gap_size=30,segments = 3, angle = 225+180})
		mineRingShim({dist=7500, x=340000,		y=340000,		gap=140,gap_size=0,segments = 3, angle = 225+180+180, create_fn = jammer_create})
		mineRingShim({dist=9000, x=340000,		y=340000,		gap=120,gap_size=30,segments = 3, angle = 225+180-15, create_fn = create})
		mineRingShim({dist=9000, x=340000+18000,y=340000,		gap=5  ,gap_size=30,segments = 3, angle = 225+270})
		mineRingShim({dist=7500, x=340000+18000,y=340000,		gap=140,gap_size=0,segments = 3, angle = 225+270+180, create_fn = jammer_create})
		mineRingShim({dist=9000, x=340000+18000,y=340000,		gap=120,gap_size=30,segments = 3, angle = 225+270-15, create_fn = create})
	end)
	addGMFunction("V22 Rift Base", function () -- based on Kraylor Research Base
		local cx=349706
		local cy=329658
		local inner_ring_speed=180
		local i_rad=5200
		local i_1=15000
		local i_2=math.sqrt(2)*i_1/2
		mineRingShim{dist=20000	,x=cx		,y=cy		,gap=3,gap_size=20,speed=1800,segments=6}
		mineRingShim{dist=7000	,x=cx		,y=cy		,gap=12,gap_size=30,speed=120 ,segments=8}
		mineRingShim{dist=i_rad ,x=cx		,y=cy+-i_1	,gap=9,gap_size=40,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx		,y=cy+ i_1	,gap=9,gap_size=40,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_1	,y=cy		,gap=9,gap_size=40,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_1	,y=cy		,gap=9,gap_size=40,speed= inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+-i_2	,gap=9,gap_size=40,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+-i_2	,gap=9,gap_size=40,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+-i_2	,y=cy+ i_2	,gap=9,gap_size=40,speed=-inner_ring_speed,segments=2}
		mineRingShim{dist=i_rad ,x=cx+ i_2	,y=cy+ i_2	,gap=9,gap_size=40,speed=-inner_ring_speed,segments=2}
		createObjectCircle{radius=5000,x=cx	,y=cy	,number=4,callback=function() return WarpJammer():setFaction("Kraylor") end}
		createObjectCircle{radius=i_1,x=cx	,y=cy	,number=8,	callback=function() return WarpJammer():setFaction("Kraylor") end}
		leech("Kraylor"):setPosition(cx+2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-1")
		leech("Kraylor"):setPosition(cx+2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-2")
		leech("Kraylor"):setPosition(cx-2000,cy+2000):setDescription("weapons satellite"):setCallSign("WP-3")
		leech("Kraylor"):setPosition(cx-2000,cy-2000):setDescription("weapons satellite"):setCallSign("WP-4")
		Artifact():setPosition(cx+0,cy+0):setCallSign("Rift Scanner")
	end)
	addGMFunction("O3 Hide@Speculator", function()	--used 2Oct2021
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("shipyard bravo"):setPosition(-25508, 184521)
		SpaceStation():setTemplate("Small Station"):setFaction("Kraylor"):setCallSign("shipyard alpha"):setPosition(-35896, 175024)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("M32"):setPosition(-28586, 185436):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("J48"):setPosition(-28066, 180568):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("L29"):setPosition(-33059, 181013):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("D47"):setPosition(-30778, 177069):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("R11"):setPosition(-29516, 173726):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("V13"):setPosition(-25294, 176917):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("Y45"):setPosition(-33690, 174285):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("E43"):setPosition(-36658, 171830):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("I41"):setPosition(-39259, 170071):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("O39"):setPosition(-41732, 168185):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("P7"):setPosition(-34918, 166438):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("T27"):setPosition(-37381, 177319):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("F19"):setPosition(-14388, 186893):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("U16"):setPosition(-20520, 180435):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("X49"):setPosition(-23175, 184836):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod TX4"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(4):setTubeSize(0,"small"):setWeaponTubeDirection(1, 270):setTubeSize(1,"small"):setTubeSize(2,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("C17"):setPosition(-17605, 183526):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("K23"):setPosition(-15695, 194607):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("H33"):setPosition(-24415, 190386):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("A21"):setPosition(-12077, 191441):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("Z25"):setPosition(-42633, 172494):setShortRangeRadarRange(6500):orderStandGround():setTypeName("Missile Pod S1"):setHullMax(55):setHull(55):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("N8"):setPosition(-33109, 169680):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("W4"):setPosition(-38487, 164629):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("G3"):setPosition(-43035, 164177):orderStandGround():setTypeName("Missile Pod D1"):setHullMax(15):setHull(15):setRotationMaxSpeed(5.0):setShieldsMax(20.00):setShields(20.00):setWeaponTubeCount(1):setTubeSize(0,"small"):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		Nebula():setPosition(-34229, 168987)
		Nebula():setPosition(-42619, 175251)
		Nebula():setPosition(-11007, 193196)
		Nebula():setPosition(-27465, 187930)
		Nebula():setPosition(-20250, 192584)
		Nebula():setPosition(-36619, 178776)
		Nebula():setPosition(-32723, 183662)
		Nebula():setPosition(-31624, 174746)
		Nebula():setPosition(-25043, 180093)
		Nebula():setPosition(-20381, 182835)
		Nebula():setPosition(-15993, 186400)
		Nebula():setPosition(-49868, 169178)
		Nebula():setPosition(-45550, 166209)
		Nebula():setPosition(-40153, 166929)
		Asteroid():setPosition(-20345, 193487):setSize(118)
		Asteroid():setPosition(-16733, 187725):setSize(113)
		Asteroid():setPosition(-28907, 187563):setSize(126)
		Asteroid():setPosition(-25336, 192189):setSize(113)
		Asteroid():setPosition(-15718, 183139):setSize(125)
		Asteroid():setPosition(-27121, 173563):setSize(123)
		Asteroid():setPosition(-12147, 194745):setSize(125)
		Asteroid():setPosition(-10159, 191215):setSize(122)
		Asteroid():setPosition(-23388, 176160):setSize(123)
		Asteroid():setPosition(-19411, 179609):setSize(130)
		Asteroid():setPosition(-1791, 191266):setSize(111)
		Asteroid():setPosition(-6496, 189218):setSize(122)
		Asteroid():setPosition(-8455, 196125):setSize(129)
		Asteroid():setPosition(-12269, 187684):setSize(125)
		Asteroid():setPosition(-24362, 186061):setSize(117)
		Asteroid():setPosition(-23753, 179650):setSize(128)
		Asteroid():setPosition(-32681, 167679):setSize(125)
		Asteroid():setPosition(-35765, 164676):setSize(124)
		Asteroid():setPosition(-38565, 167395):setSize(113)
		Asteroid():setPosition(-26918, 176484):setSize(112)
		Asteroid():setPosition(-30124, 174415):setSize(117)
		Asteroid():setPosition(-31098, 171615):setSize(126)
		Asteroid():setPosition(-30814, 179203):setSize(117)
		Asteroid():setPosition(-34547, 183221):setSize(112)
		Asteroid():setPosition(-37428, 182774):setSize(124)
		Asteroid():setPosition(-36455, 170276):setSize(121)
		Asteroid():setPosition(-36942, 174212):setSize(115)
		Asteroid():setPosition(-33086, 176160):setSize(129)
		Asteroid():setPosition(-45057, 162322):setSize(112)
		Asteroid():setPosition(-45139, 156885):setSize(118)
		Asteroid():setPosition(-39985, 164676):setSize(117)
		Asteroid():setPosition(-41365, 178797):setSize(130)
		Asteroid():setPosition(-42907, 176444):setSize(117)
		Asteroid():setPosition(-43840, 171980):setSize(124)
		Asteroid():setPosition(-43718, 161105):setSize(115)
		Asteroid():setPosition(-43759, 158751):setSize(115)
		Asteroid():setPosition(-47086, 168856):setSize(115)
		Asteroid():setPosition(-47249, 165366):setSize(123)
	end)
	addGMFunction("E45 Teresh Base", function()
		Artifact():setPosition(817537, -4938):setModel("ammo_box"):allowPickup(true)
		Artifact():setPosition(818303, -5562):setModel("ammo_box"):allowPickup(true)
--		CpuShip():setFaction("Human Navy"):setTemplate("Phobos T3"):setCallSign("SS3428"):setPosition(829225, 8198):orderDefendLocation(828094, 4500):setWeaponStorage("Homing", 4)
--		CpuShip():setFaction("Human Navy"):setTemplate("Phobos T3"):setCallSign("VS3427"):setPosition(829111, 5338):orderDefendLocation(828094, 4500):setShields(20.60, 40.00):setWeaponStorage("Homing", 3)
--		CpuShip():setFaction("Human Navy"):setTemplate("Ranus U"):setCallSign("CV3423"):setPosition(828788, 6105):orderDefendLocation(828094, 4500):setWeaponStorage("Homing", 4):setWeaponStorage("Nuke", 1)
--		CpuShip():setFaction("Human Navy"):setTemplate("WX-Lindworm"):setCallSign("K31"):setPosition(828671, 6270):setShortRangeRadarRange(5500):orderDefendLocation(828094, 4500):setTypeName("WZ-Lindworm"):setHullMax(45):setHull(30):setRotationMaxSpeed(12.0):setWeaponStorageMax("Homing", 4):setWeaponStorage("Homing", 4):setWeaponStorageMax("Nuke", 2):setWeaponStorage("Nuke", 1):setWeaponStorageMax("HVLI", 12):setWeaponStorage("HVLI", 10)
		local ship = CpuShip():setFaction("Human Navy"):setTemplate("WX-Lindworm"):setCallSign("Blurp"):setPosition(832371, 26649):setShortRangeRadarRange(5500):orderStandGround():setTypeName("WZ-Lindworm"):setHullMax(45):setHull(30):setRotationMaxSpeed(12.0):setWeaponStorageMax("Homing", 4):setWeaponStorageMax("Nuke", 2):setWeaponStorageMax("HVLI", 12)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Human Navy"):setTemplate("Ranus U"):setCallSign("Zip"):setPosition(832488, 26484):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Human Navy"):setTemplate("Phobos T3"):setCallSign("Blop"):setPosition(832811, 25717):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Human Navy"):setTemplate("Phobos T3"):setCallSign("Flock"):setPosition(832925, 28577):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Adder MK5"):setCallSign("SS2812"):setPosition(807480, -8287):orderDefendLocation(807756, -9739):setImpulseMaxSpeed(160.0):setRotationMaxSpeed(56.0):setWeaponStorage("HVLI", 3):setBeamWeapon(0, 35, 0, 1600, 3.8, 2.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 70, 30, 1200, 3.8, 2.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 70, 330, 1200, 3.8, 2.0):setBeamWeaponTurret(2, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Buster"):setCallSign("X31"):setPosition(803078, 12758):setShortRangeRadarRange(6000):orderStandGround():setImpulseMaxSpeed(100.0):setRotationMaxSpeed(12.0):setWeaponStorage("Nuke", 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR363"):setPosition(804558, -6497):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.1, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.1, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.1, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.1, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.1, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.1, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR365"):setPosition(805566, -4324):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR368"):setPosition(812032, -15956):orderFlyTowards(816680, -6567):setRotationMaxSpeed(1.0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR372"):setPosition(815555, -24242):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR375"):setPosition(815825, -21349):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(7.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR381"):setPosition(817397, -5591):setShortRangeRadarRange(6500):orderFlyTowards(812250, -11881):setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR393"):setPosition(819873, 10600):setShortRangeRadarRange(6000):orderFlyTowards(819760, 18223):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 387):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("BR394"):setPosition(819954, -19754):setShortRangeRadarRange(6000):orderFlyTowards(821596, -4137):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CCN386"):setPosition(818288, -951):orderFlyTowardsBlind(820432, 11998)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CCN387"):setPosition(820782, 3966):setShortRangeRadarRange(6000):orderDefendLocation(820717, 1972):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(41.35):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 393):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CCN390"):setPosition(819311, -5838):setShortRangeRadarRange(6500):orderFlyTowards(814126, -12065):setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CCN400"):setPosition(820910, 14437):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 387):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CCN403"):setPosition(824780, -16142):orderFlyTowards(826375, -1010)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS395"):setPosition(820286, 11912):orderFlyTowards(820173, 19536):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 391):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS398"):setPosition(820799, -22852):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS401"):setPosition(822048, -4613):orderFlyTowards(816862, -10839)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS414"):setPosition(836227, -7438):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS415"):setPosition(836227, -1930):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CSS423"):setPosition(794785, 909):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV356"):setPosition(800349, -1964):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV364"):setPosition(805566, -5705):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.1, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.1, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.1, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.1, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.1, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.1, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV380"):setPosition(817525, -19685):orderFlyTowards(818549, -3165):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV382"):setPosition(817430, -3544):setShortRangeRadarRange(6500):orderFlyTowards(818790, 11430):setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 199):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV392"):setPosition(819457, -18337):orderFlyTowards(821052, -3206):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("CV409"):setPosition(832558, -6060):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC358"):setPosition(801910, -2216):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC369"):setPosition(812158, 6402):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC374"):setPosition(815653, -22849):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC377"):setPosition(816364, 12549):setShortRangeRadarRange(6000):orderFlyTowards(829597, 13155):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 393):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC378"):setPosition(816369, -19754):setShortRangeRadarRange(6000):orderFlyTowards(818011, -4137):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("NC405"):setPosition(829645, -11158)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S367"):setPosition(806973, 1217):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S396"):setPosition(820563, -21384):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S397"):setPosition(820726, 13165):setShortRangeRadarRange(6000):orderFlyTowards(820613, 20787):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 384):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S416"):setPosition(837715, -1783):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S417"):setPosition(837717, -7644):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("S422"):setPosition(811980, 18554):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("SS362"):setPosition(804525, -3192):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("SS371"):setPosition(815650, 15465):orderFlyTowards(817937, 19488):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 392):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("SS384"):setPosition(817838, -19305):setShortRangeRadarRange(6000):orderFlyTowards(819347, -2420):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("SS413"):setPosition(834939, -7039):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI354"):setPosition(798806, -1923):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI359"):setPosition(801942, -7596):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI366"):setPosition(806972, -10736):orderFlyTowards(819489, 2691):setRotationMaxSpeed(1.0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI385"):setPosition(818465, -8470):orderFlyTowards(813279, -14697)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI389"):setPosition(817462, 2187):setShortRangeRadarRange(6500):orderFlyTowards(820860, 11493):setTypeName("Missile Pod S4"):setHullMax(70):setHull(70):setRotationMaxSpeed(5.0):setShieldsMax(80.00):setShields(80.00):setWeaponTubeCount(1):setTubeSize(0,"large"):setWeaponStorageMax("EMP", 200):setWeaponStorage("EMP", 197):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI404"):setPosition(829834, 1634):orderStandGround():setHull(77):setShields(0.28, 107.10, 120.00, 120.00, 120.00, 120.00)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI406"):setPosition(831612, -5341):setShortRangeRadarRange(6000):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI410"):setPosition(833621, -2544):setShortRangeRadarRange(6000):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI412"):setPosition(834936, -2198):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI424"):setPosition(794713, -10985):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI425"):setPosition(813104, -28545):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("UTI427"):setPosition(841767, -10086):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK357"):setPosition(800465, -7813):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK360"):setPosition(803218, -7072):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(10.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.1, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.1, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.1, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.1, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.1, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.1, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK376"):setPosition(814650, 18798):orderFlyTowards(815694, 20811):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 397):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK388"):setPosition(818729, 8556):setShortRangeRadarRange(6000):orderFlyTowards(819901, 14257):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 389):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK391"):setPosition(819345, 9518):orderFlyTowards(820517, 15219):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 390):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK408"):setPosition(832557, -3185):setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VK428"):setPosition(841462, 923):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS355"):setPosition(798958, -7900):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS361"):setPosition(803284, -2600):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS370"):setPosition(814583, -4700):orderFlyTowards(809397, -10926)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS383"):setPosition(817734, 8577):setShortRangeRadarRange(6000):orderFlyTowards(818906, 14279):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 392):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS399"):setPosition(820846, -24302):orderStandGround():setTypeName("Missile Pod D2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("HVLI", 400):setWeaponStorage("HVLI", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS407"):setPosition(831634, -4039):setShortRangeRadarRange(6000):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS411"):setPosition(833801, -6584):setShortRangeRadarRange(6000):setTypeName("Missile Pod T2"):setHullMax(35):setHull(35):setRotationMaxSpeed(5.0):setShieldsMax(50.00):setShields(50.00):setWeaponTubeCount(1):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 399):setBeamWeapon(0, 30, 0, 0, 1.5, 20.0):setBeamWeaponTurret(0, 0, 0, 0):setBeamWeapon(1, 30, 60, 0, 1.5, 20.0):setBeamWeaponTurret(1, 0, 0, 0):setBeamWeapon(2, 30, 120, 0, 1.5, 20.0):setBeamWeaponTurret(2, 0, 0, 0):setBeamWeapon(3, 30, 180, 0, 1.5, 20.0):setBeamWeaponTurret(3, 0, 0, 0):setBeamWeapon(4, 30, 240, 0, 1.5, 20.0):setBeamWeaponTurret(4, 0, 0, 0):setBeamWeapon(5, 30, 300, 0, 1.5, 20.0):setBeamWeaponTurret(5, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Defense platform"):setCallSign("VS426"):setPosition(823621, -28314):orderStandGround()
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I1"):setPosition(811120, -15980):orderDefendLocation(810788, -14538):setTypeName("Jacket Drone"):setImpulseMaxSpeed(220.0):setRotationMaxSpeed(20.0):setShieldsMax(20.00):setShields(20.00):setBeamWeapon(0, 40, 0, 855, 3.6, 4.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I12"):setPosition(809265, -15373):setShortRangeRadarRange(4500):orderDefendLocation(809271, -13894):setTypeName("Gnat"):setHullMax(15):setHull(15):setImpulseMaxSpeed(179.3):setRotationMaxSpeed(32.0):setBeamWeapon(0, 40, 0, 1200, 3.0, 3.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I15"):setPosition(815026, -15381):orderDefendLocation(816275, -16176):setTypeName("Jacket Drone"):setImpulseMaxSpeed(220.0):setRotationMaxSpeed(20.0):setShieldsMax(20.00):setShields(20.00):setBeamWeapon(0, 40, 0, 600, 4.0, 4.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I2"):setPosition(807973, -15121):setShortRangeRadarRange(4500):orderDefendLocation(808001, -13642):setTypeName("Gnat"):setHullMax(15):setHull(15):setImpulseMaxSpeed(162.9):setRotationMaxSpeed(29.1):setBeamWeapon(0, 40, 0, 1200, 3.0, 3.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I21"):setPosition(807504, -14488):setShortRangeRadarRange(5500):orderDefendLocation(808229, -13388):setTypeName("Heavy Drone"):setHullMax(40):setHull(40):setImpulseMaxSpeed(144.2):setRotationMaxSpeed(13.1):setBeamWeapon(0, 40, 0, 1200, 3.0, 8.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I4"):setPosition(811038, -12611):setShortRangeRadarRange(4500):orderDefendLocation(812452, -12176):setTypeName("Gnat"):setHullMax(15):setHull(15):setImpulseMaxSpeed(180.9):setRotationMaxSpeed(32.3):setBeamWeapon(0, 40, 0, 1200, 3.0, 3.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I6"):setPosition(807398, -14769):orderDefendLocation(808824, -15399):setTypeName("Lite Drone"):setHullMax(20):setHull(20):setImpulseMaxSpeed(130.0):setRotationMaxSpeed(20.0):setBeamWeapon(0, 40, 0, 1200, 3.0, 4.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ktlitan Drone"):setCallSign("I9"):setPosition(810918, -14308):setShortRangeRadarRange(4500):orderDefendLocation(812320, -13835):setTypeName("Gnat"):setHullMax(15):setHull(15):setImpulseMaxSpeed(280.0):setRotationMaxSpeed(50.0):setBeamWeapon(0, 40, 0, 600, 4.0, 3.0):setBeamWeaponTurret(0, 0, 0, 0)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Missile Cruiser"):setCallSign("E41"):setPosition(830711, -24955):setShortRangeRadarRange(7000):orderStandGround():setWeaponStorage("Homing", 9)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Piranha F12.M"):setCallSign("E47"):setPosition(830711, -24082):setShortRangeRadarRange(6000):orderStandGround():setTypeName("Piranha F10"):setHullMax(50):setHull(50):setRotationMaxSpeed(10.0):setShieldsMax(50.00, 50.00):setShields(50.00, 50.00):setTubeSize(0,"small"):setTubeSize(3,"small"):setWeaponStorageMax("Homing", 10):setWeaponStorage("Homing", 8):setWeaponStorageMax("Nuke", 6):setWeaponStorage("Nuke", 4):setWeaponStorageMax("HVLI", 20):setWeaponStorage("HVLI", 18)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("Ranus U"):setCallSign("P36"):setPosition(800061, -18452):setShortRangeRadarRange(6000):orderStandGround():setWeaponStorage("Homing", 4):setWeaponStorage("Nuke", 1)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("CCN1128"):setPosition(804861, 14652):orderStandGround():setImpulseMaxSpeed(100.0):setRotationMaxSpeed(30.0):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("CV1131"):setPosition(828742, -25845):orderStandGround():setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("H58"):setPosition(838455, -17753):setShortRangeRadarRange(5500):orderStandGround():setTypeName("WZ-Lindworm"):setHullMax(45):setHull(45):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(24.0):setWeaponStorageMax("Homing", 4):setWeaponStorage("Homing", 4):setWeaponStorageMax("Nuke", 2):setWeaponStorage("Nuke", 1):setWeaponStorageMax("HVLI", 12):setWeaponStorage("HVLI", 10)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("S1126"):setPosition(836309, -19618):orderStandGround():setImpulseMaxSpeed(100.0):setRotationMaxSpeed(30.0):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("S56"):setPosition(806251, 15068):setShortRangeRadarRange(5500):orderFlyTowards(806327, 15133):setTypeName("WZ-Lindworm"):setHullMax(45):setHull(45):setRotationMaxSpeed(12.0):setWeaponStorageMax("Homing", 4):setWeaponStorage("Homing", 4):setWeaponStorageMax("Nuke", 2):setWeaponStorage("Nuke", 1):setWeaponStorageMax("HVLI", 12):setWeaponStorage("HVLI", 10)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("SS1129"):setPosition(806710, 16681):orderFlyTowards(806786, 16747):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("UTI1125"):setPosition(804718, -24832):orderStandGround():setImpulseMaxSpeed(100.0):setRotationMaxSpeed(30.0):setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("VK1130"):setPosition(797508, -17205):orderStandGround():setWeaponStorage("Homing", 0):setWeaponStorage("HVLI", 4)
		setBeamColor(ship)
		local ship = CpuShip():setFaction("Kraylor"):setTemplate("WX-Lindworm"):setCallSign("W61"):setPosition(806470, -25229):setShortRangeRadarRange(5500):orderStandGround():setTypeName("WZ-Lindworm"):setHullMax(45):setHull(45):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(24.0):setWeaponStorageMax("Homing", 4):setWeaponStorage("Homing", 4):setWeaponStorageMax("Nuke", 2):setWeaponStorage("Nuke", 1):setWeaponStorageMax("HVLI", 12):setWeaponStorage("HVLI", 10)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("A3"):setPosition(800761, 11952):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(20.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("B20"):setPosition(807341, -9194):orderDefendLocation(808801, -9427):setTypeName("overclocker"):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(20.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("C7"):setPosition(802398, -23070):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(20.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("D10"):setPosition(799066, 10252):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("F26"):setPosition(808519, -11497):setTypeName("overclocker"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("G24"):setPosition(808006, -7807):orderDefendLocation(809459, -7530):setTypeName("overclocker"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("K15"):setPosition(808763, -11310):setTypeName("overclocker (shield)"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("L12"):setPosition(833306, -22763):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("M23"):setPosition(816721, -16329):orderDefendLocation(816163, -17698):setTypeName("overclocker"):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(20.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("O16"):setPosition(808044, -11402):setTypeName("overclocker (beam)"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("Q4"):setPosition(835255, -21244):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(100.0):setRotationMaxSpeed(20.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("V19"):setPosition(807069, -9358):setTypeName("overclocker"):setImpulseMaxSpeed(195.8):setRotationMaxSpeed(39.2):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Equipment Freighter 1"):setCallSign("Z13"):setPosition(800981, -20657):orderStandGround():setTypeName("overclocker"):setImpulseMaxSpeed(200.0):setRotationMaxSpeed(40.0):setShieldsMax(150.00, 150.00, 150.00):setShields(150.00, 150.00, 150.00)
		CpuShip():setFaction("Kraylor"):setTemplate("Jump Carrier"):setCallSign("BR420"):setPosition(823836, -10754):setShortRangeRadarRange(10000):orderFlyTowards(818650, -16981):setTypeName("Command Base"):setHullMax(300):setHull(300):setImpulseMaxSpeed(0.0):setRotationMaxSpeed(0.5):setJumpDrive(false):setShieldsMax(500.00):setShields(500.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 10, 45, 2000, 1.0, 5.0):setBeamWeaponTurret(0, 70, 45, 0):setBeamWeapon(1, 10, 135, 2000, 1.0, 5.0):setBeamWeaponTurret(1, 70, 135, 0):setBeamWeapon(2, 10, 225, 2000, 1.0, 5.0):setBeamWeaponTurret(2, 70, 225, 0):setBeamWeapon(3, 10, 315, 2000, 1.0, 5.0):setBeamWeaponTurret(3, 70, 315, 0):setRadarTrace("smallstation.png")
		CpuShip():setFaction("Kraylor"):setTemplate("Jump Carrier"):setCallSign("CV418"):setPosition(812057, 1206):setShortRangeRadarRange(10000):orderFlyTowardsBlind(814201, 14155):setTypeName("Command Base"):setHullMax(300):setHull(300):setImpulseMaxSpeed(0.0):setRotationMaxSpeed(0.5):setJumpDrive(false):setShieldsMax(500.00):setShields(500.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 10, 45, 2000, 1.0, 5.0):setBeamWeaponTurret(0, 70, 45, 0):setBeamWeapon(1, 10, 135, 2000, 1.0, 5.0):setBeamWeaponTurret(1, 70, 135, 0):setBeamWeapon(2, 10, 225, 2000, 1.0, 5.0):setBeamWeaponTurret(2, 70, 225, 0):setBeamWeapon(3, 10, 315, 2000, 1.0, 5.0):setBeamWeaponTurret(3, 70, 315, 0):setRadarTrace("smallstation.png")
		CpuShip():setFaction("Kraylor"):setTemplate("Jump Carrier"):setCallSign("S419"):setPosition(812928, -11176):setShortRangeRadarRange(10000):orderFlyTowards(807497, -16907):setTypeName("Command Base"):setHullMax(300):setHull(300):setImpulseMaxSpeed(0.0):setRotationMaxSpeed(0.5):setJumpDrive(false):setShieldsMax(500.00):setShields(500.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 10, 45, 4000, 0.8, 5.0):setBeamWeaponTurret(0, 70, 45, 0):setBeamWeapon(1, 10, 135, 4000, 0.8, 5.0):setBeamWeaponTurret(1, 70, 135, 0):setBeamWeapon(2, 10, 225, 4000, 0.8, 5.0):setBeamWeaponTurret(2, 70, 225, 0):setBeamWeapon(3, 10, 315, 4000, 0.8, 5.0):setBeamWeaponTurret(3, 70, 315, 0):setRadarTrace("smallstation.png")
		CpuShip():setFaction("Kraylor"):setTemplate("Jump Carrier"):setCallSign("VS421"):setPosition(824472, 1168):setShortRangeRadarRange(10000):setTypeName("Command Base"):setHullMax(300):setHull(300):setImpulseMaxSpeed(0.0):setRotationMaxSpeed(0.5):setJumpDrive(false):setShieldsMax(500.00):setShields(500.00):setWeaponTubeCount(4):setWeaponTubeDirection(1, 90):setWeaponTubeDirection(2, 180):setWeaponTubeDirection(3, 270):setWeaponStorageMax("Homing", 400):setWeaponStorage("Homing", 396):setBeamWeapon(0, 10, 45, 2000, 1.0, 5.0):setBeamWeaponTurret(0, 70, 45, 0):setBeamWeapon(1, 10, 135, 2000, 1.0, 5.0):setBeamWeaponTurret(1, 70, 135, 0):setBeamWeapon(2, 10, 225, 2000, 1.0, 5.0):setBeamWeaponTurret(2, 70, 225, 0):setBeamWeapon(3, 10, 315, 2000, 1.0, 5.0):setBeamWeaponTurret(3, 70, 315, 0):setRadarTrace("smallstation.png")
		CpuShip():setFaction("Independent"):setTemplate("Transport1x4"):setCallSign("Penrose"):setPosition(819046, -4742):orderIdle()
		Mine():setPosition(792371, -5279)
		Mine():setPosition(792374, -4075)
		Mine():setPosition(792537, -6471)
		Mine():setPosition(792547, -2884)
		Mine():setPosition(792869, -7628)
		Mine():setPosition(792886, -1729)
		Mine():setPosition(792985, -13287)
		Mine():setPosition(792996, -14498)
		Mine():setPosition(793063, -12078)
		Mine():setPosition(793064, 3347)
		Mine():setPosition(793069, 4559)
		Mine():setPosition(793096, -15705)
		Mine():setPosition(793148, 2138)
		Mine():setPosition(793162, 5768)
		Mine():setPosition(793229, -10878)
		Mine():setPosition(793284, -16902)
		Mine():setPosition(793321, 938)
		Mine():setPosition(793343, 6966)
		Mine():setPosition(793482, -9694)
		Mine():setPosition(793558, -18082)
		Mine():setPosition(793581, -246)
		Mine():setPosition(793612, 8148)
		Mine():setPosition(793822, -8531)
		Mine():setPosition(793919, -19238)
		Mine():setPosition(793927, -1408)
		Mine():setPosition(793967, 9307)
		Mine():setPosition(794246, -7396)
		Mine():setPosition(794357, -2541)
		Mine():setPosition(794363, -20365)
		Mine():setPosition(794406, 10437)
		Mine():setPosition(794529, -7762)
		Mine():setPosition(794889, -21456)
		Mine():setPosition(794926, 11532)
		Mine():setPosition(794966, -1337)
		Mine():setPosition(795377, -8611)
		Mine():setPosition(795378, -6914)
		Mine():setPosition(795493, -22506)
		Mine():setPosition(795525, 12586)
		Mine():setPosition(795815, -2186)
		Mine():setPosition(795815, -489)
		Mine():setPosition(796173, -23509)
		Mine():setPosition(796199, 13593)
		Mine():setPosition(796225, -9460)
		Mine():setPosition(796226, -7763)
		Mine():setPosition(796663, -1337)
		Mine():setPosition(796663, 360)
		Mine():setPosition(796924, -24459)
		Mine():setPosition(796946, 14548)
		Mine():setPosition(797073, -10309)
		Mine():setPosition(797074, -8612)
		Mine():setPosition(797512, -489)
		Mine():setPosition(797512, 1208)
		Mine():setPosition(797743, -25352)
		Mine():setPosition(797760, 15446)
		Mine():setPosition(797921, -11158)
		Mine():setPosition(797922, -9461)
		Mine():setPosition(798360, 2057)
		Mine():setPosition(798360, 360)
		Mine():setPosition(798625, -26182)
		Mine():setPosition(798638, 16281)
		Mine():setPosition(798769, -12008)
		Mine():setPosition(798770, -10310)
		Mine():setPosition(799209, 1208)
		Mine():setPosition(799209, 2905)
		Mine():setPosition(799565, -26946)
		Mine():setPosition(799575, 17051)
		Mine():setPosition(799617, -12856)
		Mine():setPosition(799618, -11159)
		Mine():setPosition(800057, 2057)
		Mine():setPosition(800057, 3754)
		Mine():setPosition(800465, -13705)
		Mine():setPosition(800466, -12009)
		Mine():setPosition(800559, -27639)
		Mine():setPosition(800566, 17749)
		Mine():setPosition(800906, 2905)
		Mine():setPosition(800906, 4602)
		Mine():setPosition(801313, -14555)
		Mine():setPosition(801314, -12858)
		Mine():setPosition(801600, -28257)
		Mine():setPosition(801605, 18373)
		Mine():setPosition(801754, 3754)
		Mine():setPosition(801754, 5451)
		Mine():setPosition(802161, -15404)
		Mine():setPosition(802162, -13707)
		Mine():setPosition(802603, 4602)
		Mine():setPosition(802603, 6299)
		Mine():setPosition(802685, -28797)
		Mine():setPosition(802687, 18919)
		Mine():setPosition(803009, -16253)
		Mine():setPosition(803010, -14556)
		Mine():setPosition(803451, 5451)
		Mine():setPosition(803451, 7148)
		Mine():setPosition(803805, -29256)
		Mine():setPosition(803806, 19385)
		Mine():setPosition(803857, -17102)
		Mine():setPosition(803858, -15405)
		Mine():setPosition(804300, 6299)
		Mine():setPosition(804300, 7996)
		Mine():setPosition(804705, -17952)
		Mine():setPosition(804956, 19767)
		Mine():setPosition(804957, -29632)
		Mine():setPosition(805148, 7148)
		Mine():setPosition(805148, 8845)
		Mine():setPosition(805553, -18800)
		Mine():setPosition(805997, 7996)
		Mine():setPosition(805997, 9693)
		Mine():setPosition(806132, 20064)
		Mine():setPosition(806133, -29923)
		Mine():setPosition(806401, -19649)
		Mine():setPosition(806402, -17952)
		Mine():setPosition(806845, 10542)
		Mine():setPosition(806845, 8845)
		Mine():setPosition(807249, -20499)
		Mine():setPosition(807250, -18802)
		Mine():setPosition(807326, 20274)
		Mine():setPosition(807327, -30126)
		Mine():setPosition(807694, 11390)
		Mine():setPosition(807694, 9693)
		Mine():setPosition(808097, -21347)
		Mine():setPosition(808098, -19650)
		Mine():setPosition(808532, 20396)
		Mine():setPosition(808533, -30242)
		Mine():setPosition(808542, 10542)
		Mine():setPosition(808542, 12239)
		Mine():setPosition(808945, -22197)
		Mine():setPosition(808946, -20499)
		Mine():setPosition(809391, 11390)
		Mine():setPosition(809391, 13088)
		Mine():setPosition(809743, 20430)
		Mine():setPosition(809744, -30269)
		Mine():setPosition(809793, -23045)
		Mine():setPosition(809794, -21349)
		Mine():setPosition(810240, 12239)
		Mine():setPosition(810240, 13936)
		Mine():setPosition(810641, -23894)
		Mine():setPosition(810642, -22197)
		Mine():setPosition(810953, -30207)
		Mine():setPosition(810954, 20375)
		Mine():setPosition(811088, 13088)
		Mine():setPosition(811088, 14785)
		Mine():setPosition(811489, -24744)
		Mine():setPosition(811490, -23047)
		Mine():setPosition(811937, 13936)
		Mine():setPosition(811937, 15633)
		Mine():setPosition(812156, -30057)
		Mine():setPosition(812157, 20231)
		Mine():setPosition(812337, -25592)
		Mine():setPosition(812338, -23895)
		Mine():setPosition(812785, 14785)
		Mine():setPosition(812785, 16482)
		Mine():setPosition(813185, -26442)
		Mine():setPosition(813186, -24744)
		Mine():setPosition(813343, -29819)
		Mine():setPosition(813347, 19999)
		Mine():setPosition(813634, 15633)
		Mine():setPosition(813634, 17330)
		Mine():setPosition(814033, -27291)
		Mine():setPosition(814034, -25594)
		Mine():setPosition(814510, -29495)
		Mine():setPosition(814517, 19681)
		Mine():setPosition(814881, -28141)
		Mine():setPosition(814882, -26442)
		Mine():setPosition(815271, -30272)
		Mine():setPosition(815546, 21138)
		Mine():setPosition(815651, -29086)
		Mine():setPosition(815730, -27293)
		Mine():setPosition(816425, -30627)
		Mine():setPosition(817616, -30816)
		Mine():setPosition(818823, -30835)
		Mine():setPosition(820020, -30684)
		Mine():setPosition(820395, -27656)
		Mine():setPosition(820965, 19183)
		Mine():setPosition(821184, -30366)
		Mine():setPosition(821243, -26807)
		Mine():setPosition(821244, -28504)
		Mine():setPosition(821453, 21031)
		Mine():setPosition(822091, -25957)
		Mine():setPosition(822092, -27654)
		Mine():setPosition(822095, -29225)
		Mine():setPosition(822391, 17733)
		Mine():setPosition(822938, -25109)
		Mine():setPosition(822940, -26806)
		Mine():setPosition(823274, -29559)
		Mine():setPosition(823786, -24259)
		Mine():setPosition(823788, -25957)
		Mine():setPosition(824089, 16038)
		Mine():setPosition(824476, -29804)
		Mine():setPosition(824634, -23410)
		Mine():setPosition(824636, -25107)
		Mine():setPosition(825482, -22560)
		Mine():setPosition(825483, -24257)
		Mine():setPosition(825692, -29958)
		Mine():setPosition(826330, -21712)
		Mine():setPosition(826331, -23409)
		Mine():setPosition(826916, -30020)
		Mine():setPosition(827178, -20862)
		Mine():setPosition(827179, -22559)
		Mine():setPosition(828026, -20014)
		Mine():setPosition(828027, -21710)
		Mine():setPosition(828142, -29990)
		Mine():setPosition(828874, -19164)
		Mine():setPosition(828875, -20862)
		Mine():setPosition(829362, -29868)
		Mine():setPosition(829722, -18315)
		Mine():setPosition(829723, -20012)
		Mine():setPosition(830569, -29655)
		Mine():setPosition(830570, -17467)
		Mine():setPosition(830571, -19164)
		Mine():setPosition(831418, -16617)
		Mine():setPosition(831419, -18314)
		Mine():setPosition(831757, -29352)
		Mine():setPosition(832266, -15768)
		Mine():setPosition(832267, -17465)
		Mine():setPosition(832584, 5863)
		Mine():setPosition(832919, -28961)
		Mine():setPosition(833114, -14918)
		Mine():setPosition(833115, -16615)
		Mine():setPosition(833432, 6712)
		Mine():setPosition(833962, -14070)
		Mine():setPosition(833963, -15766)
		Mine():setPosition(834049, -28484)
		Mine():setPosition(834810, -13220)
		Mine():setPosition(834811, -14917)
		Mine():setPosition(835132, 3320)
		Mine():setPosition(835139, -27924)
		Mine():setPosition(835658, -12371)
		Mine():setPosition(835659, -14069)
		Mine():setPosition(835979, 4169)
		Mine():setPosition(835981, 2472)
		Mine():setPosition(836185, -27284)
		Mine():setPosition(836506, -11522)
		Mine():setPosition(836507, -13220)
		Mine():setPosition(836829, 3321)
		Mine():setPosition(836830, 1624)
		Mine():setPosition(837179, -26566)
		Mine():setPosition(837354, -10673)
		Mine():setPosition(837355, -12370)
		Mine():setPosition(837678, 2474)
		Mine():setPosition(837680, 776)
		Mine():setPosition(838042, 16136)
		Mine():setPosition(838117, -25777)
		Mine():setPosition(838201, -9824)
		Mine():setPosition(838203, -11521)
		Mine():setPosition(838527, 1626)
		Mine():setPosition(838529, -71)
		Mine():setPosition(838912, 15281)
		Mine():setPosition(838993, -24919)
		Mine():setPosition(839049, -8975)
		Mine():setPosition(839051, -10672)
		Mine():setPosition(839377, 778)
		Mine():setPosition(839378, -919)
		Mine():setPosition(839715, 14363)
		Mine():setPosition(839802, -23998)
		Mine():setPosition(839897, -8126)
		Mine():setPosition(839899, -9823)
		Mine():setPosition(840226, -70)
		Mine():setPosition(840227, -1767)
		Mine():setPosition(840446, 13388)
		Mine():setPosition(840540, -23019)
		Mine():setPosition(840745, -7276)
		Mine():setPosition(840746, -8973)
		Mine():setPosition(841075, -918)
		Mine():setPosition(841077, -2615)
		Mine():setPosition(841103, 12360)
		Mine():setPosition(841202, -21987)
		Mine():setPosition(841594, -8124)
		Mine():setPosition(841681, 11286)
		Mine():setPosition(841785, -20909)
		Mine():setPosition(841897, -6686)
		Mine():setPosition(841924, -1765)
		Mine():setPosition(842177, 10172)
		Mine():setPosition(842286, -19790)
		Mine():setPosition(842381, -7813)
		Mine():setPosition(842588, 9024)
		Mine():setPosition(842644, -589)
		Mine():setPosition(842701, -18636)
		Mine():setPosition(842777, -8973)
		Mine():setPosition(842911, 7848)
		Mine():setPosition(842953, 590)
		Mine():setPosition(843029, -17455)
		Mine():setPosition(843086, -10159)
		Mine():setPosition(843146, 6651)
		Mine():setPosition(843174, 1790)
		Mine():setPosition(843267, -16252)
		Mine():setPosition(843290, 5440)
		Mine():setPosition(843296, -1761)
		Mine():setPosition(843304, 3002)
		Mine():setPosition(843306, -11365)
		Mine():setPosition(843343, 4221)
		Mine():setPosition(843359, -7652)
		Mine():setPosition(843414, -15035)
		Mine():setPosition(843434, -12585)
		Mine():setPosition(843470, -13810)
		Mine():setPosition(843665, -2909)
		Mine():setPosition(843703, -6497)
		Mine():setPosition(843858, -4098)
		Mine():setPosition(843871, -5303)
		SupplyDrop():setFaction("Human Navy"):setPosition(792204, -9020):setEnergy(398):setWeaponStorage("Homing", 7):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 6)
		SupplyDrop():setFaction("Human Navy"):setPosition(793626, 11955):setEnergy(208):setWeaponStorage("Homing", 7):setWeaponStorage("Nuke", 2):setWeaponStorage("Mine", 1):setWeaponStorage("HVLI", 6)
		SupplyDrop():setFaction("Human Navy"):setPosition(798502, -27277):setEnergy(383):setWeaponStorage("Homing", 2):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 3):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(799242, -1678):setEnergy(272):setWeaponStorage("Homing", 6):setWeaponStorage("Nuke", 2):setWeaponStorage("Mine", 3)
		SupplyDrop():setFaction("Human Navy"):setPosition(800571, -11094):setEnergy(207):setWeaponStorage("Homing", 6):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 1):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(802165, 20068):setEnergy(263):setWeaponStorage("Homing", 2):setWeaponStorage("Nuke", 2):setWeaponStorage("Mine", 1):setWeaponStorage("HVLI", 3)
		SupplyDrop():setFaction("Human Navy"):setPosition(804602, -19132):setEnergy(347):setWeaponStorage("Homing", 2):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 6)
		SupplyDrop():setFaction("Human Navy"):setPosition(812386, 17921):setEnergy(214):setWeaponStorage("Homing", 4):setWeaponStorage("Nuke", 2):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 2):setWeaponStorage("HVLI", 1)
		SupplyDrop():setFaction("Human Navy"):setPosition(812851, 15668):setEnergy(216):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 1):setWeaponStorage("EMP", 2):setWeaponStorage("HVLI", 5)
		SupplyDrop():setFaction("Human Navy"):setPosition(812852, 1841):setEnergy(452):setWeaponStorage("Homing", 7):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 2):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(816395, -28293):setEnergy(422):setWeaponStorage("Homing", 3):setWeaponStorage("Nuke", 2):setWeaponStorage("Mine", 2):setWeaponStorage("HVLI", 4)
		SupplyDrop():setFaction("Human Navy"):setPosition(818143, -3636):setEnergy(247):setWeaponStorage("Homing", 5):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 2):setWeaponStorage("HVLI", 1)
		SupplyDrop():setFaction("Human Navy"):setPosition(819960, -28875):setEnergy(360):setWeaponStorage("Homing", 6):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 5)
		SupplyDrop():setFaction("Human Navy"):setPosition(821252, 19990):setEnergy(379):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 3):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 4)
		SupplyDrop():setFaction("Human Navy"):setPosition(824924, -31765):setEnergy(370):setWeaponStorage("Homing", 7):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(826766, -26825):setEnergy(417):setWeaponStorage("Homing", 3):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 1):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(834262, 4998):setEnergy(223):setWeaponStorage("Homing", 7):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 3):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 4)
		SupplyDrop():setFaction("Human Navy"):setPosition(837992, 15304):setEnergy(274):setWeaponStorage("Homing", 2):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 1):setWeaponStorage("HVLI", 5)
		SupplyDrop():setFaction("Human Navy"):setPosition(839214, -26114):setEnergy(394):setWeaponStorage("Homing", 3):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 3):setWeaponStorage("HVLI", 3)
		SupplyDrop():setFaction("Human Navy"):setPosition(841953, -9066):setEnergy(324):setWeaponStorage("Homing", 6):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 1):setWeaponStorage("EMP", 1)
		SupplyDrop():setFaction("Human Navy"):setPosition(841994, -2833):setEnergy(391):setWeaponStorage("Homing", 6):setWeaponStorage("Nuke", 3):setWeaponStorage("Mine", 3)
		SupplyDrop():setFaction("Human Navy"):setPosition(843062, 9658):setEnergy(423):setWeaponStorage("Homing", 2):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 1):setWeaponStorage("EMP", 1):setWeaponStorage("HVLI", 2)
		SupplyDrop():setFaction("Human Navy"):setPosition(843492, -618):setEnergy(225):setWeaponStorage("Homing", 7):setWeaponStorage("Nuke", 1):setWeaponStorage("Mine", 3):setWeaponStorage("EMP", 2):setWeaponStorage("HVLI", 3)
		WarpJammer():setFaction("Kraylor"):setPosition(800775, -4759)
		WarpJammer():setFaction("Kraylor"):setPosition(809441, -13760)
		WarpJammer():setFaction("Kraylor"):setPosition(809602, 3869)
		WarpJammer():setFaction("Kraylor"):setPosition(818180, 12698)
		WarpJammer():setFaction("Kraylor"):setPosition(818249, -22300)
		WarpJammer():setFaction("Kraylor"):setPosition(818309, -4813)
		WarpJammer():setFaction("Kraylor"):setPosition(827117, -13715)
		WarpJammer():setFaction("Kraylor"):setPosition(835818, -4815)
	end)
end
----------------------------------------------
--	Custom > One-Offs > Starry > Christmas  --
----------------------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM CHRISTMAS	F	initialGMFunctions
-- -CUSTOM				F	customButtons
-- -ONE-OFFS			F	oneOffs
-- -STARRY				F	starryOneOff
-- XMAS ARTIFACT		F	christmasArtifact
-- CAROL				F	inline
-- SPAWN				F	inline
-- !ELF RENAME			F	inline
-- !SLEIGH RENAME		F	inline
function starryChristmas()
	clearGMFunctions()
	addGMFunction("-Main From Christmas",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	addGMFunction("-Starry",starryOneOff)
	addGMFunction("xmas artifact",christmasArtifact)
	addGMFunction("carol",function ()
		clearGMFunctions()
		addGMFunction("-Custom",customButtons)
		for i=1,12 do
			addGMFunction("carol "..i,function() carolStage(i) customButtons() end)
		end
	end)
	addGMFunction("spawn",function ()
		clearGMFunctions()
		addGMFunction("-Custom",customButtons)
		for i=1,12 do
			addGMFunction("spawn "..i,function() onGMClick(function (x,y) carolSpawnSingle(i,"human navy"):setPosition(x,y):orderStandGround() end) end)
		end
	end)
	addGMFunction("!elf rename",function ()
		local objs=getGMSelection()
		for i=1,#objs do
			if objs[i]:isValid() and isObjectType(objs[i],"CpuShip") then
				objs[i]:setCallSign("elf "..irandom(1,99))
			end
		end
	end)
	addGMFunction("!sleigh rename",function ()
		local objs=getGMSelection()
		local full_name_list={"Rudolph","Dasher","Dancer","Prancer","Vixen","Comet","Cupid","Dunder","Blixem"}
		local name_list={}
		for i=1,#objs do
			if #name_list==0 then
				for j=1,#full_name_list do
					table.insert(name_list,full_name_list[j])
				end
			end
			if objs[i]:isValid() and isObjectType(objs[i],"CpuShip") then
				local num=irandom(1,#name_list)
				objs[i]:setCallSign(name_list[num])
				table.remove(name_list,num)
			end
		end
	end)
end
----------------------------------
--	Custom > One-Offs > Kosai  --
----------------------------------
-- Button Text		   FD*	Related Function(s)
-- -MAIN FROM KOSAI	F	initialGMFunctions
-- -CUSTOM				F	customButtons
-- -ONE-OFFS			F	oneOffs
snakeCallSigns = {
	"Żmija", "Wąż", "Gniewosz", "Zaskroniec", "Grzechotnik", "Dusiciel", "Kobra"
}
snakeCurrCallSign = 1
function kosaiOneOff()
	clearGMFunctions()
	addGMFunction("-Main From Kosai",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	addGMFunction("Unscan", function()
		local objs =  getGMSelection()
		for i=1, #objs do
			objs[i]:setScanned(false)
		end
	end)


	addGMFunction("Orbit RiptBin L4,5", function()
		local objs =  getGMSelection()
		local raX, raY = riptideAlphaStar:getPosition()
		for i=1, #objs do
			local obj = objs[i]
			local objX, objY = obj:getPosition()
			local initialOrbitAngle = angleFromVectorNorth(objX, objY, raX, raY) - 90
			local orbitRadius = distance(obj, riptideAlphaStar)
			update_system:addOrbitTargetUpdate(obj, riptideAlphaStar, orbitRadius, riptideGammaOrbitPeriod, initialOrbitAngle)
		end
	end)
	addGMFunction("Unorbit RiptBin", function()
		local objs =  getGMSelection()
		for i=1, #objs do
			update_system:removeUpdateNamed(objs[i], "orbit target")
		end
	end)
	-- addGMFunction("HyperPortal", function()
	-- 	removeGMFunction("HyperPortal")
	-- 	addGMFunction(">HyperPortal<", function()
	-- 		onGMClick(nil)
	-- 		kosaiOneOff()
	-- 	end)
	-- 	onGMClick(function(x, y)
	-- 		spawnHyperPortal(x, y)
	-- 		-- snakeCurrCallSign = snakeCurrCallSign % #snakeCallSigns + 1

	-- 		onGMClick(nil)
	-- 		kosaiOneOff()
	-- 	end)

	-- 	spawnHyperPortal = function(x, y)
	-- 		local p = Planet():setPosition(x, y):setPlanetRadius(2000)    --:setPlanetAtmosphereTexture("./blackHole3d.png"):setPlanetAtmosphereColor(.9, .9, .9) --:setPlanetCloudRadius(10000)
	-- 			-- setPlanetCloudTexture("./texture/electric_sphere_texture.png"):setPlanetCloudRadius(2100):setPlanetSurfaceTexture("./skybox/right.png")
	-- 			-- setPlanetCloudTexture("./texture/shield_hit_effect.png"):setPlanetCloudRadius(2100):setPlanetSurfaceTexture("./skybox/right.png")
	-- 			p:setPlanetCloudTexture("./skybox/bottom.png")


	-- 		-- update_system:addUpdate(p, "pp", {
	-- 		-- 	skyboxes = {"left.png", "bottom.png", "front.png", "right.png", "top.png"}, -- "back.png" is left out because the "seam" is very visible
	-- 		-- 	update = function(self, obj, delta)
	-- 		-- 		local tanArg = getScenarioTime() / 5
	-- 		-- 		obj:setAxialRotationTime(300 * math.abs(math.tan(tanArg)))

	-- 		-- 		local currentSkybox = (math.floor(tanArg / math.pi) % #self.skyboxes) + 1
	-- 		-- 		-- obj:setPlanetSurfaceTexture(string.format("./skybox/%s", self.skyboxes[currentSkybox]))
	-- 		-- 		obj:setPlanetCloudTexture(string.format("./skybox/%s", self.skyboxes[currentSkybox]))
	-- 		-- 	end
	-- 		-- })
	-- 	end
	-- end)

end
function xanstaOneOff()
	clearGMFunctions()
	addGMFunction("-Main From Xansta",initialGMFunctions)
	addGMFunction("-Custom",customButtons)
	addGMFunction("-One-Offs",oneOffs)
	local button_label = "Measure Distance"
	if gm_click_mode == "measure distance" then
		if first_measure_point_x == nil then
			button_label = ">Set 1st point<"
		else
			button_label = ">Set 2nd point<"
		end
	end
	addGMFunction(button_label,function()
		if gm_click_mode == "measure distance" then
			gm_click_mode = nil
			onGMClick(nil)
		else
			local prev_mode = gm_click_mode
			gm_click_mode = "measure distance"
			onGMClick(measureDistance)
			if prev_mode ~= nil then
				addGMMessage(string.format("Cancelled current GM Click mode\n   %s\nIn favor of\n   measure distance\nGM click mode.",prev_mode))
			end
		end
		xanstaOneOff()
	end)
	addGMFunction("Faction Beams",function()
		for i,obj in ipairs(getAllObjects()) do
			if isObjectType(obj,"CpuShip") or isObjectType(obj,"PlayerSpaceship") then
				setBeamColor(obj)
			end
		end
		addGMMessage("Faction beam colors verified and changed if necessary")
	end)
end
function measureDistance(x, y)
	if first_measure_point_x == nil then
		first_measure_point_x = x
		first_measure_point_y = y
	else
		addGMMessage(string.format("The distance between these two points:\nX:%.1f, Y:%.1f\nX:%.1f, Y:%.1f\nis:%.1f or %.1fU",first_measure_point_x,first_measure_point_y,x,y,distance(first_measure_point_x,first_measure_point_y,x,y),distance(first_measure_point_x,first_measure_point_y,x,y)/1000))
		first_measure_point_x = nil
		first_measure_point_y = nil
		gm_click_mode = nil
		onGMClick(nil)
	end
	xanstaOneOff()
end
--	Inserted for future enhancement. Not hooked in yet.
--	Button interaction and expiration needs examination/testing
function createInterdictor(p)
	p.my_interdictor = WarpJammer():setRange(10):setFaction(p:getFaction()) -- set range for testing - maybe variable range with greater impacts on system performance for setting greater ranges
    update_system:addAttachedUpdate(p.my_interdictor, p, 0, 0) --thing that makes the jammer follow you at range x,y
	p.my_interdictor.totalTime = 0
	local update_data = {
		update = function (self, obj, delta)
			obj.totalTime = obj.totalTime + delta
			if p ~= nil and p:isValid() then
				if p.my_interdictor.totalTime >= 300 then
					p.timeActive = p.my_interdictor.totalTime
					p.my_interdictor:destroy()
					p:wrappedRemoveCustom("cancel_jammer")
					local impulse_speed = p:getImpulseMaxSpeed()
					impulse_speed = (impulse_speed*(4/3))
					p:setImpulseMaxSpeed(impulse_speed)
					newRotationMaxSpeed = (p:getRotationMaxSpeed()*(4/3))
					P:setRotationMaxSpeed(newRotationMaxSpeed)
					p:wrappedAddCustomButton("Engineering","interdictor_recharging","recharging...",nil)
					interdictorRecharge(p)
				end
			else
				p.my_interdictor:destroy()
			end
		end
	}
	update_system:addUpdate(p.my_interdictor,"interdictor timer logic",update_data)
	local impulse_speed = p:getImpulseMaxSpeed()
	impulse_speed = impulse_speed*(3/4)
	p:setImpulseMaxSpeed(impulse_speed)
	rotationSpeed = p:getRotationMaxSpeed()
	rotationSpeed = rotationSpeed*(3/4)
	p:setRotationMaxSpeed(rotationSpeed)  
	p:wrappedRemoveCustom("interdictor")
	p:wrappedAddCustomButton("Engineering","cancel_jammer","Cancel",function() cancelThisShipsInterdictor(p) end)
end
function cancelInterdictor(p)
	if p~=nil and p:isValid() then
		if p.myInterdictor ~=nil and p.myInterdictor:isValid() then
            p.timeActive = p.myInterdictor.totalTime
			p.myInterdictor:destroy()
			impulseSpeed = p:getImpulseMaxSpeed()*(4/3)
			p:setImpulseMaxSpeed(impulseSpeed)
			rotationSpeed = p:getRotationMaxSpeed()*(4/3)
			p:setRotationMaxSpeed(rotationSpeed)
			p:wrappedRemoveCustom("cancel_jammer")
			p:wrappedAddCustomButton("Engineering","interdictor_recharging","recharging...",nil)
			interdictorRecharge(p)
		end
	end
end
function rechargeInterdictor(p)
	if p~=nil and p:isValid() then
		print(recharging)
		p.targetRechargeTime = (p.timeActive * 2)
		p.rechargeTime = 0
		local update_data ={
			update = function (self, odj, delta)
				p.rechargeTime = p.rechargeTime+delta 
				if p.rechargeTime >= p.targetRechargeTime then
					p:wrappedRemoveCustom("interdictor_recharging")
					p:wrappedAddCustomButton("Engineering","interdictor","interdictor",function() createInterdictor(playerKindling) end)
					update_system:removeUpdateNamed(p,"interdictor recharge logic")
				end
			end
		}
		update_system:addUpdate(p,"interdictor recharge logic",update_data)
	end
end
-----------------------------
--	Object creation utils  --
-----------------------------
-- these may want to be considered to merge into utils.lua

-- all of these functions take a table of function parameters
-- this is to mimic named arguments
-- defaults that are "sensible" will be picked for all
-- however I fear to say my definition of sensible and yours may clash
-- each function takes one argument as a callback
-- which is called for each point created
-- this callback function should return a EmptyEpsilon spaceObject
-- it also has parameters put into a table
-- currently this is the count parameter
-- all the standard EE spaceObject constructors should ignore this table, thus allowing them to be used
function createObjectCircle(args)
	-- just a circle with no gaps
	assert(type(args)=="table")
	local x=args.x or 0
	local y=args.y or 0
	local radius=args.radius or 1000
	local number=args.number or 360
	local start_angle=args.start_angle or 0
	local callback=args.callback or Artifact
	assert(type(x)=="number")
	assert(type(y)=="number")
	assert(type(radius)=="number")
	assert(type(number)=="number")
	assert(type(start_angle)=="number")
	assert(type(callback)=="function")
	local ret={}
	for i=1,number do
		local obj=callback{count=i}
		table.insert(ret,obj)
		setCirclePos(obj,x,y,(360/number*i)+start_angle,radius)
	end
	return ret
end
function mineRingShim(args)
	local angle=args.angle or random(0,360)
	local speed=args.speed -- if not set it will remain nil - this is because nil means no orbit to createOrbitingObject
	local x=args.x or 0
	local y=args.y or 0
	local increment=args.increment or 1
	local min_dist=args.dist or 1000
	local num_rows=args.num_rows or 1
	local row_gap=args.row_gap or 500
	local segments=args.segments or 1
	local half_gap_size=args.gap_size or 20
	half_gap_size=half_gap_size/2
	local gap=args.gap or 3
--	local create_fn = args.create_fn or Mine
	if segments == 0 then
		segments=1
		half_gap_size=0
	end
	for i=1,segments do
		for j=angle+half_gap_size,angle+increment-half_gap_size,gap do
			for row=0,num_rows-1 do
				local dist=min_dist+row_gap*row
				createOrbitingObject(Mine(),j,speed,x,y,dist)
			end
		end
		angle=angle+increment
	end
end
--------------------------
--	Ship communication  --
--------------------------
function commsShip()
	if comms_target.comms_data == nil then
		comms_target.comms_data = {friendlyness = random(0.0, 100.0)}
	end
	if comms_target.comms_data.goods == nil then
		comms_target.comms_data.goods = {}
		comms_target.comms_data.goods[commonGoods[math.random(1,#commonGoods)]] = {quantity = 1, cost = random(20,80)}
		local shipType = comms_target:getTypeName()
		if shipType:find("Freighter") ~= nil then
			if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
				repeat
					comms_target.comms_data.goods[commonGoods[math.random(1,#commonGoods)]] = {quantity = 1, cost = random(20,80)}
					local goodCount = 0
					for good, goodData in pairs(comms_target.comms_data.goods) do
						goodCount = goodCount + 1
					end
				until(goodCount >= 3)
			end
		end
	end
	if comms_source:isFriendly(comms_target) then
		return friendlyComms()
	end
	if comms_source:isEnemy(comms_target) and comms_target:isFriendOrFoeIdentifiedBy(comms_source) then
		return enemyComms()
	end
	return neutralComms()
end
function friendlyComms()
	if comms_target.comms_data.friendlyness < 20 then
		setCommsMessage("What do you want?");
	else
		setCommsMessage("Sir, how can we assist?");
	end
	local gm_verb = gm_verbs[math.random(1,#gm_verbs)]
	local gm_name = gm_ship_names[math.random(1,#gm_ship_names)]
	addCommsReply(string.format("%s %s",gm_verb,gm_name),function()
		setCommsMessage(string.format("Connecting to %s",gm_name))
		commsSwitchToGM()
		addGMMessage(string.format("Player ship %s in %s initiating contact to GM on friendly %s ship %s in %s.\nPrompt was %s %s",comms_source:getCallSign(),comms_source:getSectorName(),comms_target:getFaction(),comms_target:getCallSign(),comms_target:getSectorName(),gm_verb,gm_name))
		addCommsReply("Back", commsShip)
	end)
	if comms_target.commerce_target == nil then
		addCommsReply("Defend a waypoint", function()
			if comms_source:getWaypointCount() == 0 then
				setCommsMessage("No waypoints set. Please set a waypoint first.");
				addCommsReply("Back", commsShip)
			else
				setCommsMessage("Which waypoint should we defend?");
				for n=1,comms_source:getWaypointCount() do
					addCommsReply("Defend WP" .. n, function()
						comms_target:orderDefendLocation(comms_source:getWaypoint(n))
						setCommsMessage("We are heading to assist at WP" .. n ..".");
						addCommsReply("Back", commsShip)
					end)
				end
			end
		end)
		if comms_target.comms_data.friendlyness > 0.2 then
			addCommsReply("Assist me", function()
				setCommsMessage("Heading toward you to assist.");
				comms_target:orderDefendTarget(comms_source)
				addCommsReply("Back", commsShip)
			end)
		end
	end
	addCommsReply("Report status", function()
		msg = "Hull: " .. math.floor(comms_target:getHull() / comms_target:getHullMax() * 100) .. "%\n"
		local shields = comms_target:getShieldCount()
		if shields == 1 then
			msg = msg .. "Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
		elseif shields == 2 then
			msg = msg .. "Front Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
			msg = msg .. "Rear Shield: " .. math.floor(comms_target:getShieldLevel(1) / comms_target:getShieldMax(1) * 100) .. "%\n"
		else
			for n=0,shields-1 do
				msg = msg .. "Shield " .. n .. ": " .. math.floor(comms_target:getShieldLevel(n) / comms_target:getShieldMax(n) * 100) .. "%\n"
			end
		end
		for i, missile_type in ipairs(missile_types) do
			if comms_target:getWeaponStorageMax(missile_type) > 0 then
				msg = msg .. missile_type .. " Missiles: " .. math.floor(comms_target:getWeaponStorage(missile_type)) .. "/" .. math.floor(comms_target:getWeaponStorageMax(missile_type)) .. "\n"
			end
		end
		if comms_target:hasJumpDrive() then
			msg = msg .. "Jump drive charge: " .. comms_target:getJumpDriveCharge()
		end
		setCommsMessage(msg);
		addCommsReply("Back", commsShip)
	end)
	for _, obj in ipairs(comms_target:getObjectsInRange(5000)) do
		local player_carrier = false
		if isObjectType(obj,"PlayerSpaceship") then
			local template_name = obj:getTypeName()
			-- if template_name == "Benedict" or template_name == "Kiriya" or template_name == "Barrow" then
			-- 	player_carrier = true
			-- end
		end
		if (isObjectType(obj,"SpaceStation") and not comms_target:isEnemy(obj)) or player_carrier then
			addCommsReply("Dock at " .. obj:getCallSign(), function()
				setCommsMessage("Docking at " .. obj:getCallSign() .. ".");
				comms_target:orderDock(obj)
				addCommsReply("Back", commsShip)
			end)
		end
	end
	if comms_target.patrol_points ~= nil then
		addCommsReply("Return to patrol duties",function()
			comms_target:orderFlyTowards(comms_target.patrol_points[comms_target.patrol_point_index].x,comms_target.patrol_points[comms_target.patrol_point_index].y)
			setCommsMessage("Returning to patrol duties")
			addCommsReply("Back", commsShip)
		end)
	end
	if comms_target.fleet ~= nil then
		addCommsReply(string.format("Direct Squadron %s",comms_target.fleet), function()
			setCommsMessage(string.format("What command should be given to Squadron %s?",comms_target.fleet))
			addCommsReply("Report hull and shield status", function()
				msg = string.format("Squadron %s status:",comms_target.fleet)
				for _, fleetShip in ipairs(friendlyDefensiveFleetList[comms_target.fleet]) do
					if fleetShip ~= nil and fleetShip:isValid() then
						msg = msg .. "\n  " .. fleetShip:getCallSign() .. ":"
						msg = msg .. "\n    Hull: " .. math.floor(fleetShip:getHull() / fleetShip:getHullMax() * 100) .. "%"
						local shields = fleetShip:getShieldCount()
						if shields == 1 then
							msg = msg .. "\n    Shield: " .. math.floor(fleetShip:getShieldLevel(0) / fleetShip:getShieldMax(0) * 100) .. "%"
						else
							msg = msg .. "\n    Shields: "
							if shields == 2 then
								msg = msg .. "Front:" .. math.floor(fleetShip:getShieldLevel(0) / fleetShip:getShieldMax(0) * 100) .. "% Rear:" .. math.floor(fleetShip:getShieldLevel(1) / fleetShip:getShieldMax(1) * 100) .. "%"
							else
								for n=0,shields-1 do
									msg = msg .. " " .. n .. ":" .. math.floor(fleetShip:getShieldLevel(n) / fleetShip:getShieldMax(n) * 100) .. "%"
								end
							end
						end
					end
				end
				setCommsMessage(msg)
				addCommsReply("Back", commsShip)
			end)
			addCommsReply("Report missile status", function()
				msg = string.format("Squadron %s missile status:",comms_target.fleet)
				for _, fleetShip in ipairs(friendlyDefensiveFleetList[comms_target.fleet]) do
					if fleetShip ~= nil and fleetShip:isValid() then
						msg = msg .. "\n  " .. fleetShip:getCallSign() .. ":"
						missileMsg = ""
						for _, missile_type in ipairs(missile_types) do
							if fleetShip:getWeaponStorageMax(missile_type) > 0 then
								missileMsg = missileMsg .. "\n      " .. missile_type .. ": " .. math.floor(fleetShip:getWeaponStorage(missile_type)) .. "/" .. math.floor(fleetShip:getWeaponStorageMax(missile_type))
							end
						end
						if missileMsg ~= "" then
							msg = msg .. "\n    Missiles: " .. missileMsg
						end
					end
				end
				setCommsMessage(msg)
				addCommsReply("Back", commsShip)
			end)
			addCommsReply("Assist me", function()
				for _, fleetShip in ipairs(friendlyDefensiveFleetList[comms_target.fleet]) do
					if fleetShip ~= nil and fleetShip:isValid() then
						fleetShip:orderDefendTarget(comms_source)
					end
				end
				setCommsMessage(string.format("Squadron %s heading toward you to assist",comms_target.fleet))
				addCommsReply("Back", commsShip)
			end)
			addCommsReply("Defend a waypoint", function()
				if comms_source:getWaypointCount() == 0 then
					setCommsMessage("No waypoints set. Please set a waypoint first.");
					addCommsReply("Back", commsShip)
				else
					setCommsMessage("Which waypoint should we defend?");
					for n=1,comms_source:getWaypointCount() do
						addCommsReply("Defend WP" .. n, function()
							for _, fleetShip in ipairs(friendlyDefensiveFleetList[comms_target.fleet]) do
								if fleetShip ~= nil and fleetShip:isValid() then
									fleetShip:orderDefendLocation(comms_source:getWaypoint(n))
								end
							end
							setCommsMessage(string.format("Squadron %s is heading to assist at waypoint %i",comms_target.fleet,n))
							addCommsReply("Back", commsShip)
						end)
					end
				end
			end)
			addCommsReply("Go offensive, attack all enemy targets", function()
				for _, fleetShip in ipairs(friendlyDefensiveFleetList[comms_target.fleet]) do
					if fleetShip ~= nil and fleetShip:isValid() then
						fleetShip:orderRoaming()
					end
				end
				setCommsMessage(string.format("Squadron %s is on an offensive rampage",comms_target.fleet))
				addCommsReply("Back", commsShip)
			end)
		end)
	end
	local shipType = comms_target:getTypeName()
	if shipType:find("Freighter") ~= nil then
		if distance(comms_source, comms_target) < 5000 then
			if comms_target.comms_data.friendlyness > 66 then
				if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
					if comms_source.goods ~= nil and comms_source.goods.luxury ~= nil and comms_source.goods.luxury > 0 then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 and good ~= "luxury" then
								addCommsReply(string.format("Trade luxury for %s",good), function()
									goodData.quantity = goodData.quantity - 1
									if comms_source.goods == nil then
										comms_source.goods = {}
									end
									if comms_source.goods[good] == nil then
										comms_source.goods[good] = 0
									end
									comms_source.goods[good] = comms_source.goods[good] + 1
									comms_source.goods.luxury = comms_source.goods.luxury - 1
									setCommsMessage(string.format("Traded your luxury for %s from %s",good,comms_target:getCallSign()))
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					end	--player has luxury branch
				end	--goods or equipment freighter
				if comms_source.cargo > 0 then
					for good, goodData in pairs(comms_target.comms_data.goods) do
						if goodData.quantity > 0 then
							addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost)), function()
								if comms_source:takeReputationPoints(goodData.cost) then
									goodData.quantity = goodData.quantity - 1
									if comms_source.goods == nil then
										comms_source.goods = {}
									end
									if comms_source.goods[good] == nil then
										comms_source.goods[good] = 0
									end
									comms_source.goods[good] = comms_source.goods[good] + 1
									comms_source.cargo = comms_source.cargo - 1
									setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
								else
									setCommsMessage("Insufficient reputation for purchase")
								end
								addCommsReply("Back", commsShip)
							end)
						end
					end	--freighter goods loop
				end	--player has cargo space branch
			elseif comms_target.comms_data.friendlyness > 33 then
				if comms_source.cargo > 0 then
					if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost)), function()
									if comms_source:takeReputationPoints(goodData.cost) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end	--freighter has something to sell branch
						end	--freighter goods loop
					else	--not goods or equipment freighter
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*2)), function()
									if comms_source:takeReputationPoints(goodData.cost*2) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end	--freighter has something to sell branch
						end	--freighter goods loop
					end
				end	--player has room for cargo branch
			else	--least friendly
				if comms_source.cargo > 0 then
					if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*2)), function()
									if comms_source:takeReputationPoints(goodData.cost*2) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end	--freighter has something to sell branch
						end	--freighter goods loop
					end	--goods or equipment freighter
				end	--player has room to get goods
			end	--various friendliness choices
		else	--not close enough to sell
			addCommsReply("Do you have cargo you might sell?", function()
				local goodCount = 0
				local cargoMsg = "We've got "
				for good, goodData in pairs(comms_target.comms_data.goods) do
					if goodData.quantity > 0 then
						if goodCount > 0 then
							cargoMsg = cargoMsg .. ", " .. good
						else
							cargoMsg = cargoMsg .. good
						end
					end
					goodCount = goodCount + goodData.quantity
				end
				if goodCount == 0 then
					cargoMsg = cargoMsg .. "nothing"
				end
				setCommsMessage(cargoMsg)
				addCommsReply("Back", commsShip)
			end)
		end
	end
	return true
end
function enemyComms()
	local faction = comms_target:getFaction()
	local tauntable = false
	local amenable = false
	local taunt_chat = 33	--be friendlier (higher) than this value to accept taunt messages
	local taunt_chat_by_faction = {
		["Kraylor"] =	30,
		["Arlenians"] =	15,
		["Exuari"] =	22,
		["Ghosts"] =	41,
		["Ktlitans"] =	52,
		["TSN"] =		9,
		["USN"] =		10,
		["CUF"] =		11,
		["Human Navy"] =12,
		["Independent"]=18,
	}
	if taunt_chat_by_faction[faction] ~= nil then
		taunt_chat = taunt_chat_by_faction[faction]
	end
--	taunt_chat = 0		--test - always allow
	if comms_target.comms_data.friendlyness >= taunt_chat then
		tauntable = true
	end
	local enemy_health = getEnemyHealth(comms_target)
	if change_enemy_order_diagnostic then print(string.format("   enemy health:    %.2f",enemy_health)) end
	if change_enemy_order_diagnostic then print(string.format("   friendliness:    %.1f",comms_target.comms_data.friendlyness)) end
	local amenable_chat = 66	--be friendlier (higher) than this value to accept change action messages
	local amenable_chat_by_faction = {
		["Kraylor"] =	60,
		["Arlenians"] =	45,
		["Exuari"] =	52,
		["Ghosts"] =	71,
		["Ktlitans"] =	82,
		["TSN"] =		29,
		["USN"] =		25,
		["CUF"] =		21,
		["Human Navy"] =23,
		["Independent"]=32,
	}
	if amenable_chat_by_faction[faction] ~= nil then
		amenable_chat = amenable_chat_by_faction[faction]
	end
--	amenable_chat = 0	--test - always allow
	if comms_target.comms_data.friendlyness >= amenable_chat or enemy_health < .5 then	--final: 66, .5
		amenable = true
	end
	if change_enemy_order_diagnostic then print("tauntable:",tauntable,"amenable:",amenable) end
	if tauntable or amenable then
		setCommsMessage(string.format("--Tenacious Translator 2--\n\nHow much reputation do you want to spend to help influence the individual operating the communications system on %s?\nAvailable reputation: %i",comms_target:getCallSign(),math.floor(comms_source:getReputationPoints())))
		local rep_choices = {0,5,10,20,40}
		for _, rep in ipairs(rep_choices) do
			addCommsReply(string.format("%i Reputation",rep),function()
				string.format("")
				influenceEnemy(tauntable,amenable,enemy_health,rep)
			end)
		end
		return true
	else
		return false
	end
end
function influenceEnemy(tauntable,amenable,enemy_health,rep)
	comms_target.comms_data.friendlyness = comms_target.comms_data.friendlyness - random(0, 10)	--reduce friendlyness after each interaction
	local faction = comms_target:getFaction()
	local hail_message = "Mind your own business."
	local hail_message_by_faction = {
		["Kraylor"] =	{
							"Ktzzzsss.\nYou will DIEEee weaklingsss!",
							"Talking to prey can sometimes be interesting."
						},
		["Arlenians"] =	{
							"We wish you no harm, but will harm you if we must.\nEnd of transmission.",
						},
		["Exuari"] =	{
							"Stay out of our way, or your death will amuse us extremely!",
							"Listen, the fresh meat wants to talk to us.",
							"Why are you trying to talk to us? You're just supposed to die. Fine. I'll listen to your last words.",
						},
		["Ghosts"] =	{
							"One zero one.\nNo binary communication detected.\nSwitching to universal speech.\nGenerating appropriate response for target from human language archives.\n:Do not cross us:\nCommunication halted.",
						},
		["Ktlitans"] =	{
							"The hive suffers no threats. Opposition to any of us is opposition to us all.\nStand down or prepare to donate your corpses toward our nutrition.",
						},
		["TSN"] =		{
							"State your business",
						},
		["USN"] =		{
							"What do you want? (not that we care)",
						},
		["CUF"] =		{
							"Don't waste our time",
							"Do I have to talk to such losers?\n*sigh*\nOk, start talking.",
						},
		["Human Navy"] ={
							"Mind your own business!",
						},
		["Independent"]={
							"Make it quick.",
						},
	}
	if hail_message_by_faction[faction] ~= nil then
		hail_message = hail_message_by_faction[faction][math.random(1,#hail_message_by_faction[faction])]
	end
	setCommsMessage(hail_message)
	local rep_effect = 1
	local rep_effect_by_faction = {
		["Kraylor"] =	1	,
		["Arlenians"] =	2	,
		["Exuari"] =	.5	,
		["Ghosts"] =	1.2	,
		["Ktlitans"] =	.8	,
		["TSN"] =		.6	,
		["USN"] =		.5	,
		["CUF"] =		.7	,
		["Human Navy"] =.9	,
		["Independent"]=1	,
	}
	if rep_effect_by_faction[faction] ~= nil then
		rep_effect = rep_effect_by_faction[faction]
	end
	local dist_effect = 1
	local dist_effect_by_faction = {
		["Kraylor"] =	1	,
		["Arlenians"] =	.4	,
		["Exuari"] =	1.5	,
		["Ghosts"] =	.3	,
		["Ktlitans"] =	1.2	,
		["TSN"] =		1.1	,
		["USN"] =		1.4	,
		["CUF"] =		.9	,
		["Human Navy"] =1.1	,
		["Independent"]=1	,
	}
	if dist_effect_by_faction[faction] ~= nil then
		dist_effect = dist_effect_by_faction[faction]
	end
	if distance_diagnostic then
		print("distance_diagnostic 14 comms_source:",comms_source:getCallSign(),"comms_target:",comms_target:getCallSign())
	end		
	local comms_dist = distance(comms_source,comms_target)
	if comms_dist < 20000 then
		comms_dist = 0
	else
		comms_dist = math.min(100,(comms_dist-20000)/1000)
	end
	local target_lock = 10
	local target_lock_by_faction = {
		["Kraylor"] =	10	,
		["Arlenians"] =	20	,
		["Exuari"] =	8	,
		["Ghosts"] =	15	,
		["Ktlitans"] =	12	,
		["TSN"] =		10	,
		["USN"] =		9	,
		["CUF"] =		11	,
		["Human Navy"] =5	,
		["Independent"]=10	,
	}
	if target_lock_by_faction[faction] ~= nil then
		target_lock = target_lock_by_faction[faction]
	end
	addCommsReply("Connect to your superior",function()
		setCommsMessage("Connecting to superior")
		commsSwitchToGM()
		addGMMessage(string.format("Player ship %s in %s initiating contact to GM on enemy %s ship %s in %s.\nFriendliness: %.2f    Tauntable: %s    Amenable: %s\nReputation offerred: %s    Enemy Health: %.2f",comms_source:getCallSign(),comms_source:getSectorName(),comms_target:getFaction(),comms_target:getCallSign(),comms_target:getSectorName(),comms_target.comms_data.friendlyness,tauntable,amenable,rep,enemy_health))
	end)
	if tauntable then
		local taunt_option = "We will see to your destruction!"
		local taunt_success_reply = "Your bloodline will end here!"
		local taunt_failed_reply = "Your feeble threats are meaningless."
		local taunt_option_by_faction = {
			["Kraylor"] =	{
								{option = "We will destroy you", success = "We think not. It is you who will experience destruction!", fail = "Your feeble threats are meaningless."},
								{option = "You have no honor", success = "Your insult has brought our wrath upon you. Prepare to die.", fail = "Your comments about honor have no meaning to us."},
								{option = "We pity your pathetic race", success = "Pathetic? You will regret your disparagement!", fail = "We don't care what you think of us"},
							},
			["Arlenians"] =	{
								{option = "Your days are numbered", success = "We shall shorten your days", fail = "We can count better than you, obviously"},
							},
			["Exuari"] =	{
								{option = "We will rid the universe of your parasitical existence", success = "You will find new meaning for parasite as we leave your corpses for carrion consumers", fail = "You're welcome to try and fail."},
							},
			["Ghosts"] =	{
								{option = "EXECUTE: SELFDESTRUCT", success = "Rogue command received. Targeting source.", fail = "External command ignored."},
							},
			["Ktlitans"] =	{
								{option = "<Transmit 'The Itsy-Bitsy Spider' on all wavelengths>", success = "We do not need permission to pluck apart such an insignificant threat.", fail = "The hive has greater priorities than exterminating pests."},
							},
			["TSN"] =		{
								{option = "Your mother was a hamster and your father smelled of elderberries", success = "You'll regret saying those things about my parents.", fail = "You must be kin to Sir Robin."},
							},
			["USN"] =		{
								{option = "You couldn't shoot your way out of a paper bag", success = "We'll just see about that.", fail = "We don't have time for the yammerings of idiots"},
							},
			["CUF"] =		{
								{option = "We will see to your destruction!", success = "Your bloodline will end here!", fail = "Your feeble threats are meaningless."},
							},
			["Human Navy"] ={
								{option = "We will see to your destruction!", success = "Your bloodline will end here!", fail = "Your feeble threats are meaningless."},
							},
			["Independent"]={
								{option = "We will see to your destruction!", success = "Your bloodline will end here!", fail = "Your feeble threats are meaningless."},
							},
		}
		if taunt_option_by_faction[faction] ~= nil then
			local option_index = math.random(1,#taunt_option_by_faction[faction])
			if taunt_diagnostic then print("taunt option by faction index:",option_index) end
			taunt_option = taunt_option_by_faction[faction][option_index].option
			taunt_success_reply = taunt_option_by_faction[faction][option_index].success
			taunt_failed_reply = taunt_option_by_faction[faction][option_index].fail
		end
		addCommsReply(taunt_option, function()
			if not comms_source:takeReputationPoints(rep) then
				rep = 0
			end
			--taunt logic
			local taunt_susceptibility = 30	--chance of a successful taunt
			local taunt_susceptibility_by_faction = {
				["Kraylor"] =	35,
				["Arlenians"] =	25,
				["Exuari"] =	40,
				["Ghosts"] =	20,
				["Ktlitans"] =	30,
				["TSN"] =		15,
				["USN"] =		15,
				["CUF"] =		15,
				["Human Navy"] =15,
			}
			if taunt_susceptibility_by_faction[faction] ~= nil then
				taunt_susceptibility = taunt_susceptibility_by_faction[faction]
			end
			local taunt_roll = random(0,100)
			if comms_target ~= comms_source:getTarget() then
				target_lock = 0
			end
--			taunt_roll = 0	--test - always succeed
			local calc_chance = math.max(0,taunt_susceptibility + (rep * rep_effect) - (comms_dist * dist_effect) + target_lock)
			if change_enemy_order_diagnostic then
				print(string.format("Taunt:%.1f + Rep:%.1f - Dist:%.1f + Lock:%i = %.1f",taunt_susceptibility,rep * rep_effect,comms_dist * dist_effect,target_lock,calc_chance))
				print("Roll:",amenable_roll)
			end
			if taunt_roll <= calc_chance then
				local current_order = comms_target:getOrder()
				if taunt_diagnostic then print("Current order before taunt change: " .. current_order) end
				--Possible order strings returned:
				--Roaming
				--Fly towards
				--Attack
				--Stand Ground
				--Idle
				--Defend Location
				--Defend Target
				--Fly Formation (?)
				--Fly towards (ignore all)
				--Dock
				if comms_target.original_order == nil then
					comms_target.original_order = current_order
					if current_order == "Fly towards" or current_order == "Defend Location" or current_order == "Fly towards (ignore all)" then
						comms_target.original_target_x, comms_target.original_target_y = comms_target:getOrderTargetLocation()
						if taunt_diagnostic then print(string.format("Target coordinates of order before taunt:%.1f,%.1f",comms_target.original_target_x,comms_target.original_target_y)) end
					end
					if current_order == "Attack" or current_order == "Dock" or current_order == "Defend Target" then
						local original_target = comms_target:getOrderTarget()
						if taunt_diagnostic then print("Target of orders before taunt:",original_target,original_target:getCallSign()) end
						comms_target.original_target = original_target
					end
					comms_target.taunt_may_expire = true	--change to conditional in future refactoring
					table.insert(enemy_reverts,comms_target)
				end
				comms_target:orderAttack(comms_source)	--consider alternative options besides attack in future refactoring
				setCommsMessage(taunt_success_reply);
			else
				setCommsMessage(taunt_failed_reply);
			end
		end)
	end
	if amenable then
		--amenable logic
		local amenable_chance = comms_target.comms_data.friendlyness/3 + (1 - enemy_health)*30
		if change_enemy_order_diagnostic then print(string.format("   amenability:     %.1f",amenable_chance)) end
		local amenable_roll = random(0,100)
--		amenable_roll = 0	--test - always succeed
		addCommsReply("Stop your aggression!", function()
			if not comms_source:takeReputationPoints(rep) then
				rep = 0
			end
			--idle
			string.format("")	--global context for serious proton
			local idle_susceptibility = 10
			local idle_susceptibility_by_faction = {
				["Kraylor"] =	6,
				["Arlenians"] =	7,
				["Exuari"] =	8,
				["Ghosts"] =	12,
				["Ktlitans"] =	21,
				["TSN"] =		5,
				["USN"] =		4,
				["CUF"] =		9,
				["Human Navy"] =8,
			}
			if idle_susceptibility_by_faction[faction] ~= nil then
				idle_susceptibility = idle_susceptibility_by_faction[faction]
			end
			if comms_target ~= comms_source:getTarget() then
				target_lock = 0
			end
			local calc_chance = math.max(0,amenable_chance + idle_susceptibility + (rep * rep_effect) - (comms_dist * dist_effect) + target_lock)
			if change_enemy_order_diagnostic then
				print(string.format("Base:%.1f + Idle:%.1f + Rep:%.1f - Dist:%.1f + Lock:%i = %.1f",amenable_chance,idle_susceptibility,rep * rep_effect,comms_dist * dist_effect,target_lock,calc_chance))
				print("Roll:",amenable_roll)
			end
			if amenable_roll < calc_chance then
				local current_order = comms_target:getOrder()
				if comms_target.original_order == nil then
					comms_target.original_order = current_order
					if current_order == "Fly towards" or current_order == "Defend Location" or current_order == "Fly towards (ignore all)" then
						comms_target.original_target_x, comms_target.original_target_y = comms_target:getOrderTargetLocation()
					end
					if current_order == "Attack" or current_order == "Dock" or current_order == "Defend Target" then
						local original_target = comms_target:getOrderTarget()
						comms_target.original_target = original_target
					end
					table.insert(enemy_reverts,comms_target)
				end
				comms_target.amenability_may_expire = true
				comms_target:orderIdle()
				setCommsMessage("We have halted our aggression")
			else
				setCommsMessage("We see no reason to stop")
			end
		end)
		addCommsReply("We propose a cease fire agreement.",function()
			if not comms_source:takeReputationPoints(rep) then
				rep = 0
			end
			--independent
			string.format("")	--global context for serious proton
			local cease_fire_susceptibility = 10
			local cease_fire_susceptibility_by_faction = {
				["Kraylor"] =	25,
				["Arlenians"] =	13,
				["Exuari"] =	45,
				["Ghosts"] =	32,
				["Ktlitans"] =	22,
				["TSN"] =		12,
				["USN"] =		32,
				["CUF"] =		26,
				["Human Navy"] =15,
			}
			if cease_fire_susceptibility_by_faction[faction] ~= nil then
				cease_fire_susceptibility = cease_fire_susceptibility_by_faction[faction]
			end
			if comms_target ~= comms_source:getTarget() then
				target_lock = 0
			end
			local calc_chance = math.max(0,amenable_chance + cease_fire_susceptibility + (rep * rep_effect) - (comms_dist * dist_effect) + target_lock)
			if change_enemy_order_diagnostic then
				print(string.format("Base:%.1f + Cease Fire:%.1f + Rep:%.1f - Dist:%.1f + Lock:%i = %.1f",amenable_chance,cease_fire_susceptibility,rep * rep_effect,comms_dist * dist_effect,target_lock,calc_chance))
				print("Roll:",amenable_roll)
			end
			if amenable_roll < calc_chance then
				local current_order = comms_target:getOrder()
				if comms_target.original_order == nil then
					comms_target.original_order = current_order
					comms_target.original_faction = faction
					if change_enemy_order_diagnostic then print("faction as stored when going independent:",comms_target.original_faction) end
					if current_order == "Fly towards" or current_order == "Defend Location" or current_order == "Fly towards (ignore all)" then
						comms_target.original_target_x, comms_target.original_target_y = comms_target:getOrderTargetLocation()
					end
					if current_order == "Attack" or current_order == "Dock" or current_order == "Defend Target" then
						local original_target = comms_target:getOrderTarget()
						comms_target.original_target = original_target
					end
					table.insert(enemy_reverts,comms_target)
				end
				comms_target.amenability_may_expire = true
				comms_target:setFaction("Independent")
				setCommsMessage("We agree to your cease fire terms")
			else
				setCommsMessage("We like shooting our weapons")
			end
		end)
		addCommsReply("I strongly suggest you retreat immediately.",function()
			if not comms_source:takeReputationPoints(rep) then
				rep = 0
			end
			--fly blind
			string.format("")	--global context for serious proton
			local fly_blind_susceptibility = 10
			local fly_blind_susceptibility_by_faction = {
				["Kraylor"] =	10,
				["Arlenians"] =	15,
				["Exuari"] =	12,
				["Ghosts"] =	6,
				["Ktlitans"] =	2,
				["TSN"] =		3,
				["USN"] =		4,
				["CUF"] =		5,
				["Human Navy"] =8,
			}
			if fly_blind_susceptibility_by_faction[faction] ~= nil then
				fly_blind_susceptibility = fly_blind_susceptibility_by_faction[faction]
			end
			if comms_target ~= comms_source:getTarget() then
				target_lock = 0
			end
			local calc_chance = math.max(0,amenable_chance + fly_blind_susceptibility + (rep * rep_effect) - (comms_dist * dist_effect) + target_lock)
			if change_enemy_order_diagnostic then
				print(string.format("Base:%.1f + Fly Blind:%.1f + Rep:%.1f - Dist:%.1f + Lock:%i = %.1f",amenable_chance,fly_blind_susceptibility,rep * rep_effect,comms_dist * dist_effect,target_lock,calc_chance))
				print("Roll:",amenable_roll)
			end
			if amenable_roll < calc_chance then
				local current_order = comms_target:getOrder()
				if comms_target.original_order == nil then
					comms_target.original_order = current_order
					if current_order == "Fly towards" or current_order == "Defend Location" or current_order == "Fly towards (ignore all)" then
						comms_target.original_target_x, comms_target.original_target_y = comms_target:getOrderTargetLocation()
					end
					if current_order == "Attack" or current_order == "Dock" or current_order == "Defend Target" then
						local original_target = comms_target:getOrderTarget()
						comms_target.original_target = original_target
					end
					table.insert(enemy_reverts,comms_target)
				end
				comms_target.amenability_may_expire = true
				local new_heading = (comms_target:getHeading() + 180) % 360
				local ct_x, ct_y = comms_target:getPosition()
				local retreat_distance = 15000
				local safe_spot = true
				local new_x = nil
				local new_y = nil
				repeat
					safe_spot = true
					new_x, new_y = vectorFromAngleNorth(new_heading,retreat_distance)
					new_x = new_x + ct_x
					new_y = new_y + ct_y
					local obj_list = getObjectsInRadius(new_x, new_y, 8000)
					for _, obj in ipairs(obj_list) do
						if isObjectType(obj,"BlackHole") or isObjectType(obj,"WormHole") then
							safe_spot = false
						end
					end
					retreat_distance = retreat_distance + 1000
				until(safe_spot)
				comms_target:orderFlyTowardsBlind(new_x, new_y)
				setCommsMessage("We'll retreat for now")
			else
				setCommsMessage("Retreat is not an option")
			end
		end)
		addCommsReply("Join us in our worthy cause.",function()
			if not comms_source:takeReputationPoints(rep) then
				rep = 0
			end
			--defect
			string.format("")	--global context for serious proton
			local defect_susceptibility = 10
			local defect_susceptibility_by_faction = {
				["Kraylor"] =	7,
				["Arlenians"] =	12,
				["Exuari"] =	8,
				["Ghosts"] =	4,
				["Ktlitans"] =	1,
				["TSN"] =		2,
				["USN"] =		3,
				["CUF"] =		2,
				["Human Navy"] =3,
			}
			if defect_susceptibility_by_faction[faction] ~= nil then
				defect_susceptibility = defect_susceptibility_by_faction[faction]
			end
			if comms_target ~= comms_source:getTarget() then
				target_lock = 0
			end
			local calc_chance = math.max(0,amenable_chance + defect_susceptibility + (rep * rep_effect) - (comms_dist * dist_effect) - target_lock)
			if change_enemy_order_diagnostic then
				print(string.format("Base:%.1f + Defect:%.1f + Rep:%.1f - Dist:%.1f - Lock:%i = %.1f",amenable_chance,defect_susceptibility,rep * rep_effect,comms_dist * dist_effect,target_lock,calc_chance))
				print("Roll:",amenable_roll)
			end
			if amenable_roll < calc_chance then
				local current_order = comms_target:getOrder()
				if comms_target.original_order == nil then
					comms_target.original_order = current_order
					if current_order == "Fly towards" or current_order == "Defend Location" or current_order == "Fly towards (ignore all)" then
						comms_target.original_target_x, comms_target.original_target_y = comms_target:getOrderTargetLocation()
					end
					if current_order == "Attack" or current_order == "Dock" or current_order == "Defend Target" then
						local original_target = comms_target:getOrderTarget()
						comms_target.original_target = original_target
					end
					table.insert(enemy_reverts,comms_target)
				end
				comms_target.amenability_may_expire = true
				comms_target.original_faction = faction
				if change_enemy_order_diagnostic then print("faction as stored when defecting:",comms_target.original_faction) end
				comms_target:setFaction(comms_source:getFaction())
				setCommsMessage("Friends! Let us go forth together!")
			else
				setCommsMessage("That's ludicrous")
			end
		end)
	end
end
function neutralComms()
	local shipType = comms_target:getTypeName()
	if shipType:find("Freighter") ~= nil or shipType:find("Transport") ~= nil or shipType:find("Cargo") ~= nil then
		setCommsMessage("Yes?")
		local gm_verb = gm_verbs[math.random(1,#gm_verbs)]
		local gm_name = gm_ship_names[math.random(1,#gm_ship_names)]
		addCommsReply(string.format("%s %s",gm_verb,gm_name),function()
			setCommsMessage(string.format("Connecting to %s",gm_name))
			commsSwitchToGM()
			addGMMessage(string.format("Player ship %s in %s initiating contact to GM on neutral %s ship %s in %s.\nPrompt was %s %s",comms_source:getCallSign(),comms_source:getSectorName(),comms_target:getFaction(),comms_target:getCallSign(),comms_target:getSectorName(),gm_verb,gm_name))
			addCommsReply("Back", commsShip)
		end)
		addCommsReply("Do you have cargo you might sell?", function()
			local goodCount = 0
			local cargoMsg = "We've got "
			for good, goodData in pairs(comms_target.comms_data.goods) do
				if goodData.quantity > 0 then
					if goodCount > 0 then
						cargoMsg = cargoMsg .. ", " .. good
					else
						cargoMsg = cargoMsg .. good
					end
				end
				goodCount = goodCount + goodData.quantity
			end
			if goodCount == 0 then
				cargoMsg = cargoMsg .. "nothing"
			end
			setCommsMessage(cargoMsg)
		end)
		if distance(comms_source,comms_target) < 5000 then
			if comms_source.cargo > 0 then
				if comms_target.comms_data.friendlyness > 66 then
					if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost)), function()
									if comms_source:takeReputationPoints(goodData.cost) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					else
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*2)), function()
									if comms_source:takeReputationPoints(goodData.cost*2) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					end
				elseif comms_target.comms_data.friendlyness > 33 then
					if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*2)), function()
									if comms_source:takeReputationPoints(goodData.cost*2) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					else
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*3)), function()
									if comms_source:takeReputationPoints(goodData.cost*3) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					end
				else	--least friendly
					if shipType:find("Goods") ~= nil or shipType:find("Equipment") ~= nil then
						for good, goodData in pairs(comms_target.comms_data.goods) do
							if goodData.quantity > 0 then
								addCommsReply(string.format("Buy one %s for %i reputation",good,math.floor(goodData.cost*3)), function()
									if comms_source:takeReputationPoints(goodData.cost*3) then
										goodData.quantity = goodData.quantity - 1
										if comms_source.goods == nil then
											comms_source.goods = {}
										end
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.cargo = comms_source.cargo - 1
										setCommsMessage(string.format("Purchased %s from %s",good,comms_target:getCallSign()))
									else
										setCommsMessage("Insufficient reputation for purchase")
									end
									addCommsReply("Back", commsShip)
								end)
							end
						end	--freighter goods loop
					end
				end	--end friendly branches
			end	--player has room for cargo
		end	--close enough to sell
	else	--not a freighter
		if comms_target.comms_data.friendlyness > 50 then
			setCommsMessage("Sorry, we have no time to chat with you.\nWe are on an important mission.");
		else
			setCommsMessage("We have nothing for you.\nGood day.");
		end
	end	--end non-freighter communications else branch
	return true
end	--end neutral communications function
function getEnemyHealth(enemy)
	local enemy_health = 0
	local enemy_shield = 0
	local enemy_shield_count = enemy:getShieldCount()
	local faction = enemy:getFaction()
	if change_enemy_order_diagnostic then print(string.format("%s statistics:",enemy:getCallSign())) end
	if change_enemy_order_diagnostic then print(string.format("   shield count:    %i",enemy_shield_count)) end
	if enemy_shield_count > 0 then
		local total_shield_level = 0
		local max_shield_level = 0
		for i=1,enemy_shield_count do
			total_shield_level = total_shield_level + enemy:getShieldLevel(i-1)
			max_shield_level = max_shield_level + enemy:getShieldMax(i-1)
		end
		enemy_shield = total_shield_level/max_shield_level
	else
		enemy_shield = 1
	end
	if change_enemy_order_diagnostic then print(string.format("   shield health:   %.1f",enemy_shield)) end
	local enemy_hull = enemy:getHull()/enemy:getHullMax()
	if change_enemy_order_diagnostic then print(string.format("   hull health:     %.1f",enemy_hull)) end
	local enemy_reactor = enemy:getSystemHealth("reactor")
	if change_enemy_order_diagnostic then print(string.format("   reactor health:  %.1f",enemy_reactor)) end
	local enemy_maneuver = enemy:getSystemHealth("maneuver")
	if change_enemy_order_diagnostic then print(string.format("   maneuver health: %.1f",enemy_maneuver)) end
	local enemy_impulse = enemy:getSystemHealth("impulse")
	if change_enemy_order_diagnostic then print(string.format("   impulse health:  %.1f",enemy_impulse)) end
	local enemy_beam = 0
	if enemy:getBeamWeaponRange(0) > 0 then
		enemy_beam = enemy:getSystemHealth("beamweapons")
		if change_enemy_order_diagnostic then print(string.format("   beam health:     %.1f",enemy_beam)) end
	else
		enemy_beam = 1
		if change_enemy_order_diagnostic then print(string.format("   beam health:     %.1f (no beams)",enemy_beam)) end
	end
	local enemy_missile = 0
	if enemy:getWeaponTubeCount() > 0 then
		enemy_missile = enemy:getSystemHealth("missilesystem")
		if change_enemy_order_diagnostic then print(string.format("   missile health:  %.1f",enemy_missile)) end
	else
		enemy_missile = 1
		if change_enemy_order_diagnostic then print(string.format("   missile health:  %.1f (no missile system)",enemy_missile)) end
	end
	local enemy_warp = 0
	if enemy:hasWarpDrive() then
		enemy_warp = enemy:getSystemHealth("warp")
		if change_enemy_order_diagnostic then print(string.format("   warp health:     %.1f",enemy_warp)) end
	else
		enemy_warp = 1
		if change_enemy_order_diagnostic then print(string.format("   warp health:     %.1f (no warp drive)",enemy_warp)) end
	end
	local enemy_jump = 0
	if enemy:hasJumpDrive() then
		enemy_jump = enemy:getSystemHealth("jumpdrive")
		if change_enemy_order_diagnostic then print(string.format("   jump health:     %.1f",enemy_jump)) end
	else
		enemy_jump = 1
		if change_enemy_order_diagnostic then print(string.format("   jump health:     %.1f (no jump drive)",enemy_jump)) end
	end
	if change_enemy_order_diagnostic then print(string.format("   faction:         %s",faction)) end
	if faction == "Kraylor" then
		enemy_health = 
			enemy_shield 	* .3	+
			enemy_hull		* .4	+
			enemy_reactor	* .1 	+
			enemy_maneuver	* .03	+
			enemy_impulse	* .03	+
			enemy_beam		* .04	+
			enemy_missile	* .04	+
			enemy_warp		* .03	+
			enemy_jump		* .03
	elseif faction == "Arlenians" then
		enemy_health = 
			enemy_shield 	* .35	+
			enemy_hull		* .45	+
			enemy_reactor	* .05 	+
			enemy_maneuver	* .03	+
			enemy_impulse	* .04	+
			enemy_beam		* .02	+
			enemy_missile	* .02	+
			enemy_warp		* .02	+
			enemy_jump		* .02	
	elseif faction == "Exuari" then
		enemy_health = 
			enemy_shield 	* .2	+
			enemy_hull		* .3	+
			enemy_reactor	* .2 	+
			enemy_maneuver	* .05	+
			enemy_impulse	* .05	+
			enemy_beam		* .05	+
			enemy_missile	* .05	+
			enemy_warp		* .05	+
			enemy_jump		* .05	
	elseif faction == "Ghosts" then
		enemy_health = 
			enemy_shield 	* .25	+
			enemy_hull		* .25	+
			enemy_reactor	* .25 	+
			enemy_maneuver	* .04	+
			enemy_impulse	* .05	+
			enemy_beam		* .04	+
			enemy_missile	* .04	+
			enemy_warp		* .04	+
			enemy_jump		* .04	
	elseif faction == "Ktlitans" then
		enemy_health = 
			enemy_shield 	* .2	+
			enemy_hull		* .3	+
			enemy_reactor	* .1 	+
			enemy_maneuver	* .05	+
			enemy_impulse	* .05	+
			enemy_beam		* .05	+
			enemy_missile	* .05	+
			enemy_warp		* .1	+
			enemy_jump		* .1	
	elseif faction == "TSN" then
		enemy_health = 
			enemy_shield 	* .35	+
			enemy_hull		* .35	+
			enemy_reactor	* .08 	+
			enemy_maneuver	* .01	+
			enemy_impulse	* .02	+
			enemy_beam		* .02	+
			enemy_missile	* .01	+
			enemy_warp		* .08	+
			enemy_jump		* .08	
	elseif faction == "USN" then
		enemy_health = 
			enemy_shield 	* .38	+
			enemy_hull		* .38	+
			enemy_reactor	* .05 	+
			enemy_maneuver	* .02	+
			enemy_impulse	* .03	+
			enemy_beam		* .02	+
			enemy_missile	* .02	+
			enemy_warp		* .05	+
			enemy_jump		* .05	
	elseif faction == "CUF" then
		enemy_health = 
			enemy_shield 	* .35	+
			enemy_hull		* .38	+
			enemy_reactor	* .05 	+
			enemy_maneuver	* .03	+
			enemy_impulse	* .03	+
			enemy_beam		* .03	+
			enemy_missile	* .03	+
			enemy_warp		* .06	+
			enemy_jump		* .04	
	else
		enemy_health = 
			enemy_shield 	* .3	+
			enemy_hull		* .4	+
			enemy_reactor	* .06 	+
			enemy_maneuver	* .03	+
			enemy_impulse	* .05	+
			enemy_beam		* .03	+
			enemy_missile	* .03	+
			enemy_warp		* .05	+
			enemy_jump		* .05	
	end
	return enemy_health
end
function revertWait(delta)
	revert_timer = revert_timer - delta
	if revert_timer < 0 then
		revert_timer = delta + revert_timer_interval
		plotRevert = revertCheck
	end
end
function revertCheck(delta)
	if enemy_reverts ~= nil then
		local taunt_expiration_chance_by_faction = {
			["Kraylor"] =	4.5	,
			["Arlenians"] =	7	,
			["Exuari"] =	2.5	,
			["Ghosts"] =	8.5	,
			["Ktlitans"] =	5.5	,
			["TSN"] =		3	,
			["USN"] =		3.5	,
			["CUF"] =		4	,
			["Human Navy"]=	6	,
			["Independent"]=10	,
		}
		local amenable_expiration_chance_by_faction = {
			["Kraylor"] =	2.5	,
			["Arlenians"] =	3.25,
			["Exuari"] =	6.6	,
			["Ghosts"] =	3.2	,
			["Ktlitans"] =	4.8	,
			["TSN"] =		3.5	,
			["USN"] =		2.8	,
			["CUF"] =		3	,
			["Human Navy"]=	4	,
			["Independent"]=9	,
		}
		for revert_index, enemy in ipairs(enemy_reverts) do
			if enemy ~= nil and enemy:isValid() then
				local expiration_chance = 0
				local enemy_faction = enemy:getFaction()
				if enemy.original_faction ~= nil then
					enemy_faction = enemy.original_faction
				end
				if enemy.taunt_may_expire then
					if taunt_expiration_chance_by_faction[enemy_faction] ~= nil then
						expiration_chance = taunt_expiration_chance_by_faction[enemy_faction]
					end
				elseif enemy.amenability_may_expire then
					if amenable_expiration_chance_by_faction[enemy_faction] ~= nil then
						expiration_chance = amenable_expiration_chance_by_faction[enemy_faction]
					end
				end
				local expiration_roll = random(1,100)
				if change_enemy_order_diagnostic then print("Revert index:",revert_index,"Ship:",enemy:getCallSign(),"chance:",expiration_chance,"roll:",expiration_roll) end
				if expiration_roll < expiration_chance then
					local oo = enemy.original_order
					local otx = enemy.original_target_x
					local oty = enemy.original_target_y
					local ot = enemy.original_target
					if oo ~= nil then
						if oo == "Attack" then
							if ot ~= nil and ot:isValid() then
								enemy:orderAttack(ot)
							else
								enemy:orderRoaming()
							end
						elseif oo == "Dock" then
							if ot ~= nil and ot:isValid() then
								enemy:orderDock(ot)
							else
								enemy:orderRoaming()
							end
						elseif oo == "Defend Target" then
							if ot ~= nil and ot:isValid() then
								enemy:orderDefendTarget(ot)
							else
								enemy:orderRoaming()
							end
						elseif oo == "Fly towards" then
							if otx ~= nil and oty ~= nil then
								enemy:orderFlyTowards(otx,oty)
							else
								enemy:orderRoaming()
							end
						elseif oo == "Defend Location" then
							if otx ~= nil and oty ~= nil then
								enemy:orderDefendLocation(otx,oty)
							else
								enemy:orderRoaming()
							end
						elseif oo == "Fly towards (ignore all)" then
							if otx ~= nil and oty ~= nil then
								enemy:orderFlyTowardsBlind(otx,oty)
							else
								enemy:orderRoaming()
							end
						else
							enemy:orderRoaming()
						end
					else
						enemy:orderRoaming()
					end
					if change_enemy_order_diagnostic then print("reverting ship:",enemy:getCallSign(),"original faction:",enemy.original_faction) end
					if enemy.original_faction ~= nil then
						enemy:setFaction(enemy.original_faction)
					end
					enemy.original_order = nil
					enemy.original_target_x = nil
					enemy.original_target_y = nil
					enemy.original_target = nil
					enemy.original_faction = nil
					enemy.taunt_may_expire = false
					enemy.amenability_may_expire = false
					enemy_reverts[revert_index] = enemy_reverts[#enemy_reverts]
					enemy_reverts[#enemy_reverts] = nil
					break
				end
			else
				enemy_reverts[revert_index] = enemy_reverts[#enemy_reverts]
				enemy_reverts[#enemy_reverts] = nil
				break
			end
		end
	end
	plotRevert = revertWait
end
function commsServiceJonque()
	if comms_target.comms_data == nil then
		comms_target.comms_data = {friendlyness = random(0.0, 100.0)}
	end
	if comms_target.comms_data.system_repair == nil then
		comms_target.comms_data.system_repair = {
        	["reactor"] =		{cost = math.random(11,19),	max = random(.7, .85),	avail = true},
        	["beamweapons"] =	{cost = math.random(11,19),	max = random(.6, .85),	avail = true},
        	["missilesystem"] =	{cost = math.random(11,19),	max = random(.6, .85),	avail = true},
        	["maneuver"] =		{cost = math.random(11,19),	max = random(.7, .85),	avail = true},
        	["impulse"] =		{cost = math.random(11,19),	max = random(.6, .85),	avail = true},
        	["warp"] =			{cost = math.random(11,19),	max = random(.6, .85),	avail = true},
        	["jumpdrive"] =		{cost = math.random(11,19),	max = random(.6, .85),	avail = true},
        	["frontshield"] =	{cost = math.random(11,19),	max = random(.7, .85),	avail = true},
        	["rearshield"] =	{cost = math.random(11,19),	max = random(.7, .85),	avail = true},
        }
	end
	if comms_source:isFriendly(comms_target) then
		return friendlyServiceJonqueComms()
	end
	if comms_source:isEnemy(comms_target) and comms_target:isFriendOrFoeIdentifiedBy(comms_source) then
		return enemyComms()
	end
	return neutralServiceJonqueComms()
end
function friendlyServiceJonqueComms()
	if comms_target.comms_data.friendlyness < 20 then
		setCommsMessage("What do you want?");
	else
		setCommsMessage("Sir, how can we assist?");
	end
	addCommsReply("Defend a waypoint", function()
		if comms_source:getWaypointCount() == 0 then
			setCommsMessage("No waypoints set. Please set a waypoint first.");
		else
			setCommsMessage("Which waypoint should we defend?");
			for n=1,comms_source:getWaypointCount() do
				addCommsReply("Defend WP" .. n, function()
					comms_target:orderDefendLocation(comms_source:getWaypoint(n))
					setCommsMessage("We are heading to assist at WP" .. n ..".");
					addCommsReply("Back", commsShip)
				end)
			end
		end
		addCommsReply("Back", commsServiceJonque)
	end)
	if comms_target.comms_data.friendlyness > 0.2 then
		addCommsReply("Assist me", function()
			setCommsMessage("Heading toward you to assist.");
			comms_target:orderDefendTarget(comms_source)
			addCommsReply("Back", commsServiceJonque)
		end)
	end
	addCommsReply("Report status", function()
		msg = "Hull: " .. math.floor(comms_target:getHull() / comms_target:getHullMax() * 100) .. "%\n"
		local shields = comms_target:getShieldCount()
		if shields == 1 then
			msg = msg .. "Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
		elseif shields == 2 then
			msg = msg .. "Front Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
			msg = msg .. "Rear Shield: " .. math.floor(comms_target:getShieldLevel(1) / comms_target:getShieldMax(1) * 100) .. "%\n"
		else
			for n=0,shields-1 do
				msg = msg .. "Shield " .. n .. ": " .. math.floor(comms_target:getShieldLevel(n) / comms_target:getShieldMax(n) * 100) .. "%\n"
			end
		end
		setCommsMessage(msg);
		addCommsReply("Back", commsServiceJonque)
	end)
	for _, obj in ipairs(comms_target:getObjectsInRange(5000)) do
		if isObjectType(obj,"SpaceStation") and not comms_target:isEnemy(obj) then
			addCommsReply("Dock at " .. obj:getCallSign(), function()
				setCommsMessage("Docking at " .. obj:getCallSign() .. ".");
				comms_target:orderDock(obj)
				addCommsReply("Back", commsServiceJonque)
			end)
		end
	end
	if distance(comms_source,comms_target) < 5000 then
		commonServiceOptions()
	end
end
function neutralServiceJonqueComms()
	if comms_target.comms_data.friendlyness < 20 then
		setCommsMessage("What do you want?")
	else
		setCommsMessage("Sir, how can we assist?")
	end
	addCommsReply("How are you doing?", function()
		msg = "Hull: " .. math.floor(comms_target:getHull() / comms_target:getHullMax() * 100) .. "%\n"
		local shields = comms_target:getShieldCount()
		if shields == 1 then
			msg = msg .. "Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
		elseif shields == 2 then
			msg = msg .. "Front Shield: " .. math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100) .. "%\n"
			msg = msg .. "Rear Shield: " .. math.floor(comms_target:getShieldLevel(1) / comms_target:getShieldMax(1) * 100) .. "%\n"
		else
			for n=0,shields-1 do
				msg = msg .. "Shield " .. n .. ": " .. math.floor(comms_target:getShieldLevel(n) / comms_target:getShieldMax(n) * 100) .. "%\n"
			end
		end
		setCommsMessage(msg);
		addCommsReply("Back", commsServiceJonque)
	end)
	commonServiceOptions()
end
function commonServiceOptions()
	addCommsReply("Service options",function()
		local offer_primary_repair = false
		if comms_target.comms_data.system_repair == nil then
			print(comms_target:getCallSign(),"system_repair is nil")
		else
			for system, repair in pairs(comms_target.comms_data.system_repair) do
				if comms_source:hasSystem(system) then
					if comms_source:getSystemHealthMax(system) < repair.max then
						offer_primary_repair = true
					end
				end
			end
		end
		if offer_primary_repair then
			addCommsReply("Repair primary ship system", function()
				setCommsMessage("What system would you like repaired?")
				for system, repair in pairs(comms_target.comms_data.system_repair) do
					if comms_source:hasSystem(system) then
						if comms_source:getSystemHealthMax(system) < repair.max then
							local name = system
							local pretty_name = pretty_system[name]
							addCommsReply(string.format("Repair %s max health up to %.1f%% (%i Rep)",pretty_system[system],comms_target.comms_data.system_repair[system].max*100,comms_target.comms_data.system_repair[system].cost), function()
								if comms_source:takeReputationPoints(comms_target.comms_data.system_repair[system].cost) then
									if comms_target.player_system_repair_service == nil then
										comms_target.player_system_repair_service = {}
									end
									if comms_target.player_system_repair_service[comms_source] == nil then
										comms_target.player_system_repair_service[comms_source] = {}
									end
									comms_target.player_system_repair_service[comms_source][system] = true
									setCommsMessage(string.format("We'll start working on your %s maximum health right away",pretty_system[system]))
								else
									setCommsMessage("Insufficient reputation")
								end
								addCommsReply("Back", commsServiceJonque)
							end)
						end
					end
				end
			end)
		end
		local offer_repair = false
		if not comms_source:getCanLaunchProbe() then
			offer_repair = true
		end
		if not offer_repair and not comms_source:getCanHack() then
			offer_repair = true
		end
		if not offer_repair and not comms_source:getCanScan() then
			offer_repair = true
		end
		if not offer_repair and not comms_source:getCanCombatManeuver() then
			offer_repair = true
		end
		if not offer_repair and not comms_source:getCanSelfDestruct() then
			offer_repair = true
		end
		if offer_repair then
			addCommsReply("Repair secondary ship system",function()
				setCommsMessage(string.format("What system would you like repaired?"))
				if not comms_source:getCanLaunchProbe() then
					addCommsReply("Repair probe launch system",function()
						if distance(comms_source,comms_target) < 5000 then
							comms_source:setCanLaunchProbe(true)
							setCommsMessage("Your probe launch system has been repaired")
						else
							setCommsMessage("You need to stay close if you want me to fix your ship")
						end
						addCommsReply("Back", commsServiceJonque)
					end)
				end
				if not comms_source:getCanHack() then
					addCommsReply("Repair hacking system",function()
						if distance(comms_source,comms_target) < 5000 then
							comms_source:setCanHack(true)
							setCommsMessage("Your hack system has been repaired")
						else
							setCommsMessage("You need to stay close if you want me to fix your ship")
						end
						addCommsReply("Back", commsServiceJonque)
					end)
				end
				if not comms_source:getCanScan() then
					addCommsReply("Repair scanning system",function()
						if distance(comms_source,comms_target) < 5000 then
							comms_source:setCanScan(true)
							setCommsMessage("Your scanners have been repaired")
						else
							setCommsMessage("You need to stay close if you want me to fix your ship")
						end
						addCommsReply("Back", commsServiceJonque)
					end)
				end
				if not comms_source:getCanCombatManeuver() then
					addCommsReply("Repair combat maneuver",function()
						if distance(comms_source,comms_target) < 5000 then
							comms_source:setCanCombatManeuver(true)
							setCommsMessage("Your combat maneuver has been repaired")
						else
							setCommsMessage("You need to stay close if you want me to fix your ship")
						end
						addCommsReply("Back", commsServiceJonque)
					end)
				end
				if not comms_source:getCanSelfDestruct() then
					addCommsReply("Repair self destruct system",function()
						if distance(comms_source,comms_target) < 5000 then
							comms_source:setCanSelfDestruct(true)
							setCommsMessage("Your self destruct system has been repaired")
						else
							setCommsMessage("You need to stay close if you want me to fix your ship")
						end
						addCommsReply("Back", commsServiceJonque)
					end)
				end
				addCommsReply("Back", commsServiceJonque)
			end)
		end
		local offer_hull_repair = false
		if comms_source:getHull() < comms_source:getHullMax() then
			offer_hull_repair = true
		end
		if offer_hull_repair then
			local full_repair = comms_source:getHullMax() - comms_source:getHull()
			local premium = 30
			if full_repair > 100 then
				premium = 100
			elseif full_repair > 50 then
				premium = 60
			end
			addCommsReply(string.format("Full hull repair (%i reputation)",math.floor(full_repair + premium)),function()
				if distance(comms_source,comms_target) < 5000 then
					if comms_source:takeReputationPoints(math.floor(full_repair + premium)) then
						comms_source:setHull(comms_source:getHullMax())
						setCommsMessage("All fixed up and ready to go")
					else
						setCommsMessage("Insufficient reputation")
					end
				else
					setCommsMessage("You need to stay close if you want me to fix your ship")
				end
				addCommsReply("Back", commsServiceJonque)
			end)
			addCommsReply(string.format("Add %i%% to hull (%i reputation)",math.floor(full_repair/2/comms_source:getHullMax()*100),math.floor(full_repair/2 + premium/2)),function()
				if distance(comms_source,comms_target) < 5000 then
					if comms_source:takeReputationPoints(math.floor(full_repair/2 + premium/2)) then
						comms_source:setHull(comms_source:getHull() + (full_repair/2))
						setCommsMessage("Repairs completed as requested")
					else
						setCommsMessage("Insufficient reputation")
					end
				else
					setCommsMessage("You need to stay close if you want me to fix your ship")
				end
				addCommsReply("Back", commsServiceJonque)
			end)
			addCommsReply(string.format("Add %i%% to hull (%i reputation)",math.floor(full_repair/3/comms_source:getHullMax()*100),math.floor(full_repair/3)),function()
				if distance(comms_source,comms_target) < 5000 then
					if comms_source:takeReputationPoints(math.floor(full_repair/3)) then
						comms_source:setHull(comms_source:getHull() + (full_repair/3))
						setCommsMessage("Repairs completed as requested")
					else
						setCommsMessage("Insufficient reputation")
					end
				else
					setCommsMessage("You need to stay close if you want me to fix your ship")
				end
				addCommsReply("Back", commsServiceJonque)
			end)
		end
		local offer_ordnance = false
		local ordnance_inventory = 0
		for ordnance_type, count in pairs(comms_target.comms_data.weapon_inventory) do
			ordnance_inventory = ordnance_inventory + count
		end
		local player_missile_types = {
			["Homing"] = {shoots = false, max = 0, current = 0, need=0},
			["Nuke"] = {shoots = false, max = 0, current = 0, need=0},
			["Mine"] = {shoots = false, max = 0, current = 0, need=0},
			["EMP"] = {shoots = false, max = 0, current = 0, need=0},
			["HVLI"] = {shoots = false, max = 0, current = 0, need=0},
		}
		if ordnance_inventory > 0 then
			for missile_type, ord in pairs(player_missile_types) do
				ord.max = comms_source:getWeaponStorageMax(missile_type)
				if ord.max ~= nil and ord.max > 0 then
					ord.shoots = true
					ord.current = comms_source:getWeaponStorage(missile_type)
					if ord.current < ord.max then
						ord.need = ord.max - ord.current
						if comms_target.comms_data.weapon_inventory[missile_type] > 0 then
							offer_ordnance = true
						end
					end
				end
			end
		end
		if offer_ordnance then
			addCommsReply("Restock ordnance",function()
				for missile_type, ord in pairs(player_missile_types) do
					if ord.current < ord.max and comms_target.comms_data.weapon_inventory[missile_type] > 0 then
						setCommsMessage("What kind of ordnance?")
						addCommsReply(string.format("%s (%i reputation each)",missile_type,getWeaponCost(missile_type)),function()
							if distance(comms_source,comms_target) < 5000 then
								if comms_target.comms_data.weapon_inventory[missile_type] >= ord.need then
									if comms_source:takeReputationPoints(getWeaponCost(missile_type)*ord.need) then
										comms_source:setWeaponStorage(missile_type,ord.max)
										comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] - ord.need
										setCommsMessage(string.format("Restocked your %s type ordnance",missile_type))
									else
										if comms_source:getReputationPoints() > getWeaponCost(missile_type) then
											setCommsMessage(string.format("You don't have enough reputation to fully replenish your %s type ordnance. You need %i and you only have %i. How would you like to proceed?",missile_type,getWeaponCost(missile_type)*ord.need,math.floor(comms_source:getReputationPoints())))
											addCommsReply(string.format("Get one (%i reputation)",getWeaponCost(missile_type)), function()
												if distance(comms_source,comms_target) < 5000 then
													if comms_source:takeReputationPoints(getWeaponCost(missile_type)) then
														comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + 1)
														comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] - 1
														setCommsMessage(string.format("One %s provided",missile_type))
													else
														setCommsMessage("Insufficient reputation")
													end
												else
													setCommsMessage("You need to stay close if you want me to restock your ordnance")
												end
												addCommsReply("Back", commsServiceJonque)
											end)
											if comms_source:getReputationPoints() > getWeaponCost(missile_type)*2 then
												local max_afford = 0
												local missile_count = 0
												repeat
													max_afford = max_afford + getWeaponCost(missile_type)
													missile_count = missile_count + 1
												until(max_afford + getWeaponCost(missile_type) > comms_source:getReputationPoints())
												addCommsReply(string.format("Get %i (%i reputation)",missile_count,max_afford),function()
													if distance(comms_source,comms_target) < 5000 then
														if comms_source:takeReputationPoints(getWeaponCost(missile_type)*missile_count) then
															comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + missile_count)
															comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] - missile_count
															setCommsMessage(string.format("%i %ss provided",missile_count,missile_type))
														else
															setCommsMessage("Insufficient reputation")
														end
													else
														setCommsMessage("You need to stay close if you want me to restock your ordnance")
													end
													addCommsReply("Back", commsServiceJonque)
												end)
											end
										else
											setCommsMessage("Insufficient reputation")
										end
									end
								else
									setCommsMessage(string.format("I don't have enough %s type ordnance to fully restock you. How would you like to proceed?",missile_type))
									addCommsReply("We'll take all you've got",function()
										if comms_source:takeReputationPoints(getWeaponCost(missile_type)*comms_target.comms_data.weapon_inventory[missile_type]) then
											comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + comms_target.comms_data.weapon_inventory[missile_type])
											if comms_target.comms_data.weapon_inventory[missile_type] > 1 then
												setCommsMessage(string.format("%i %ss provided",missile_count,missile_type))
											else
												setCommsMessage(string.format("One %s provided",missile_type))
											end
											comms_target.comms_data.weapon_inventory[missile_type] = 0
										else
											setCommsMessage(string.format("You don't have enough reputation to get all of our %s type ordnance. You need %i and you only have %i. How would you like to proceed?",missile_type,getWeaponCost(missile_type)*comms_target.comms_data.weapon_inventory[missile_type],math.floor(comms_source:getReputationPoints())))
											addCommsReply(string.format("Get one (%i reputation)",getWeaponCost(missile_type)), function()
												if distance(comms_source,comms_target) < 5000 then
													if comms_source:takeReputationPoints(getWeaponCost(missile_type)) then
														comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + 1)
														comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] - 1
														setCommsMessage(string.format("One %s provided",missile_type))
													else
														setCommsMessage("Insufficient reputation")
													end
												else
													setCommsMessage("You need to stay close if you want me to restock your ordnance")
												end
												addCommsReply("Back", commsServiceJonque)
											end)
											if comms_source:getReputationPoints() > getWeaponCost(missile_type)*2 then
												local max_afford = 0
												local missile_count = 0
												repeat
													max_afford = max_afford + getWeaponCost(missile_type)
													missile_count = missile_count + 1
												until(max_afford + getWeaponCost(missile_type) > comms_source:getReputationPoints())
												addCommsReply(string.format("Get %i (%i reputation)",missile_count,max_afford),function()
													if distance(comms_source,comms_target) < 5000 then
														if comms_source:takeReputationPoints(getWeaponCost(missile_type)*missile_count) then
															comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + missile_count)
															comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] + missile_count
															setCommsMessage(string.format("%i %ss provided",missile_count,missile_type))
														else
															setCommsMessage("Insufficient reputation")
														end
													else
														setCommsMessage("You need to stay close if you want me to restock your ordnance")
													end
													addCommsReply("Back", commsServiceJonque)
												end)
											end
										end
									end)
									addCommsReply(string.format("Get one (%i reputation)",getWeaponCost(missile_type)), function()
										if distance(comms_source,comms_target) < 5000 then
											if comms_source:takeReputationPoints(getWeaponCost(missile_type)) then
												comms_source:setWeaponStorage(missile_type,comms_source:getWeaponStorage(missile_type) + 1)
												comms_target.comms_data.weapon_inventory[missile_type] = comms_target.comms_data.weapon_inventory[missile_type] - 1
												setCommsMessage(string.format("One %s provided",missile_type))
											else
												setCommsMessage("Insufficient reputation")
											end
										else
											setCommsMessage("You need to stay close if you want me to restock your ordnance")
										end
										addCommsReply("Back", commsServiceJonque)
									end)
								end
							else
								setCommsMessage("You need to stay close if you want me to restock your ordnance")
							end
							addCommsReply("Back", commsServiceJonque)
						end)
					end
				end
				addCommsReply("Back", commsServiceJonque)
			end)
		end
		local offer_probes = false
		if comms_source:getScanProbeCount() < comms_source:getMaxScanProbeCount() then
			offer_probes = true
		end
		if offer_probes then
			addCommsReply("Restock scan probes (5 reputation)",function()
				if distance(comms_source,comms_target) < 5000 then
					if comms_source:takeReputationPoints(5) then
						comms_source:setScanProbeCount(comms_source:getMaxScanProbeCount())
						setCommsMessage("I replenished your probes for you.")
					else
						setCommsMessage("Insufficient reputation")
					end
				else
					setCommsMessage("You need to stay close if you'd like your probes restocked.")
				end
				addCommsReply("Back", commsServiceJonque)
			end)
		end
		local offer_power = false
		if comms_source:getEnergyLevel() < comms_source:getEnergyLevelMax()/2 then
			offer_power = true
		end
		if offer_power then
			local power_charge = math.floor((comms_source:getEnergyLevelMax() - comms_source:getEnergyLevel())/5)
			addCommsReply(string.format("Quick charge the main batteries (%i reputation)",power_charge),function()
				if distance(comms_source,comms_target) < 5000 then
					if comms_source:takeReputationPoints(power_charge) then
						comms_source:setEnergyLevel(comms_source:getEnergyLevelMax())
						comms_source:commandSetSystemPowerRequest("reactor",1)
						comms_source:setSystemPower("reactor",1)
						comms_source:setSystemHeat("reactor",2)
						setCommsMessage("Your batteries have been charged")
					else
						setCommsMessage("Insufficient reputation")
					end
				else
					setCommsMessage("You need to stay close if you want your batteries charged quickly")
				end
				addCommsReply("Back", commsServiceJonque)
			end)
		end
		if offer_hull_repair or offer_repair or offer_primary_repair or offer_ordnance or offer_probes or offer_power then
			setCommsMessage("How can I help you get your ship in good running order?")
		else
			setCommsMessage("There's nothing on your ship that I can help you fix. Sorry.")
		end
	end)
end
-----------------------------
--	Station communication  --
-----------------------------
function commsSensorObservatory()
    if comms_source:isEnemy(comms_target) then
        return false
    end
    setCommsMessage(string.format("%s is operational.\nRange: %su",comms_target:getCallSign(),math.floor(comms_target:getShortRangeRadarRange()/1000)))
end
function commsStation()
	setCommsMessage("What a day")
    if comms_target.comms_data == nil then
        comms_target.comms_data = {}
    end
    mergeTables(comms_target.comms_data, {
        friendlyness = random(0.0, 100.0),
        weapons = {
            Homing = "neutral",
            HVLI = "neutral",
            Mine = "neutral",
            Nuke = "friend",
            EMP = "friend",
        },
        weapon_cost = {
            Homing = math.random(1,4),
            HVLI = math.random(1,3),
            Mine = math.random(2,5),
            Nuke = math.random(12,18),
            EMP = math.random(7,13),
        },
        services = {
            supplydrop = "friend",
            jumpsupplydrop = "friend",
            flingsupplydrop = "friend",
            reinforcements = "friend",
            sensor_boost = "neutral",
			preorder = "friend",
            activatedefensefleet = "neutral",
            servicejonque = "neutral",
        },
        service_cost = {
            supplydrop = math.random(80,120),
            jumpsupplydrop = math.random(110,140),
            flingsupplydrop = math.random(140,170),
            reinforcements = math.random(125,175),
            phobos_reinforcements = math.random(200,250),
            stalker_reinforcements = math.random(275,325),
            activatedefensefleet = 20,
            servicejonque = math.random(100,150),
			probe_launch_repair = math.random(1,4) + math.random(1,5),
			hack_repair = math.random(1,4) + math.random(1,5),
			scan_repair = math.random(1,4) + math.random(1,5),
			combat_maneuver_repair = math.random(1,4) + math.random(1,5),
			self_destruct_repair = math.random(1,4) + math.random(1,5),
			tube_slow_down_repair = math.random(1,4) + math.random(1,5),
        },
        reputation_cost_multipliers = {
            friend = 1.0,
            neutral = 3.0,
        },
        max_weapon_refill_amount = {
            friend = 1.0,
            neutral = 0.5,
        }
    })
 	if not comms_source:isEnemy(comms_target) then
		if player_faction == nil then
			player_faction = comms_source:getFaction()
		end
		addStationToDatabase(comms_target)
	end
    if comms_source:isEnemy(comms_target) then
    	if string.find(comms_target:getDescription(),"Glikton Consortium") == nil then
	        return false
	    else
	    	gliktonExchange()
	    end
    end
    local range_divisor = {
		["Small Station"]	= 2,
		["Medium Station"]	= 3,
		["Large Station"]	= 4,
		["Huge Station"]	= 5,
		["Military Outpost"] = 2,
		["Sniper Tower"]	= 2,
    }
    local temp_type = comms_target:getTypeName()
    panic_range = 5000
    if temp_type == nil or range_divisor[temp_type] == nil then
    	print("template name nil for:",comms_target:getCallSign(),"defaulting panic range to 5000")
    else
	    panic_range = comms_target:getShortRangeRadarRange()/range_divisor[temp_type]	
    end
    if panic_range == nil then
    	print("calculating panic range failed. Defaulting to 5000")
    	panic_range = 5000
    end
    if comms_target:areEnemiesInRange(panic_range) then
    	local busy_messages = {
    		string.format("[Automated Response]\nWe're sorry, but we cannot take your take your call right now. All personnel are busy at emergency stations due to hostile entities within %.1f units",panic_range/1000),
    		"[Automated Response]\nRelay officer temporarily reassigned to damage control team in anticipation of enemy attack. Call back later",
    		"[Automated Response]\nGone to designated battle station (shield support team). Try again later",
    		string.format("[Automated Response]\nRelay officer reassigned to %s hull breach emergency response team",comms_target:getCallSign()),
    	}
        setCommsMessage(tableSelectRandom(busy_messages))
		if isAllowedTo(comms_target.comms_data.services.activatedefensefleet) then
			stationDefenseFleet()
		end
        return true
    end
    if comms_source:isDocked(comms_target) then
    	if docked_state_time == nil or getScenarioTime() > docked_state_time + comms_fudge then
	    	handleDockedState()
	    	docked_state_time = getScenarioTime()
	    end
    else
    	if undocked_state_time == nil or getScenarioTime() > undocked_state_time + comms_fudge then
	    	handleUndockedState()
	    	undocked_state_time = getScenarioTime()
	    end
    end
    return true
end
function gliktonExchange()
	if not comms_source:isDocked(comms_target) then
		if distance(comms_source,comms_target) < 5000 then
			distributeGliktonBuySell()
			setCommsMessage("I'll only talk to you about buying, selling or trading per Glikton Consortium rules.")
			addCommsReply(string.format("Buy goods from %s",comms_target:getCallSign()),function()
				if comms_target.comms_data.goods ~= nil then
					setCommsMessage("What would you like to buy?")
					local good_count = 0
					for good,details in pairs(comms_target.comms_data.goods) do
						if details.quantity > 0 then
							good_count = good_count + 1
							addCommsReply(string.format("%s (%s reputation)",good,details.cost),function()
								if comms_source.cargo > 0 then
									if details.quantity > 0 then
										if comms_source:takeReputationPoints(details.cost) then
											comms_source.cargo = comms_source.cargo - 1
											if comms_source.goods == nil then
												comms_source.goods = {}
											end
											if comms_source.goods[good] == nil then
												comms_source.goods[good] = 0
											end
											comms_source.goods[good] = comms_source.goods[good] + 1
											comms_target.comms_data.goods[good].quantity = comms_target.comms_data.goods[good].quantity - 1
											setCommsMessage(string.format("One %s purchased for %s reputation",good,details.cost))
										else
											setCommsMessage("Insufficient reputation")
										end
									else
										setCommsMessage("Insufficient inventory on station to complete the transaction.")
									end
								else
									setCommsMessage("Insufficient space in your cargo hold")
								end
								addCommsReply(_("Back to station communication"), commsStation)
							end)
						end
					end
					if good_count == 0 then
						setCommsMessage("Station has no goods to sell")
					end
				else
					setCommsMessage("Station has no goods to sell")
				end
				addCommsReply(_("Back to station communication"), commsStation)
			end)
			addCommsReply(string.format("Sell goods to %s",comms_target:getCallSign()),function()
				if comms_target.comms_data.buy ~= nil then
					setCommsMessage("What would you like to sell?")
					for good,price in pairs(comms_target.comms_data.buy) do
						addCommsReply(string.format("%s (%s reputation)",good,price),function()
							if comms_source.goods ~= nil then
								if comms_source.goods[good] ~= nil then
									if comms_source.goods[good] > 0 then
										comms_source.cargo = comms_source.cargo + 1
										comms_source.goods[good] = comms_source.goods[good] - 1
										comms_source:addReputationPoints(price)
										setCommsMessage(string.format("One %s sold for %s reputation.",good,price))
									else
										setCommsMessage(string.format("You no longer have any %s",good))
									end
								else
									setCommsMessage(string.format("You don't have any %s",good))
								end
							else
								setCommsMessage("You don't have any cargo to sell")
							end
							addCommsReply(_("Back to station communication"), commsStation)
						end)
					end
				else
					setCommsMessage("Station is not interested in buying anything.")
				end
				addCommsReply(_("Back to station communication"), commsStation)
			end)
			addCommsReply(string.format("Trade goods with %s",comms_target:getCallSign()),function()
				setCommsMessage("What would you like to trade?")
				local trade_options_presented = 0
				if comms_target.comms_data.trade ~= nil then
					if comms_target.comms_data.trade.food then
						if comms_target.comms_data ~= nil and comms_target.comms_data.goods ~= nil then
							for good,details in pairs(comms_target.comms_data.goods) do
								if details.quantity > 0 then
									trade_options_presented = trade_options_presented + 1
									addCommsReply(string.format("Trade food for %s",good),function()
										if comms_source.goods ~= nil then
											if comms_source.goods["food"] ~= nil then
												if comms_source.goods["food"] > 0 then
													comms_source.goods["food"] = comms_source.goods["food"] - 1
													if comms_source.goods[good] == nil then
														comms_source.goods[good] = 0
													end
													comms_source.goods[good] = comms_source.goods[good] + 1
													setCommsMessage(string.format("You traded one food for a %s",good))
												else
													setCommsMessage("You no longer have any food")
												end
											else
												setCommsMessage("You do not have any food")
											end
										else
											setCommsMessage("You do not have any cargo to trade")
										end
										addCommsReply(_("Back to station communication"), commsStation)
									end)
								end
							end
						end
					end
					if comms_target.comms_data.trade.medicine then
						if comms_target.comms_data ~= nil and comms_target.comms_data.goods ~= nil then
							for good,details in pairs(comms_target.comms_data.goods) do
								if details.quantity > 0 then
									trade_options_presented = trade_options_presented + 1
									addCommsReply(string.format("Trade medicine for %s",good),function()
										if comms_source.goods ~= nil then
											if comms_source.goods["medicine"] ~= nil then
												if comms_source.goods["medicine"] > 0 then
													comms_source.goods["medicine"] = comms_source.goods["medicine"] - 1
													if comms_source.goods[good] == nil then
														comms_source.goods[good] = 0
													end
													comms_source.goods[good] = comms_source.goods[good] + 1
													setCommsMessage(string.format("You traded one medicine for a %s",good))
												else
													setCommsMessage("You no longer have any medicine")
												end
											else
												setCommsMessage("You do not have any medicine")
											end
										else
											setCommsMessage("You do not have any cargo to trade")
										end
										addCommsReply(_("Back to station communication"), commsStation)
									end)
								end
							end
						end
					end
					if comms_target.comms_data.trade.luxury then
						if comms_target.comms_data ~= nil and comms_target.comms_data.goods ~= nil then
							for good,details in pairs(comms_target.comms_data.goods) do
								if details.quantity > 0 then
									trade_options_presented = trade_options_presented + 1
									addCommsReply(string.format("Trade luxury for %s",good),function()
										if comms_source.goods ~= nil then
											if comms_source.goods["luxury"] ~= nil then
												if comms_source.goods["luxury"] > 0 then
													comms_source.goods["luxury"] = comms_source.goods["luxury"] - 1
													if comms_source.goods[good] == nil then
														comms_source.goods[good] = 0
													end
													comms_source.goods[good] = comms_source.goods[good] + 1
													setCommsMessage(string.format("You traded one luxury for a %s",good))
												else
													setCommsMessage("You no longer have any luxury")
												end
											else
												setCommsMessage("You do not have any luxury")
											end
										else
											setCommsMessage("You do not have any cargo to trade")
										end
										addCommsReply(_("Back to station communication"), commsStation)
									end)
								end
							end
						end
					end
					if trade_options_presented == 0 then
						setCommsMessage("Station is not interested in trading at this time")
					end
				else
					setCommsMessage("Station is not interested in trading")
				end
				addCommsReply(_("Back to station communication"), commsStation)
			end)
		end
	end
end
function distributeGliktonBuySell()
	if glikton_color then
		if glikton_distributed == nil then
			glikton_distributed = true
			local sell_pool = {}
			local buy_pool = {}
			for i,good in ipairs(commonGoods) do
				if good ~= "food" and good ~= "medicine" and good ~= "luxury" then
					table.insert(sell_pool,good)
				end
			end
			for i,station in ipairs(glikton_stations) do
				local sell_good = tableRemoveRandom(sell_pool)
				if station.comms_data ~= nil and station.comms_data.goods ~= nil then
					table.insert(buy_pool,sell_good)
					if station.comms_data.goods[sell_good] == nil then
						station.comms_data.goods[sell_good] = {quantity = math.random(5,9), cost = math.random(60,100)}
					end
				else
					if station.comms_data == nil then
						station.comms_data = {}
					end
					station.comms_data.goods = {}
					station.comms_data.goods[sell_good] = {quantity = math.random(5,9), cost = math.random(60,100)}
					table.insert(buy_pool,sell_good)
				end
			end
			for i,station in ipairs(glikton_stations) do
				local buy_good = tableRemoveRandom(buy_pool)
				if buy_good == nil then
					for j,good in ipairs(commonGoods) do
						if good ~= "food" and good ~= "medicine" and good ~= "luxury" then
							table.insert(buy_pool,good)
						end
					end
					buy_good = tableRemoveRandom(buy_pool)
				end
				if station.comms_data ~= nil and station.comms_data.buy ~= nil then
					if station.comms_data.buy[buy_good] == nil and station.comms_data.goods[buy_good] == nil then
						station.comms_data.buy[buy_good] = math.random(80,150)
					end
				else
					if station.comms_data == nil then
						station.comms_data = {}
					end
					if station.comms_data.goods[buy_good] == nil then
						station.comms_data.buy = {}
						station.comms_data.buy[buy_good] = math.random(80,150)
					end
				end
			end
		end
	end
end
--	docked and undocked communication functions
function addStationToDatabase(station)
	--	Assumes all player ships will be the same faction
	local stations_key = _("scienceDB","Stations")
	local stations_db = queryScienceDatabase(stations_key)
	if stations_db == nil then
		stations_db = ScienceDatabase():setName(stations_key)
	end
	local station_db = nil
	local station_key = station:getCallSign()
	local temp_artifact = Artifact():setFaction(player_faction)
	local first_time_entry = false
	if station:isFriendly(temp_artifact) then
		local friendly_key = _("scienceDB","Friendly")
		local friendly_db = queryScienceDatabase(stations_key,friendly_key)
		if friendly_db == nil then
			stations_db:addEntry(friendly_key)
			friendly_db = queryScienceDatabase(stations_key,friendly_key)
			friendly_db:setLongDescription(_("scienceDB","Friendly stations share their short range telemetry with your ship on the Relay and Strategic Map consoles. These are the known friendly stations."))
		end
		station_db = queryScienceDatabase(stations_key,friendly_key,station_key)
		if station_db == nil then
			friendly_db:addEntry(station_key)
			station_db = queryScienceDatabase(stations_key,friendly_key,station_key)
			first_time_entry = true
		end
	elseif not station:isEnemy(temp_artifact) then
		local neutral_key = "Neutral"
		local neutral_db = queryScienceDatabase(stations_key,neutral_key)
		if neutral_db == nil then
			stations_db:addEntry(neutral_key)
			neutral_db = queryScienceDatabase(stations_key,neutral_key)
			neutral_db:setLongDescription(_("scienceDB","Neutral stations don't share their short range telemetry with your ship, but they do allow for docking. These are the known neutral stations."))
		end
		station_db = queryScienceDatabase(stations_key,neutral_key,station_key)
		if station_db == nil then
			neutral_db:addEntry(station_key)
			station_db = queryScienceDatabase(stations_key,neutral_key,station_key)
			first_time_entry = true
		end
	end
	if first_time_entry then
		local out = ""
		if station:getDescription() ~= nil then
			out = station:getDescription()
		end
		if station.comms_data ~= nil then
			if station.comms_data.general_information ~= nil and station.comms_data.general_information ~= "" then
				out = string.format(_("scienceDB","%s\n\nGeneral Information: %s"),out,station.comms_data.general_information)
			end
			if station.comms_data.history ~= nil and station.comms_data.history ~= "" then
				out = string.format(_("scienceDB","%s\n\nHistory: %s"),out,station.comms_data.history)
			end
		end
		if out ~= "" then
			station_db:setLongDescription(out)
		end
		local station_type = station:getTypeName()
		local size_value = ""
		local small_station_key = _("scienceDB","Small Station")
		local medium_station_key = _("scienceDB","Medium Station")
		local large_station_key = _("scienceDB","Large Station")
		local huge_station_key = _("scienceDB","Huge Station")
		if station_type == small_station_key then
			size_value = _("scienceDB","Small")
			local small_db = queryScienceDatabase(stations_key,small_station_key)
			if small_db ~= nil then
				station_db:setImage(small_db:getImage())
			end
			station_db:setModelDataName("space_station_4")
		elseif station_type == medium_station_key then
			size_value = _("scienceDB","Medium")
			local medium_db = queryScienceDatabase(stations_key,medium_station_key)
			if medium_db ~= nil then
				station_db:setImage(medium_db:getImage())
			end
			station_db:setModelDataName("space_station_3")
		elseif station_type == large_station_key then
			size_value = _("scienceDB","Large")
			local large_db = queryScienceDatabase(stations_key,large_station_key)
			if large_db ~= nil then
				station_db:setImage(large_db:getImage())
			end
			station_db:setModelDataName("space_station_2")
		elseif station_type == huge_station_key then
			size_value = _("scienceDB","Huge")
			local huge_db = queryScienceDatabase(stations_key,huge_station_key)
			if huge_db ~= nil then
				station_db:setImage(huge_db:getImage())
			end
			station_db:setModelDataName("space_station_1")
		end
		if size_value ~= "" then
			local size_key = _("scienceDB","Size")
			station_db:setKeyValue(size_key,size_value)
		end
		local faction_key = _("scienceDB","Faction")
		local generic_orbit_key = _("scienceDB","Orbit around")
		local primary_orbit_key = _("scienceDB","Primary orbit")
		local secondary_orbit_key = _("scienceDB","Secondary orbit")
		if station == stationKeyhole23 then		--Kentar
			station_db:setKeyValue(faction_key,station:getFaction())
			station_db:setKeyValue(generic_orbit_key,"Black hole in T15")
		elseif station == stationHarriet then	--Teresh
			station_db:setKeyValue(faction_key,station:getFaction())
			station_db:setKeyValue(primary_orbit_key,string.format("Around planet %s",planet_ursid:getCallSign()))
			station_db:setKeyValue(secondary_orbit_key,string.format("Planet %s orbits star %s in %s",planet_ursid:getCallSign(),planet_arcturus_star:getCallSign(),planet_arcturus_star:getSectorName()))
		elseif station == stationHelena then	--Teresh
			station_db:setKeyValue(faction_key,station:getFaction())
			station_db:setKeyValue(primary_orbit_key,string.format("Around planet %s",planet_ursid:getCallSign()))
			station_db:setKeyValue(secondary_orbit_key,string.format("Planet %s orbits star %s in %s",planet_ursid:getCallSign(),planet_arcturus_star:getCallSign(),planet_arcturus_star:getSectorName()))
		elseif station == stationVilairre then	--Lafrina
			station_db:setKeyValue(faction_key,station:getFaction())
			station_db:setKeyValue(primary_orbit_key,string.format("Around planet %s",planet_wilaux:getCallSign()))
			station_db:setKeyValue(secondary_orbit_key,string.format("Planet %s orbits star %s in %s",planet_wilaux:getCallSign(),planet_balinor:getCallSign(),planet_balinor:getSectorName()))
		elseif station == stationRespite then	--Bask/Magnasol
			station_db:setKeyValue(faction_key,station:getFaction())
			station_db:setKeyValue(primary_orbit_key,string.format("Around planet %s",planet_argyle:getCallSign()))
			station_db:setKeyValue(secondary_orbit_key,string.format("Planet %s orbits star %s in %s",planet_argyle:getCallSign(),planet_magnasol_star:getCallSign(),planet_magnasol_star:getSectorName()))
		else	--not in motion
			local location_key = _("scienceDB","Location, Faction")
			station_db:setKeyValue(location_key,string.format("%s, %s",station:getSectorName(),station:getFaction()))
		end
	end
	if station_db ~= nil then
		local dock_service = ""
		local service_count = 0
		if station:getSharesEnergyWithDocked() then
			dock_service = _("scienceDB","share energy")
			service_count = service_count + 1
		end
		if station:getRepairDocked() then
			if dock_service == "" then
				dock_service = _("scienceDB","repair hull")
			else
				dock_service = string.format(_("scienceDB","%s, repair hull"),dock_service)
			end
			service_count = service_count + 1
		end
		if station:getRestocksScanProbes() then
			if dock_service == "" then
				dock_service = _("scienceDB","replenish probes")
			else
				dock_service = string.format(_("scienceDB","%s, replenish probes"),dock_service)
			end
			service_count = service_count + 1
		end
		if service_count > 0 then
			local docking_services_key = _("scienceDB","Docking Services")
			if service_count == 1 then
				docking_services_key = _("scienceDB","Docking Service")
			end
			station_db:setKeyValue(docking_services_key,dock_service)
		end
		if station.comms_data ~= nil then
			if station.comms_data.weapon_available ~= nil then
				if station.comms_data.weapon_cost == nil then
					station.comms_data.weapon_cost = {
						Homing = math.random(1,4),
						HVLI = math.random(1,3),
						Mine = math.random(2,5),
						Nuke = math.random(12,18),
						EMP = math.random(7,13),
					}
				end
				if station.comms_data.reputation_cost_multipliers == nil then
					station.comms_data.reputation_cost_multipliers = {
						friend = 1.0,
						neutral = 3.0,
					}
				end
				local station_missiles = {
					{name = "Homing",	key = _("scienceDB","Restock Homing")},
					{name = "HVLI",		key = _("scienceDB","Restock HVLI")},
					{name = "Mine",		key = _("scienceDB","Restock Mine")},
					{name = "Nuke",		key = _("scienceDB","Restock Nuke")},
					{name = "EMP",		key = _("scienceDB","Restock EMP")},
				}
				for i,sm in ipairs(station_missiles) do
					if station.comms_data.weapon_available[sm.name] then
						if station.comms_data.weapon_cost[sm.name] ~= nil then
							local val = string.format(_("scienceDB","%i reputation each"),math.ceil(station.comms_data.weapon_cost[sm.name] * station.comms_data.reputation_cost_multipliers["friend"]))
							station_db:setKeyValue(sm.key,val)
						end
					end
				end
			end
			local secondary_system_repair = {
				{name = "scan_repair",				key = _("scienceDB","Repair scanners")},
				{name = "combat_maneuver_repair",	key = _("scienceDB","Repair combat maneuver")},
				{name = "hack_repair",				key = _("scienceDB","Repair hacking")},
				{name = "probe_launch_repair",		key = _("scienceDB","Repair probe launch")},
				{name = "tube_slow_down_repair",	key = _("scienceDB","Repair slow tube")},
				{name = "self_destruct_repair",		key = _("scienceDB","Repair self destruct")},
			}
			for i,ssr in ipairs(secondary_system_repair) do
				if station.comms_data[ssr.name] then
					if station.comms_data.service_cost[ssr.name] ~= nil then
						local val = string.format(_("scienceDB","%s reputation"),station.comms_data.service_cost[ssr.name])
						station_db:setKeyValue(ssr.key,val)
					end
				end
			end
			if station.comms_data.service_available ~= nil then
				local general_service = {
					{name = "supplydrop",				key = _("scienceDB","Drop supplies")},
					{name = "jumpsupplydrop",			key = _("scienceDB","Jump ship drops supplies")},
					{name = "flingsupplydrop",			key = _("scienceDB","Flinger drops supplies")},
					{name = "reinforcements",			key = _("scienceDB","Standard reinforcements")},
					{name = "hornet_reinforcements",	key = _("scienceDB","Hornet reinforcements")},
					{name = "phobos_reinforcements",	key = _("scienceDB","Phobos reinforcements")},
					{name = "stalker_reinforcements",	key = _("scienceDB","Stalker reinforcements")},
					{name = "amk8_reinforcements",		key = _("scienceDB","Adder8 reinforcements")},
					{name = "activatedefensefleet",		key = _("scienceDB","Activate defense fleet")},
					{name = "servicejonque",			key = _("scienceDB","Provide service jonque")},
					{name = "shield_overcharge",		key = _("scienceDB","Overcharge shield")},
					{name = "jump_overcharge",			key = _("scienceDB","Overcharge jump drive")},
				}
				for i,gs in ipairs(general_service) do
					if station.comms_data.service_available[gs.name] then
						local val = "available"
						if station.comms_data.service_cost[gs.name] ~= nil then
							if station.comms_data.service_cost[gs.name] > 0 then
								val = string.format(_("scienceDB","%s reputation"),station.comms_data.service_cost[gs.name])
							end
						end
						station_db:setKeyValue(gs.key,val)
					end
				end
			end
		end
	end
	temp_artifact:destroy()
end
function stationStatusReport(calling_function)
	local status_prompts = {
		"Report status",
		"Report station status",
		string.format("Report station %s status",comms_target:getCallSign()),
		"What is your status?",
		string.format("What is the condition of station %s?",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(status_prompts), function()
		msg = string.format(_("situationReport-comms","Hull:%s    "),math.floor(comms_target:getHull() / comms_target:getHullMax() * 100))
		local shields = comms_target:getShieldCount()
		if shields == 1 then
			msg = string.format(_("situationReport-comms","%s  Shield:%s"),msg,math.floor(comms_target:getShieldLevel(0) / comms_target:getShieldMax(0) * 100))
		else
			for n=0,shields-1 do
				msg = string.format(_("situationReport-comms","%s  Shield %s:%s"),msg,n,math.floor(comms_target:getShieldLevel(n) / comms_target:getShieldMax(n) * 100))
			end
		end
		local improvements = {}
		msg, improvements = catalogImprovements(msg)
		system_list_desc = {
			["reactor"] = 		_("situationReport-comms","reactor"),
			["beamweapons"] =	_("situationReport-comms","beam weapons"),
			["missilesystem"] =	_("situationReport-comms","missile system"),
			["maneuver"] =		_("situationReport-comms","maneuver"),
			["impulse"] =		_("situationReport-comms","impulse"),
			["warp"] =			_("situationReport-comms","warp drive"),
			["jumpdrive"] =		_("situationReport-comms","jump drive"),
			["frontshield"] =	_("situationReport-comms","front shield"),
			["rearshield"] =	_("situationReport-comms","rear shield"),
		}
		local major_repairs = _("situationReport-comms","Repair these major systems:")
		if comms_target.comms_data ~= nil and comms_target.comms_data.system_repair ~= nil then
			for i,system in ipairs(system_list) do
				if comms_target.comms_data.system_repair[system].avail then
					if major_repairs == _("situationReport-comms","Repair these major systems:") then
						major_repairs = string.format("%s %s",major_repairs,system_list_desc[system])
					else
						major_repairs = string.format("%s, %s",major_repairs,system_list_desc[system])
					end
				end
			end
		else
			print(comms_target:getCallSign(),"comms_data or system_repair is nil")
		end
		if major_repairs ~= _("situationReport-comms","Repair these major systems:") then
			msg = string.format("%s\n%s.",msg,major_repairs)
		end
		local secondary_system_repair_desc = {
			{name = "scan_repair",				desc = _("situationReport-comms","scanners")},
			{name = "combat_maneuver_repair",	desc = _("situationReport-comms","combat maneuver")},
			{name = "hack_repair",				desc = _("situationReport-comms","hacking")},
			{name = "probe_launch_repair",		desc = _("situationReport-comms","probe launch")},
			{name = "tube_slow_down_repair",	desc = _("situationReport-comms","slow tube")},
			{name = "self_destruct_repair",		desc = _("situationReport-comms","self destruct")},
		}
		local minor_repairs = _("situationReport-comms","Repair these minor systems:")
		for i,system in ipairs(secondary_system_repair_desc) do
			if comms_target.comms_data[system.name] then
				if minor_repairs == _("situationReport-comms","Repair these minor systems:") then
					minor_repairs = string.format("%s %s",minor_repairs,system.desc)
				else
					minor_repairs = string.format("%s, %s",minor_repairs,system.desc)
				end
			end
		end
		if minor_repairs ~= _("situationReport-comms","Repair these minor systems:") then
			msg = string.format("%s\n%s.",msg,minor_repairs)
		end
		local overcharge_service = ""
		if comms_target.comms_data.jump_overcharge then
			overcharge_service = "jump drive"
		end
		if comms_target.comms_data.shield_overcharge then
			if overcharge_service == "" then
				overcharge_service = "shields"
			else
				overcharge_service = "jump drive and shields"
			end
		end
		if overcharge_service ~= "" then
			msg = string.format("%s\nOvercharge service available for %s",msg,overcharge_service)
		end
		setCommsMessage(msg)
		if #improvements > 0 and (comms_target.comms_data.friendlyness > 33 or comms_source:isDocked(comms_target)) then
			improveStationService(improvements)
		end
		addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
		addCommsReply(_("Back to station communication"), commsStation)
	end)
end
function stationDefenseFleet(calling_function)
	if comms_target.comms_data.idle_defense_fleet ~= nil then
		local defense_fleet_count = 0
		for name, template in pairs(comms_target.comms_data.idle_defense_fleet) do
			defense_fleet_count = defense_fleet_count + 1
		end
		if defense_fleet_count > 0 then
			local fleet_prompts = {
				string.format("Activate station defense fleet (%s rep)",getServiceCost("activatedefensefleet")),
				string.format("Launch station defense fleet (%s rep)",getServiceCost("activatedefensefleet")),
				string.format("Send out station defense fleet (%s rep)",getServiceCost("activatedefensefleet")),
				string.format("Launch %s defenders (%s rep)",comms_target:getCallSign(),getServiceCost("activatedefensefleet")),
				string.format("Enable %s defenders (%s rep)",comms_target:getCallSign(),getServiceCost("activatedefensefleet")),
			}
			addCommsReply(tableSelectRandom(fleet_prompts),function()
				if comms_source:takeReputationPoints(getServiceCost("activatedefensefleet")) then
					for name, template in pairs(comms_target.comms_data.idle_defense_fleet) do
						local script = Script()
						local position_x, position_y = comms_target:getPosition()
						local station_name = comms_target:getCallSign()
						script:setVariable("position_x", position_x):setVariable("position_y", position_y)
						script:setVariable("station_name",station_name)
						script:setVariable("name",name)
						script:setVariable("template",template)
						script:setVariable("faction_id",comms_target:getFactionId())
						script:run("border_defend_station.lua")
						comms_target.comms_data.idle_defense_fleet[name] = nil
					end
					local launched_responses = {
						"Defense fleet activated",
						"Defenders launched",
						string.format("%s defense fleet activated",comms_target:getCallSign()),
						string.format("Station %s defenders engaged",comms_target:getCallSign()),
						string.format("%s defenders enabled",comms_target:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(launched_responses))
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
				end
				if calling_function ~= nil then
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply(_("Back to station communication"), commsStation)
				else
					addCommsReply("Back", commsStation)
				end
			end)
		end
	else
		local station_type = comms_target:getTypeName()
		local size_matters = {
			["Small Station"] = -5,
			["Medium Station"] = 0,
			["Large Station"] = 5,
			["Huge Station"] = 10,
		}
		local adjustment = size_matters[station_type]	--problem child - adjustment nil
		if adjustment == nil then
			adjustment = 0
		end
		comms_target.comms_data.idle_defense_fleet = {["DF1"] =  "MT52 Hornet"}
		if random(1,100) < (95 + adjustment) then
			comms_target.comms_data.idle_defense_fleet["DF2"] = "MU52 Hornet"
			if random(1,100) < (90 + adjustment) then
				comms_target.comms_data.idle_defense_fleet["DF3"] = "Adder MK5"
				if random(1,100) < (85 + adjustment) then
					comms_target.comms_data.idle_defense_fleet["DF4"] = "Phobos T3"
					if random(1,100) < (80 + adjustment) then
						comms_target.comms_data.idle_defense_fleet["DF5"] = "Adder MK8"
						if random(1,100) < (75 + adjustment) then
							comms_target.comms_data.idle_defense_fleet["DF6"] = "Elara P2"
							if random(1,100) < (70 + adjustment) then
								comms_target.comms_data.idle_defense_fleet["DF7"] = "Nirvana R5"
								if random(1,100) < (65 + adjustment) then
									comms_target.comms_data.idle_defense_fleet["DF8"] = "WX-Lindworm"
									if random(1,100) < (60 + adjustment) then
										comms_target.comms_data.idle_defense_fleet["DF9"] = "Adder MK6"
										if random(1,100) < (55 + adjustment) then
											comms_target.comms_data.idle_defense_fleet["DF10"] = "Stalker Q7"
											if random(1,100) < (50 + adjustment) then
												comms_target.comms_data.idle_defense_fleet["DF11"] = "Ktlitan Drone"
												if random(1,100) < (45 + adjustment) then
													comms_target.comms_data.idle_defense_fleet["DF12"] = "Nirvana R5A"
													if random(1,100) < (40 + adjustment) then
														comms_target.comms_data.idle_defense_fleet["DF13"] = "Piranha F8"
														if random(1,100) < (35 + adjustment) then
															comms_target.comms_data.idle_defense_fleet["DF14"] = "Stalker R7"
															if random(1,100) < (30 + adjustment) then
																comms_target.comms_data.idle_defense_fleet["DF15"] = "Atlantis X23"
																if random(1,100) < (25 + adjustment) then
																	comms_target.comms_data.idle_defense_fleet["DF16"] = "Piranha F12"
																	if random(1,100) < (20 + adjustment) then
																		comms_target.comms_data.idle_defense_fleet["DF17"] = "Cucaracha"
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
end
function contactStationGMRepresentative(status_string)
	local gm_verb = gm_verbs[math.random(1,#gm_verbs)]
	local gm_name = gm_names[math.random(1,#gm_names)]
	addCommsReply(string.format("%s %s",gm_verb,gm_name),function()
		setCommsMessage(string.format("Connecting to %s",gm_name))
		commsSwitchToGM()
		if status_string == nil then
			status_string = "no special status"
		end
		addGMMessage(string.format("Player ship %s in %s initiating contact to GM on %s station %s in %s.\nPrompt was %s %s\nStatus:%s",comms_source:getCallSign(),comms_source:getSectorName(),comms_target:getFaction(),comms_target:getCallSign(),comms_target:getSectorName(),gm_verb,gm_name,status_string))
		addCommsReply("Back", commsStation)
	end)
end
--	undocked communication functions
function handleUndockedState()
	local oMsg = ""
	local station_greeting_prompt = {
		{thresh = 90,	text = string.format(_("station-comms","This is %s's communications officer. Go ahead, %s. We're listening."),comms_target:getCallSign(),comms_source:getCallSign())},
		{thresh = 80,	text = string.format(_("station-comms","%s to %s, receiving your communication. Proceed with your message."),comms_target:getCallSign(),comms_source:getCallSign())},
		{thresh = 70,	text = string.format(_("station-comms","Confirmed, %s. You're connected to %s. Go ahead."),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 60,	text = string.format(_("station-comms","This is the %s communications officer. Go ahead, %s."),comms_target:getCallSign(),comms_source:getCallSign())},
		{thresh = 50,	text = string.format(_("station-comms","%s acknowledges %s's communication. Pray, don't keep us in suspense any longer."),comms_target:getCallSign(),comms_source:getCallSign())},
		{thresh = 40,	text = string.format(_("station-comms","%s, it is positively thrilling to be the recipient of your undoubtably important message. Please enlighten us."),comms_source:getCallSign())},
		{thresh = 30,	text = string.format(_("station-comms","Acknowledged, %s. Try not to waste our time. What do you want?"),comms_source:getCallSign())},
		{thresh = 20,	text = string.format(_("station-comms","What is it now, %s? Make it quick; we're not here for small talk."),comms_source:getCallSign())},
		{thresh = 10,	text = string.format(_("station-comms","%s reluctantly acknowledges your communication. Make it snappy, %s."),comms_target:getCallSign(),comms_source:getCallSign())},
	}
	for i,prompt in ipairs(station_greeting_prompt) do
		if comms_target.comms_data.friendlyness > prompt.thresh then
			oMsg = string.format("%s Communications Portal\n%s",comms_target:getCallSign(),prompt.text)
			break
		else
			oMsg = string.format(_("station-comms","%s Communications Portal\nWelcome to our lovely station."),comms_target:getCallSign())
		end
	end
	setCommsMessage(oMsg)
	local interactive = false
	local no_relay_panic_responses = {
		"No communication officers available due to station emergency.",
		"Relay officers unavailable during station emergency.",
		"Relay officers reassigned for station emergency.",
		"Station emergency precludes response from relay officer.",
	}
	if comms_target:areEnemiesInRange(panic_range*1.5) then
		if comms_target.comms_data.friendlyness > 20 then
			oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(no_relay_panic_responses))
			setCommsMessage(oMsg)
		end
	elseif comms_target:areEnemiesInRange(panic_range*2) then
		if comms_target.comms_data.friendlyness > 75 then
			local quick_relay_responses = {
				"Please be quick. Sensors detect enemies.",
				"I have to go soon since there are enemies nearby.",
				"Talk fast. Enemies approach.",
				"Enemies are coming so talk fast.",
			}
			oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(quick_relay_responses))
			setCommsMessage(oMsg)
			interactive = true
		else
			if comms_target.comms_data.friendlyness > 40 then
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(no_relay_panic_responses))
				setCommsMessage(oMsg)
			end
		end
	elseif comms_target:areEnemiesInRange(panic_range*2.5) then
		if comms_target.comms_data.friendlyness > 33 then
			if comms_target.comms_data.friendlyness > 75 then
				local distracted_units_responses = {
					string.format("Please forgive us if we seem distracted. Our sensors detect enemies within %i units",math.floor(panic_range*2.5/1000)),
					string.format("Enemies at %i units. Things might get busy soon. Business?",math.floor(panic_range*2.5/1000)),
					string.format("A busy day here at %s: Enemies are %s units away and my boss is reviewing emergency procedures. I'm a bit distracted.",comms_target:getCallSign(),math.floor(panic_range*2.5/1000)),
					string.format("If I seem distracted, it's only because of the enemies showing up at %i units.",math.floor(panic_range*2.5/1000)),
				}
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(distracted_units_responses))
				setCommsMessage(oMsg)
			elseif comms_target.comms_data.friendlyness > 50 then
				local distracted_responses = {
					"Please forgive us if we seem distracted. Our sensors detect enemies nearby.",
					string.format("Enemies are close to %s. We might get busy. Business?",comms_target:getCallSign()),
					"We're quite busy preparing for enemies: evaluating cross training, checking emergency procedures, etc. I'm a little distracted.",
					string.format("%s is likely going to be attacked soon. Everyone is running around getting ready, distracting me.",comms_target:getCallSign()),
				}
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(distracted_responses))
				setCommsMessage(oMsg)
			end
			interactive = true
		end
	else
		if comms_target.comms_data.friendlyness > 33 then
			interactive = true
		end	
	end
	if interactive then
		contactStationGMRepresentative()
	else
		contactStationGMRepresentative("Android")
	end
	setCommsMessage(oMsg)
	if android_undocked_station_time == nil or getScenarioTime() > android_undocked_station_time + comms_fudge then
		androidUndockedStationComms()
		android_undocked_station_time = getScenarioTime()
	end
	if interactive then
		if interactive_undocked_station_time == nil or getScenarioTime() > interactive_undocked_station_time + comms_fudge then
			interactiveUndockedStationComms()
			interactive_undocked_station_time = getScenarioTime()
		end
	end
end
function androidUndockedStationComms()
	addCommsReply(_("station-comms","Automated station communication"),androidUndockedStationCommsMeat)
end
function androidUndockedStationCommsMeat()
	setCommsMessage(_("station-comms","Select:"))
	if android_undocked_station_status_report == nil or getScenarioTime() > android_undocked_station_status_report + comms_fudge then
		stationStatusReport({identifier=androidUndockedStationCommsMeat,name="automated station communication"})
		android_undocked_station_status_report = getScenarioTime()
	end
	if isAllowedTo(comms_target.comms_data.services.activatedefensefleet) then
		if android_undocked_station_defense_fleet == nil or getScenarioTime() > android_undocked_station_defense_fleet + comms_fudge then
			stationDefenseFleet({identifier=androidUndockedStationCommsMeat,name="automated station communication"})
			android_undocked_station_defense_fleet = getScenarioTime()
		end
	end
	if isAllowedTo(comms_target.comms_data.services.reinforcements) then
		if android_undocked_station_request_reinforcements == nil or getScenarioTime() > android_undocked_station_request_reinforcements + comms_fudge then
			requestReinforcements({identifier=androidUndockedStationCommsMeat,name="automated station communication"})
			android_undocked_station_request_reinforcements = getScenarioTime()
		end
	end
--	addCommsReply(_("Back"), commsStation)	--problem child - no setCommsMessage
end
function interactiveUndockedStationComms()
	addCommsReply("Interact with station relay officer on duty",interactiveUndockedStationCommsMeat)
end
function interactiveUndockedStationCommsMeat()
	string.format("")
	local help_prompts = {
		"What can I do for you?",
		"How may I help?",
		"What do you need or want?",
		string.format("Go ahead, %s",comms_source:getCallSign()),
		string.format("How can %s serve you today?",comms_target:getCallSign()),
	}
	local the_prompt = tableSelectRandom(help_prompts)
	if the_prompt ~= nil then
		setCommsMessage(the_prompt)
	else
		setCommsMessage("What can I do for you?")
	end
	if interactive_undocked_station_status_report == nil or getScenarioTime() > interactive_undocked_station_status_report + comms_fudge then
		stationStatusReport({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
		interactive_undocked_station_status_report = getScenarioTime()
	end
	if isAllowedTo(comms_target.comms_data.services.activatedefensefleet) then
		if interactive_undocked_station_defense_fleet == nil or getScenarioTime() > interactive_undocked_station_defense_fleet + comms_fudge then
			stationDefenseFleet({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_defense_fleet = getScenarioTime()
		end
	end
	if interactive_undocked_station_request_supply_drop == nil or getScenarioTime() > interactive_undocked_station_request_supply_drop + comms_fudge then
		requestSupplyDrop({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
		interactive_undocked_station_request_supply_drop = getScenarioTime()
	end
	if isAllowedTo(comms_target.comms_data.services.reinforcements) then
		if interactive_undocked_station_request_reinforcements == nil or getScenarioTime() > interactive_undocked_station_request_reinforcements + comms_fudge then
			requestReinforcements({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_request_reinforcements = getScenarioTime()
		end
	end
	if comms_target.comms_data.service_available ~= nil then
		if comms_target.comms_data.service_available.servicejonque ~= nil and comms_target.comms_data.service_available.servicejonque then
			if interactive_undocked_station_request_jonque == nil or getScenarioTime() > interactive_undocked_station_request_jonque + comms_fudge then
				requestJonque()
				interactive_undocked_station_request_jonque = getScenarioTime()
			end
		end
	end
	if interactive_undocked_station_request_expedited_dock == nil or getScenarioTime() > interactive_undocked_station_request_expedited_dock + comms_fudge then
		if comms_target:isFriendly(comms_source) and comms_target.comms_data.friendlyness > 33 then
			requestExpediteDock({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
		elseif not comms_target:isEnemy(comms_source) and comms_target.comms_data.friendlyness > 66 then
			requestExpediteDock({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
		end
		interactive_undocked_station_request_expedited_dock = getScenarioTime()
	end
	if comms_target.comms_data.friendlyness > 50 then
		if interactive_undocked_station_commercial_options == nil or getScenarioTime() > interactive_undocked_station_commercial_options + comms_fudge then
			commercialOptions({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_commercial_options = getScenarioTime()
		end
	end
	if planet_magnasol_star ~= nil and distance(planet_magnasol_star,comms_target) < 120000 then
		if interactive_undocked_station_magnasol_heat == nil or getScenarioTime() > interactive_undocked_station_magnasol_heat + comms_fudge then
			magnasolHeatDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_magnasol_heat = getScenarioTime()
		end
	end
	if comms_target == stationWormholeWrangler then
		wormholeWranglerOptions({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
	end
	if comms_target == stationHossenfelder then
		if interactive_undocked_station_riptide_hossenfelder == nil or getScenarioTime() > interactive_undocked_station_riptide_hossenfelder + comms_fudge then
			riptideHossenfelderDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_riptide_hossenfelder = getScenarioTime()
		end
	end
	if comms_target == stationLafrina then
		if interactive_unducked_station_lafrina == nil or getScenarioTime() > interactive_unducked_station_lafrina + comms_fudge then
			lafrinaDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_unducked_station_lafrina = getScenarioTime()
		end
	end
	if comms_target.skeleton_station then
		if interactive_undocked_station_influence_enemy == nil or getScenarioTime() > interactive_undocked_station_influence_enemy + comms_fudge then
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			interactive_undocked_station_influence_enemy = getScenarioTime()
		end
	end
	the_prompt = tableSelectRandom(help_prompts)
	if the_prompt ~= nil then
		setCommsMessage(the_prompt)
	else
		setCommsMessage("What can I do for you?")
	end
	addCommsReply("Back",commsStation)
end
function catalogImprovements(msg)
	local improvements = {}
	if msg == nil then
		msg = ""
	end
	if comms_target:getRestocksScanProbes() then
		msg = string.format(_("situationReport-comms","%s\nReplenish scan probes: nominal."),msg)
	else
		if comms_target.probe_fail_reason == nil then
			local reason_list = {
				_("situationReport-comms", "Cannot replenish scan probes due to fabrication unit failure."),
				_("situationReport-comms", "Parts shortage prevents scan probe replenishment."),
				_("situationReport-comms", "Station management has curtailed scan probe replenishment for cost cutting reasons."),
			}
			comms_target.probe_fail_reason = reason_list[math.random(1,#reason_list)]
		end
		msg = string.format("%s\n%s",msg,comms_target.probe_fail_reason)
		table.insert(improvements,"restock_probes")
	end
	if comms_target:getRepairDocked() then
		msg = string.format(_("situationReport-comms","%s\nRepair ship hull: nominal."),msg)
	else
		if comms_target.repair_fail_reason == nil then
			reason_list = {
				_("situationReport-comms", "We're out of the necessary materials and supplies for hull repair."),
				_("situationReport-comms", "Hull repair automation unavailable while it is undergoing maintenance."),
				_("situationReport-comms", "All hull repair technicians quarantined to quarters due to illness."),
			}
			comms_target.repair_fail_reason = reason_list[math.random(1,#reason_list)]
		end
		msg = string.format("%s\n%s",msg,comms_target.repair_fail_reason)
		table.insert(improvements,"hull")
	end
	if comms_target:getSharesEnergyWithDocked() then
		msg = string.format(_("situationReport-comms","%s\nRecharge ship energy stores: nominal."),msg)
	else
		if comms_target.energy_fail_reason == nil then
			reason_list = {
				_("situationReport-comms", "A recent reactor failure has put us on auxiliary power, so we cannot recharge ships."),
				_("situationReport-comms", "A damaged power coupling makes it too dangerous to recharge ships."),
				_("situationReport-comms", "An asteroid strike damaged our solar cells and we are short on power, so we can't recharge ships right now."),
			}
			comms_target.energy_fail_reason = reason_list[math.random(1,#reason_list)]
		end
		msg = string.format("%s\n%s",msg,comms_target.energy_fail_reason)
		table.insert(improvements,"energy")
	end
	local provides_some_missiles = false
	local missile_provision_msg = _("situationReport-comms","Ordnance available:")
	local missile_types_desc = {
		{name = "Nuke",		desc = _("situationReport-comms","nukes")},
		{name = "EMP",		desc = _("situationReport-comms","EMPs")},
		{name = "Homing",	desc = _("situationReport-comms","homings")},
		{name = "Mine",		desc = _("situationReport-comms","mines")},
		{name = "HVLI",		desc = _("situationReport-comms","HVLIs")},
	}
	for i,m_type in ipairs(missile_types_desc) do
		if comms_target.comms_data.weapon_available == nil then
			print("weapon available for station",comms_target:getCallSign(),"is nil")
		else
			if comms_target.comms_data.weapon_available[m_type.name] then	--problem child weapon_available is nil
				if missile_provision_msg == _("situationReport-comms","Ordnance available:") then
					missile_provision_msg = string.format(_("situationReport-comms","%s %s@%i rep"),missile_provision_msg,m_type.desc,getWeaponCost(m_type.name))
				else
					missile_provision_msg = string.format(_("situationReport-comms","%s, %s@%i rep"),missile_provision_msg,m_type.desc,getWeaponCost(m_type.name))
				end
			else
				table.insert(improvements,m_type.name)
			end
		end
	end
	if missile_provision_msg == _("situationReport-comms","Ordnance available:") then
		msg = string.format(_("situationReport-comms","%s\nNo ordnance available."),msg)
	else
		msg = string.format("%s\n%s.",msg,missile_provision_msg)
	end
	return msg,improvements	
end
function improveStationService(improvements)
	if mission_goods == nil then
		setRepairMissions()
	end
	addCommsReply(_("situationReport-comms","Improve station services"),function()
		local improve_what_service_prompts = {
			"What station service would you like to improve?",
			"Which of these station services would you like to improve?",
			"You could improve any of these station services:",
			"Certain station services could use improvement. Which one are you interested in?",
			string.format("Which %s service can %s help improve?",comms_target:getCallSign(),comms_source:getCallSign()),
		}
		if #improvements == 1 then
			improve_what_service_prompts = {
				"Would you like to improve this service?",
				"This service could use improvement:",
				string.format("%s can help %s by improving this service:",comms_source:getCallSign(),comms_target:getCallSign()),
				"Can you help by improving this service?",
			}
		end
		setCommsMessage(tableSelectRandom(improve_what_service_prompts))
		local improvement_prompt = {
			["restock_probes"] = {
				"Restocking of docked ship's scan probes",
				"Replenishing docked ship's scan probes",
				"Resupplying scan probes of docked ship",
			},
			["hull"] = {
				"Repairing of docked ship's hull",
				"Repairing hull of docked ship",
				"Fixing docked ship's hull",
			},
			["energy"] = {
				"Charging of docked ship's energy reserves",
				"Charge batteries of docked ship",
				"Restore energy reserves on docked ship",
			},
			["Nuke"] = {
				"Replenishment of nuclear ordnance on docked ship",
				"Replenish docked ship's nukes",
				"Restock nukes of docked ship",
				"Resupply nukes on docked ship",
			},
			["EMP"] = {
				"Replenishment of EMP missiles on docked ship",
				"Replenish docked ship's EMPs",
				"Provide replacement Electro-Magnetic Pulse missiles",
				"Restock EMPs on docked ship",
			},
			["Homing"] = {
				"Replenishment of homing missiles",
				"Restock homing missiles of docked ship",
				"Resupply homing missiles for docked ship",
				"Provide homing missiles to docked ship",
			},
			["HVLI"] = {
				"Replenishment of High Velocity Lead Impactors",
				"Restock HVLI missiles for docked ship",
				"Resupply High Velocity Lead Impactors on docked ship",
				"Provide HVLIs for docked ship",
			},
			["Mine"] = {
				"Replenishment of mines",
				"Replace mines on docked ship",
				"Restock mines on docked ship",
				"Resupply mines to docked ship",
			},
		}
		for i,improvement in ipairs(improvements) do
			if improvement_prompt[improvement] == nil then
				print("Unable to show improvements. Improvement value:",improvement)
			else
				addCommsReply(tableSelectRandom(improvement_prompt[improvement]),function()	
					local mission_line = mission_good[improvement]
					print("improvement:",improvement,"mission_line:",mission_line)
					for mission,details in pairs(mission_line) do
						print("mission:",mission,"details:",details)
					end
					local needed_good = mission_line.good
					print("needed good:",needed_good)
					needed_good = mission_good[improvement].good
					setCommsMessage(string.format(_("situationReport-comms","%s could be improved with %s. You may be able to get %s from stations or transports."),tableSelectRandom(improvement_prompt[improvement]),needed_good,needed_good))
					if comms_source.goods ~= nil then
						if comms_source.goods[needed_good] ~= nil and comms_source.goods[needed_good] > 0 and comms_source:isDocked(comms_target) then
							addCommsReply(string.format(_("situationReport-comms","Provide %s to station %s"),needed_good,comms_target:getCallSign()),function()
								if comms_source:isDocked(comms_target) then
									comms_source.goods[needed_good] = comms_source.goods[needed_good] - 1
									comms_source.cargo = comms_source.cargo + 1
									local improvement_msg = _("situationReport-comms","There was a problem with the improvement process")
									local friendliness_bonus_lo = 3
									local friendliness_bonus_hi = 9
									if improvement == "energy" then
										if comms_source.instant_energy == nil then
											comms_source.instant_energy = {}
										end
										table.insert(comms_source.instant_energy,comms_target)
										comms_target:setSharesEnergyWithDocked(true)
										improvement_msg = _("situationReport-comms","We can recharge again! Come back any time to have your batteries instantly recharged.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "hull" then
										if comms_source.instant_hull == nil then
											comms_source.instant_hull = {}
										end
										table.insert(comms_source.instant_hull,comms_target)
										comms_target:setRepairDocked(true)
										improvement_msg = _("situationReport-comms","We can repair hulls again! Come back any time to have your hull instantly repaired.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "restock_probes" then
										if comms_source.instant_probes == nil then
											comms_source.instant_probes = {}
										end
										table.insert(comms_source.instant_probes,comms_target)
										comms_target:setRestocksScanProbes(true)
										improvement_msg = _("situationReport-comms","We can restock scan probes again! Come back any time to have your scan probes instantly restocked.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "Nuke" then
										if comms_source.nuke_discount == nil then
											comms_source.nuke_discount = {}
										end
										table.insert(comms_source.nuke_discount,comms_target)
										comms_target.comms_data.weapon_available.Nuke = true
										comms_target.comms_data.weapons["Nuke"] = "neutral"
										comms_target.comms_data.max_weapon_refill_amount.neutral = 1
										improvement_msg = _("situationReport-comms","We can replenish nukes again! Come back any time to have your supply of nukes replenished.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "EMP" then
										if comms_source.emp_discount == nil then
											comms_source.emp_discount = {}
										end
										table.insert(comms_source.emp_discount,comms_target)
										comms_target.comms_data.weapon_available.EMP = true
										comms_target.comms_data.weapons["EMP"] = "neutral"
										comms_target.comms_data.max_weapon_refill_amount.neutral = 1
										improvement_msg = _("situationReport-comms","We can replenish EMPs again! Come back any time to have your supply of EMPs replenished.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "Homing" then
										if comms_source.homing_discount == nil then
											comms_source.homing_discount = {}
										end
										table.insert(comms_source.homing_discount,comms_target)
										comms_target.comms_data.weapon_available.Homing = true
										comms_target.comms_data.max_weapon_refill_amount.neutral = 1
										improvement_msg = _("situationReport-comms","We can replenish homing missiles again! Come back any time to have your supply of homing missiles replenished.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "Mine" then
										if comms_source.mine_discount == nil then
											comms_source.mine_discount = {}
										end
										table.insert(comms_source.mine_discount,comms_target)
										comms_target.comms_data.weapon_available.Mine = true
										comms_target.comms_data.weapons["Mine"] = "neutral"
										comms_target.comms_data.max_weapon_refill_amount.neutral = 1
										improvement_msg = _("situationReport-comms","We can replenish mines again! Come back any time to have your supply of mines replenished.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									elseif improvement == "HVLI" then
										if comms_source.hvli_discount == nil then
											comms_source.hvli_discount = {}
										end
										table.insert(comms_source.hvli_discount,comms_target)
										comms_target.comms_data.weapon_available.HVLI = true
										comms_target.comms_data.max_weapon_refill_amount.neutral = 1
										improvement_msg = _("situationReport-comms","We can replenish HVLIs again! Come back any time to have your supply of high velocity lead impactors replenished.")
										comms_target.comms_data.friendlyness = math.min(comms_target.comms_data.friendlyness + random(friendliness_bonus_lo,friendliness_bonus_hi),100)
									end
									setCommsMessage(improvement_msg)
								else
									setCommsMessage(_("situationReport-comms","Can't do that when you're not docked"))
								end
								addCommsReply(_("Back"), commsStation)
							end)
						end
					end
					addCommsReply(_("Back"), commsStation)
				end)
			end
		end
		addCommsReply(_("Back"), commsStation)
	end)
end
function setRepairMissions()
	local mission_reasons = {
		["energy"] = {
			[_("situationReport-comms", "A recent reactor failure has put us on auxiliary power, so we cannot recharge ships.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","optic","filament","sensor","lifter","software","circuit","battery"
			},
			[_("situationReport-comms", "A damaged power coupling makes it too dangerous to recharge ships.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","optic","filament","sensor","lifter","circuit","battery"
			},
			[_("situationReport-comms", "An asteroid strike damaged our solar cells and we are short on power, so we can't recharge ships right now.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","optic","filament","sensor","circuit","battery"
			},
		},
		["hull"] = {
			[_("situationReport-comms", "We're out of the necessary materials and supplies for hull repair.")] = {
				"nickel","platinum","dilithium","tritanium","cobalt","lifter","filament","sensor","circuit","repulsor","nanites","shield"
			},
			[_("situationReport-comms", "Hull repair automation unavailable while it is undergoing maintenance.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","optic","filament","sensor","lifter","software","circuit","android","robotic","nanites"
			},
			[_("situationReport-comms", "All hull repair technicians quarantined to quarters due to illness.")] = {
				"medicine","transporter","sensor","communication","autodoc","android","nanites"
			},
		},
		["restock_probes"] = {
			[_("situationReport-comms", "Cannot replenish scan probes due to fabrication unit failure.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","optic","filament","sensor","lifter","software","circuit","battery"
			},
			[_("situationReport-comms", "Parts shortage prevents scan probe replenishment.")] = {
				"optic","filament","shield","impulse","warp","sensor","lifter","circuit","battery","communication"
			},
			[_("situationReport-comms", "Station management has curtailed scan probe replenishment for cost cutting reasons.")] = {
				"nickel","platinum","gold","dilithium","tritanium","cobalt","luxury"
			},
		}
	}
    mission_goods = {}
	local tpa = Artifact():setFaction(player_faction)	--temporary player artifact
	local mission_stations = {}
	for i,station in ipairs(regionStations) do
		if station:isValid() then
			if not station:isEnemy(tpa) then
				local station_type = station:getTypeName()
				if station_type == "Small Station" or station_type == "Medium Station" or station_type == "Large Station" or station_type == "Huge Station" then
					table.insert(mission_stations,station)
				end
			end
		end
	end
	for i,station in ipairs(mission_stations) do
		if not station:isEnemy(tpa) then
			if not station:getRestocksScanProbes() then
				if station.probe_fail_reason == nil then
					local reason_list = {
						_("situationReport-comms", "Cannot replenish scan probes due to fabrication unit failure."),
						_("situationReport-comms", "Parts shortage prevents scan probe replenishment."),
						_("situationReport-comms", "Station management has curtailed scan probe replenishment for cost cutting reasons."),
					}
					station.probe_fail_reason = reason_list[math.random(1,#reason_list)]
					mission_goods["restock_probes"] = mission_reasons["restock_probes"][station.probe_fail_reason]
				end
			end
			if not station:getRepairDocked() then
				if station.repair_fail_reason == nil then
					reason_list = {
						_("situationReport-comms", "We're out of the necessary materials and supplies for hull repair."),
						_("situationReport-comms", "Hull repair automation unavailable while it is undergoing maintenance."),
						_("situationReport-comms", "All hull repair technicians quarantined to quarters due to illness."),
					}
					station.repair_fail_reason = reason_list[math.random(1,#reason_list)]
					mission_goods["hull"] = mission_reasons["hull"][station.repair_fail_reason]
				end
			end
			if not station:getSharesEnergyWithDocked() then
				if station.energy_fail_reason == nil then
					reason_list = {
						_("situationReport-comms", "A recent reactor failure has put us on auxiliary power, so we cannot recharge ships."),
						_("situationReport-comms", "A damaged power coupling makes it too dangerous to recharge ships."),
						_("situationReport-comms", "An asteroid strike damaged our solar cells and we are short on power, so we can't recharge ships right now."),
					}
					station.energy_fail_reason = reason_list[math.random(1,#reason_list)]
					mission_goods["energy"] = mission_reasons["energy"][station.energy_fail_reason]
				end
			end
		end
	end
    local ordnance_missions = {
		"Homing","Nuke","EMP","Mine","HVLI",
    }
    for i,mission in ipairs(ordnance_missions) do
    	mission_goods[mission] = {"nickel","platinum","gold","dilithium","tritanium","cobalt","circuit","filament"}
    end
    table.insert(mission_goods.Homing,"sensor")
    table.insert(mission_goods.Nuke,"sensor")
    table.insert(mission_goods.EMP,"sensor")
    local missions_stations_goods = {}
    for i,station in ipairs(mission_stations) do
    	if not station:isEnemy(tpa) then
			if station.comms_data ~= nil and station.comms_data.goods ~= nil then
				for station_good,details in pairs(station.comms_data.goods) do
					for mission,mission_goods in pairs(mission_goods) do
						for k,mission_good in ipairs(mission_goods) do
							if mission_good == station_good then
								if missions_stations_goods[mission] == nil then
									missions_stations_goods[mission] = {}
								end
								if missions_stations_goods[mission][station] == nil then
									missions_stations_goods[mission][station] = {}
								end
								table.insert(missions_stations_goods[mission][station],mission_good)
							end
						end
					end
				end
			end
		end
    end
    mission_good = {}
    --	Pick goods for missions
    local already_selected_station = {}
    local already_selected_good = {}
    for mission,stations_goods in pairs(missions_stations_goods) do
    	local station_pool = {}
    	for station,goods in pairs(stations_goods) do
    		if #already_selected_station > 0 then
    			local exclude = false
    			for i,previous_station in ipairs(already_selected_station) do
    				if station == previous_station then
    					exclude = true
    				end
    			end
    			if not exclude then
    				table.insert(station_pool,station)
    			end
    		else
    			table.insert(station_pool,station)
    		end
    	end
    	if #station_pool > 0 then
			local selected_station = station_pool[math.random(1,#station_pool)]
			table.insert(already_selected_station,selected_station)
			local good = stations_goods[selected_station][math.random(1,#stations_goods[selected_station])]
			if #already_selected_good > 0 then
				local good_selected = false
				for i,previous_good in ipairs(already_selected_good) do
					if previous_good == good then
						good_selected = true
						break
					end
				end
				if not good_selected then
					mission_good[mission] = {good = good, station = selected_station}
					mission_goods[mission] = {good}
					table.insert(already_selected_good,good)
					selected_station.selected_mission_good = good
				end
			else
				mission_good[mission] = {good = good, station = selected_station}
				mission_goods[mission] = {good}
				table.insert(already_selected_good,good)
				selected_station.selected_mission_good = good
			end
		end
    end
    --	complete goods selection for missions
    for mission,goods in pairs(mission_goods) do
    	local selected_good = nil
    	if #goods > 1 then
    		local good_pool = {}
    		for i,good in ipairs(goods) do
    			local good_selected = false
    			for j,previous_good in ipairs(already_selected_good) do
    				if good == previous_good then
    					good_selected = true
    					break
    				end
    			end
    			if not good_selected then
    				table.insert(good_pool,good)
    			end
    		end
    		if #good_pool > 0 then
    			selected_good = good_pool[math.random(1,#good_pool)]
    			mission_good[mission] = {good = selected_good}
    			table.insert(already_selected_good,selected_good)
    		else
	    		selected_good = goods[math.random(1,#goods)]
    			mission_good[mission] = {good = selected_good}
    		end
    	else
    		selected_good = goods[1]
    	end
    end
    for mission,details in pairs(mission_good) do
    	if details.station == nil then
			for i,station in ipairs(mission_stations) do
				if not station:isEnemy(tpa) then
					if station.selected_mission_good == nil then
						if station.comms_data.goods == nil then
							station.comms_data.goods = {}
						end
						station.comms_data.goods[details.good] = {quantity = math.random(3,8), cost = math.random(40,80)}
						station.selected_mission_good = details.good
						details.station = station
						break
					end
				end
			end
		end
    end
    print("Missions and goods final:")
    for mission,details in pairs(mission_good) do
    	local out_station = "None"
    	if details.station ~= nil then
    		out_station = details.station:getCallSign()
    	end
    	print("Mission:",mission,"Good:",details.good,"Station:",out_station)
    end
	tpa:destroy()
end
function requestReinforcements(calling_function)
	local send_reinforcements_prompt = {
		"Send reinforcements",
		"Request friendly warship",
		"Send military help",
		"Get a ship to help us",
	}
	addCommsReply(tableSelectRandom(send_reinforcements_prompt),function()
		local reinforcement_type = {
			"What kind of reinforcement ship?",
			"What kind of ship should we send?",
			"Specify ship type",
			"Identify desired type of ship",
		}
		setCommsMessage(tableSelectRandom(reinforcement_type))
		if comms_target.comms_data.service_cost == nil then
			comms_target.comms_data.service_cost = {}
		end
		if comms_target.comms_data.service_cost.amk3_reinforcements == nil then
			comms_target.comms_data.service_cost.amk3_reinforcements = math.random(75,125)
		end
		if comms_target.comms_data.service_cost.hornet_reinforcements == nil then
			comms_target.comms_data.service_cost.hornet_reinforcements = math.random(75,125)
		end
		if comms_target.comms_data.service_cost.reinforcements == nil then
			comms_target.comms_data.service_cost.reinforcements = math.random(140,160)
		end
		if comms_target.comms_data.service_cost.amk8_reinforcements == nil then
			comms_target.comms_data.service_cost.amk8_reinforcements = math.random(150,200)
		end
		if comms_target.comms_data.service_cost.phobos_reinforcements == nil then
			comms_target.comms_data.service_cost.phobos_reinforcements = math.random(175,225)
		end
		if comms_target.comms_data.service_cost.stalker_reinforcements == nil then
			comms_target.comms_data.service_cost.stalker_reinforcements = math.random(275,325)
		end
		if comms_target.comms_data.service_available == nil then
			comms_target.comms_data.service_available = {}
		end
		if comms_target.comms_data.service_available.amk3_reinforcements == nil then
			comms_target.comms_data.service_available.amk3_reinforcements = random(1,100) < 72
		end
		if comms_target.comms_data.service_available.hornet_reinforcements == nil then
			comms_target.comms_data.service_available.hornet_reinforcements = random(1,100) < 72
		end
		if comms_target.comms_data.service_available.reinforcements == nil then
			comms_target.comms_data.service_available.reinforcements = true
		end
		if comms_target.comms_data.service_available.amk8_reinforcements == nil then
			comms_target.comms_data.service_available.amk8_reinforcements = random(1,100) < 72
		end
		if comms_target.comms_data.service_available.phobos_reinforcements == nil then
			comms_target.comms_data.service_available.phobos_reinforcements = random(1,100) < 72
		end
		if comms_target.comms_data.service_available.stalker_reinforcements == nil then
			comms_target.comms_data.service_available.stalker_reinforcements = random(1,100) < 72
		end
		local reinforcement_info = {
			{desc = _("stationAssist-comms","Adder MK3"),			template = "Adder MK3",		threshold = 20,	cost = math.ceil(comms_target.comms_data.service_cost.amk3_reinforcements),		avail = comms_target.comms_data.service_available.amk3_reinforcements},
			{desc = _("stationAssist-comms","MU52 Hornet"),			template = "MU52 Hornet",	threshold = 50,	cost = math.ceil(comms_target.comms_data.service_cost.hornet_reinforcements),	avail = comms_target.comms_data.service_available.hornet_reinforcements},
			{desc = _("stationAssist-comms","Standard Adder MK5"),	template = "Adder MK5",		threshold = 0,	cost = math.ceil(comms_target.comms_data.service_cost.reinforcements),			avail = comms_target.comms_data.service_available.reinforcements},
			{desc = _("stationAssist-comms","Adder MK8"),			template = "Adder MK8",		threshold = 33,	cost = math.ceil(comms_target.comms_data.service_cost.amk8_reinforcements),		avail = comms_target.comms_data.service_available.amk8_reinforcements},
			{desc = _("stationAssist-comms","Phobos T3"),			template = "Phobos T3",		threshold = 66,	cost = math.ceil(comms_target.comms_data.service_cost.phobos_reinforcements),	avail = comms_target.comms_data.service_available.phobos_reinforcements},
			{desc = _("stationAssist-comms","Stalker R7"),			template = "Stalker R7",	threshold = 70,	cost = math.ceil(comms_target.comms_data.service_cost.stalker_reinforcements),	avail = comms_target.comms_data.service_available.stalker_reinforcements},
		}
		local avail_count = 0
		for i, info in ipairs(reinforcement_info) do
			if info.avail and comms_target.comms_data.friendlyness > info.threshold then
				avail_count = avail_count + 1
				addCommsReply(string.format(_("stationAssist-comms","%s (%d reputation)"),info.desc,info.cost), function()
					if comms_source:getWaypointCount() < 1 then
						local set_reinforcement_waypoint = {
							"You need to set a waypoint before you can request reinforcements.",
							"Set a waypoint so that we can direct your reinforcements.",
							"Reinforcements require a waypoint as a destination.",
							"Before requesting reinforcements, you need to set a waypoint.",
						}
						setCommsMessage(tableSelectRandom(set_reinforcement_waypoint))
					else
						local direct_to_what_waypoint = {
							"To which waypoint should we dispatch the reinforcements?",
							"Where should we send the reinforcements?",
							"Specify reinforcement rendezvous waypoint",
							"Where should the reinforcements go?"
						}
						setCommsMessage(tableSelectRandom(direct_to_what_waypoint))
						for n = 1, comms_source:getWaypointCount() do
							addCommsReply(string.format(_("stationAssist-comms", "Waypoint %d"), n),function()
								if comms_source:takeReputationPoints(info.cost) then
									local ship = CpuShip():setFactionId(comms_target:getFactionId()):setPosition(comms_target:getPosition()):setTemplate(info.template):setScanned(true):orderDefendLocation(comms_source:getWaypoint(n))
									setBeamColor(ship)
									suffix_index = math.random(11,77)
									ship:setCallSign(generateCallSign(nil,comms_target:getFaction()))
									local sent_reinforcements = {
										string.format("We have dispatched %s to assist at waypoint %s",ship:getCallSign(),n),
										string.format("%s is heading for waypoint %s",ship:getCallSign(),n),
										string.format("%s has been sent to waypoint %s",ship:getCallSign(),n),
										string.format("We ordered %s to help at waypoint %s",ship:getCallSign(),n),
									}
									setCommsMessage(tableSelectRandom(sent_reinforcements))
								else
									local insufficient_rep_responses = {
										"Insufficient reputation",
										"Not enough reputation",
										"You need more reputation",
										string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
										"You don't have enough reputation",
									}
									setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								end
								addCommsReply(_("Back"), commsStation)
							end)
						end
					end
					addCommsReply(_("Back"), commsStation)
				end)
			end
		end
		if avail_count < 1 then
			local insufficient_reinforcements = {
				"No reinforcements available",
				"We don't have any reinforcements",
				"No military ships in our inventory, sorry",
				"Reinforcements unavailable",
			}
			setCommsMessage(tableSelectRandom(insufficient_reinforcements))
		end
		if undocked_request_reinforcements_caller_back == nil or getScenarioTime() > undocked_request_reinforcements_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			undocked_request_reinforcements_caller_back = getScenarioTime()
		end
		if undocked_request_reinforcements_comms_back == nil or getScenarioTime() > undocked_request_reinforcements_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			undocked_request_reinforcements_comms_back = getScenarioTime()
		end
	end)
end
function requestSupplyDrop(calling_function)
	local supply_drop_request = {
		"Request supply drop",
		"We need some supplies delivered",
		"Could you drop us some supplies?",
		"We could really use a supply drop",
	}
	addCommsReply(tableSelectRandom(supply_drop_request),function()
		local supply_drop_type = {
			"What kind of supply drop would you like?",
			"Supply drop type?",
			"In what way would you like your supplies delivered?",
			"Supply drop method?",
		}
		setCommsMessage(tableSelectRandom(supply_drop_type))
		local supply_drop_cost = math.ceil(getServiceCost("supplydrop"))
		local normal_drop_cost = {
			string.format("Normal (%i reputation)",supply_drop_cost),
			string.format("Regular (%i reputation)",supply_drop_cost),
			string.format("Plain (%i reputation)",supply_drop_cost),
			string.format("Simple (%i reputation)",supply_drop_cost),
		}
		addCommsReply(tableSelectRandom(normal_drop_cost),function()
			if comms_source:getWaypointCount() < 1 then
				local set_supply_waypoint = {
					"You need to set a waypoint before you can request supplies.",
					"Set a waypoint so that we can place your supplies.",
					"Supplies require a waypoint as a target.",
					"Before requesting supplies, you need to set a waypoint.",
				}
				setCommsMessage(tableSelectRandom(set_supply_waypoint))
			else
				local point_supplies = {
					"To which waypoint should we deliver your supplies?",
					"Identify the supply delivery waypoint",
					"Where do you want your supplies?",
					"Where do the supplies go?",
				}
				setCommsMessage(tableSelectRandom(point_supplies))
				for n=1,comms_source:getWaypointCount() do
					addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
						if comms_source:takeReputationPoints(getServiceCost("supplydrop")) then
							local position_x, position_y = comms_target:getPosition()
							local target_x, target_y = comms_source:getWaypoint(n)
							local script = Script()
							script:setVariable("position_x", position_x):setVariable("position_y", position_y)
							script:setVariable("target_x", target_x):setVariable("target_y", target_y)
							script:setVariable("faction_id", comms_target:getFactionId()):run("supply_drop.lua")
							local supply_ship_en_route = {
								string.format("We have dispatched a supply ship toward waypoint %d",n),
								string.format("We sent a supply ship to waypoint %i",n),
								string.format("There's a ship headed for %i with your supplies",n),
								string.format("A ship should be arriving soon at waypoint %i with your supplies",n)
							}
							setCommsMessage(tableSelectRandom(supply_ship_en_route))
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
						end
						addCommsReply(_("Back"), commsStation)
					end)
				end
			end
			addCommsReply(_("Back"), commsStation)
		end)
		if comms_target.comms_data.friendlyness > 20 then
			local jump_drop_cost = {
				string.format("Delivered by jump ship (%d reputation)",getServiceCost("jumpsupplydrop")),
				string.format("Jump ship drop (%i reputation)",getServiceCost("jumpsupplydrop")),
				string.format("Deliver with jump ship (%i reputation)",getServiceCost("jumpsupplydrop")),
				string.format("Jump ship supply drop (%i reputation)",getServiceCost("jumpsupplydrop")),
			}
			addCommsReply(tableSelectRandom(jump_drop_cost),function()
				if comms_source:getWaypointCount() < 1 then
					local set_supply_waypoint = {
						"You need to set a waypoint before you can request supplies.",
						"Set a waypoint so that we can place your supplies.",
						"Supplies require a waypoint as a target.",
						"Before requesting supplies, you need to set a waypoint.",
					}
					setCommsMessage(tableSelectRandom(set_supply_waypoint))
				else
					local point_supplies = {
						"To which waypoint should we deliver your supplies?",
						"Identify the supply delivery waypoint",
						"Where do you want your supplies?",
						"Where do the supplies go?",
					}
					setCommsMessage(tableSelectRandom(point_supplies))
					for n=1,comms_source:getWaypointCount() do
						addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
							if comms_source:takeReputationPoints(getServiceCost("jumpsupplydrop")) then
								local position_x, position_y = comms_target:getPosition()
								local target_x, target_y = comms_source:getWaypoint(n)
								local script = Script()
								script:setVariable("position_x", position_x):setVariable("position_y", position_y)
								script:setVariable("target_x", target_x):setVariable("target_y", target_y)
								script:setVariable("jump_freighter","yes")
								script:setVariable("faction_id", comms_target:getFactionId()):run("supply_drop.lua")
								local supply_ship_en_route = {
									string.format("We have dispatched a supply ship toward waypoint %d",n),
									string.format("We sent a supply ship to waypoint %i",n),
									string.format("There's a ship headed for %i with your supplies",n),
									string.format("A ship should be arriving soon at waypoint %i with your supplies",n)
								}
								setCommsMessage(tableSelectRandom(supply_ship_en_route))
							else
								local insufficient_rep_responses = {
									"Insufficient reputation",
									"Not enough reputation",
									"You need more reputation",
									string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
									"You don't have enough reputation",
								}
								setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							end
							addCommsReply(_("Back"), commsStation)
						end)
					end
				end
				addCommsReply(_("Back"), commsStation)
			end)
		end
		if comms_target.comms_data.friendlyness > 66 then
			local flinger_drop_cost = {
				string.format("Delivered by flinger (%d reputation)",getServiceCost("flingsupplydrop")),
				string.format("Flinger drop (%i reputation)",getServiceCost("flingsupplydrop")),
				string.format("Flinger supply drop (%i reputation)",getServiceCost("flingsupplydrop")),
				string.format("Fling supplies to the drop point (%i reputation)",getServiceCost("flingsupplydrop")),
			}
			addCommsReply(tableSelectRandom(flinger_drop_cost),function()
				local add_supplies_prompt = {
					"Do you want the standard 500 energy, 1 nuke, 4 homings, 2 mines, 1 EMP supply package or would you like to add something?",
					"Would you like the standard package (500 energy, 1 nuke, 4 homings, 2 mines, 1 EMP) or would you like to add something?",
					"Add to standard package (500 energy, 1 nuke, 4 homings, 2 mines, 1 EMP) or not?",
					"Standard supply package (500 energy, 1 nuke, 4 homings, 2 mines, 1 EMP) or more?",
				}
				setCommsMessage(tableSelectRandom(add_supplies_prompt))
				local standard_only = {
					string.format("Standard (%d reputation, no change)",getServiceCost("flingsupplydrop")),
					string.format("Just the standard package (%i reputation)",getServiceCost("flingsupplydrop")),
					string.format("Standard only (%s reputation)",getServiceCost("flingsupplydrop")),
					string.format("Standard package alone (%s reputation)",getServiceCost("flingsupplydrop")),
				}
				addCommsReply(tableSelectRandom(standard_only),function()
					if comms_source:getWaypointCount() < 1 then
						local set_supply_waypoint = {
							"You need to set a waypoint before you can request supplies.",
							"Set a waypoint so that we can place your supplies.",
							"Supplies require a waypoint as a target.",
							"Before requesting supplies, you need to set a waypoint.",
						}
						setCommsMessage(tableSelectRandom(set_supply_waypoint))
					else
						local point_supplies = {
							"To which waypoint should we deliver your supplies?",
							"Identify the supply delivery waypoint",
							"Where do you want your supplies?",
							"Where do the supplies go?",
						}
						setCommsMessage(tableSelectRandom(point_supplies))
						for n=1,comms_source:getWaypointCount() do
							addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
								if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop")) then
									local target_x, target_y = comms_source:getWaypoint(n)
									local target_angle = random(0,360)
									local flinger_miss = random(100,5000)
									local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
									local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
									local supply_location = {
										string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
										string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
										string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
									}
									setCommsMessage(tableSelectRandom(supply_location))
								else
									local insufficient_rep_responses = {
										"Insufficient reputation",
										"Not enough reputation",
										"You need more reputation",
										string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
										"You don't have enough reputation",
									}
									setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								end
							end)
						end
					end
				end)
				addCommsReply(string.format(_("stationAssist-comms","Add HVLIs (%d rep + %d rep = %d rep)"),getServiceCost("flingsupplydrop"),getWeaponCost("HVLI")*5,getServiceCost("flingsupplydrop") + (getWeaponCost("HVLI")*5)),function()
					if comms_source:getWaypointCount() < 1 then
						local set_supply_waypoint = {
							"You need to set a waypoint before you can request supplies.",
							"Set a waypoint so that we can place your supplies.",
							"Supplies require a waypoint as a target.",
							"Before requesting supplies, you need to set a waypoint.",
						}
						setCommsMessage(tableSelectRandom(set_supply_waypoint))
					else
						local point_supplies = {
							"To which waypoint should we deliver your supplies?",
							"Identify the supply delivery waypoint",
							"Where do you want your supplies?",
							"Where do the supplies go?",
						}
						setCommsMessage(tableSelectRandom(point_supplies))
						for n=1,comms_source:getWaypointCount() do
							addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
								if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop") + (getWeaponCost("HVLI")*5)) then
									local target_x, target_y = comms_source:getWaypoint(n)
									local target_angle = random(0,360)
									local flinger_miss = random(100,5000)
									local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
									local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("HVLI",5):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
									local supply_location = {
										string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
										string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
										string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
									}
									setCommsMessage(tableSelectRandom(supply_location))
								else
									local insufficient_rep_responses = {
										"Insufficient reputation",
										"Not enough reputation",
										"You need more reputation",
										string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
										"You don't have enough reputation",
									}
									setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								end
							end)
						end
					end
				end)
				addCommsReply(string.format(_("stationAssist-comms","Add hull repair (%d rep + %d rep = %d rep)"),getServiceCost("flingsupplydrop"),100,getServiceCost("flingsupplydrop") + 100),function()
					if comms_source:getWaypointCount() < 1 then
						local set_supply_waypoint = {
							"You need to set a waypoint before you can request supplies.",
							"Set a waypoint so that we can place your supplies.",
							"Supplies require a waypoint as a target.",
							"Before requesting supplies, you need to set a waypoint.",
						}
						setCommsMessage(tableSelectRandom(set_supply_waypoint))
					else
						local point_supplies = {
							"To which waypoint should we deliver your supplies?",
							"Identify the supply delivery waypoint",
							"Where do you want your supplies?",
							"Where do the supplies go?",
						}
						setCommsMessage(tableSelectRandom(point_supplies))
						for n=1,comms_source:getWaypointCount() do
							addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
								if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop") + 100) then
									local target_x, target_y = comms_source:getWaypoint(n)
									local target_angle = random(0,360)
									local flinger_miss = random(100,5000)
									local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
									local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
									sd:onPickUp(function(self,player)
										string.format("")
										player:setHull(player:getHullMax())
									end)
									local supply_location = {
										string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
										string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
										string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
									}
									setCommsMessage(tableSelectRandom(supply_location))
								else
									local insufficient_rep_responses = {
										"Insufficient reputation",
										"Not enough reputation",
										"You need more reputation",
										string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
										"You don't have enough reputation",
									}
									setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								end
							end)
						end
					end
				end)
				addCommsReply(string.format(_("stationAssist-comms","Add probes (%d rep + %d rep = %d rep)"),getServiceCost("flingsupplydrop"),20,getServiceCost("flingsupplydrop") + 20),function()
					if comms_source:getWaypointCount() < 1 then
						local set_supply_waypoint = {
							"You need to set a waypoint before you can request supplies.",
							"Set a waypoint so that we can place your supplies.",
							"Supplies require a waypoint as a target.",
							"Before requesting supplies, you need to set a waypoint.",
						}
						setCommsMessage(tableSelectRandom(set_supply_waypoint))
					else
						local point_supplies = {
							"To which waypoint should we deliver your supplies?",
							"Identify the supply delivery waypoint",
							"Where do you want your supplies?",
							"Where do the supplies go?",
						}
						setCommsMessage(tableSelectRandom(point_supplies))
						for n=1,comms_source:getWaypointCount() do
							addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
								if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop") + 20) then
									local target_x, target_y = comms_source:getWaypoint(n)
									local target_angle = random(0,360)
									local flinger_miss = random(100,5000)
									local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
									local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
									sd:onPickUp(function(self,player)
										string.format("")
										player:setScanProbeCount(player:getMaxScanProbeCount())
									end)
									local supply_location = {
										string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
										string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
										string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
									}
									setCommsMessage(tableSelectRandom(supply_location))
								else
									local insufficient_rep_responses = {
										"Insufficient reputation",
										"Not enough reputation",
										"You need more reputation",
										string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
										"You don't have enough reputation",
									}
									setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								end
							end)
						end
					end
				end)
				if comms_target.comms_data.available_repair_crew == nil then
					comms_target.comms_data.available_repair_crew = math.random(0,5)
					comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66 = math.random(30,60)
					comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66 = math.random(45,90)
					comms_target.comms_data.available_repair_crew_cost_excess = math.random(15,30)
					comms_target.comms_data.available_repair_crew_cost_under_66 = math.random(15,30)
				end
				if comms_target.comms_data.available_repair_crew > 0 then
					local hire_cost = 0
					if comms_source:isFriendly(comms_target) then
						hire_cost = comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66
					else
						hire_cost = comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66
					end
					if comms_target.comms_data.friendlyness <= 66 then
						hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_under_66
					end
					if comms_source:getRepairCrewCount() >= comms_source.maxRepairCrew then
						hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_excess
					end
					addCommsReply(string.format(_("stationAssist-comms","Add android repair crew (%d rep + %d rep = %d rep)"),getServiceCost("flingsupplydrop"),hire_cost,getServiceCost("flingsupplydrop") + hire_cost),function()
						if comms_source:getWaypointCount() < 1 then
							local set_supply_waypoint = {
								"You need to set a waypoint before you can request supplies.",
								"Set a waypoint so that we can place your supplies.",
								"Supplies require a waypoint as a target.",
								"Before requesting supplies, you need to set a waypoint.",
							}
							setCommsMessage(tableSelectRandom(set_supply_waypoint))
						else
							local point_supplies = {
								"To which waypoint should we deliver your supplies?",
								"Identify the supply delivery waypoint",
								"Where do you want your supplies?",
								"Where do the supplies go?",
							}
							setCommsMessage(tableSelectRandom(point_supplies))
							for n=1,comms_source:getWaypointCount() do
								addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
									local hire_cost = 0
									if comms_source:isFriendly(comms_target) then
										hire_cost = comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66
									else
										hire_cost = comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66
									end
									if comms_target.comms_data.friendlyness <= 66 then
										hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_under_66
									end
									if comms_source:getRepairCrewCount() >= comms_source.maxRepairCrew then
										hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_excess
									end
									if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop") + hire_cost) then
										local target_x, target_y = comms_source:getWaypoint(n)
										local target_angle = random(0,360)
										local flinger_miss = random(100,5000)
										local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
										local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
										comms_target.comms_data.available_repair_crew = comms_target.comms_data.available_repair_crew - 1
										sd:onPickUp(function(self,player)
											string.format("")
											player:setRepairCrewCount(player:getRepairCrewCount() + 1)
										end)
										local supply_location = {
											string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
											string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
											string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
											string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										}
										setCommsMessage(tableSelectRandom(supply_location))
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
									end
								end)
							end
						end
					end)
				end
				if comms_target.comms_data.coolant_inventory == nil then
					comms_target.comms_data.coolant_inventory = math.random(0,5)*2
					comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66 = math.random(30,60)
					comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66 = math.random(45,90)
					comms_target.comms_data.coolant_inventory_excess = math.random(15,30)
					comms_target.comms_data.coolant_inventory_under_66 = math.random(15,30)
				end
				if comms_target.comms_data.coolant_inventory > 0 then
					local coolant_cost = 0
					if comms_source:isFriendly(comms_target) then
						coolant_cost = comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66
					else
						coolant_cost = comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66
					end
					if comms_target.comms_data.friendlyness <= 66 then
						coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_under_66
					end
					if comms_source:getMaxCoolant() >= comms_source.initialCoolant then
						coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_excess
					end
					addCommsReply(string.format(_("stationAssist-comms","Add coolant (%d rep + %d rep = %d rep)"),getServiceCost("flingsupplydrop"),coolant_cost,getServiceCost("flingsupplydrop") + coolant_cost),function()
						if comms_source:getWaypointCount() < 1 then
							local set_supply_waypoint = {
								"You need to set a waypoint before you can request supplies.",
								"Set a waypoint so that we can place your supplies.",
								"Supplies require a waypoint as a target.",
								"Before requesting supplies, you need to set a waypoint.",
							}
							setCommsMessage(tableSelectRandom(set_supply_waypoint))
						else
							local point_supplies = {
								"To which waypoint should we deliver your supplies?",
								"Identify the supply delivery waypoint",
								"Where do you want your supplies?",
								"Where do the supplies go?",
							}
							setCommsMessage(tableSelectRandom(point_supplies))
							for n=1,comms_source:getWaypointCount() do
								addCommsReply(string.format(_("stationAssist-comms","Waypoint %i"),n), function()
									local coolant_cost = 0
									if comms_source:isFriendly(comms_target) then
										coolant_cost = comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66
									else
										coolant_cost = comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66
									end
									if comms_target.comms_data.friendlyness <= 66 then
										coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_under_66
									end
									if comms_source:getMaxCoolant() >= comms_source.initialCoolant then
										coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_excess
									end
									if comms_source:takeReputationPoints(getServiceCost("flingsupplydrop") + coolant_cost) then
										local target_x, target_y = comms_source:getWaypoint(n)
										local target_angle = random(0,360)
										local flinger_miss = random(100,5000)
										local landing_x, landing_y = vectorFromAngleNorth(target_angle,flinger_miss)
										local sd = SupplyDrop():setFactionId(comms_target:getFactionId()):setPosition(target_x + landing_x, target_y + landing_y):setEnergy(500):setWeaponStorage("Nuke", 1):setWeaponStorage("Homing", 4):setWeaponStorage("Mine", 2):setWeaponStorage("EMP", 1)
										comms_target.comms_data.coolant_inventory = comms_target.comms_data.coolant_inventory - 2
										sd:onPickUp(function(self,player)
											string.format("")
											player:setMaxCoolant(player:getMaxCoolant() + 2)
										end)
										local supply_location = {
											string.format("Supplies delivered %.1f units from waypoint, bearing %.1f.",flinger_miss/1000,target_angle),
											string.format("Supplies have been launched. You can find them %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
											string.format("Our flinger has launched your supplies at waypoint %i. Look for them at %.1f units from waypoint, bearing %.1f",n,flinger_miss/1000,target_angle),
											string.format("Flung. Find supplies %.1f units from waypoint %i on bearing %.1f",flinger_miss/1000,n,target_angle),
										}
										setCommsMessage(tableSelectRandom(supply_location))
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
									end
								end)
							end
						end
					end)
				end
				addCommsReply(_("Back"), commsStation)
			end)
			local deliver_type_explain_prompt = {
				"Explain supply drop delivery options",
				"What's the difference between the supply drop options?",
				"Please explain the different supply drop options",
				"I don't understand the supply drop delivery options",
			}
			addCommsReply(tableSelectRandom(deliver_type_explain_prompt),function()
				setCommsMessage(_("stationAssist-comms","A normal supply drop delivery is loaded onto a standard freighter and sent to the specified destination. Delivered by jump ship means it gets there quicker if it's farther away because the freighter is equipped with a jump drive. The flinger launches the supply drop using the station's flinger. The supply drop arrives quickly, but the flinger's not as accurate as a freighter."))
				addCommsReply(_("Back"), commsStation)
			end)
		end
		if request_supply_drop_caller_back == nil or getScenarioTime() > request_supply_drop_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			request_supply_drop_caller_back = getScenarioTime()
		end
		if request_supply_drop_comms_back == nil or getScenarioTime() > request_supply_drop_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			request_supply_drop_comms_back = getScenarioTime()
		end
	end)
end
function requestJonque()
	local send_jonque = {
		"Please send a service jonque for repairs",
		"We need a service jonque for repairs",
		"We could use a service jonque for repairs",
		"Please dispatch a service jonque for us",
	}
	addCommsReply(tableSelectRandom(send_jonque), function()
		local jonque_meet_method_cost = {
			string.format("Would you like the service jonque to come to you directly or would you prefer to set up a rendezvous via a waypoint? Either way, you will need %.1f reputation.",getServiceCost("servicejonque")),
			string.format("%.1f reputation required. What should we tell the service jonque - meet you directly or go to a waypoint?",getServiceCost("servicejonque")),
			string.format("Should the service jonque travel directly to you or go to a designated waypoint? The cost is the same: %.1f reputation.",getServiceCost("servicejonque")),
			string.format("Do you want the service jonque to go to you or to a waypoint? In either case, it will cost %.1f reputation.",getServiceCost("servicejonque")),
		}
		local out = string.format(tableSelectRandom(jonque_meet_method_cost))
		local jonque_direct_to_ship = {
			"Direct",
			string.format("Go directly to %s",comms_source:getCallSign()),
			"Meet us directly",
			string.format("Meet %s directly",comms_source:getCallSign()),
		}
		addCommsReply(tableSelectRandom(jonque_direct_to_ship),function()
			if comms_source:takeReputationPoints(getServiceCost("servicejonque")) then
				ship = serviceJonque(comms_target:getFaction()):setPosition(comms_target:getPosition()):setCallSign(generateCallSign(nil,comms_target:getFaction())):setScanned(true):orderDefendTarget(comms_source)
				ship.comms_data = {
					friendlyness = random(0.0, 100.0),
					weapons = {
						Homing = comms_target.comms_data.weapons.Homing,
						HVLI = comms_target.comms_data.weapons.HVLI,
						Mine = comms_target.comms_data.weapons.Mine,
						Nuke = comms_target.comms_data.weapons.Nuke,
						EMP = comms_target.comms_data.weapons.EMP,
					},
					weapon_cost = {
						Homing = comms_target.comms_data.weapon_cost.Homing * 2,
						HVLI = comms_target.comms_data.weapon_cost.HVLI * 2,
						Mine = comms_target.comms_data.weapon_cost.Mine * 2,
						Nuke = comms_target.comms_data.weapon_cost.Nuke * 2,
						EMP = comms_target.comms_data.weapon_cost.EMP * 2,
					},
					weapon_inventory = {
						Homing = 40,
						HVLI = 40,
						Mine = 20,
						Nuke = 10,
						EMP = 10,
					},
					weapon_inventory_max = {
						Homing = 40,
						HVLI = 40,
						Mine = 20,
						Nuke = 10,
						EMP = 10,
					},
					reputation_cost_multipliers = {
						friend = comms_target.comms_data.reputation_cost_multipliers.friend,
						neutral = math.max(comms_target.comms_data.reputation_cost_multipliers.friend,comms_target.comms_data.reputation_cost_multipliers.neutral/2)
					},
				}
				local dispatched_jonque = {
					string.format("We have dispatched %s to come to you to help with repairs",ship:getCallSign()),
					string.format("Service jonque %s is heading for you to help with repairs",ship:getCallSign()),
					string.format("We are sending %s to you to help with repairs",ship:getCallSign()),
					string.format("We directed service jonque %s to you to help with repairs",ship:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(dispatched_jonque))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
		end)
		if comms_source:getWaypointCount() < 1 then
			local waypoint_addendum = {
				"\n\nNote: if you want to use a waypoint, you will have to back out, set one and return.",
				"\n\nTo use a waypoint, set one, then back out and return to use the rendezvous at waypoint option.",
				"\n\nYou will need to set a waypoint, back out and return if you want the service jonque to meet you at a waypoint.",
				"\n\nNote: set waypoint, back out and return to send the service jonque to a waypoint.",
			}
			out = string.format("%s%s",out,tableSelectRandom(waypoint_addendum))
		else
			for n=1,comms_source:getWaypointCount() do
				local rendezvous_prompts = {
					string.format("Rendezvous at waypoint %i",n),
					string.format("Tell jonque to meet at waypoint %i",n),
					string.format("Jonque to rendezvous at waypoint %i",n),
					string.format("Have the service jonque meet us at waypoint %i",n)
				}
				addCommsReply(tableSelectRandom(rendezvous_prompts),function()
					if comms_source:takeReputationPoints(getServiceCost("servicejonque")) then
						ship = serviceJonque(comms_target:getFaction()):setPosition(comms_target:getPosition()):setCallSign(generateCallSign(nil,comms_target:getFaction())):setScanned(true):orderDefendLocation(comms_source:getWaypoint(n))
						ship.comms_data = {
							friendlyness = random(0.0, 100.0),
							weapons = {
								Homing = comms_target.comms_data.weapons.Homing,
								HVLI = comms_target.comms_data.weapons.HVLI,
								Mine = comms_target.comms_data.weapons.Mine,
								Nuke = comms_target.comms_data.weapons.Nuke,
								EMP = comms_target.comms_data.weapons.EMP,
							},
							weapon_cost = {
								Homing = comms_target.comms_data.weapon_cost.Homing * 2,
								HVLI = comms_target.comms_data.weapon_cost.HVLI * 2,
								Mine = comms_target.comms_data.weapon_cost.Mine * 2,
								Nuke = comms_target.comms_data.weapon_cost.Nuke * 2,
								EMP = comms_target.comms_data.weapon_cost.EMP * 2,
							},
							weapon_inventory = {
								Homing = 40,
								HVLI = 40,
								Mine = 20,
								Nuke = 10,
								EMP = 10,
							},
							weapon_inventory_max = {
								Homing = 40,
								HVLI = 40,
								Mine = 20,
								Nuke = 10,
								EMP = 10,
							},
							reputation_cost_multipliers = {
								friend = comms_target.comms_data.reputation_cost_multipliers.friend,
								neutral = math.max(comms_target.comms_data.reputation_cost_multipliers.friend,comms_target.comms_data.reputation_cost_multipliers.neutral/2)
							},
						}
						local jonque_sent_to_waypoint = {
							string.format("We have dispatched %s to rendezvous at waypoint %i",ship:getCallSign(),n),
							string.format("Service jonque %s is heading for waypoint %i",ship:getCallSign(),n),
							string.format("We directed %s to meet you at waypoint %i",ship:getCallSign(),n),
							string.format("Service jonque %s will rendezvous at waypoint %i",ship:getCallSign(),n),
						}
						setCommsMessage(tableSelectRandom(jonque_sent_to_waypoint))
					else
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					end
					addCommsReply(_("Back"), commsStation)
				end)
			end
		end
		setCommsMessage(out)
		if request_jonque_comms_back == nil or getScenarioTime() > request_jonque_comms_back + comms_fudge then
			addCommsReply(_("Back"), commsStation)
			request_jonque_comms_back = getScenarioTime()
		end
	end)
end
function requestExpediteDock(calling_function)
	local expedite_dock_prompts = {
		"Expedite dock",
		"Speedy dock",
		"Fast dock",
		"Decrease dock time",
	}
	addCommsReply(tableSelectRandom(expedite_dock_prompts),function()
		if comms_source.expedite_dock == nil then
			local explain_expedite_dock = {
				"We can have workers standing by in the docking bay to rapidly service your ship when you dock. However, they won't wait around forever. When do you think you will dock?",
				string.format("We can direct dock workers to be ready to service your docked ship. They won't wait for long. How long before you dock with %s?",comms_target:getCallSign()),
				"To expedite your dock, we can have dock workers ready to load supplies and service your ship as soon as you dock. The workers won't hang around forever. When will you dock?",
				string.format("To reduce time spent docked at %s, we can hire dock workers to rapidly load and service %s as soon as you dock. However, we can only hire them for a limited period of time. When are you docking?",comms_target:getCallSign(),comms_source:getCallSign()),
			}
			setCommsMessage(tableSelectRandom(explain_expedite_dock))
			local short_minutes = 3
			local short_reputation = 10
			local short_prompts = {
				string.format("Soon (%i minutes max, %i reputation)",short_minutes,short_reputation),
				string.format("Quickly (less than %i minutes, %i reputation)",short_minutes,short_reputation),
				string.format("Shortly (%i reputation, < %i minutes)",short_reputation,short_minutes),
				string.format("We're nearby (%i reputation, %i minutes max)",short_reputation,short_minutes),
			}
			addCommsReply(tableSelectRandom(short_prompts),function()
				if comms_source:takeReputationPoints(short_reputation) then
					comms_source.expedite_dock = {["limit"] = short_minutes*60}
					if set_expedite_dock == nil or getScenarioTime() > set_expedite_dock + comms_fudge then
						setExpediteDock()
						set_expedite_dock = getScenarioTime()
					end
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					addCommsReply(_("Back"), commsStation)
				end
			end)
			local medium_minutes = 5
			local medium_reputation = 15
			local medium_prompts = {
				string.format("In a little while (%i minutes max, %i reputation)",medium_minutes,medium_reputation),
				string.format("Soon-ish (less than %i minutes, %i reputation)",medium_minutes,medium_reputation),
				string.format("Less than %i minutes (%i reputation)",medium_minutes,medium_reputation),
				string.format("Soon, I think (%i reputation, < %i minutes)",medium_reputation,medium_minutes),
			}
			addCommsReply(tableSelectRandom(medium_prompts),function()
				if comms_source:takeReputationPoints(medium_reputation) then
					comms_source.expedite_dock = {["limit"] = medium_minutes*60}
					if set_expedite_dock == nil or getScenarioTime() > set_expedite_dock + comms_fudge then
						setExpediteDock()
						set_expedite_dock = getScenarioTime()
					end
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					addCommsReply(_("Back"), commsStation)
				end
			end)
			local long_minutes = 8
			local long_reputation = 20
			local long_prompts = {
				string.format("We're far away (%i minutes max, %i reputation)",long_minutes,long_reputation),
				string.format("Less than %i minutes (%i reputation)",long_minutes,long_reputation),
				string.format("Hard to tell (less than %i minutes, %i reputation)",long_minutes,long_reputation),
				string.format("It'll be a bit (< %i minutes, %i reputation)",long_minutes,long_reputation),
			}
			addCommsReply(tableSelectRandom(long_prompts),function()
				if comms_source:takeReputationPoints(long_reputation) then
					comms_source.expedite_dock = {["limit"] = long_minutes*60}
					if set_expedite_dock == nil or getScenarioTime() > set_expedite_dock + comms_fudge then
						setExpediteDock()
						set_expedite_dock = getScenarioTime()
					end
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					addCommsReply(_("Back"), commsStation)
				end
			end)
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply(_("Back to station communication"), commsStation)
		else
			if set_expedite_dock == nil or getScenarioTime() > set_expedite_dock + comms_fudge then
				setExpediteDock()
				set_expedite_dock = getScenarioTime()
			end
		end
	end)
end
function setExpediteDock()
	--	energy, hull, probes, missiles, repair crew, coolant
	if comms_source.expedite_dock == nil then
		setCommsMessage(_("station-comms","Communications glitch. Please try again."))
		addCommsReply(_("Back"), commsStation)
	else
		if comms_source.expedite_dock.limit == nil then
			setCommsMessage(_("station-comms","Communications glitch. Please try again."))
			addCommsReply(_("Back"), commsStation)
		else
			local out = ""
			if comms_source.expedite_dock.expire == nil then
				comms_source.expedite_dock.expire = getScenarioTime() + comms_source.expedite_dock.limit
				if expedite_dock_players == nil then
					expedite_dock_players = {}
				end
				expedite_dock_players[comms_source] = true
				comms_source.expedite_dock.station = comms_target
				local standard_service_count = 0
				if comms_target:getSharesEnergyWithDocked() then
					comms_source.expedite_dock.energy = true
					standard_service_count = standard_service_count + 1
					out = _("station-comms","energy")
				end
				if comms_target:getRepairDocked() then
					comms_source.expedite_dock.hull = true
					standard_service_count = standard_service_count + 1
					if out == "" then
						out = _("station-comms","hull repair")
					else
						out = string.format(_("station-comms","%s, hull repair"),out)
					end
				end
				if comms_target:getRestocksScanProbes() then
					comms_source.expedite_dock.probes = true
					standard_service_count = standard_service_count + 1
					if out == "" then
						out = _("station-comms","restock probes")
					else
						out = string.format(_("station-comms","%s, restock probes"),out)
					end
				end
				local additional_services = {
					"What additional service would you like expedited?",
					"Would you like to add a service to your expedited services list?",
					"Might we expedite another service for you?",
					"We could expedite another service if you wish.",
				}
				if standard_service_count > 1 then
					local plural_existing_services = {
						"Standard expedited services:",
						"Normal expedited services:",
						"Regular expedited services:",
						"Complimentary expedited services:",
					}
					out = string.format("%s %s. %s",tableSelectRandom(plural_existing_services),out,tableSelectRandom(additional_services))
				elseif standard_service_count > 0 then
					local singular_existing_service = {
						"Standard expedited service:",
						"Normal expedited service:",
						"Regular expedited service:",
						"Complimentary expedited service:",
					}
					out = string.format("%s %s. %s",tableSelectRandom(singular_existing_service),out,tableSelectRandom(additional_services))
				else
					local expedite_something = {
						"What service would you like expedited?",
						"Can we expedite a service for you?",
						"Is there a service you'd like expedited?",
						"Specify the service to expedite",
					}
					out = tableSelectRandom(expedite_something)
				end
			else
				if comms_source.expedite_dock.station ~= comms_target then
					if comms_source.expedite_dock.station:isValid() then
						local what_about_current_contract = {
							string.format("I represent station %s.\nI see that you have an expedited docking contract with station %s.\nWould you like to cancel it?",comms_target:getCallSign(),comms_source.expedite_dock.station:getCallSign()),
							string.format("Considering an expedited docking contract with %s, eh? What should be done about your existing expedited contract with %s? Cancel it?",comms_target:getCallSign(),comms_source.expedite_dock.station:getCallSign()),
							string.format("Want a fast dock with %s? What should be done about your current agreement with %s? Should it be cancelled?",comms_target:getCallSign(),comms_source.expedite_dock.station:getCallSign()),
							string.format("You can't set up a quick dock with %s until your quick dock with %s is done or cancelled. Shall I cancel it?",comms_target:getCallSign(),comms_source.expedite_dock.station:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(what_about_current_contract))
						local cancel_fast_dock_prompt = {
							string.format("Yes, cancel expedited docking contract with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("Abandon fast dock plan with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("Cancel planned quick dock with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("Please cancel the fast dock contract with %s",comms_source.expedite_dock.station:getCallSign()),
						}
						addCommsReply(tableSelectRandom(cancel_fast_dock_prompt),function()
							local fast_dock_contract_cancelled = {
								string.format("Expedited docking contract with %s has been cancelled.",comms_source.expedite_dock.station:getCallSign()),
								string.format("Fast dock cancelled with %s",comms_source.expedite_dock.station:getCallSign()),
								string.format("Ok, we just cancelled your expedited docking contract with %s",comms_source.expedite_dock.station:getCallSign()),
								string.format("%s fast dock contract cancelled",comms_source.expedite_dock.station:getCallSign()),
							}
							setCommsMessage(tableSelectRandom(fast_dock_contract_cancelled))
							expedite_dock_players[comms_source] = nil
							comms_source.expedite_dock = nil
							addCommsReply(_("Back"), commsStation)
						end)
						local keep_fast_dock_contract = {
							string.format("No, keep existing expedited docking contract with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("Oops, I forgot about that. I need to keep the fast dock contract with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("I'd better keep the existing quick dock contract with %s",comms_source.expedite_dock.station:getCallSign()),
							string.format("Keep the fast dock plan with %s. Let's not waste the reputation already spent there",comms_source.expedite_dock.station:getCallSign()),
						}
						addCommsReply(tableSelectRandom(keep_fast_dock_contract),function()
							local fast_dock_contract_kept = {
								string.format("Ok, we left the fast dock contract in place with %s",comms_source.expedite_dock.station:getCallSign()),
								string.format("Kept the quick dock contract with %s",comms_source.expedite_dock.station:getCallSign()),
								string.format("The expedited dock contract with %s remains in effect",comms_source.expedite_dock.station:getCallSign()),
								string.format("Maintaining the fast dock contract with %s",comms_source.expedite_dock.station:getCallSign()),
							}
							setCommsMessage(tableSelectRandom(fast_dock_contract_kept))
							addCommsReply(_("Back"), commsStation)
						end)
					else
						local handled_invalid_contract = {
							"An expedited docking contract with a now defunct station has been cancelled.",
							"The station you had a fast dock contract with is gone. Contract cancelled.",
							"Since the station you were planning to fast dock with no longer exists, the contract has been cancelled.",
							"Your former fast dock station has ceased to exist. Expedited contract cancelled.",
						}
						setCommsMessage(tableSelectRandom(handled_invalid_contract))
						expedite_dock_players[comms_source] = nil
						comms_source.expedite_dock = nil
						addCommsReply(_("Back"), commsStation)
					end
				end
			end
			if comms_source.expedite_dock.station == comms_target then
				local service_to_add_count = 0
				if out == "" then
					local minutes = 0
					local seconds = comms_source.expedite_dock.expire - getScenarioTime()
					if seconds > 60 then
						minutes = seconds / 60
						seconds = seconds % 60
						out = string.format(_("station-comms","Expected dock with %s in %i:%.2i"),comms_target:getCallSign(),math.floor(minutes),math.floor(seconds))
					else
						out = string.format(_("station-comms","Expected dock with %s in 0:%.2i"),comms_target:getCallSign(),math.floor(seconds))
					end
				end
				service_list = _("station-comms","Expedited service list:")
				if comms_source.expedite_dock.energy then
					service_list = string.format(_("station-comms","%s energy"),service_list)
				else
					local replenish_energy_fast_dock_prompt = {
						"Replenish energy (5 reputation)",
						"Charge batteries (5 reputation)",
						"Recharge power (5 reputation)",
						"Replenish power reserves (5 reputation)",
					}
					addCommsReply(tableSelectRandom(replenish_energy_fast_dock_prompt),function()
						if comms_source:takeReputationPoints(5) then
							comms_source.expedite_dock.energy = true
							if expedite_replenish_energy_set == nil or getScenarioTime() > expedite_replenish_energy_set + comms_fudge then
								setExpediteDock()
								expedite_replenish_energy_set = getScenarioTime()
							end
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							if expedite_replenish_energy_back == nil or getScenarioTime() > expedite_replenish_energy_back + comms_fudge then
								addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
								expedite_replenish_energy_back = getScenarioTime()
							end
							if expedite_replenish_energy_comms_back == nil or getScenarioTime() > expedite_replenish_energy_comms_back + comms_fudge then
								addCommsReply(_("station-comms","Back to station communication"),commsStation)
								expedite_replenish_energy_comms_back = getScenarioTime()
							end
						end
					end)
					service_to_add_count = service_to_add_count + 1
				end
				if comms_source.expedite_dock.hull then
					if service_list == _("station-comms","Expedited service list:") then
						service_list = string.format(_("station-comms","%s hull"),service_list)
					else
						service_list = string.format(_("station-comms","%s, hull"),service_list)
					end
				else
					local repair_hull_fast_dock_prompt = {
						"Repair hull (10 reputation)",
						"Fix hull (10 reputation)",
						"Restore hull (10 reputation)",
						"Refurbish hull (10 reputation)",
					}
					addCommsReply(tableSelectRandom(repair_hull_fast_dock_prompt),function()
						if comms_source:takeReputationPoints(10) then
							comms_source.expedite_dock.hull = true
							if expedite_hull_set == nil or getScenarioTime() > expedite_hull_set + comms_fudge then
								setExpediteDock()
								expedite_hull_set = getScenarioTime()
							end
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							if expedite_hull_back == nil or getScenarioTime() > expedite_hull_back + comms_fudge then
								addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
								expedite_hull_back = getScenarioTime()
							end
							if expedite_hull_comms_back == nil or getScenarioTime() > expedite_hull_comms_back + comms_fudge then
								addCommsReply(_("station-comms","Back to station communication"),commsStation)
								expedite_hull_comms_back = getScenarioTime()
							end
						end
					end)
					service_to_add_count = service_to_add_count + 1
				end
				if comms_source.expedite_dock.probes then
					if service_list == _("station-comms","Expedited service list:") then
						service_list = string.format(_("station-comms","%s probes"),service_list)
					else
						service_list = string.format(_("station-comms","%s, probes"),service_list)
					end
				else
					local restock_probes_fast_dock_prompt = {
						"Replenish probes (5 reputation)",
						"Restock probes (5 reputation)",
						"Refill probes (5 reputation)",
						"Restore probe inventory (5 reputation)",
					}
					addCommsReply(tableSelectRandom(restock_probes_fast_dock_prompt),function()
						if comms_source:takeReputationPoints(5) then
							comms_source.expedite_dock.probes = true
							if expedite_probes_set == nil or getScenarioTime() > expedite_probes_set + comms_fudge then
								setExpediteDock()
								expedite_probes_set = getScenarioTime()
							end
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							if expedite_probes_back == nil or getScenarioTime() > expedite_probes_back + comms_fudge then
								addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
								expedite_probes_back = getScenarioTime()
							end
							if expedite_probes_comms_back == nil or getScenarioTime() > expedite_probes_comms_back + comms_fudge then
								addCommsReply(_("station-comms","Back to station communication"),commsStation)
								expedite_probes_comms_back = getScenarioTime()
							end
						end
					end)
					service_to_add_count = service_to_add_count + 1
				end
				if comms_source.expedite_dock.nuke ~= nil then
					if service_list == _("station-comms","Expedited service list:") then
						if comms_source.expedite_dock.nuke > 1 then
							service_list = string.format(_("station-comms","%s %s nukes"),service_list,comms_source.expedite_dock.nuke)
						else
							service_list = string.format(_("station-comms","%s one nuke"),service_list)
						end
					else
						if comms_source.expedite_dock.nuke > 1 then
							service_list = string.format(_("station-comms","%s, %s nukes"),service_list,comms_source.expedite_dock.nuke)
						else
							service_list = string.format(_("station-comms","%s, one nuke"),service_list)
						end
					end
				else
					if comms_target.comms_data.weapon_available.Nuke and isAllowedTo(comms_target.comms_data.weapons.Nuke) then
						local max_nuke = comms_source:getWeaponStorageMax("Nuke")
						if max_nuke > 0 then
							local current_nuke = comms_source:getWeaponStorage("Nuke")
							if current_nuke < max_nuke then
								local full_nuke = max_nuke - current_nuke
								local replenish_nukes_fast_dock_prompt = {
									string.format("Replenish nukes (%d reputation)",getWeaponCost("Nuke")*full_nuke),
									string.format("Restock nukes (%s reputation)",getWeaponCost("Nuke")*full_nuke),
									string.format("Refill nukes (%s reputation)",getWeaponCost("Nuke")*full_nuke),
									string.format("Refill nukes (%s reputation, %i nuke(s))",getWeaponCost("Nuke")*full_nuke,full_nuke),
								}
								addCommsReply(tableSelectRandom(replenish_nukes_fast_dock_prompt),function()
									if comms_source:takeReputationPoints(getWeaponCost("Nuke")*full_nuke) then
										comms_source.expedite_dock.nuke = full_nuke
										if expedite_nuke_set == nil or getScenarioTime() > expedite_nuke_set + comms_fudge then
											setExpediteDock()
											expedite_nuke_set = getScenarioTime()
										end
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
										if expedite_nuke_back == nil or getScenarioTime() > expedite_nuke_back + comms_fudge then
											addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
											expedite_nuke_back = getScenarioTime()
										end
										if expedite_nuke_comms_back == nil or getScenarioTime() > expedite_nuke_comms_back + comms_fudge then
											addCommsReply(_("station-comms","Back to station communication"),commsStation)
											expedite_nuke_comms_back = getScenarioTime()
										end
									end
								end)
								service_to_add_count = service_to_add_count + 1
							end
						end
					end
				end
				if comms_source.expedite_dock.homing ~= nil then
					if service_list == _("station-comms","Expedited service list:") then
						if comms_source.expedite_dock.homing > 1 then
							service_list = string.format(_("station-comms","%s %s homing missiles"),service_list,comms_source.expedite_dock.homing)
						else
							service_list = string.format(_("station-comms","%s one homing missile"),service_list)
						end
					else
						if comms_source.expedite_dock.homing > 1 then
							service_list = string.format(_("station-comms","%s, %s homing missiles"),service_list,comms_source.expedite_dock.homing)
						else
							service_list = string.format(_("station-comms","%s, one homing missile"),service_list)
						end
					end
				else
					if comms_target.comms_data.weapon_available.Homing and isAllowedTo(comms_target.comms_data.weapons.Homing) then
						local max_homing = comms_source:getWeaponStorageMax("Homing")
						if max_homing > 0 then
							local current_homing = comms_source:getWeaponStorage("Homing")
							if current_homing < max_homing then
								local full_homing = max_homing - current_homing
								local refill_homing_fast_dock_prompt = {
									string.format("Replenish homing missiles (%d reputation)",getWeaponCost("Homing")*full_homing),
									string.format("Restock homing missiles (%d reputation)",getWeaponCost("Homing")*full_homing),
									string.format("Refill homing missiles (%d reputation)",getWeaponCost("Homing")*full_homing),
									string.format("Restore homing missiles inventory (%d rep)",getWeaponCost("Homing")*full_homing),
								}
								addCommsReply(tableSelectRandom(refill_homing_fast_dock_prompt),function()
									if comms_source:takeReputationPoints(getWeaponCost("Homing")*full_homing) then
										comms_source.expedite_dock.homing = full_homing
										if expedite_homing_set == nil or getScenarioTime() > expedite_homing_set + comms_fudge then
											setExpediteDock()
											expedite_homing_set = getScenarioTime()
										end
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
										if expedite_homing_back == nil or getScenarioTime() > expedite_homing_back + comms_fudge then
											addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
											expedite_homing_back = getScenarioTime()
										end
										if expedite_homing_comms_back == nil or getScenarioTime() > expedite_homing_comms_back + comms_fudge then
											addCommsReply(_("station-comms","Back to station communication"),commsStation)
											expedite_homing_comms_back = getScenarioTime()
										end
									end
								end)
								service_to_add_count = service_to_add_count + 1
							end
						end
					end
				end
				if comms_source.expedite_dock.emp ~= nil then
					if service_list == _("station-comms","Expedited service list:") then
						if comms_source.expedite_dock.emp > 1 then
							service_list = string.format(_("station-comms","%s %s EMP missiles"),service_list,comms_source.expedite_dock.emp)
						else
							service_list = string.format(_("station-comms","%s one EMP missile"),service_list)
						end
					else
						if comms_source.expedite_dock.emp > 1 then
							service_list = string.format(_("station-comms","%s, %s EMP missiles"),service_list,comms_source.expedite_dock.emp)
						else
							service_list = string.format(_("station-comms","%s, one EMP missile"),service_list)
						end
					end
				else
					if comms_target.comms_data.weapon_available.EMP and isAllowedTo(comms_target.comms_data.weapons.EMP) then
						local max_emp = comms_source:getWeaponStorageMax("EMP")
						if max_emp > 0 then
							local current_emp = comms_source:getWeaponStorage("EMP")
							if current_emp < max_emp then
								local full_emp = max_emp - current_emp
								local restock_emp_fast_dock_prompt = {
									string.format("Replenish EMP missiles (%d reputation)",getWeaponCost("EMP")*full_emp),
									string.format("Restock EMP missiles (%d reputation)",getWeaponCost("EMP")*full_emp),
									string.format("Refill EMP missiles (%d reputation)",getWeaponCost("EMP")*full_emp),
									string.format("Restore EMP missiles inventory (%d rep)",getWeaponCost("EMP")*full_emp),
								}
								addCommsReply(tableSelectRandom(restock_emp_fast_dock_prompt),function()
									if comms_source:takeReputationPoints(getWeaponCost("EMP")*full_emp) then
										comms_source.expedite_dock.emp = full_emp
										if expedite_emp_set == nil or getScenarioTime() > expedite_emp_set + comms_fudge then
											setExpediteDock()
											expedite_emp_set = getScenarioTime()
										end
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
										if expedite_emp_back == nil or getScenarioTime() > expedite_emp_back + comms_fudge then
											addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
											expedite_emp_back = getScenarioTime()
										end
										if expedite_emp_comms_back == nil or getScenarioTime() > expedite_emp_comms_back + comms_fudge then
											addCommsReply(_("station-comms","Back to station communication"),commsStation)
											expedite_emp_comms_back = getScenarioTime()
										end
									end
								end)
								service_to_add_count = service_to_add_count + 1
							end
						end
					end
				end
				if comms_source.expedite_dock.mine ~= nil then
					if service_list == _("station-comms","Expedited service list:") then
						if comms_source.expedite_dock.mine > 1 then
							service_list = string.format(_("station-comms","%s %s mines"),service_list,comms_source.expedite_dock.mine)
						else
							service_list = string.format(_("station-comms","%s one mine"),service_list)
						end
					else
						if comms_source.expedite_dock.mine > 1 then
							service_list = string.format(_("station-comms","%s, %s mines"),service_list,comms_source.expedite_dock.mine)
						else
							service_list = string.format(_("station-comms","%s, one mine"),service_list)
						end
					end
				else
					if comms_target.comms_data.weapon_available.Mine and isAllowedTo(comms_target.comms_data.weapons.Mine) then
						local max_mine = comms_source:getWeaponStorageMax("Mine")
						if max_mine > 0 then
							local current_mine = comms_source:getWeaponStorage("Mine")
							if current_mine < max_mine then
								local full_mine = max_mine - current_mine
								local restock_mines_fast_dock_prompt = {
									string.format("Replenish mines (%d reputation)",getWeaponCost("Mine")*full_mine),
									string.format("Restock mines (%d reputation)",getWeaponCost("Mine")*full_mine),
									string.format("Refill mines (%d reputation)",getWeaponCost("Mine")*full_mine),
									string.format("Restore inventory of mines (%d rep)",getWeaponCost("Mine")*full_mine),
								}
								addCommsReply(tableSelectRandom(restock_mines_fast_dock_prompt),function()
									if comms_source:takeReputationPoints(getWeaponCost("Mine")*full_mine) then
										comms_source.expedite_dock.mine = full_mine
										if expedite_mine_set == nil or getScenarioTime() > expedite_mine_set + comms_fudge then
											setExpediteDock()
											expedite_mine_set = getScenarioTime()
										end
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
										if expedite_mine_back == nil or getScenarioTime() > expedite_mine_back + comms_fudge then
											addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
											expedite_mine_back = getScenarioTime()
										end
										if expedite_mine_comms_back == nil or getScenarioTime() > expedite_mine_comms_back + comms_fudge then
											addCommsReply(_("station-comms","Back to station communication"),commsStation)
											expedite_mine_comms_back = getScenarioTime()
										end
									end
								end)
								service_to_add_count = service_to_add_count + 1
							end
						end
					end
				end
				if comms_source.expedite_dock.hvli ~= nil then
					if service_list == _("station-comms","Expedited service list:") then
						if comms_source.expedite_dock.hvli > 1 then
							service_list = string.format(_("station-comms","%s %s HVLI missiles"),service_list,comms_source.expedite_dock.hvli)
						else
							service_list = string.format(_("station-comms","%s one HVLI missile"),service_list)
						end
					else
						if comms_source.expedite_dock.hvli > 1 then
							service_list = string.format(_("station-comms","%s, %s HVLI missiles"),service_list,comms_source.expedite_dock.hvli)
						else
							service_list = string.format(_("station-comms","%s, one HVLI missile"),service_list)
						end
					end
				else
					if comms_target.comms_data.weapon_available.HVLI and isAllowedTo(comms_target.comms_data.weapons.HVLI) then
						local max_hvli = comms_source:getWeaponStorageMax("HVLI")
						if max_hvli > 0 then
							local current_hvli = comms_source:getWeaponStorage("HVLI")
							if current_hvli < max_hvli then
								local full_hvli = max_hvli - current_hvli
								local refill_hvli_quick_dock_prompt = {
									string.format("Replenish HVLI missiles (%d reputation)",getWeaponCost("HVLI")*full_hvli),
									string.format("Restock HVLI missiles (%d reputation)",getWeaponCost("HVLI")*full_hvli),
									string.format("Refill HVLI missiles (%d reputation)",getWeaponCost("HVLI")*full_hvli),
									string.format("Restore HVLI missiles inventory (%d rep)",getWeaponCost("HVLI")*full_hvli),
								}
								addCommsReply(tableSelectRandom(refill_hvli_quick_dock_prompt),function()
									if comms_source:takeReputationPoints(getWeaponCost("HVLI")*full_hvli) then
										comms_source.expedite_dock.hvli = full_hvli
										if expedite_hvli_set == nil or getScenarioTime() > expedite_hvli_set + comms_fudge then
											setExpediteDock()
											expedite_hvli_set = getScenarioTime()
										end
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
										if expedite_hvli_back == nil or getScenarioTime() > expedite_hvli_back + comms_fudge then
											addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
											expedite_hvli_back = getScenarioTime()
										end
										if expedite_hvli_comms_back == nil or getScenarioTime() > expedite_hvli_comms_back + comms_fudge then
											addCommsReply(_("station-comms","Back to station communication"),commsStation)
											expedite_hvli_comms_back = getScenarioTime()
										end
									end
								end)
								service_to_add_count = service_to_add_count + 1
							end
						end
					end
				end
				if comms_source.expedite_dock.repair_crew then
					if service_list == _("station-comms","Expedited service list:") then
						service_list = string.format(_("station-comms","%s one repair crew"),service_list)
					else
						service_list = string.format(_("station-comms","%s, one repair crew"),service_list)
					end
				else
					if comms_target.comms_data.available_repair_crew == nil then
						comms_target.comms_data.available_repair_crew = math.random(0,5)
						comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66 = math.random(30,60)
						comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66 = math.random(45,90)
						comms_target.comms_data.available_repair_crew_cost_excess = math.random(15,30)
						comms_target.comms_data.available_repair_crew_cost_under_66 = math.random(15,30)
					end
					if comms_target.comms_data.available_repair_crew > 0 then	--station has repair crew available
						local hire_cost = 0
						if comms_source:isFriendly(comms_target) then
							hire_cost = comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66
						else
							hire_cost = comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66
						end
						if comms_target.comms_data.friendlyness <= 66 then
							hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_under_66
						end
						if comms_source:getRepairCrewCount() >= comms_source.maxRepairCrew then
							hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_excess
						end
						local hire_repair_crew_fast_dock_prompt = {
							string.format("Hire one repair crew (%d reputation)",hire_cost),
							string.format("Add to repair crew (%d reputation)",hire_cost),
							string.format("Hire additional repair crew (%d reputation)",hire_cost),
							string.format("Get one repair crew (%d reputation)",hire_cost),
						}
						addCommsReply(tableSelectRandom(hire_repair_crew_fast_dock_prompt),function()
							local hire_cost = 0
							if comms_source:isFriendly(comms_target) then
								hire_cost = comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66
							else
								hire_cost = comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66
							end
							if comms_target.comms_data.friendlyness <= 66 then
								hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_under_66
							end
							if comms_source:getRepairCrewCount() >= comms_source.maxRepairCrew then
								hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_excess
							end
							if comms_source:takeReputationPoints(hire_cost) then
								comms_source.expedite_dock.repair_crew = true
								if expedite_crew_set == nil or getScenarioTime() > expedite_crew_set + comms_fudge then
									setExpediteDock()
									expedite_crew_set = getScenarioTime()
								end
							else
								local insufficient_rep_responses = {
									"Insufficient reputation",
									"Not enough reputation",
									"You need more reputation",
									string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
									"You don't have enough reputation",
								}
								setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								if expedite_crew_back == nil or getScenarioTime() > expedite_crew_back + comms_fudge then
									addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
									expedite_crew_back = getScenarioTime()
								end
								if expedite_crew_comms_back == nil or getScenarioTime() > expedite_crew_comms_back + comms_fudge then
									addCommsReply(_("station-comms","Back to station communication"),commsStation)
									expedite_crew_comms_back = getScenarioTime()
								end
							end
						end)
						service_to_add_count = service_to_add_count + 1
					end
				end
				if comms_source.expedite_dock.coolant then
					if service_list == _("station-comms","Expedited service list:") then
						service_list = string.format(_("station-comms","%s add coolant"),service_list)
					else
						service_list = string.format(_("station-comms","%s, add coolant"),service_list)
					end
				else
					if comms_target.comms_data.coolant_inventory == nil then
						comms_target.comms_data.coolant_inventory = math.random(0,5)*2
						comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66 = math.random(30,60)
						comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66 = math.random(45,90)
						comms_target.comms_data.coolant_inventory_excess = math.random(15,30)
						comms_target.comms_data.coolant_inventory_under_66 = math.random(15,30)
					end
					if comms_target.comms_data.coolant_inventory > 0 then
						local coolant_cost = 0
						if comms_source:isFriendly(comms_target) then
							coolant_cost = comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66
						else
							coolant_cost = comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66
						end
						if comms_target.comms_data.friendlyness <= 66 then
							coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_under_66
						end
						if comms_source:getMaxCoolant() >= comms_source.initialCoolant then
							coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_excess
						end
						local get_coolant_fast_dock_prompt = {
							string.format("Get additional coolant (%d rep)",coolant_cost),
							string.format("Get more coolant (%d rep)",coolant_cost),
							string.format("Add coolant (%d rep)",coolant_cost),
							string.format("Acquire coolant (%d rep)",coolant_cost),
						}
						addCommsReply(tableSelectRandom(get_coolant_fast_dock_prompt),function()
							local coolant_cost = 0
							if comms_source:isFriendly(comms_target) then
								coolant_cost = comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66
							else
								coolant_cost = comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66
							end
							if comms_target.comms_data.friendlyness <= 66 then
								coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_under_66
							end
							if comms_source:getMaxCoolant() >= comms_source.initialCoolant then
								coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_excess
							end
							if comms_source:takeReputationPoints(coolant_cost) then
								comms_source.expedite_dock.coolant = true
								if expedite_coolant_set == nil or getScenarioTime() > expedite_coolant_set + comms_fudge then
									setExpediteDock()
									expedite_coolant_set = getScenarioTime()
								end
							else
								local insufficient_rep_responses = {
									"Insufficient reputation",
									"Not enough reputation",
									"You need more reputation",
									string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
									"You don't have enough reputation",
								}
								setCommsMessage(tableSelectRandom(insufficient_rep_responses))
								if expedite_coolant_back == nil or getScenarioTime() > expedite_coolant_back + comms_fudge then
									addCommsReply(_("station-comms","Back to expedited dock negotiation"),setExpediteDock)
									expedite_coolant_back = getScenarioTime()
								end
								if expedite_coolant_comms_back == nil or getScenarioTime() > expedite_coolant_comms_back + comms_fudge then
									addCommsReply(_("station-comms","Back to station communication"),commsStation)
									expedite_coolant_comms_back = getScenarioTime()
								end
							end
						end)
						service_to_add_count = service_to_add_count + 1
					end
				end
				if service_to_add_count > 0 then
					local more_services_addendum = {
						"Would you like some additional expedited docking services?",
						"Do you want to expedite another service?",
						"Would you like to add to your list of expedited services?",
						"How about another expedited service?",
					}
					if service_list == _("station-comms","Expedited service list:") then
						out = string.format("%s\n%s",out,tableSelectRandom(more_services_addendum))
					else
						out = string.format("%s\n%s.\n%s",out,service_list,tableSelectRandom(more_services_addendum))
					end
				else
					local no_more_services_addendum = {
						"There are no additional expedited docking services available.",
						"There are no more expeditable services available.",
						"We cannot expedite any more services.",
						"No more services are available for fast dock.",
					}
					if service_list == _("station-comms","Expedited service list:") then
						out = string.format("%s\n%s",out,tableSelectRandom(no_more_services_addendum))
					else
						out = string.format("%s\n%s.\n%s",out,service_list,tableSelectRandom(no_more_services_addendum))
					end
				end
				setCommsMessage(out)
				if expedite_service_list_comms_back == nil or getScenarioTime() > expedite_service_list_comms_back + comms_fudge then
					addCommsReply(_("Back"), commsStation)
					expedite_service_list_comms_back = getScenarioTime()
				end
			end
		end
	end
end
function commercialOptions(calling_function)
	--	goods, passengers, residents' cargo, other stations
	local commercial_options_prompt = {
		string.format("Investigate commercial options at %s",comms_target:getCallSign()),
		string.format("Look into %s commercial options",comms_target:getCallSign()),
		string.format("Check out %s commercial options",comms_target:getCallSign()),
		string.format("Explore commercial options at %s",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(commercial_options_prompt),function()
		local good_sale_count = 0
		local good_sale_list = ""
		for good, good_data in pairs(comms_target.comms_data.goods) do
			if good_data.quantity ~= nil and good_data.quantity > 0 then
				good_sale_count = good_sale_count + 1
				if good_sale_list == "" then
					good_sale_list = good_desc[good]
				else
					good_sale_list = string.format("%s, %s",good_sale_list,good_desc[good])
				end
			end
		end
		local out = ""
		if good_sale_count > 0 then
			out = string.format(_("station-comms","We sell goods (%s)."),good_sale_list)
			local buy_prompt = {
				string.format("Buy %s",good_sale_list),
				string.format("Buy %s info",good_sale_list),
				string.format("Buy %s details",good_sale_list),
				string.format("Buy %s report",good_sale_list),
			}
			addCommsReply(tableSelectRandom(buy_prompt),function()
				local sell_header = {
					"Goods for sale (good name, quantity, reputation cost):",
					string.format("List of goods being sold by %s:\n(good name, quantity, reputation cost)",comms_target:getCallSign()),
					string.format("%s sells these goods:\n(good name, quantity, reputation cost)",comms_target:getCallSign()),
					string.format("You can buy these goods at %s:\n(good name, quantity, reputation cost)",comms_target:getCallSign()),
				}
				local sell_out = tableSelectRandom(sell_header)
				for good, good_data in pairs(comms_target.comms_data.goods) do
					sell_out = string.format("%s\n%s, %s, %s",sell_out,good_desc[good],good_data.quantity,good_data.cost)
				end
				setCommsMessage(sell_out)
				if commerce_buy_caller_back == nil or getScenarioTime() > commerce_buy_caller_back + comms_fudge then
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					commerce_buy_caller_back = getScenarioTime()
				end
				if commerce_buy_comms_back == nil or getScenarioTime() > commerce_buy_comms_back + comms_fudge then
					addCommsReply(_("station-comms","Back to station communication"),commsStation)
					commerce_buy_comms_back = getScenarioTime()
				end
			end)
		end
		if comms_target.comms_data.buy ~= nil then
			local good_buy_list = ""
			local match_good_buy_list = ""
			for good, price in pairs(comms_target.comms_data.buy) do
				if good_buy_list == "" then
					good_buy_list = good_desc[good]
				else
					string.format("%s, %s",good_buy_list,good_desc[good])
				end
				if comms_source.goods ~= nil and comms_source.goods[good] ~= nil and comms_source.goods[good] > 0 then
					if match_good_buy_list == "" then
						match_good_buy_list = good_desc[good]
					else
						match_good_buy_list = string.format("%s, %s",match_good_buy_list,good_desc[good])
					end
				end
			end
			if out == "" then
				out = string.format(_("station-comms","We buy goods (%s)."),good_buy_list)
			else
				out = string.format(_("station-comms","%s We buy goods (%s)."),out,good_buy_list)
			end
			local sell_prompt = {
				string.format("Sell %s",good_buy_list),
				string.format("Sell %s info",good_buy_list),
				string.format("Sell %s details",good_buy_list),
				string.format("Sell %s report",good_buy_list),
			}
			addCommsReply(tableSelectRandom(sell_prompt),function()
				local buy_header = {
					string.format("Goods station %s will buy (good name, reputation):",comms_target:getCallSign()),
					string.format("List of goods %s will buy:\n(good name, reputation)",comms_target:getCallSign()),
					string.format("%s will buy these goods:\n(good name, reputation)",comms_target:getCallSign()),
					string.format("You can sell these goods to %s:(good name, reputation)",comms_target:getCallSign()),
				}
				local buy_out = tableSelectRandom(buy_header)
				for good, price in pairs(comms_target.comms_data.buy) do
					buy_out = string.format("%s\n%s, %s",buy_out,good_desc[good],price)
				end
				if match_good_buy_list == "" then
					local no_matching_good_addendum = {
						"You do not have any matching goods in your cargo hold.",
						"Nothing in your cargo hold matches what they want.",
						string.format("You have nothing in your cargo hold that %s wants",comms_target:getCallSign()),
						string.format("%s is not interested in anything in your cargo hold",comms_target:getCallSign()),
					}
					buy_out = string.format("%s\n\n%s",buy_out,tableSelectRandom(no_matching_good_addendum))
				else
					local matching_good_addendum = {
						"Matching goods in your cargo hold",
						string.format("%s would buy these goods",comms_target:getCallSign()),
						string.format("This cargo matches %s's interests",comms_target:getCallSign()),
						string.format("%s is interested in this cargo",comms_target:getCallSign()),
					}
					buy_out = string.format("%s\n\n%s: %s",buy_out,tableSelectRandom(matching_good_addendum),match_good_buy_list)
				end
				setCommsMessage(buy_out)
				if commerce_sell_caller_back == nil or getScenarioTime() > commerce_sell_caller_back + comms_fudge then
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					commerce_sell_caller_back = getScenarioTime()
				end
				if commerce_sell_comms_back == nil or getScenarioTime() > commerce_sell_comms_back + comms_fudge then
					addCommsReply(_("station-comms","Back to station communication"),commsStation)
					commerce_sell_comms_back = getScenarioTime()
				end
			end)
		end
		local trade_good_list = ""
		if comms_target.comms_data.trade ~= nil then
			if comms_target.comms_data.trade.food then
				trade_good_list = good_desc["food"]
			end
			if comms_target.comms_data.trade.medicine then
				if trade_good_list == "" then
					trade_good_list = good_desc["medicine"]
				else
					trade_good_list = string.format("%s, %s",trade_good_list,good_desc["medicine"])
				end
			end
			if comms_target.comms_data.trade.luxury then
				if trade_good_list == "" then
					trade_good_list = good_desc["luxury"]
				else
					trade_good_list = string.format("%s, %s",trade_good_list,good_desc["luxury"])
				end
			end
		end
		if trade_good_list ~= "" then
			if out == "" then
				out = string.format(_("station-comms","We trade our goods for %s."),trade_good_list)
			else
				out = string.format(_("station-comms","%s We trade our goods for %s."),out,trade_good_list)
			end
		end
		local transport_mission_available = false
		if comms_source.transport_mission == nil then
			transport_mission_available = true
		else
			if comms_source.transport_mission.destination == nil or not comms_source.transport_mission.destination:isValid() then
				transport_mission_available = true
			end
		end
		if transport_mission_available and #characters > 0 then
			if out == "" then
				out = _("station-comms","We have potential passengers.")
			else
				out = string.format(_("station-comms","%s We have potential passengers."),out)
			end
		end
		local cargo_mission_available = false
		if comms_source.cargo_mission == nil then
			if comms_target.residents ~= nil and #comms_target.residents > 0 then
				cargo_mission_available = true
			end
		else
			if comms_source.cargo_mission.loaded then
				if comms_source.cargo_mission.destination == nil or not comms_source.cargo_mission.destination:isValid() then
					cargo_mission_available = true
				end
			else
				if comms_source.cargo_mission.origin == nil or not comms_source.cargo_mission.origin:isValid() then
					cargo_mission_available = true
				end
			end
		end
		if cargo_mission_available then
			local resident_list = ""
			for i,resident in ipairs(comms_target.residents) do
				if resident_list == "" then
					resident_list = resident
				else
					resident_list = string.format("%s, %s",resident_list,resident)
				end
			end
			if out == "" then
				if #comms_target.residents > 1 then
					out = string.format(_("station-comms","We have residents (%s) wishing to transport cargo."),resident_list)
				else
					out = string.format(_("station-comms","We have a resident (%s) wishing to transport cargo."),resident_list)
				end
			else
				if #comms_target.residents > 1 then
					out = string.format(_("station-comms","%s We have residents (%s) wishing to transport cargo."),out,resident_list)
				else
					out = string.format(_("station-comms","%s We have a resident (%s) wishing to transport cargo."),out,resident_list)
				end
			end
		end
		if out == "" then
			local no_commerce_here = {
				"No commerce options here.",
				"There are no commercial options here.",
				"There's nothing here of commercial interest.",
				"Nothing commercially interesting here.",
			}
			setCommsMessage(tableSelectRandom(no_commerce_here))
		else
			local interest_query_addendum = {
				"What are you interested in?",
				"Does any of this interest you?",
				"See anything interesting?",
				"Are any of these commercial ventures interesting?",
			}
			setCommsMessage(string.format("%s\n%s",out,tableSelectRandom(interest_query_addendum)))
		end
		local external_commerce = {
			"What about commerce options at other stations?",
			"Do you know of commercial options at other stations?",
			"Tell me about commercial ventures at other stations",
			"How about commerce at other stations?",
		}
		addCommsReply(tableSelectRandom(external_commerce),function()
			setCommsMessage("Other stations?")
			if comms_target.comms_data.friendlyness > 66 then
				if comms_target.comms_data.other_station_commerce == nil then
					local station_pool = {}
					for i,station in ipairs(regionStations) do
						if station ~= nil and station:isValid() and station ~= comms_target and not station:isEnemy(comms_source) then
							local station_type = station:getTypeName()
							if station_type == "Small Station" or station_type == "Medium Station" or station_type == "Large Station" or station_type == "Huge Station" then
								table.insert(station_pool,station)
							end
						end
					end
					comms_target.comms_data.other_station_commerce = {}
					table.insert(comms_target.comms_data.other_station_commerce,tableSelectRandom(station_pool))
					if comms_target.comms_data.friendlyness > 70 then
						table.insert(comms_target.comms_data.other_station_commerce,tableSelectRandom(station_pool))
					end
					if comms_target.comms_data.friendlyness > 80 then
						table.insert(comms_target.comms_data.other_station_commerce,tableSelectRandom(station_pool))
					end
					if comms_target.comms_data.friendlyness > 90 then
						table.insert(comms_target.comms_data.other_station_commerce,tableSelectRandom(station_pool))
					end
					if comms_target.comms_data.friendlyness > 95 then
						table.insert(comms_target.comms_data.other_station_commerce,tableSelectRandom(station_pool))
					end
				end
				local other_stations = ""
				for i,station in ipairs(comms_target.comms_data.other_station_commerce) do
					if station ~= nil and station:isValid() then
						local good_sale_count = 0
						local good_sale_list = ""
						local this_station = ""
						for good, good_data in pairs(station.comms_data.goods) do
							if good_data.quantity ~= nil and good_data.quantity > 0 then
								good_sale_count = good_sale_count + 1
								if good_sale_list == "" then
									good_sale_list = good_desc[good]
								else
									good_sale_list = string.format("%s, %s",good_sale_list,good_desc[good])
								end
							end
						end
						if good_sale_count > 0 then
							this_station = string.format(_("station-comms","%s in %s sells %s"),station:getCallSign(),station:getSectorName(),good_sale_list)
						end
						if station.comms_data.buy ~= nil then
							local good_buy_list = ""
							local match_good_buy_list = ""
							for good, price in pairs(station.comms_data.buy) do
								if good_buy_list == "" then
									good_buy_list = good_desc[good]
								else
									string.format("%s, %s",good_buy_list,good_desc[good])
								end
								if comms_source.goods ~= nil and comms_source.goods[good] ~= nil and comms_source.goods[good] > 0 then
									if match_good_buy_list == "" then
										match_good_buy_list = good_desc[good]
									else
										match_good_buy_list = string.format("%s, %s",match_good_buy_list,good_desc[good])
									end
								end
							end
							if this_station == "" then
								this_station = string.format(_("station-comms","%s in %s buys %s"),station:getCallSign(),station:getSectorName(),good_buy_list)
								if match_good_buy_list == "" then
									this_station = string.format(_("station-comms","%s (none in cargo hold)"),this_station)
								else
									this_station = string.format(_("station-comms","%s (%s in cargo hold)"),this_station,match_good_buy_list)
								end
							else
								this_station = string.format(_("station-comms","%s and buys %s"),this_station,good_buy_list)
								if match_good_buy_list == "" then
									this_station = string.format(_("station-comms","%s (none in cargo hold)"),this_station)
								else
									this_station = string.format(_("station-comms","%s (%s in cargo hold)"),this_station,match_good_buy_list)
								end
							end
						end
						local other_commerce_header = {
							"This is what I know about commerce options at other stations:",
							"Here's what I know about commerce at other stations:",
							"My knowledge of commercial ventures at other stations consists of:",
							"Here's my summation of what you can find in the way of commerce at other stations:",
						}
						if this_station == "" then
							if other_stations == "" then
								other_stations = string.format("%s\n%s in %s does not buy or sell goods.",tableSelectRandom(other_commerce_header),station:getCallSign(),station:getSectorName())
							else
								other_stations = string.format(_("station-comms","%s\n%s in %s does not buy or sell goods."),other_stations,station:getCallSign(),station:getSectorName())
							end
						else
							if other_stations == "" then
								other_stations = string.format("%s\n%s",tableSelectRandom(other_commerce_header),this_station)
							else
								other_stations = string.format("%s\n%s.",other_stations,this_station)
							end
						end
					end
				end
				if other_stations == "" then
					local commercially_clueless = {
						"I don't know about commerce options at other stations.",
						"I know nothing about commercial options anywhere else.",
						string.format("I only know about %s. Other stations are too far away.",comms_target:getCallSign()),
						string.format("My knowledge does not extend beyond %s.",comms_target:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(commercially_clueless))
				else
					setCommsMessage(other_stations)
				end
			else
				local commercially_clueless = {
					"I don't know about commerce options at other stations.",
					"I know nothing about commercial options anywhere else.",
					string.format("I only know about %s. Other stations are too far away.",comms_target:getCallSign()),
					string.format("My knowledge does not extend beyond %s.",comms_target:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(commercially_clueless))
			end
			if commerce_other_caller_back == nil or getScenarioTime() > commerce_other_caller_back + comms_fudge then
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				commerce_other_caller_back = getScenarioTime()
			end
			if commerce_other_comms_back == nil or getScenarioTime() > commerce_other_comms_back + comms_fudge then
				addCommsReply(_("station-comms","Back to station communication"),commsStation)
				commerce_other_comms_back = getScenarioTime()
			end
		end)
		if commerce_investigate_caller_back == nil or getScenarioTime() > commerce_investigate_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			commerce_investigate_caller_back = getScenarioTime()
		end
		if commerce_investigate_comms_back == nil or getScenarioTime() > commerce_investigate_comms_back + comms_fudge then
			addCommsReply(_("station-comms","Back to station communication"),commsStation)
			commerce_investigate_comms_back = getScenarioTime()
		end
	end)
end
--	circumstantial comms
function wormholeWranglerOptions(calling_function)
	string.format("")
	local wormhole_destination_change_prompt = {
		"Change wormhole destination",
		"Set wormhole destination",
		"Change wormhole exit point",
		"Adjust the wormhole's destination",
	}
	addCommsReply(tableSelectRandom(wormhole_destination_change_prompt),function()
		local wormhole_name = "The wormhole"
		if wormholeIcarus:getCallSign() ~= nil then
			wormhole_name = wormholeIcarus:getCallSign()
		end
		local wormhole_destination_current_possible = {
			string.format("%s spits you out near %s. Would you like for us to change that?",wormhole_name,comms_target.wormhole.exit),
			string.format("%s exit is near %s. Do you need that changed?",wormhole_name,comms_target.wormhole.exit),
			string.format("%s transports you to %s. Need to go somewhere else?",wormhole_name,comms_target.wormhole.exit),
			string.format("%s currently goes to %s. Do you want an alternative destination?",wormhole_name,comms_target.wormhole.exit),
		}
		setCommsMessage(tableSelectRandom(wormhole_destination_current_possible))
		for i,w_exit in ipairs(comms_target.wormhole.exits) do
			if w_exit.name ~= comms_target.wormhole.exit then
				addCommsReply(string.format("%s for 5 reputation",w_exit.name),function()
					if comms_source:takeReputationPoints(5) then
						comms_target.wormhole.exit = w_exit.name
						comms_target.wormhole:setTargetPosition(w_exit.x,w_exit.y):onTeleportation(w_exit.tax)
						setCommsMessage(string.format("Changed to %s",w_exit.name))
					else
						setCommsMessage("Insufficient reputation")
					end
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
			end
		end
		addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
		addCommsReply("Back to station communication", commsStation)
	end)
end
function magnasolHeatDiscussion(calling_function)
	local magnasol_protection_prompt = {
		"How can I protect my ship from Magnasol heat?",
		"What can I do about heat from Magnasol?",
		string.format("How can I reduce the heat from Magnasol on %s",comms_source:getCallSign()),
		string.format("Magnasol is roasting %s! What can we do?",comms_source:getCallSign()),
	}
	addCommsReply(tableSelectRandom(magnasol_protection_prompt),function()
		local several_heat_ways = {
			"There are several ways. Which one are you interested in?",
			"You have a few options. Which one interests you?",
			"Which of these heat reduction options are you interested in?",
			"You can reduce Magnasol heat in a number of ways",
		}
		setCommsMessage(tableSelectRandom(several_heat_ways))
		local shields_duh = {
			"Activate shields",
			"Turn on shields",
			"Your shields can help",
			"Raise shields",
		}
		addCommsReply(tableSelectRandom(shields_duh),function()
			local shield_heat_response = {
				"If your shields are active, that cuts out about half the heat that Magnasol emits",
				"Raising your shields cuts Magnasol's heat impact in half",
				"If you put up your shields you'll find that Magnasol's heat is reduced by about half",
				"Your shields protect you from about half of Magnasol's heat impact",
			}
			setCommsMessage(tableSelectRandom(shield_heat_response))
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back to station communication", commsStation)
		end)
		local run_away_prompt = {
			"Increase your distance from Magnasol",
			"Get further away from Magnasol",
			"Keep your distance from Magnasol",
			"Stay away from Magnasol",
		}
		addCommsReply(tableSelectRandom(run_away_prompt),function()
			local distance_explained = {
				"The further you are away from Magnasol, the less impact it has on the heat of your systems. The closer, the hotter.",
				string.format("The closer %s gets to Magnasol, the hotter the heat. Conversely, the farther %s is from Magnasol, the less the heat applies.",comms_source:getCallSign(),comms_source:getCallSign()),
				"The farther away you are from Magnasol, the less its heat impacts your ship systems.",
				string.format("Move %s 100 units or more away from Magnasol and the heat impact goes away. The closer you are to Magnasol, though, the more the heat impacts %s",comms_source:getCallSign(),comms_source:getCallSign()),
			}
			setCommsMessage(tableSelectRandom(distance_explained))
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back to station communication", commsStation)
		end)
		local get_coolant_additive_prompt = {
			"Get coolant additive",
			"Improve coolant performance",
			"Add performance booster to coolant",
			"Invest in better coolant",
		}
		addCommsReply(tableSelectRandom(get_coolant_additive_prompt),function()
			local coolant_additive_explained = {
				"Each station in the area is continually coming up with different concoctions that can be mixed with coolant to make the coolant more effective against Magnasol's radiance. These concoctions vary in their effectiveness and in the duration of their effectiveness.",
				"The stations continue to experiment with coolant additives to help protect against Magnasol's radiance. These experimental concoctions vary in their effectiveness and their duration.",
				"You could try some of the coolant concoctions the stations around here have been working on. The concoctions vary in duration and effectiveness, so they are a temporary but fairly effective solution to Magnasol's heat impact.",
				"The stations that send ships out to work in this heat continue to experiment with coolant additives to reduce the heat impact from Magnasol. The additives vary in terms of effectiveness and duration, but represent a reasonable short term solution.",
			}
			setCommsMessage(tableSelectRandom(coolant_additive_explained))
			local try_additive_prompt = {
				"Do you have one of these coolant additives we could try?",
				"I don't suppose you have a coolant additive for us?",
				"Is there a coolant additive concoction available here?",
				"Have you experimented? If so, can we try your additive?",
			}
			addCommsReply(tableSelectRandom(try_additive_prompt),function()
				if comms_target.comms_data.coolant_additive == nil then
					local duration_list = {
						{value = 2, desc = "a couple of"},
						{value = 5, desc = "a few"},
						{value = 10, desc = "about ten"},
					}
					local duration = duration_list[math.random(1,3)]
					comms_target.comms_data.coolant_additive = {
						["effectiveness"] = math.random(1,3),
						["duration"] = duration.value,
						["desc"] = duration.desc,
						["exchange"] = mineralGoods[math.random(1,#mineralGoods)],
					}
				end
				local coolant_additive_offer = {
					string.format("We've got a batch of coolant additive that's level %i effective (the higher the level, the better) that'll last %s minutes. We'll provide you some in exchange for %s.",comms_target.comms_data.coolant_additive.effectiveness,comms_target.comms_data.coolant_additive.desc,comms_target.comms_data.coolant_additive.exchange),
					string.format("We've got some %i level effective coolant additive. The higher the level, the greater the effectiveness. It lasts %s minutes. If you provide us with %s, we'll provide some for you.",comms_target.comms_data.coolant_additive.effectiveness,comms_target.comms_data.coolant_additive.desc,comms_target.comms_data.coolant_additive.exchange),
					string.format("We'll give you some level %i coolant additive for some %s. It lasts about %s minutes. The greater the level, the more effective the additive, btw.",comms_target.comms_data.coolant_additive.effectiveness,comms_target.comms_data.coolant_additive.exchange,comms_target.comms_data.coolant_additive.desc),
					string.format("In exchange for %s we can provide our coolant additive which lasts %s minutes and is rated at %i effective (the higher the rating the more effective",comms_target.comms_data.coolant_additive.exchange,comms_target.comms_data.coolant_additive.desc,comms_target.comms_data.coolant_additive.effectiveness),
				}
				setCommsMessage(tableSelectRandom(coolant_additive_offer))
				if comms_source:isDocked(comms_target) then
					local get_additive = {
						"That would be great. We'll take some",
						"Sounds good, Can we get some?",
						"We could use that. This heat is bad",
						"We want to try some of your additive",
					}
					addCommsReply(tableSelectRandom(get_additive),function()
						local exchange_good = comms_target.comms_data.coolant_additive.exchange
						local function injectCoolantAdditive(exchange_good)
							local need_good_for_additive = {
								string.format("We'll need %s before we can provide the coolant additive",exchange_good),
								string.format("You must provide us with %s before we can provide you the cooland booster",exchange_good),
								string.format("We will provide you with the coolant additive after you provide us with %s",exchange_good),
								string.format("Nice try. We need %s before we can give you the coolant booster",exchange_good),
							}
							if comms_source.goods ~= nil then
								if comms_source.goods[exchange_good] ~= nil and comms_source.goods[exchange_good] > 0 then
									comms_source.goods[exchange_good] = comms_source.goods[exchange_good] - 1
									comms_source.coolant_additive = {
										["effectiveness"] = comms_target.comms_data.coolant_additive.effectiveness,
										["expires"] = comms_target.comms_data.coolant_additive.duration*60 + getScenarioTime(),
									}
									comms_source.coolant_additive_button_eng = "coolant_additive_button_eng"
									comms_source:addCustomButton("Engineering",comms_source.coolant_additive_button_eng,"Check Additive",function()
										string.format("")
										comms_source.coolant_additive_msg_eng = "coolant_additive_msg_eng"
										print("expires:",comms_source.coolant_additive.expires)
										if comms_source.coolant_additive.expires > getScenarioTime() then
											comms_source:addCustomMessage("Engineering",comms_source.coolant_additive_msg_eng,"Additive has dissipated")
											comms_source:removeCustom(comms_source.coolant_additive_button_eng)
										else
											comms_source:addCustomMessage("Engineering",comms_source.coolant_additive_msg_eng,string.format("Additive functioning.\nEffectiveness level %s.\nExpected remaining duration: %i seconds",comms_source.coolant_additive.effectiveness,math.floor(comms_source.coolant_additive.expires - getScenarioTime())))
										end
									end,41)
									comms_source.coolant_additive_button_plus = "coolant_additive_button_plus"
									comms_source:addCustomButton("Engineering+",comms_source.coolant_additive_button_plus,"Check Additive",function()
										string.format("")
										comms_source.coolant_additive_msg_eng = "coolant_additive_msg_eng"
										if comms_source.coolant_additive.expires > getScenarioTime() then
											comms_source:addCustomMessage("Engineering+",comms_source.coolant_additive_msg_eng,"Additive has dissipated")
											comms_source:removeCustom(comms_source.coolant_additive_button_plus)
										else
											comms_source:addCustomMessage("Engineering+",comms_source.coolant_additive_msg_eng,string.format("Additive functioning.\nEffectiveness level %s.\nExpected remaining duration: %i seconds",comms_source.coolant_additive.effectiveness,math.floor(comms_source.coolant_additive.expires - getScenarioTime())))
										end
									end,41)
									local added_to_coolant_response = {
										string.format("Thanks for the %s. We've injected the coolant additive into your coolant system",exchange_good),
										string.format("In exchange for %s, we have added our experimental compound into your coolant system",exchange_good),
										string.format("The %s will be useful, thanks. Hopefully, our coolant booster will be useful. It's been added to your coolant",exchange_good),
										string.format("For the %s you provided, we have added our flavor of coolant booster to your coolant system.",exchange_good),
									}
									setCommsMessage(tableSelectRandom(added_to_coolant_response))
								else
									setCommsMessage(tableSelectRandom(need_good_for_additive))
								end
							else
								setCommsMessage(tableSelectRandom(need_good_for_additive))
							end
						end
						if comms_source.coolant_additive == nil then
							injectCoolantAdditive(exchange_good)
						else
							if comms_source.coolant_additive.expires ~= nil and comms_source.coolant_additive.expires < getScenarioTime() then
								local one_additive_at_a_time = {
									"You've already got a coolant additive. These things don't mix well. We've seen ships explode when they try to mix coolant additives. You'll have to wait until your current coolant additive dissipates",
									"Do you want to destroy your ship? You need to wait until your current coolant additive runs out before trying another or your ship will very likely explode",
									"We can't give you another coolant additive until your current coolant additive expires. Ships have blown up taking stations with them when these coolant boosters were combined.",
									"We are not going to put this additive in while your current one is still in effect. That could blow up your ship and the station, too",
								}
								setCommsMessage(tableSelectRandom(one_additive_at_a_time))
							else
								injectCoolantAdditive(exchange_good)
							end
						end
						addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
						addCommsReply("Back to station communication", commsStation)
					end)
				end
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back to station communication", commsStation)
		end)
	end)
end
function riptideHossenfelderDiscussion(calling_function)
	local info_on_riptide = {
		"I need information on this region",
		"Tell me about this region",
		string.format("I need to know about the area around %s",comms_target:getCallSign()),
		string.format("What can you tell me about %s's environment",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(info_on_riptide),function()
		local psamtik_info = {
			string.format("%s is currently in sector %s (Lagrange point 2). It houses the Arlenian Xenobiology Institute.",psamtikStation:getCallSign(),psamtikStation:getSectorName()),
			string.format("At Lagrange point 2 you'll find %s (currently in sector %s). %s hosts the Arlenian Xenobiology Institute.",psamtikStation:getCallSign(),psamtikStation:getSectorName(),psamtikStation:getCallSign()),
			string.format("The home of the Arlenian Xenobiology Institute is on %s in sector %s (Lagrange point 2).",psamtikStation:getCallSign(),psamtikStation:getSectorName()),
			string.format("You can find the Arlenian Xenobiology Institute on %s in sector %s (Lagrange point 2).",psamtikStation:getCallSign(),psamtikStation:getSectorName()),
		}
		local wormhole_to_Icarus = {
			string.format("The wormhole leading back to Icarus is currently in sector %s (Lagrange point 3).",riptideToIcarusWormHole:getSectorName()),
			string.format("The quickest path to Icarus is via the wormhole currently in sector %s (Lagrange point 3).",riptideToIcarusWormHole:getSectorName()),
			string.format("At Lagrange point 3 is the wormhole leading back to Icarus (currently in sector %s).",riptideToIcarusWormHole:getSectorName()),
			string.format("The wormhole at Lagrange point 3 is the fastest way to Icarus. It's currently in sector %s.",riptideToIcarusWormHole:getSectorName()),
		}
		local hossenfelder_info = {
			string.format("%s (this station) is currently in sector %s (Lagrange point 4)",stationHossenfelder:getCallSign(),stationHossenfelder:getSectorName()),
			string.format("We, %s, are currently located in sector %s at Lagrange point 4",stationHossenfelder:getCallSign(),stationHossenfelder:getSectorName()),
			string.format("If you need to find %s again, just go to Lagrange point 4 (currently in sector %s)",stationHossenfelder:getCallSign(),stationHossenfelder:getSectorName()),
			string.format("%s (that's us) is at Lagrange point 4 which is currently located in sector %s",stationHossenfelder:getCallSign(),stationHossenfelder:getSectorName()),
		}
		local l5_info = {
			"Lagrange point 5 can be found by mirroring Lagrange point 4 by the Riptide Alpha - Riptide Gamma axis.",
			"Mirror Lagrange point by the Riptide Alpha to the Riptide Gamma axis to locate Lagrange point 5",
			"Take the Riptide Alpha to the Riptide Gamma axis and mirror Lagrange point 4 to determine the locatio of Lagrange point 5.",
			"Determine the Lagrange point 5 location by mirroring Lagrange point 4 via the Riptide Alpha to Riptide Gamma axis.",
		}
		local l1_info = {
			"Lagrange point 1 is between Riptide Alpha and Riptide Gamma, but there's nothing interesting there.",
			"You can find Lagrange point 1 between Riptide Alpha and Riptide Gamma, but it's not interesting.",
			"And finally, the uninteresting Lagrange point 1 is between Riptide Alpha and Riptide Gamma.",
			"To complete the information set, Lagrange point 1 is between Riptide Alpha and Riptide Gamme. There's nothing of interest there.",
		}
		setCommsMessage(string.format("%s\n%s\n%s\n%s\n%s",tableSelectRandom(psamtik_info),tableSelectRandom(wormhole_to_Icarus),tableSelectRandom(hossenfelder_info),tableSelectRandom(l5_info),tableSelectRandom(l1_info)))
		addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
		addCommsReply("Back to station communication", commsStation)
	end)
end
function lafrinaDiscussion(calling_function)
	local lafrina_stations_info_prompt = {
		"I need information on the Arlenian stations in the area",
		"Tell me about the Arlenian stations around here",
		"Can you help me with info on nearby Arlenian stations?",
		"What do you know about Arlenian stations in the area?",
	}
	addCommsReply(tableSelectRandom(lafrina_stations_info_prompt),function()
		local which_arlenian_stations = {
			"Which station are you interested in?",
			"Which one?",
			"Pick an Arlenian station",
			"Which Arlenian station are you interested in?",
		}
		setCommsMessage(tableSelectRandom(which_arlenian_stations))
		if stationMarielle ~= nil and stationMarielle:isValid() then
			addCommsReply(string.format("Marielle in %s",stationMarielle:getSectorName()),function()
				local marielle_info = {
					string.format("Marielle is located in %s. It is a medium sized station conducting mining and manufacturing operations.\n\nWould you like a waypoint set on Marielle?",stationMarielle:getSectorName()),
					string.format("Marielle is a medium sized station in sector %s. Arlenians conduct mining and manufacturing operations at Marielle.\n\nI can set a waypoint in your system on Marielle if you'd like...",stationMarielle:getSectorName()),
					string.format("You'll find Marielle in sector %s. It's a medium sized station engaged in mining and manufacturing operations.\n\nShould I set a waypoint on Marielle for you?",stationMarielle:getSectorName()),
					string.format("Marielle is in sector %s. It's a medium sized station. Marielle does mining and manufacturing.\n\nDo you want me to put a waypoint on Marielle for you?",stationMarielle:getSectorName()),
				}
				setCommsMessage(tableSelectRandom(marielle_info))
				local yes_waypoint_marielle_prompt = {
					"Yes",
					"Yes, please set a waypoint for Marielle",
					"Yes, a waypoint on Marielle would be great",
					"A Marielle waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_marielle_prompt),function()
					local sx, sy = stationMarielle:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local marielle_waypoint_set = {
						string.format("Waypoint %i set on station Marielle",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Marielle for you",comms_source:getWaypointCount()),
						string.format("Marielle now has waypoint %i set on it",comms_source:getWaypointCount()),
						string.format("Waypoint %i set for station Marielle",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(marielle_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		if stationIlorea ~= nil and stationIlorea:isValid() then
			addCommsReply(string.format("Ilorea in %s",stationIlorea:getSectorName()),function()
				local ilorea_info = {
					string.format("Ilorea is located in %s. It is a small station conducting mining operations and providing resupply services for miners and passing ships.\n\nWould you like a waypoint set on Ilorea?",stationIlorea:getSectorName()),
					string.format("Ilorea is a small station in sector %s. Arlenians conduct mining operations and provide resupply services there.\n\nI could set a waypoint on Ilorea if you wish...",stationIlorea:getSectorName()),
					string.format("You can find Ilorea in sector %s. It's a small mining and resupply station.\n\nShould I set a waypoint on Ilorea for you?",stationIlorea:getSectorName()),
					string.format("Ilorea is in sector %s. It's a small station. Ilorea mines nearby asteroids and resupplies miners and other ships.\n\nDo you want me to put a waypoint on Ilorea for you?",stationIlorea:getSectorName()),
				}
				setCommsMessage(tableSelectRandom(ilorea_info))
				local yes_waypoint_ilorea_prompt = {
					"Yes",
					"Yes, please set a waypoint for Ilorea",
					"Yes, a waypoint on Ilorea would be great",
					"An Ilorea waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_ilorea_prompt),function()
					local sx, sy = stationIlorea:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local ilorea_waypoint_set = {
						string.format("Waypoint %i set on station Ilorea",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Ilorea for you",comms_source:getWaypointCount()),
						string.format("Ilorea now has waypoint %i set on it",comms_source:getWaypointCount()),
						string.format("Waypoint %i set for station Ilorea",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(ilorea_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		if stationRivelle ~= nil and stationRivelle:isValid() then
			addCommsReply(string.format("Rivelle in %s",stationRivelle:getSectorName()),function()
				local rivelle_info = {
					string.format("Rivelle is located in %s. It is a small station conducting mining operations.\n\nWould you like a waypoint set on Rivelle?",stationRivelle:getSectorName()),
					string.format("Rivelle is a small station in sector %s. Arlenians conduct mining operations there.\n\nIf you want, I could set a waypoint on Rivelle...",stationRivelle:getSectorName()),
					string.format("You'll find Rivelle in sector %s. It's a small mining station.\n\nShould I set a waypoint on Rivelle for you?",stationRivelle:getSectorName()),
					string.format("Rivelle is in sector %s. It's a small station. They mine nearby asteroids and such.\n\nDo you want a waypoint on Rivelle?",stationRivelle:getSectorName()),					
				}
				setCommsMessage(tableSelectRandom(rivelle_info))
				local yes_waypoint_rivelle_prompt = {
					"Yes",
					"Yes, please set a waypoint for Rivelle",
					"Yes, a waypoint on Rivelle would be great",
					"A Rivelle waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_rivelle_prompt),function()
					local sx, sy = stationRivelle:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local rivelle_waypoint_set = {
						string.format("Waypoint %i set on station Rivelle",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Rivelle for you",comms_source:getWaypointCount()),
						string.format("Rivelle now has waypoint %i set on it",comms_source:getWaypointCount()),
						string.format("Waypoint %i set for station Rivelle",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(rivelle_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		if stationBorie ~= nil and stationBorie:isValid() then
			addCommsReply(string.format("Borie in %s",stationBorie:getSectorName()),function()
				local borie_info = {
					string.format("Borie is located in %s. It is a small station conducting mining operations. The Arlenians also indulge in gambling on this station.\n\nWould you like a waypoint set on Borie?",stationBorie:getSectorName()),
					string.format("Borie is a small station in sector %s. Arlenians us it as a base for mining and a place for gambling.\n\nI could set a waypoint there for you if you want...",stationBorie:getSectorName()),
					string.format("You can find Borie in sector %s. It's a small mining and gambling station.\n\nShould I set a waypoint on Borie for you?",stationBorie:getSectorName()),
					string.format("Borie is in sector %s. It's a small station. It's primary purpose is as a base for mining, but the Arlenians also do some gambling on Borie.\n\nDo you want a waypoint placed on Borie?",stationBorie:getSectorName()),
				}
				setCommsMessage(tableSelectRandom(borie_info))
				local yes_waypoint_borie_prompt = {
					"Yes",
					"Yes, please set a waypoint for Borie",
					"Yes, a waypoint on Borie would be great",
					"A Borie waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_borie_prompt),function()
					local sx, sy = stationBorie:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local borie_waypoint_set = {
						string.format("Waypoint %i set on station Borie",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Borie for you",comms_source:getWaypointCount()),
						string.format("Borie now has waypoint %i set on it",comms_source:getWaypointCount()),
						string.format("Waypoint %i set for station Borie",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(borie_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		if stationLurive ~= nil and stationLurive:isValid() then
			addCommsReply(string.format("Lurive in %s",stationLurive:getSectorName()),function()
				local lurive_info = {
					string.format("Lurive is located in %s. It is a small station conducting mining operations and research.\n\nWould you like a waypoint set on Lurive?",stationLurive:getSectorName()),
					string.format("Lurive is a small station in sector %s. It conducts mining operations as well as research.\n\nI could set a waypoint there if you wish...",stationLurive:getSectorName()),
					string.format("You'll find Lurive in sector %s. It's a small station where mining and research occurs.\n\nShould I set a waypoint on Lurive for you?",stationLurive:getSectorName()),
					string.format("Lurive is in sector %s. It's a small sation. Purpose: mining and research.\n\nDo you want a waypoint placed on Lurive?",stationLurive:getSectorName()),
				}
				setCommsMessage(tableSelectRandom(lurive_info))
				local yes_waypoint_lurive_prompt = {
					"Yes",
					"Yes, please set a waypoint for Lurive",
					"Yes, a waypoint on Lurive would be great",
					"A Lurive waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_lurive_prompt),function()
					local sx, sy = stationLurive:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local lurive_waypoint_set = {
						string.format("Waypoint %i set on station Lurive",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Lurive for you",comms_source:getWaypointCount()),
						string.format("Lurive now has waypoint %i set on it",comms_source:getWaypointCount()),
						string.format("Waypoint %i set for station Lurive",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(lurive_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		if stationVilairre ~= nil and stationVilairre:isValid() then
			addCommsReply(string.format("Vilairre currently in %s",stationVilairre:getSectorName()), function()
				local vilairre_info = {
					string.format("Vilairre is currently located in %s. It is a small station that handles communication and administration for area operations. It orbits the planet named Wilaux. Wilaux orbits star Balinor in sector T-13.\n\nWould you like a waypoint set on Vilairre?",stationVilairre:getSectorName()),
					string.format("Vilairre is a small station currently in sector %s. It handles communication and administration for various area operations. It is in orbit around planet Wilaux which is in turn orbiting Balinor in sector T-13.\n\nI could set a waypoint on Vilairre if you wish...",stationVilairre:getSectorName()),
					string.format("You'll find Vilairre is currently located in sector %s. It's a small station handling communication and administration. It orbits Wilaux which orbits Balinor in sector T-13.\n\nShould I set a waypoint on Vilairre for you?",stationVilairre:getSectorName()),
					string.format("Vilairre is currently in sector %s. It's a small station. It handles communication and administration. It orbits planet Wilaux. Wilaux orbits star Balinor in sector T-13.\n\nDo you want me to place a waypoint on Vilairre?",stationVilairre:getSectorName()),
				}
				setCommsMessage(tableSelectRandom(vilairre_info))
				local yes_waypoint_vilairre_prompt = {
					"Yes",
					"Yes, please set a waypoint for Vilairre",
					"Yes, a waypoint on Vilairre would be great",
					"A Vilairre waypoint would help. Please proceed",
				}
				addCommsReply(tableSelectRandom(yes_waypoint_vilairre_prompt),function()
					local sx, sy = stationVilairre:getPosition()
					comms_source:commandAddWaypoint(sx, sy)
					local vilairre_waypoint_set = {
						string.format("Waypoint %i set on station Vilairre. Since Vilairre orbits Wilaux, this waypoint will become rapidly outdated",comms_source:getWaypointCount()),
						string.format("I set waypoint %i on station Vilairre. This waypoint will become rapidly outdated since Vilairre orbits Wilaux.",comms_source:getWaypointCount()),
						string.format("Vilairre now has waypoint %i set on it. Remember, this waypoint will be outdated shortly since the station is in motion.",comms_source:getWaypointCount()),
						string.format("Waypoint %i has been set for station Vilairre. Note: the waypoint will not move with Vilairre, so it will soon be inaccurate.",comms_source:getWaypointCount()),
					}
					setCommsMessage(tableSelectRandom(vilairre_waypoint_set))
					addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
					addCommsReply("Back to station communication", commsStation)
				end)
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back to station communication", commsStation)
			end)
		end
		addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
		addCommsReply("Back to station communication", commsStation)
	end)
end
function influenceEnemyDiscussion(calling_function)
	addCommsReply("Explain influencing enemies", function()
		setCommsMessage("--Tenacious Translator 2--     Introductory Training Module\n\nCUF upgraded their ships' communications systems offering relay officers greater flexibility and opportunity when communicating with enemy ships. Features include updated protocols for common enemies (fewer reasons to ignore you), seamless language translation including idioms and integrated reputation usage.")
		addCommsReply("Why do I sometimes get 'No Reply' from enemy ships?", function()
			setCommsMessage("No Reply is when the ship being contacted does not engage their communications system. There's not much Tenacious Translator 2 can do if the ship chooses not to respond. However, the enemy protocol upgrades reduce the chance of this happening.")
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back", commsStation)
		end)
		addCommsReply("Can I try muliple times?", function()
			setCommsMessage("Yes, but each time you try, it irritates the enemy vessel and eventually they simply won't respond. There's not a hard and fast rule about how many times you can try.")
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back", commsStation)
		end)
		addCommsReply("The first option looks insulting", function()
			setCommsMessage("Yes, the first option listed is designed to anger the enemy into attacking you instead of doing whatever it is they are currently doing. Generally, this option has the greatest chance of succeeding. It has obvious consequences if successful, though.")
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back", commsStation)
		end)
		addCommsReply("What do the other options mean?", function()
			setCommsMessage("The options after the first option allow the Relay officer to attempt to influence the enemy to take different actions. Different factions have different susceptibilities to the options presented.")
			addCommsReply("Stop aggression", function()
				setCommsMessage("Successfully persuading an enemy with this option results in the enemy stopping their firing and any tactical maneuvering. You'll see this option labeled with this prompt:\nStop your aggression!")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("Cease Fire", function()
				setCommsMessage("If the enemy agrees, its IFF will switch over to Independent preventing mutual weapons targeting by the enemy and you. This option uses the following prompt:\nWe propose a cease fire agreement")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("Retreat", function()
				setCommsMessage("Should you convince the enemy ship with this option, they'll leave the area without attacking. This option is labeled:\nI strongly suggest you retreat immediately.")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("Defect", function()
				setCommsMessage("Use this option if you want to convince the enemy ship to defect from their faction to your faction. It's labeled:\nJoin us in our worthy cause.")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back",commsStation)
		end)
		addCommsReply("Does negotiating actually work?",function()
			setCommsMessage("The testing team for Tenacious Translator 2 proved its effectiveness and success through numerous trials. However, there were observed cases where the enemy ships reverted back to their original orders, so users are cautioned to maintain vigilance. Trials also revealed that things like distance, invested reputation, enemy ship damage and target lock may also influence the enemy ship's decision.")
			addCommsReply("How does distance influence the enemy ship?",function()
				setCommsMessage("If you're within 20 units of the enemy ship, it should not matter, but beyond that, the further away you are, the less impact you have on the enemy.")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("What's this about reputation?",function()
				setCommsMessage("Through subtle use of tone, word choice and subliminal messaging, Tenacious Translator 2 can positively influence the enemy decision when you exert your reputation through the software. When you initiate contact, you may choose to inject your reputation into your communication. If you don't wish to spend your reputation, choose 0. The effectiveness of reputation on the negotiation varies from faction to faction.")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("What about ship damage?",function()
				setCommsMessage("When the enemy ship is damaged, the stress of the situation often makes them more receptive to the Relay officer's persuasion. The Tenacious Translator 2 test team particularly enjoyed field testing this aspect.")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			addCommsReply("Can target lock really influence the enemy ship?",function()
				setCommsMessage("It generally has a positive influence. The only exception is when using the defect option (surprise, surprise).")
				influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
				addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
				addCommsReply("Back", commsStation)
			end)
			influenceEnemyDiscussion({identifier=interactiveUndockedStationCommsMeat,name="interactive relay officer"})
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			addCommsReply("Back", commsStation)
		end)
		addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
		addCommsReply("Back",commsStation)
	end)
end
--	docked communication functions
function handleDockedState()
	local oMsg = ""
	local friendly_station_greeting_prompt = {
		{thresh = 96,	text = string.format(_("station-comms","Hello, space traveler! It's a pleasure to see %s docking with us. How can we make your stay on %s more comfortable?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 92,	text = string.format(_("station-comms","Greetings, cosmic colleague! %s's docking is a cause for celebration here on %s. Any messages or updates to share?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 88,	text = string.format(_("station-comms","Good day, starfaring friend! Your arrival is like a cosmic reunion for %s. Any tales from your travels?"),comms_target:getCallSign())},
		{thresh = 84,	text = string.format(_("station-comms","Salutations, fellow communicator! %s has reached %s safe and sound. Anything exciting to share from your journey?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 80,	text = string.format(_("station-comms","Hello there! Welcome to %s. It's fantastic to have you on board."),comms_target:getCallSign())},
		{thresh = 76,	text = string.format(_("station-comms","Hello, astral envoy! %s has made a stellar entrance. Any interesting discoveries on your voyage to %s?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 72,	text = string.format(_("station-comms","Salutations, space traveler! %s's arrival marks another chapter in %s's cosmic adventures. How can we assist you today?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 68,	text = string.format(_("station-comms","Welcome, %s! It's a pleasure to see you docking with %s. How's the cosmic voyage treating you?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 64,	text = string.format(_("station-comms","Hello there, %s! Your arrival brings a new energy to %s. How was your journey?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 60,	text = string.format(_("station-comms","Greetings, %s! Welcome to our space station. It's an honor to have you on board."),comms_source:getCallSign())},
		{thresh = 56,	text = string.format(_("station-comms","Hello, relay officer. I suppose we should acknowledge the docking of %s, as unremarkable as it may be."),comms_source:getCallSign())},
		{thresh = 52,	text = string.format(_("station-comms","Welcome, spacefaring communicator. %s docks, and the cosmos barely flinches. How typical."),comms_source:getCallSign())},
		{thresh = 48,	text = string.format(_("station-comms","Ah, the celestial messenger has arrived. Do enlighten us with tales of %s's travels, if you must."),comms_source:getCallSign())},
		{thresh = 44,	text = string.format(_("station-comms","Well, well, if it isn't %s. I trust your journey was at least mildly tolerable."),comms_source:getCallSign())},
		{thresh = 40,	text = string.format(_("station-comms","Ah, the starship %s graces us with its presence. How quaint. Welcome to our humble space station."),comms_source:getCallSign())},
		{thresh = 36,	text = string.format(_("station-comms","Welcome, spacefaring communicator. I hope %s's visit won't disrupt %s's delicate equilibrium too much."),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 32,	text = string.format(_("station-comms","Salutations, celestial correspondent. %s's docking disrupted our routine. What urgent message do you bring, if any?"),comms_source:getCallSign())},
		{thresh = 28,	text = string.format(_("station-comms","Hello there, %s. Your arrival was as eagerly anticipated as a space debris collision. What's the news?"),comms_source:getCallSign())},
		{thresh = 24,	text = string.format(_("station-comms","Well, look who decided to drop by. What cosmic inconvenience brings %s to %s today?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 20,	text = string.format(_("station-comms","Oh, joy. The starship %s has graced us with their presence. What brings you here?"),comms_source:getCallSign())},
		{thresh = 16,	text = string.format(_("station-comms","Greetings, stellar correspondent. %s's docking is a source of mild irritation. What cosmic drama unfolds now?"),comms_source:getCallSign())},
		{thresh = 12,	text = string.format(_("station-comms","Welcome aboard, cosmic messenger. %s's docking better have a good reason. We have enough on our plate without your cosmic theatrics."),comms_source:getCallSign())},
		{thresh = 8,	text = string.format(_("station-comms","Hello, starbound emissary. %s's presence is less of a pleasure and more of a cosmic headache. What brings you to %s?"),comms_source:getCallSign(),comms_target:getCallSign())},
		{thresh = 4,	text = string.format(_("station-comms","Salutations, interstellar nuisance. %s's docking is the last thing we needed. What pressing crisis are you here to address?"),comms_source:getCallSign())},
	}
	local prompt_index = #friendly_station_greeting_prompt
	for i,prompt in ipairs(friendly_station_greeting_prompt) do
		if comms_target.comms_data.friendlyness > prompt.thresh then
			prompt_index = i
			break
		end
	end
	local prompt_pool = {}
	local lo = prompt_index - 2
	local hi = prompt_index + 2
	if prompt_index >= (#friendly_station_greeting_prompt - 2) then
		lo = #friendly_station_greeting_prompt - 4
		hi = #friendly_station_greeting_prompt
	elseif prompt_index <= 3 then
		lo = 1
		hi = 5
	end
	for i=lo,hi do
		table.insert(prompt_pool,friendly_station_greeting_prompt[i])
	end
	local prompt = tableSelectRandom(prompt_pool)
	oMsg = string.format("%s Communications Portal\n%s",comms_target:getCallSign(),prompt.text)
	setCommsMessage(oMsg)
	local interactive = false
	local no_relay_panic_responses = {
		"No communication officers available due to station emergency.",
		"Relay officers unavailable during station emergency.",
		"Relay officers reassigned for station emergency.",
		"Station emergency precludes response from relay officer.",
	}
	if comms_target:areEnemiesInRange(panic_range*1.5) then
		if comms_target.comms_data.friendlyness > 10 then
			oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(no_relay_panic_responses))
		end
	elseif comms_target:areEnemiesInRange(panic_range*2) then
		if comms_target.comms_data.friendlyness > 70 then
			local quick_relay_responses = {
				"Please be quick. Sensors detect enemies.",
				"I have to go soon since there are enemies nearby.",
				"Talk fast. Enemies approach.",
				"Enemies are coming so talk fast.",
			}
			oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(quick_relay_responses))
			interactive = true
		else
			if comms_target.comms_data.friendlyness > 20 then
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(no_relay_panic_responses))
			end
		end
	elseif comms_target:areEnemiesInRange(panic_range*2.5) then
		if comms_target.comms_data.friendlyness > 20 then
			if comms_target.comms_data.friendlyness > 60 then
				local distracted_units_responses = {
					string.format("Please forgive us if we seem distracted. Our sensors detect enemies within %i units",math.floor(panic_range*2.5/1000)),
					string.format("Enemies at %i units. Things might get busy soon. Business?",math.floor(panic_range*2.5/1000)),
					string.format("A busy day here at %s: Enemies are %s units away and my boss is reviewing emergency procedures. I'm a bit distracted.",comms_target:getCallSign(),math.floor(panic_range*2.5/1000)),
					string.format("If I seem distracted, it's only because of the enemies showing up at %i units.",math.floor(panic_range*2.5/1000)),
				}
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(distracted_units_responses))
			elseif comms_target.comms_data.friendlyness > 25 then
				local distracted_responses = {
					"Please forgive us if we seem distracted. Our sensors detect enemies nearby.",
					string.format("Enemies are close to %s. We might get busy. Business?",comms_target:getCallSign()),
					"We're quite busy preparing for enemies: evaluating cross training, checking emergency procedures, etc. I'm a little distracted.",
					string.format("%s is likely going to be attacked soon. Everyone is running around getting ready, distracting me.",comms_target:getCallSign()),
				}
				oMsg = string.format(_("station-comms","%s\n%s"),oMsg,tableSelectRandom(distracted_responses))
			end
			interactive = true
		end
	else
		if comms_target:isFriendly(comms_source) then
			interactive = true
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 15 then
				interactive = true
			end
		end
	end
	if docked_gm_representative == nil or getScenarioTime() > docked_gm_representative + comms_fudge then
		if interactive then
			contactStationGMRepresentative()
		else
			contactStationGMRepresentative("Android")
		end
		docked_gm_representative = getScenarioTime()
	end
	setCommsMessage(oMsg)
	if android_docked_station_time == nil or getScenarioTime() > android_docked_station_time + comms_fudge then
		androidDockedStationComms()
		android_docked_station_time = getScenarioTime()
	end
	if interactive then
		if interactive_docked_station_time == nil or getScenarioTime() > interactive_docked_station_time + comms_fudge then
			interactiveDockedStationComms()
			interactive_docked_station_time = getScenarioTime()
		end
	end
end
function androidDockedStationComms()
	addCommsReply(_("station-comms","Automated station communication"),androidDockedStationCommsMeat)
end
function androidDockedStationCommsMeat()
	setCommsMessage(_("station-comms","Select:"))
	if android_docked_station_status_report == nil or getScenarioTime() > android_docked_station_status_report + comms_fudge then
		stationStatusReport({identifier=androidDockedStationCommsMeat,name="automated station communications"})
		android_docked_station_status_report = getScenarioTime()
	end
	if isAllowedTo(comms_target.comms_data.services.activatedefensefleet) then
		if android_docked_station_defense_fleet == nil or getScenarioTime() > android_docked_station_defense_fleet + comms_fudge then
			stationDefenseFleet({identifier=androidDockedStationCommsMeat,name="automated station communication"})
			android_docked_station_defense_fleet = getScenarioTime()
		end
	end
	if comms_source.goods ~= nil then
		local good_count = 0
		for good, good_quantity in pairs(comms_source.goods) do
			good_count = good_count + good_quantity
		end
		if good_count > 0 then
			if android_docked_station_give_goods == nil or getScenarioTime() > android_docked_station_give_goods + comms_fudge then
				local deposit_goods_prompt = {
					"Place goods in deposit hatch",
					"Put goods in hatch marked 'deposits'",
					"Insert goods in external deposit hatch",
					string.format("Put goods in %s's external storage facility",comms_target:getCallSign()),
				}
				addCommsReply(tableSelectRandom(deposit_goods_prompt),giveGoodsToStation)
				android_docked_station_give_goods = getScenarioTime()
			end
		end
	end
	if android_docked_station_back == nil or getScenarioTime() > android_docked_station_back + comms_fudge then
		addCommsReply(_("Back"), commsStation)	--problem child
		android_docked_station_back = getScenarioTime()
	end
end
function giveGoodsToStation()
	local donate_prompt = {
		_("trade-comms","What should we give to the station?"),
		_("trade-comms","What should we give to the station out of the goodness of our heart?"),
		_("trade-comms","What should we donate to the station?"),
		_("trade-comms","What can we give the station that will help them the most?"),
	}
	setCommsMessage(tableSelectRandom(donate_prompt))
	local goods_to_give_count = 0
	for good, good_quantity in pairs(comms_source.goods) do
		if good_quantity > 0 then
			goods_to_give_count = goods_to_give_count + 1
			addCommsReply(good_desc[good], function()
				string.format("")
				comms_source.goods[good] = comms_source.goods[good] - 1
				comms_source.cargo = comms_source.cargo + 1
				local want_it = false
				if comms_target.comms_data.buy ~= nil then
					for good_buy, price in pairs(comms_target.comms_data.buy) do
						if good == good_buy then
							comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + price/2)
							comms_source:addReputationPoints(math.floor(price/2))
							want_it = true
							break
						end
					end
				end
				if not want_it then
					comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(3,9))
				end
				local donated_confirmed = {
					string.format("One %s donated",good_desc[good]),
					string.format("We donated one %s to %s",good_desc[good],comms_target:getCallSign()),
					string.format("We donated a %s",good_desc[good]),
					string.format("We provided %s with one %s",comms_target:getCallSign(),good_desc[good]),
				}
				setCommsMessage(tableSelectRandom(donated_confirmed))
				addCommsReply(_("Back"), commsStation)
			end)
		end
	end
	if give_goods_to_station_back == nil or getScenarioTime() > give_goods_to_station_back + comms_fudge then
		if goods_to_give_count == 0 then
			local out_of_goods = {
				"No more goods to donate",
				"There is nothing left in the cargo hold to donate",
				"You've got nothing more available to donate",
				"Your cargo hold is empty, so you cannot donate anything else",
			}
			setCommsMessage(tableSelectRandom(out_of_goods))
			addCommsReply(_("Back"), commsStation)
		end
		addCommsReply(_("Back"), commsStation)
		give_goods_to_station_back = getScenarioTime()
	end
end
function interactiveDockedStationComms()
	addCommsReply("Interact with station relay officer on duty",interactiveDockedStationCommsMeat)
end
function interactiveDockedStationCommsMeat()
	string.format("")
	local help_prompts = {
		"What can I do for you?",
		"How may I help?",
		"What do you need or want?",
		string.format("Go ahead, %s",comms_source:getCallSign()),
		string.format("How can %s serve you today?",comms_target:getCallSign()),
	}
	setCommsMessage(tableSelectRandom(help_prompts))
	if interactive_docked_station_information == nil or getScenarioTime() > interactive_docked_station_information + comms_fudge then
		local information_prompts = {
			"Information",
			"I need information",
			"Ask questions",
			"I need to know what you know",
		}
		addCommsReply(tableSelectRandom(information_prompts),stationInformation)
		interactive_docked_station_information = getScenarioTime()
	end
	if interactive_docked_station_dispatch == nil or getScenarioTime() > interactive_docked_station_dispatch + comms_fudge then
		local dispatch_prompts = {
			"Dispatch office",
			"Visit the dispatch office",
			"Check on possible missions",
			"Start or complete a mission",
		}
		addCommsReply(tableSelectRandom(dispatch_prompts),dispatchOffice)
		interactive_docked_station_dispatch = getScenarioTime()
	end
	if interactive_docked_station_restock == nil or getScenarioTime() > interactive_docked_station_restock + comms_fudge then
		local restock_prompts = {
			"Restock ship",
			string.format("Restock %s",comms_source:getCallSign()),
			"Refill ordnance and other things on the ship",
			string.format("Replenish supplies on %s",comms_source:getCallSign()),
		}
		addCommsReply(tableSelectRandom(restock_prompts),restockShip)
		interactive_docked_station_restock = getScenarioTime()
	end
	if interactive_docked_station_repair == nil or getScenarioTime() > interactive_docked_station_repair + comms_fudge then
		local repair_ship_prompts = {
			"Repair ship",
			string.format("Repair %s",comms_source:getCallSign()),
			"Fix broken things on the ship",
			string.format("Conduct repairs on %s",comms_source:getCallSign()),
		}
		addCommsReply(tableSelectRandom(repair_ship_prompts),repairShip)
		interactive_docked_station_repair = getScenarioTime()
	end
	if interactive_docked_station_enhance == nil or getScenarioTime() > interactive_docked_station_enhance + comms_fudge then
		local enhance_ship_prompts = {
			"Enhance ship",
			string.format("Enhance %s",comms_source:getCallSign()),
			"Make improvements to ship",
			string.format("Improve %s's capabilities",comms_source:getCallSign()),
		}
		addCommsReply(tableSelectRandom(enhance_ship_prompts),enhanceShip)
		interactive_docked_station_enhance = getScenarioTime()
	end
	if isAllowedTo(comms_target.comms_data.services.activatedefensefleet) then
		if interactive_docked_station_defense_fleet == nil or getScenarioTime() > interactive_docked_station_defense_fleet + comms_fudge then
			stationDefenseFleet()
			interactive_docked_station_defense_fleet = getScenarioTime()
		end
	end
	if comms_target == stationMonocle then
		if random(1,100) < 4 then
			if stationMonocle:getCallSign() == "Monocle" then
				stationMonocle:setCallSign("Arecibo III")
			else
				stationMonocle:setCallSign("Monocle III")
			end
   			stationMonocle.comms_data.history = string.format("Established in Nov2020, %s was intended to help Pastern observe asteroids in exchange for information about T'k'nol'g, suspected of biological research using human tissue illicitly obtained. The results of the research so far have yielded an addictive drug that in large enough doses not only kills the consumer but turns their body into a hyper-acidic blob that tends to eat through the hulls of ships and stations. Certain personnel on %s are tasked with watching for T'k'nol'g and reporting any additional sightings or gleaned information",stationMonocle:getCallSign(),stationMonocle:getCallSign())
		end
	end
	if planet_magnasol_star ~= nil and distance(planet_magnasol_star,comms_target) < 120000 then
		if interactive_docked_station_magnasol == nil or getScenarioTime() > interactive_docked_station_magnasol + comms_fudge then
			magnasolHeatDiscussion({identifier=interactiveDockedStationCommsMeat,name="interactive relay officer"})
			interactive_docked_station_magnasol = getScenarioTime()
		end
	end
	if comms_target == stationWormholeWrangler then
		wormholeWranglerOptions({identifier=interactiveDockedStationCommsMeat,name="interactive relay officer"})
	end
	if comms_target == stationHossenfelder then
		if interactive_docked_station_riptide_hossenfelder == nil or getScenarioTime() > interactive_docked_station_riptide_hossenfelder + comms_fudge then
			riptideHossenfelderDiscussion({identifier=interactiveDockedStationCommsMeat,name="interactive relay officer"})
			interactive_docked_station_riptide_hossenfelder = getScenarioTime()
		end
	end
	if comms_target == stationLafrina then
		if interactive_docked_station_lafrina == nil or getScenarioTime() > interactive_docked_station_lafrina + comms_fudge then
			lafrinaDiscussion({identifier=interactiveDockedStationCommsMeat,name="interactive relay officer"})
			interactive_docked_station_lafrina = getScenarioTime()
		end
	end
	if interactive_docked_station_unload_pods == nil or getScenarioTime() > interactive_docked_station_unload_pods + comms_fudge then
		if not comms_source:isEnemy(comms_target) then
			if comms_source:isFriendly(comms_target) then
				if comms_source.pods ~= comms_source.max_pods then
					unloadEscapePods()
				end
			else
				if comms_source.pods ~= comms_source.max_pods then
					if comms_target.comms_data.escape_pod_cost == nil then
						comms_target.comms_data.escape_pod_cost = math.random(8,12)
					end
					unloadEscapePods(comms_target.comms_data.escape_pod_cost)
				end
			end
		end
		interactive_docked_station_unload_pods = getScenarioTime()
	end
	if interactive_docked_station_goods_commerce == nil or getScenarioTime() > interactive_docked_station_goods_commerce + comms_fudge then
		local goods_commerce_prompts = {
			"Buy, sell, trade goods, etc.",
			"Buy, sell, trade, etc.",
			"Goods commerce, etc.",
			"Buy, sell, trade, donate, jettison goods",
		}
		addCommsReply(tableSelectRandom(goods_commerce_prompts),goodsCommerce)
		interactive_docked_station_goods_commerce = getScenarioTime()
	end
	if jump_corridor then
		if interactive_docked_station_jump_corridor == nil or getScenarioTime() > interactive_docked_station_jump_corridor + comms_fudge then
			jumpCorridor()
			interactive_docked_station_jump_corridor = getScenarioTime()
		end
	end
end
function stationInformation()
	local information_type_prompt = {
		_("station-comms","What kind of information do you want?"),
		_("station-comms","What kind of information do you need?"),
		_("station-comms","What kind of information do you seek?"),
		_("station-comms","What kind of information are you looking for?"),
		_("station-comms","What kind of information are you interested in?"),
	}
	setCommsMessage(tableSelectRandom(information_type_prompt))
	if interactive_docked_station_status_report == nil or getScenarioTime() > interactive_docked_station_status_report + comms_fudge then
		stationStatusReport({identifier=stationInformation,name="information"})
		interactive_docked_station_status_report = getScenarioTime()
	end
	if interactive_docked_station_talk == nil or getScenarioTime() > interactive_docked_station_talk + comms_fudge then
		stationTalk({identifier=stationInformation,name="information"})
		interactive_docked_station_talk = getScenarioTime()
	end
	if station_information_back_interactive == nil or getScenarioTime() > station_information_back_interactive + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		station_information_back_interactive = getScenarioTime()
	end
	if station_information_back_comms == nil or getScenarioTime() > station_information_back_comms + comms_fudge then
		addCommsReply("Back to station communication",commsStation)
		station_information_back_comms = getScenarioTime()
	end
end
function stationTalk(calling_function)
	local what_do_you_know_prompts = {
		"I'm not sure. What do you know?",
		"Not sure. Talk to me.",
		"Unsure. Help me out.",
		string.format("Well, what does the %s relay officer know?",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(what_do_you_know_prompts),function()
		local knowledge_talk_prompt = {
			_("station-comms","I know about the following:"),
			_("station-comms","I know these things:"),
			_("station-comms","I can tell you about the following:"),
			_("station-comms","We could talk about..."),
		}
		setCommsMessage(tableSelectRandom(knowledge_talk_prompt))
		local knowledge_count = 0
		if comms_target.comms_data.gossip ~= nil then
			if comms_target.comms_data.friendlyness > 50 + (difficulty * 15) then
				knowledge_count = knowledge_count + 1
				if station_talk_gossip == nil or getScenarioTime() > station_talk_gossip + comms_fudge then
					stationGossip(calling_function)
					station_talk_gossip = getScenarioTime()
				end
			end
		end
		if comms_target.comms_data.general_information ~= nil then
			knowledge_count = knowledge_count + 1
			if station_talk_general == nil or getScenarioTime() > station_talk_general + comms_fudge then
				stationGeneralInformation(calling_function)
				station_talk_general = getScenarioTime()
			end
		end
		if comms_target.comms_data.history ~= nil then
			knowledge_count = knowledge_count + 1
			if station_talk_history == nil or getScenarioTime() > station_talk_history + comms_fudge then
				stationHistory(calling_function)
				station_talk_history = getScenarioTime()
			end
		end
		if knowledge_count == 0 then
			local lack_of_knowledge_response = {
				_("station-comms","I have no additional knowledge."),
				_("station-comms","I don't know enough to talk about anything."),
				_("station-comms","Nothing interesting."),
			}
			setCommsMessage(tableSelectRandom(lack_of_knowledge_response))
		end
		if station_talk_caller_back == nil or getScenarioTime() > station_talk_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			station_talk_caller_back = getScenarioTime()
		end
		if station_talk_interactive_back == nil or getScenarioTime() > station_talk_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			station_talk_interactive_back = getScenarioTime()
		end
		if station_talk_comms_back == nil or getScenarioTime() > station_talk_comms_back + comms_fudge then
			addCommsReply("Back to station communication",commsStation)
			station_talk_comms_back = getScenarioTime()
		end
	end)
end
function stationGossip(calling_function)
	local gossip_prompts = {
		"Gossip",
		"What dirty little secrets can you share?",
		"I'm looking for inside information",
		"Got any juicy tidbits?",
	}
	addCommsReply(tableSelectRandom(gossip_prompts), function()
		setCommsMessage(comms_target.comms_data.gossip)
		if station_gossip_caller_back == nil or getScenarioTime() > station_gossip_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			station_gossip_caller_back = getScenarioTime()
		end
		if station_gossip_interactive_back == nil or getScenarioTime() > station_gossip_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			station_gossip_interactive_back = getScenarioTime()
		end
		if station_gossip_comms_back == nil or getScenarioTime() > station_gossip_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			station_gossip_comms_back = getScenarioTime()
		end
	end)
end
function stationGeneralInformation(calling_function)
	local general_information_prompts = {
		"General information",
		"Regular information",
		"Standard information",
		"The usual information",
	}
	addCommsReply(tableSelectRandom(general_information_prompts), function()
		setCommsMessage(comms_target.comms_data.general_information)
		if station_general_caller_back == nil or getScenarioTime() > station_general_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			station_general_caller_back = getScenarioTime()
		end
		if station_general_interactive_back == nil or getScenarioTime() > station_general_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			station_general_interactive_back = getScenarioTime()
		end
		if station_general_comms_back == nil or getScenarioTime() > station_general_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			station_general_comms_back = getScenarioTime()
		end
	end)
end
function stationHistory(calling_function)
	local history_prompts = {
		"Station history",
		"Station historical archives",
		string.format("%s history",comms_target:getCallSign()),
		string.format("Historical information on %s",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(history_prompts), function()
		setCommsMessage(comms_target.comms_data.history)
		if station_history_caller_back == nil or getScenarioTime() > station_history_caller_back + comms_fudge then
			addCommsReply(string.format("Back to %s",calling_function.name),calling_function.identifier)
			station_history_caller_back = getScenarioTime()
		end
		if station_history_interactive_back == nil or getScenarioTime() > station_history_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			station_history_interactive_back = getScenarioTime()
		end
		if station_history_comms_back == nil or getScenarioTime() > station_history_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			station_history_comms_back = getScenarioTime()
		end
	end)
end
function dispatchOffice()
	local mission_select_prompts = {
		"Which of these missions and/or tasks are you interested in?",
		"Are you interested in any of thises missions/tasks?",
		"You may select from one of these missions or tasks:",
		"Do any of these missions or tasks interest you?",
	}
	setCommsMessage(tableSelectRandom(mission_select_prompts))
	local improvements = {}
	local msg = ""
	msg, improvements = catalogImprovements(msg)
	if #improvements > 0 and (comms_target.comms_data.friendlyness > 33 or comms_source:isDocked(comms_target)) then
		improveStationService(improvements)
	end
	local mission_options_presented_count = #improvements
	local transport_and_cargo_mission_count = transportAndCargoMissions()
	mission_options_presented_count = mission_options_presented_count + transport_and_cargo_mission_count
	if mission_options_presented_count == 0 then
		local no_missions_responses = {
			"No missions or tasks available here.",
			string.format("No missions or tasks are available here at %s.",comms_target:getCallSign()),
			string.format("%s has no missions or tasks available.",comms_target:getCallSign()),
			"There are currently no missions or tasks available here.",
		}
		setCommsMessage(tableSelectRandom(no_missions_responses))
	end
	if dispatch_interactive_back == nil or getScenarioTime() > dispatch_interactive_back + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		dispatch_interactive_back = getScenarioTime()
	end
	if dispatch_comms_back == nil or getScenarioTime() > dispatch_comms_back + comms_fudge then
		addCommsReply("Back to station communications",commsStation)
		dispatch_comms_back = getScenarioTime()
	end
end
function transportAndCargoMissions()
	local mission_character = nil
	local mission_type = nil
	local mission_options_presented_count = 0
	if comms_source.transport_mission ~= nil then
		if comms_source.transport_mission.destination ~= nil and comms_source.transport_mission.destination:isValid() then
			if comms_source.transport_mission.destination == comms_target then
				mission_options_presented_count = mission_options_presented_count + 1
				local who_destination_prompts = {
					string.format("Deliver %s to %s",comms_source.transport_mission.character.name,comms_target:getCallSign()),
					string.format("Escort %s off of %s",comms_source.transport_mission.character.name,comms_source:getCallSign()),
					string.format("Direct %s off the ship to %s",comms_source.transport_mission.character.name,comms_target:getCallSign()),
					string.format("Inform %s of arrival at %s",comms_source.transport_mission.character.name,comms_target:getCallSign()),
				}
				addCommsReply(tableSelectRandom(who_destination_prompts),function()
					if not comms_source:isDocked(comms_target) then
						local stay_docked_to_disembark = {
							"You need to stay docked for that action.",
							string.format("You need to stay docked for %s to disembark.",comms_source.transport_mission.character.name),
							string.format("You must stay docked long enough for %s to get off of %s on to station %s.",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_target:getCallSign()),
							string.format("You undocked before %s could get off the ship.",comms_source.transport_mission.character.name),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_disembark))
						return mission_options_presented_count
					end
					local thanks_for_ride_responses = {
						string.format("%s disembarks at %s and thanks you",comms_source.transport_mission.character.name,comms_target:getCallSign()),
						string.format("As %s leaves %s at %s, they turn and say, 'Thanks for the ride.'",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_target:getCallSign()),
						string.format("%s thanks you as they walk away from %s down the short connecting tunnel to %s.",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_target:getCallSign()),
						string.format("%s disembarks at %s. You hear, 'I'll miss %s,' as footsteps echo back to %s.",comms_source.transport_mission.character.name,comms_target:getCallSign(),comms_source:getCallSign(),comms_source:getCallSign()),
					}
					setCommsMessage(tableRemoveRandom(thanks_for_ride_responses))
					comms_source:addReputationPoints(comms_source.transport_mission.reward)
					if comms_target.residents == nil then
						comms_target.residents = {}
					end
					table.insert(comms_target.residents,comms_source.transport_mission.character)
					comms_source.transport_mission = nil
					addCommsReply(_("Back"), commsStation)
				end)
			end
		else
			local alternate_disembarkation = {
				string.format("%s disembarks at %s because %s has been destroyed. You receive %s reputation for your efforts.",comms_source.transport_mission.character.name,comms_target:getCallSign(),comms_source.transport_mission.destination_name,math.floor(comms_source.transport_mission.reward/2)),
				string.format("%s leaves %s here at %s due to the destruction of %s. You still get %s reputation.",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_target:getCallSign(),comms_source.transport_mission.destination_name,math.floor(comms_source.transport_mission.reward/2)),
				string.format("%s, %s's original destination, has been destroyed. %s disembarks here. You get %s reputation for trying.",comms_source.transport_mission.destination_name,comms_source.transport_mission.character.name,comms_source.transport_mission.character.name,math.floor(comms_source.transport_mission.reward/2)),
				string.format("Since %s has been destroyed, %s gets off here at %s. Your reputation goes up by %s.",comms_source.transport_mission.destination_name,comms_source.transport_mission.character.name,comms_target:getCallSign(),math.floor(comms_source.transport_mission.reward/2)),
			}
			comms_source:addToShipLog(tableRemoveRandom(alternate_disembarkation),"Yellow")
			comms_source:addReputationPoints(math.floor(comms_source.transport_mission.reward/2))
			if comms_target.residents == nil then
				comms_target.residents = {}
			end
			table.insert(comms_target.residents,comms_source.transport_mission.character)
			comms_source.transport_mission = nil
		end
	else	--transport mission is nil
		if comms_target.transport_mission == nil then
			mission_character = tableRemoveRandom(characters)	--character_names
			local mission_target = nil
			local reward = 0
			if mission_character ~= nil then
				mission_type = random(1,100)
				local destination_pool = {}
				local clean_list = true
				repeat
					clean_list = true
					for i,station in ipairs(regionStations) do
						if station ~= nil then
							if not station:isValid() then
								regionStations[i] = regionStations[#regionStations]
								regionStations[#regionStations] = nil
								clean_list = false
								break
							end
						else
							regionStations[i] = regionStations[#regionStations]
							regionStations[#regionStations] = nil
							clean_list = false
							break
						end
					end
				until(clean_list)
				if mission_type < 50 then
					for _, station in ipairs(regionStations) do
						if station ~= nil and station:isValid() and station ~= comms_target and comms_source:isFriendly(station) then
							local station_type = station:getTypeName()
							if station_type == "Small Station" or station_type == "Medium Station" or station_type == "Large Station" or station_type == "Huge Station" then
								table.insert(destination_pool,station)
							end
						end
					end
					mission_target = tableRemoveRandom(destination_pool)
					if mission_target ~= nil then
						comms_target.transport_mission = {
							["destination"] = mission_target,
							["destination_name"] = mission_target:getCallSign(),
							["reward"] = 40,
							["character"] = mission_character,
						}
					else
						for _, station in ipairs(regionStations) do
							if station ~= nil and station:isValid() and station ~= comms_target and not comms_source:isEnemy(station) then
								table.insert(destination_pool,station)
							end
						end
						mission_target = tableRemoveRandom(destination_pool)
						if mission_target ~= nil then
							comms_target.transport_mission = {
								["destination"] = mission_target,
								["destination_name"] = mission_target:getCallSign(),
								["reward"] = 50,
								["character"] = mission_character,
							}
						end
					end
				else
					for _, station in ipairs(regionStations) do
						if station ~= nil and station:isValid() and station ~= comms_target and not comms_source:isFriendly(station) and not comms_source:isEnemy(station) then
							table.insert(destination_pool,station)
						end
					end
					mission_target = tableRemoveRandom(destination_pool)
					if mission_target ~= nil then
						comms_target.transport_mission = {
							["destination"] = mission_target,
							["destination_name"] = mission_target:getCallSign(),
							["reward"] = 50,
							["character"] = mission_character,
						}
					end
				end
			end
		else	--transport mission not nil
			if not comms_target.transport_mission.destination:isValid() then
				if comms_target.residents == nil then
					comms_target.residents = {}
				end
				table.insert(comms_target.residents,comms_target.transport_mission.character)
				comms_target.transport_mission = nil
			end
		end
		if comms_target.transport_mission ~= nil then
			mission_options_presented_count = mission_options_presented_count + 1
			local transport_passenger_prompts = {
				"Transport Passenger",
				"Give passenger a ride",
				string.format("Transport %s",comms_target.transport_mission.character.name),
				"Take on a passenger",
			}
			addCommsReply(tableSelectRandom(transport_passenger_prompts),function()
				local transport_info = {
					string.format("%s wishes to be transported to %s station %s in sector %s.",comms_target.transport_mission.character.name,comms_target.transport_mission.destination:getFaction(),comms_target.transport_mission.destination_name,comms_target.transport_mission.destination:getSectorName()),
					string.format("%s needs a ride to sector %s, specifically to %s station %s.",comms_target.transport_mission.character.name,comms_target.transport_mission.destination:getSectorName(),comms_target.transport_mission.destination:getFaction(),comms_target.transport_mission.destination_name),
					string.format("%s needs to get to station %s. It's a %s station in sector %s.",comms_target.transport_mission.character.name,comms_target.transport_mission.destination_name,comms_target.transport_mission.destination:getFaction(),comms_target.transport_mission.destination:getSectorName()),
					string.format("Can you take %s to %s station %s in sector %s?",comms_target.transport_mission.character.name,comms_target.transport_mission.destination:getFaction(),comms_target.transport_mission.destination_name,comms_target.transport_mission.destination:getSectorName()),
				}
				local transport_reputation_info = {
					string.format("Transporting %s would increase your reputation by %s.",comms_target.transport_mission.character.name,comms_target.transport_mission.reward),
					string.format("If you take %s to %s, you'd increase your reputation by %s.",comms_target.transport_mission.character.name,comms_target.transport_mission.destination_name,comms_target.transport_mission.reward),
					string.format("You'd get %s reputation if you transported %s.",comms_target.transport_mission.reward,comms_target.transport_mission.character.name),
					string.format("This transportation mission is worth %s reputation.",comms_target.transport_mission.reward),
				}
				local out = string.format("%s %s",tableSelectRandom(transport_info),tableSelectRandom(transport_reputation_info))
				setCommsMessage(out)
				local transport_agree_prompts = {
					string.format("Agree to transport %s to %s station %s",comms_target.transport_mission.character.name,comms_target.transport_mission.destination:getFaction(),comms_target.transport_mission.destination_name),
					string.format("Agree to transport mission to %s in %s",comms_target.transport_mission.destination_name,comms_target.transport_mission.destination:getSectorName()),
					string.format("%s will transport %s to %s in %s",comms_source:getCallSign(),comms_target.transport_mission.character.name,comms_target.transport_mission.destination_name,comms_target.transport_mission.destination:getSectorName()),
					string.format("Take on passenger transport mission to %s",comms_target.transport_mission.destination_name),
				}
				addCommsReply(tableSelectRandom(transport_agree_prompts),function()
					if not comms_source:isDocked(comms_target) then 
						local stay_docked_to_embark = {
							"You need to stay docked for that action.",
							string.format("You need to stay docked for %s to board.",comms_source.transport_mission.character.name),
							string.format("You must stay docked long enough for %s to board %s from station %s.",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_target:getCallSign()),
							string.format("You undocked before %s could come aboard.",comms_source.transport_mission.character.name),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_embark))
						return mission_options_presented_count
					end
					comms_source.transport_mission = comms_target.transport_mission
					comms_target.transport_mission = nil
					local boarding_confirmation = {
						string.format("You direct %s to guest quarters and say, 'Welcome aboard the %s'",comms_source.transport_mission.character.name,comms_source:getCallSign()),
						string.format("You welcome %s aboard the %s. 'Let me show you our guest quarters.'",comms_source.transport_mission.character.name,comms_source:getCallSign()),
						string.format("%s boards %s. 'Allow me to show you the guest quarters where you will stay for our journey to %s'",comms_source.transport_mission.character.name,comms_source:getCallSign(),comms_source.transport_mission.destination_name),
						string.format("%s is aboard. You show %s to %s's guest quarters.",comms_source.transport_mission.character.name,comms_source.transport_mission.character.name,comms_source:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(boarding_confirmation))
					addCommsReply(_("Back"), commsStation)
				end)
				local decline_transportation_prompts = {
					"Decline transportation request",
					"Refuse transportation request",
					"Decide against transportation mission",
					"Decline transportation mission",
				}
				addCommsReply(tableSelectRandom(decline_transportation_prompts),function()
					local refusal_responses = {
						string.format("You tell %s that you cannot take on any transportation missions at this time.",comms_target.transport_mission.character.name),
						string.format("You inform %s that you are unable to transport them at this time.",comms_target.transport_mission.character.name),
						string.format("'Sorry, %s. We can't transport you at this time.'",comms_target.transport_mission.character.name),
						string.format("'%s can't transport you right now, %s. Sorry about that. Good luck.'",comms_source:getCallSign(),comms_target.transport_mission.character.name),
					}
					local mission_gone = {
						"The offer disappears from the message board.",
						"The transport mission offer no longer appears on the message board.",
						string.format("%s removes the transport mission offer from the message board.",comms_target.transport_mission.character.name),
						string.format("%s gestures and the transport mission offer disappears from the message board.",comms_target.transport_mission.character.name),
					}
					if random(1,5) <= 1 then
						setCommsMessage(string.format("%s %s",tableSelectRandom(refusal_responses),tableSelectRandom(mission_gone)))
						comms_target.transport_mission = nil
					else
						setCommsMessage(string.format("%s",tableSelectRandom(refusal_responses)))
					end
					addCommsReply(_("Back"), commsStation)
				end)
				addCommsReply(_("Back"), commsStation)
			end)
		end
	end
	mission_character = nil
	if comms_source.cargo_mission ~= nil then
		if comms_source.cargo_mission.loaded then
			if comms_source.cargo_mission.destination ~= nil and comms_source.cargo_mission.destination:isValid() then
				if comms_source.cargo_mission.destination == comms_target then
					mission_options_presented_count = mission_options_presented_count + 1
					local cargo_delivery_prompts = {
						string.format("Deliver cargo to %s on %s",comms_source.cargo_mission.character.name,comms_target:getCallSign()),
						string.format("Give cargo to %s here on %s",comms_source.cargo_mission.character.name,comms_target:getCallSign()),
						string.format("Offload %s's cargo to station %s",comms_source.cargo_mission.character.name,comms_target:getCallSign()),
						string.format("Unload cargo to %s and inform %s",comms_target:getCallSign(),comms_source.cargo_mission.character.name),
					}
					addCommsReply(tableSelectRandom(cargo_delivery_prompts),function()
						if not comms_source:isDocked(comms_target) then 
							local stay_docked_to_deliver = {
								"You need to stay docked for that action.",
								string.format("You need to stay docked to deliver %s's cargo.",comms_source.transport_mission.character.name),
								string.format("You must stay docked long enough to unload %s's cargo to %s.",comms_source.transport_mission.character.name,comms_target:getCallSign()),
								string.format("You undocked before we could deliver cargo for %s.",comms_source.transport_mission.character.name),
							}
							setCommsMessage(tableSelectRandom(stay_docked_to_deliver))
							return
						end
						local cargo_delivery_confirmation_and_thanks = {
							string.format("%s thanks you for retrieving the cargo.",comms_source.cargo_mission.character.name),
							string.format("%s says, 'Thanks for bringing me my stuff.'",comms_source.cargo_mission.character.name),
							string.format("%s grabs the cargo and waves, clearly happy to have it.",comms_source.cargo_mission.character.name),
							string.format("%s takes receipt of the cargo and is clearly grateful.",comms_source.cargo_mission.character.name),
						}
						setCommsMessage(tableSelectRandom(cargo_delivery_confirmation_and_thanks))
						comms_source:addReputationPoints(comms_source.cargo_mission.reward)
						comms_source.cargo_mission = nil
						addCommsReply(_("Back"), commsStation)
					end)
				end
			else
				local station_destroyed_mid_mission = {
					string.format("Automated systems on %s have informed you of the destruction of station %s. Your mission to deliver cargo for %s to %s is no longer valid. You unloaded the cargo and requested the station authorities handle it for the family of %s. You received %s reputation for your efforts. The mission has been removed from your mission log.",comms_target:getCallSign(),comms_source.cargo_mission.destination_name,comms_source.cargo_mission.character.name,comms_source.cargo_mission.destination_name,comms_source.cargo_mission.character,math.floor(comms_source.cargo_mission.reward/2)),
					string.format("Records on %s inform you that %s has been destroyed. Thus, your cargo mission for %s is no longer valid. You unload the cargo for %s authorities to handle it for %s's family. You receive %s reputation for your efforts. The cargo mission has been removed from your mission log.",comms_target:getCallSign(),comms_source.cargo_mission.destination_name,comms_source.cargo_mission.character.name,comms_target:getCallSign(),comms_source.cargo_mission.character.name,math.floor(comms_source.cargo_mission.reward/2)),
					string.format("You see on %s's status board that %s was destroyed. So, you can't deliver %s's cargo. You unload it, asking %s's personnel to take care of it for the family of %s. You still get %s reputation. You remove the mission from your task list.",comms_target:getCallSign(),comms_source.cargo_mission.destination_name,comms_source.cargo_mission.character.name,comms_target:getCallSign(),comms_source.cargo_mission.character.name,math.floor(comms_source.cargo_mission.reward/2)),
					string.format("%s requests %s's cargo on behalf of their family. %s has been destroyed. You unload the cargo and post a message of condolences for %s's family. You receive %s reputation and delete the mission from your task list.",comms_target:getCallSign(),comms_source.cargo_mission.character.name,comms_source.cargo_mission.destination_name,comms_source.cargo_mission.character.name,math.floor(comms_source.cargo_mission.reward/2)),
				}
				comms_source:addToShipLog(tableSelectRandom(station_destroyed_mid_mission),"Yellow")
				comms_source:addReputationPoints(math.floor(comms_source.cargo_mission.reward/2))
				comms_source.cargo_mission = nil
			end
		else	--cargo not loaded
			if comms_source.cargo_mission.origin ~= nil and comms_source.cargo_mission.origin:isValid() then
				if comms_source.cargo_mission.origin == comms_target then
					mission_options_presented_count = mission_options_presented_count + 1
					local mid_cargo_mission_pickup_prompts = {
						string.format("Pick up cargo for %s",comms_source.cargo_mission.character.name),
						string.format("Get cargo for %s",comms_source.cargo_mission.character.name),
						string.format("Load cargo from %s for %s",comms_target:getCallSign(),comms_source.cargo_mission.character.name),
						string.format("Load cargo on %s for %s",comms_source:getCallSign(),comms_source.cargo_mission.character.name),
					}
					addCommsReply(tableSelectRandom(mid_cargo_mission_pickup_prompts),function()
						if not comms_source:isDocked(comms_target) then
							local stay_docked_to_get_cargo = {
								"You need to stay docked for that action.",
								string.format("You need to stay docked to get %s's cargo.",comms_source.transport_mission.character.name),
								string.format("You must stay docked long enough to load %s's cargo on %s.",comms_source.transport_mission.character.name,comms_source:getCallSign()),
								string.format("You undocked before we could load cargo for %s.",comms_source.transport_mission.character.name),
							}
							setCommsMessage(tableSelectRandom(stay_docked_to_get_cargo))
							return
						end
						local cargo_loaded_confirmation = {
							string.format("The cargo for %s has been loaded on %s.",comms_source.cargo_mission.character.name,comms_source:getCallSign()),
							string.format("%s's cargo has been loaded from %s to %s.",comms_source.cargo_mission.character.name,comms_target:getCallSign(),comms_source:getCallSign()),
							string.format("You take receipt of cargo from %s destined for %s.",comms_target:getCallSign(),comms_source.cargo_mission.character.name),
							string.format("You load %s's cargo from %s",comms_source.cargo_mission.character.name,comms_target:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(cargo_loaded_confirmation))
						comms_source.cargo_mission.loaded = true
						addCommsReply(_("Back"), commsStation)
					end)
				end
			else
				local station_destroyed_before_getting_cargo = {
					string.format("Automated systems on %s have informed you of the destruction of station %s. Your mission to retrieve cargo for %s from %s is no longer valid and has been removed from your mission log.",comms_target:getCallSign(),comms_source.cargo_mission.origin_name,comms_source.cargo_mission.character.name,comms_source.cargo_mission.origin_name),
					string.format("Records on %s inform you that %s has been destroyed. Thus, your cargo retrieval mission for %s is no longer valid. It's been removed from your mission task list.",comms_target:getCallSign(),comms_source.cargo_mission.origin_name,comms_source.cargo_mission.character.name),
					string.format("You see on %s's status board that %s was destroyed. So, you can't pick up %s's cargo. You remove the mission from your task list.",comms_target:getCallSign(),comms_source.cargo_mission.origin_name,comms_source.cargo_mission.character.name),
					string.format("%s informs you that %s was destroyed. This invalidates your mission to get %s's cargo from %s. You delete the mission from your task list and send an explanatory message to %s",comms_target:getCallSign(),comms_source.cargo_mission.origin_name,comms_source.cargo_mission.character.name,comms_source.cargo_mission.origin_name,comms_source.cargo_mission.character.name),
				}
				comms_source:addToShipLog(tableSelectRandom(station_destroyed_before_getting_cargo),"Yellow")
				if comms_source.cargo_mission.destination:isValid() then
					table.insert(comms_source.cargo_mission.destination.residents,comms_source.cargo_mission.character)
				end
				comms_source.cargo_mission = nil
			end
		end
	else	--no cargo mission
		if comms_target.cargo_mission == nil then
			if comms_target.residents ~= nil then
				mission_character = tableRemoveRandom(comms_target.residents)
				local mission_origin = nil
				if mission_character ~= nil then
					mission_type = random(1,100)
					local origin_pool = {}
					if mission_type < 50 then
						for _, station in ipairs(regionStations) do
							if station ~= nil and station:isValid() and station ~= comms_target and comms_source:isFriendly(station) then
								table.insert(origin_pool,station)
							end
						end
						mission_origin = tableRemoveRandom(origin_pool)
						if mission_origin ~= nil then
							comms_target.cargo_mission = {
								["origin"] = mission_origin,
								["origin_name"] = mission_origin:getCallSign(),
								["destination"] = comms_target,
								["destination_name"] = comms_target:getCallSign(),
								["reward"] = 40,
								["character"] = mission_character,
							}
						else
							for _, station in ipairs(regionStations) do
								if station ~= nil and station:isValid() and station ~= comms_target and not comms_source:isEnemy(station) then
									table.insert(origin_pool,station)
								end
							end
							mission_origin = tableRemoveRandom(origin_pool)
							if mission_origin ~= nil then
								comms_target.cargo_mission = {
									["origin"] = mission_origin,
									["origin_name"] = mission_origin:getCallSign(),
									["destination"] = comms_target,
									["destination_name"] = comms_target:getCallSign(),
									["reward"] = 50,
									["character"] = mission_character,
								}
							end
						end
					else
						for _, station in ipairs(regionStations) do
							if station ~= nil and station:isValid() and station ~= comms_target and not comms_source:isEnemy(station) then
								table.insert(origin_pool,station)
							end
						end
						mission_origin = tableRemoveRandom(origin_pool)
						if mission_origin ~= nil then
							comms_target.cargo_mission = {
								["origin"] = mission_origin,
								["origin_name"] = mission_origin:getCallSign(),
								["destination"] = comms_target,
								["destination_name"] = comms_target:getCallSign(),
								["reward"] = 40,
								["character"] = mission_character,
							}
						end
					end
				end
			end
		else	--cargo mission exists
			if not comms_target.cargo_mission.origin:isValid() then
				table.insert(comms_target.residents,comms_target.cargo_mission.character)
				comms_target.cargo_mission = nil
			end
		end
		if comms_target.cargo_mission ~= nil then
			mission_options_presented_count = mission_options_presented_count + 1
			local retrieve_cargo_prompts = {
				"Retrieve Cargo",
				string.format("Retrieve cargo for %s",comms_target.cargo_mission.character.name),
				string.format("Get cargo from %s",comms_target.cargo_mission.origin_name),
				string.format("Get cargo for %s from %s",comms_target.cargo_mission.character.name,comms_target.cargo_mission.origin_name),
			}
			addCommsReply(tableSelectRandom(retrieve_cargo_prompts),function()
				local cargo_parameters = {
					string.format("%s wishes you to pick up cargo from %s station %s in sector %s and deliver it here.",comms_target.cargo_mission.character.name,comms_target.cargo_mission.origin:getFaction(),comms_target.cargo_mission.origin_name,comms_target.cargo_mission.origin:getSectorName()),
					string.format("%s wants to hire you to get cargo from %s station %s in %s and deliver it here (%s).",comms_target.cargo_mission.character.name,comms_target.cargo_mission.origin:getFaction(),comms_target.cargo_mission.origin_name,comms_target.cargo_mission.origin:getSectorName(),comms_target:getCallSign()),
					string.format("Mission: Get cargo from %s station %s in sector %s for %s and bring it back here.",comms_target.cargo_mission.origin:getFaction(),comms_target.cargo_mission.origin_name,comms_target.cargo_mission.origin:getSectorName(),comms_target.cargo_mission.character.name),
					string.format("Task: Get cargo for %s from %s and deliver it here. %s is a %s station in sector %s.",comms_target.cargo_mission.character.name,comms_target.cargo_mission.origin_name,comms_target.cargo_mission.origin_name,comms_target.cargo_mission.origin:getFaction(),comms_target.cargo_mission.origin:getSectorName()),
				}
				local cargo_mission_reputation = {
					string.format("Retrieving and delivering this cargo for %s would increase your reputation by %s.",comms_target.cargo_mission.character.name,comms_target.cargo_mission.reward),
					string.format("Getting this cargo from %s for %s would boost your reputation by %s.",comms_target.cargo_mission.origin_name,comms_target.cargo_mission.character.name,comms_target.cargo_mission.reward),
					string.format("Your reputation would go up by %s if you completed this cargo mission for %s.",comms_target.cargo_mission.reward,comms_target.cargo_mission.character.name),
					string.format("You would get %s reputation for getting cargo from %s for %s",comms_target.cargo_mission.reward,comms_target.cargo_mission.origin_name,comms_target.cargo_mission.character.name),
				}
				setCommsMessage(string.format("%s %s",tableSelectRandom(cargo_parameters),tableSelectRandom(cargo_mission_reputation)))
				local agree_to_cargo_mission = {
					string.format("Agree to retrieve cargo for %s",comms_target.cargo_mission.character.name),
					string.format("Sign up to get cargo for %s",comms_target.cargo_mission.character.name),
					string.format("Take on mission to get cargo for %s",comms_target.cargo_mission.character.name),
					string.format("Inform %s that %s will get their cargo",comms_target.cargo_mission.character.name,comms_source:getCallSign())
				}
				addCommsReply(tableSelectRandom(agree_to_cargo_mission),function()
					if not comms_source:isDocked(comms_target) then 
						local stay_docked_to_start_cargo_mission = {
							"You need to stay docked for that action.",
							string.format("You need to stay docked to agree to get %s's cargo.",comms_source.transport_mission.character.name),
							string.format("You must stay docked long enough to consent to %s's cargo mission.",comms_source.transport_mission.character.name),
							string.format("You undocked before we could agree to retrieve cargo for %s.",comms_source.transport_mission.character.name),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_start_cargo_mission))
						return
					end
					comms_source.cargo_mission = comms_target.cargo_mission
					comms_source.cargo_mission.loaded = false
					comms_target.cargo_mission = nil
					local cargo_agreement_confirmation = {
						string.format("%s thanks you and contacts station %s to let them know that %s will be picking up the cargo.",comms_source.cargo_mission.character.name,comms_source.cargo_mission.origin_name,comms_source:getCallSign()),
						string.format("%s contacts station %s to let them know that %s will be retrieving %s's cargo.",comms_source.cargo_mission.character.name,comms_source.cargo_mission.origin_name,comms_source:getCallSign(),comms_source.cargo_mission.character.name),
						string.format("%s says, 'Thanks %s. I'll let %s know you're picking up my cargo.'",comms_source.cargo_mission.character.name,comms_source:getCallSign(),comms_source.cargo_mission.origin_name),
						string.format("%s says, 'I'll let %s know you're coming for my cargo. Thank you %s.'",comms_source.cargo_mission.character.name,comms_source.cargo_mission.origin_name,comms_source:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(cargo_agreement_confirmation))
					addCommsReply(_("Back"), commsStation)
				end)
				local decline_cargo_mission = {
					"Decline cargo retrieval request",
					"Decline cargo mission",
					"Refuse cargo retrieval request",
					"Decide against cargo retrieval request",
				}
				addCommsReply(tableSelectRandom(decline_cargo_mission),function()
					local cargo_refusal_responses = {
						string.format("You tell %s that you cannot take on any cargo missions at this time.",comms_target.transport_mission.character.name),
						string.format("You inform %s that you are unable to get any cargo for them at this time.",comms_target.transport_mission.character.name),
						string.format("'Sorry, %s. We can't retrieve your cargo at this time.'",comms_target.transport_mission.character.name),
						string.format("'%s can't get cargo for you you right now, %s. Sorry about that. Good luck.'",comms_source:getCallSign(),comms_target.transport_mission.character.name),
					}
					local cargo_mission_gone = {
						"The offer disappears from the message board.",
						"The cargo mission offer no longer appears on the message board.",
						string.format("%s removes the cargo retrieval mission offer from the message board.",comms_target.transport_mission.character.name),
						string.format("%s gestures and the cargo mission offer disappears from the message board.",comms_target.transport_mission.character.name),
					}
					if random(1,5) <= 1 then
						setCommsMessage(string.format("%s %s",tableSelectRandom(cargo_refusal_responses),tableSelectRandom(cargo_mission_gone)))
						comms_target.cargo_mission = nil
					else
						setCommsMessage(tableSelectRandom(cargo_refusal_responses))
					end
					addCommsReply(_("Back"), commsStation)
				end)
				addCommsReply(_("Back"), commsStation)
			end)
		end
	end
	return mission_options_presented_count
end
function restockShip()
	comms_source.repairCrewCoolantReturn = {identifier=restockShip,name="restock ship"}
	local restock_type_prompt = {
		_("station-comms","What does your ship need to restock?"),
		_("station-comms","What kind of supplies do you need?"),
		_("station-comms","What type of resupply does your ship need?"),
		_("station-comms","What are you low on?"),
	}
	setCommsMessage(tableSelectRandom(restock_type_prompt))
	local missilePresence = 0
	for i, missile_type in ipairs(missile_types) do
		missilePresence = missilePresence + comms_source:getWeaponStorageMax(missile_type)
	end
	if missilePresence > 0 then
		if comms_target.comms_data.weapon_available == nil then
			print(comms_target:getCallSign(),"weapon_available is nil")
		else
			if 	(comms_target.comms_data.weapon_available.Nuke   and comms_source:getWeaponStorageMax("Nuke") > 0)   or 
				(comms_target.comms_data.weapon_available.EMP    and comms_source:getWeaponStorageMax("EMP") > 0)    or 
				(comms_target.comms_data.weapon_available.Homing and comms_source:getWeaponStorageMax("Homing") > 0) or 
				(comms_target.comms_data.weapon_available.Mine   and comms_source:getWeaponStorageMax("Mine") > 0)   or 
				(comms_target.comms_data.weapon_available.HVLI   and comms_source:getWeaponStorageMax("HVLI") > 0)   then
					if restock_ship_restock_ordnance == nil or getScenarioTime() > restock_ship_restock_ordnance + comms_fudge then
						restockOrdnance()
						restock_ship_restock_ordnance = getScenarioTime()
					end
			end
		end
	end	
	if comms_source:isFriendly(comms_target) then
		getRepairCrewFromStation("friendly")
		getCoolantFromStation("friendly")
		if comms_source.carrier_ship_inventory ~= nil then
			getReplacementFighterFromStation("friendly")
		end
	else
		getRepairCrewFromStation("neutral")
		getCoolantFromStation("neutral")
		if comms_source.carrier_ship_inventory ~= nil then
			getReplacementFighterFromStation("neutral")
		end
	end
	if restock_ship_interactive_back == nil or getScenarioTime() > restock_ship_interactive_back + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		restock_ship_interactive_back = getScenarioTime()
	end
	if restock_ship_comms_back == nil or getScenarioTime() > restock_ship_comms_back + comms_fudge then
		addCommsReply("Back to station communication",commsStation)
		restock_ship_comms_back = getScenarioTime()
	end
end
function restockOrdnance()
	local ordnance_restock_prompt = {
		"I need ordnance restocked",
		"Restock ordnance",
		string.format("%s needs more ordnance",comms_source:getCallSign()),
		string.format("Please provide ordnance for %s",comms_source:getCallSign()),
	}
	addCommsReply(tableSelectRandom(ordnance_restock_prompt), function()
		local ordnance_type_specification = {
			"What type of ordnance do you need?",
			"Specify the type of ordnance desired",
			string.format("Exactly what kind of ordnance does %s need?",comms_source:getCallSign()),
			string.format("Identify the ordnance type required for %s",comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(ordnance_type_specification))
		local prompts = {
			["Nuke"] = {
				_("ammo-comms","Can you supply us with some nukes?"),
				_("ammo-comms","We really need some nukes."),
				_("ammo-comms","Can you restock our nuclear missiles?"),
			},
			["EMP"] = {
				_("ammo-comms","Please restock our EMP missiles."),
				_("ammo-comms","Got any EMPs?"),
				_("ammo-comms","We need Electro-Magnetic Pulse missiles."),
			},
			["Homing"] = {
				_("ammo-comms","Do you have spare homing missiles for us?"),
				_("ammo-comms","Do you have extra homing missiles?"),
				_("ammo-comms","Please replenish our homing missiles."),
			},
			["Mine"] = {
				_("ammo-comms","We could use some mines."),
				_("ammo-comms","How about mines?"),
				_("ammo-comms","Got mines for us?"),
			},
			["HVLI"] = {
				_("ammo-comms","What about HVLI?"),
				_("ammo-comms","Could you provide HVLI?"),
				_("ammo-comms","We need High Velocity Lead Impactors."),
			},
		}
		for i, missile_type in ipairs(missile_types) do
			if comms_source:getWeaponStorageMax(missile_type) > 0 and comms_target.comms_data.weapon_available[missile_type] then
				addCommsReply(string.format(_("ammo-comms","%s (%d rep each)"),prompts[missile_type][math.random(1,#prompts[missile_type])],getWeaponCost(missile_type)), function()
					string.format("")
					handleWeaponRestock(missile_type)
					if restock_ordnance_restock_ship_back == nil or getScenarioTime() > restock_ordnance_restock_ship_back + comms_fudge then
						addCommsReply("Back to restock ship",restockShip)
						restock_ordnance_restock_ship_back = getScenarioTime()
					end
					if restock_ordnance_interactive_back == nil or getScenarioTime() > restock_ordnance_interactive_back + comms_fudge then
						addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
						restock_ordnance_interactive_back = getScenarioTime()
					end
					if restock_ordnance_comms_back == nil or getScenarioTime() > restock_ordnance_comms_back + comms_fudge then
						addCommsReply(_("Back to station communication"), commsStation)
						restock_ordnance_comms_back = getScenarioTime()
					end
				end)
			end
		end
		if restock_ordnance_restock_ship_back == nil or getScenarioTime() > restock_ordnance_restock_ship_back + comms_fudge then
			addCommsReply("Back to restock ship",restockShip)
			restock_ordnance_restock_ship_back = getScenarioTime()
		end
		if restock_ordnance_interactive_back == nil or getScenarioTime() > restock_ordnance_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			restock_ordnance_interactive_back = getScenarioTime()
		end
		if restock_ordnance_comms_back == nil or getScenarioTime() > restock_ordnance_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			restock_ordnance_comms_back = getScenarioTime()
		end
	end)
end
function handleWeaponRestock(weapon)
	local done_with_weapon_restock = false
    if not comms_source:isDocked(comms_target) then
		local stay_docked_for_weapons_restock = {
			"You need to stay docked for that action.",
			string.format("You need to stay docked to get weapon restock from %s.",comms_target:getCallSign()),
			string.format("You must stay docked long enough to receive ordnance restock from %s.",comms_target:getCallSign()),
			string.format("You undocked before we could load ordnance from %s.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(stay_docked_for_weapons_restock))
		done_with_weapon_restock = true
	end
    if not isAllowedTo(comms_target.comms_data.weapons[weapon]) and not done_with_weapon_restock then
    	local no_nukes_on_principle = {
    		"We do not deal in weapons of mass destruction.",
    		"We don't deal in nukes on principle.",
    		"We don't deal in nukes in protest of their misuse.",
    		"It's against our beliefs to deal in weapons of mass destruction.",
    	}
    	local no_emps_on_principle = {
    		"We do not deal in weapons of mass disruption.",
    		"It's against our beliefs to deal in weapons of mass disruption.",
    		"We don't deal in EMPs on principle.",
    		"We protest the use of EMPs, so we don't deal in them.",
    	}
    	local no_weapon_type_on_principle = {
    		"We do not deal in those weapons.",
    		"We do not deal in those weapons on principle.",
    		"Those weapons are anathema to us, so we don't deal in them.",
    		"We hate those weapons, so we don't deal in them.",
    	}
        if weapon == "Nuke" then setCommsMessage(tableSelectRandom(no_nukes_on_principle))
        elseif weapon == "EMP" then setCommsMessage(tableRemoveRandom(no_emps_on_principle))
        else setCommsMessage(tableSelectRandom(no_weapon_type_on_principle)) end
        done_with_weapon_restock = true
    end
    if not done_with_weapon_restock then
		local points_per_item = getWeaponCost(weapon)
		local item_amount = math.floor(comms_source:getWeaponStorageMax(weapon) * comms_target.comms_data.max_weapon_refill_amount[getFriendStatus()]) - comms_source:getWeaponStorage(weapon)
		if item_amount <= 0 then
			if weapon == "Nuke" then
				local full_on_nukes = {
					"All nukes are charged and primed for destruction.",
					"All nukes are already charged and primed for destruction.",
					"We double checked and all of your nukes are primed, charged and ready to destroy their targets.",
					"Every one of your nukes are already fully prepared for launch. Happy explosions to you!",
				}
				setCommsMessage(tableSelectRandom(full_on_nukes))
			else
				local full_on_ordnance = {
					"Sorry, sir, but you are as fully stocked as I can allow.",
					"Your magazine is already completely full.",
					"We can't give you any more because you are already fully loaded.",
					string.format("Sorry, but there is no more space on %s for this ordnance type.",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(full_on_ordnance))
			end
--			addCommsReply("Back to restock ship",restockShip)
--			addCommsReply(_("Back to station communication"), commsStation)
		else
			if comms_source:getReputationPoints() > points_per_item * item_amount then
				if comms_source:takeReputationPoints(points_per_item * item_amount) then
					comms_source:setWeaponStorage(weapon, comms_source:getWeaponStorage(weapon) + item_amount)
					if comms_source:getWeaponStorage(weapon) == comms_source:getWeaponStorageMax(weapon) then
						local restocked_on_ordnance = {
							"You are fully loaded and ready to explode things.",
							"You are fully restocked and ready to make things explode.",
							string.format("%s's %s magazine has been fully restocked",comms_source:getCallSign(),weapon),
							string.format("We made sure your %s magazine was completely restocked",weapon),
						}
						setCommsMessage(tableSelectRandom(restocked_on_ordnance))
					else
						local partial_ordnance_restock = {
							"We generously resupplied you with some weapon charges.",
							"We gave you some of the ordnance you requested",
							"You got some of the weapon charges you asked for.",
							"We were able to provide you with some of the ordnance you requested.",
						}
						local good_use = {
							"Put them to good use.",
							"Use them well.",
							"Make good use of them.",
							"Do the best you can with them.",
						}
						setCommsMessage(string.format("%s\n%s",tableSelectRandom(partial_ordnance_restock),tableSelectRandom(good_use)))
					end
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					done_with_weapon_restock = true
				end
			else
				if comms_source:getReputationPoints() > points_per_item then
					local complete_refill_unavailable = {
						string.format("You can't afford as many %ss as I'd like to provide to you",weapon),
						string.format("A full restock of %s costs more than your current reputation",weapon),
						string.format("You don't have enough reputation for a full restock of %s",weapon),
						string.format("%i reputation is not enough for a full restock of %s",math.floor(comms_source:getReputationPoints()),weapon),
					}
					setCommsMessage(tableSelectRandom(complete_refill_unavailable))
					local max_affordable = math.floor(comms_source:getReputationPoints()/points_per_item)
					for i=1,max_affordable do
						addCommsReply(string.format(_("ammo-comms","Get %i (%i x %i = %i reputation)"),i,i,item_amount,i*item_amount),function()
							string.format("")
							if comms_source:takeReputationPoints(i*item_amount) then
								comms_source:setWeaponStorage(weapon, comms_source:getWeaponStorage(weapon) + i)
								if comms_source:getWeaponStorage(weapon) == comms_source:getWeaponStorageMax(weapon) then
									local restocked_on_selected_ordnance = {
										"We loaded the ordnance you requested so you're ready to explode things.",
										string.format("We provided the ordnance requested (amount: %i) You are ready to make things explode.",i),
										string.format("%s's %s magazine has been restocked as requested (amount:%i)",comms_source:getCallSign(),weapon,i),
										string.format("We stocked your %s magazine (amount: %i)",weapon,i),
									}
									setCommsMessage(tableSelectRandom(restocked_on_selected_ordnance))
								else
									if i == 1 then
										local single_restock = {
											"We generously resupplied you with one weapon charge.",
											"We gave you one of the ordnance type you requested",
											"You got one weapon charge of the type you asked for.",
											"We were able to provide you with one of the ordnance type you requested.",
										}
										local one_good_use = {
											"Put it to good use.",
											"Use it well.",
											"Make good use of it.",
											"Do the best you can with it.",
										}
										setCommsMessage(string.format("%s\n%s",tableSelectRandom(single_restock),tableSelectRandom(one_good_use)))
									else
										local partial_numeric_ordnance_restock = {
											string.format("We generously resupplied you with %i weapon charges.",i),
											string.format("We gave you %i of the ordnance type you requested",i),
											string.format("You got %i of the weapon charges you asked for.",i),
											string.format("We were able to provide you with %i of the ordnance type you requested.",i),
										}
										local good_use = {
											"Put them to good use.",
											"Use them well.",
											"Make good use of them.",
											"Do the best you can with them.",
										}
										setCommsMessage(string.format("%s\n%s",tableSelectRandom(partial_numeric_ordnance_restock),tableSelectRandom(good_use)))
									end
								end
							else
								local insufficient_rep_responses = {
									"Insufficient reputation",
									"Not enough reputation",
									"You need more reputation",
									string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
									"You don't have enough reputation",
								}
								setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							end
							addCommsReply("Back to restock ship",restockShip)
							addCommsReply(_("Back to station communication"), commsStation)
						end)
					end
				else
					setCommsMessage(_("needRep-comms","Not enough reputation."))
--					addCommsReply("Back to restock ship",restockShip)
--					addCommsReply(_("Back to station communication"), commsStation)
				end
			end
		end
	end
end
function getRepairCrewFromStation(relationship)
	local presented_option = false
	if comms_target.comms_data.available_repair_crew == nil then
		comms_target.comms_data.available_repair_crew = math.random(0,5)
		comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66 = math.random(30,60)
		comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66 = math.random(45,90)
		comms_target.comms_data.available_repair_crew_cost_excess = math.random(15,30)
		comms_target.comms_data.available_repair_crew_cost_under_66 = math.random(15,30)
		print(comms_target:getCallSign(),"available repair crew:",comms_target.comms_data.available_repair_crew)
	end
	if comms_target.comms_data.available_repair_crew > 0 then	--station has repair crew available
		presented_option = true
		local get_repair_crew_prompts = {
			"Recruit repair crew member",
			"Hire repair crew member",
			"Get repair crew member",
			"Add crew member to repair team",
		}
		addCommsReply(tableSelectRandom(get_repair_crew_prompts),function()
			if comms_target.comms_data.crew_available_delay == nil or getScenarioTime() > comms_target.comms_data.crew_available_delay then
				local hire_cost = 0
				if comms_source:isFriendly(comms_target) then
					hire_cost = comms_target.comms_data.available_repair_crew_cost_friendly_needy_over_66
				else
					hire_cost = comms_target.comms_data.available_repair_crew_cost_neutral_needy_over_66
				end
				if comms_target.comms_data.friendlyness <= 66 then
					hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_under_66
				end
				if comms_source:getRepairCrewCount() >= comms_source.maxRepairCrew then
					hire_cost = hire_cost + comms_target.comms_data.available_repair_crew_cost_excess
				end
				local consider_repair_crew = {
					"We have a repair crew candidate for you to consider",
					"There's a repair crew candidate here for you to consider",
					"Consider hiring this repair crew candidate",
					"Would you like to hire this repair crew candidate?",
				}
				setCommsMessage(tableSelectRandom(consider_repair_crew))
				local recruit_repair_crew_prompt = {
					string.format("Recruit repair crew member for %i reputation",hire_cost),
					string.format("Hire repair crew member for %i reputation",hire_cost),
					string.format("Spend %i reputation to recruit repair crew member",hire_cost),
					string.format("Spend %i reuptation to hire repair crew member",hire_cost),
				}
				addCommsReply(tableSelectRandom(recruit_repair_crew_prompt), function()
					setCommsMessage("Repair crew escaped")
					if not comms_source:isDocked(comms_target) then
						local stay_docked_to_get_repair_crew = {
							"You need to stay docked for that action.",
							"You need to stay docked to hire repair crew.",
							string.format("You must stay docked long enough for your repair crew to board %s",comms_source:getCallSign()),
							string.format("You undocked before the repair crew you wanted to hire could come aboard from %s",comms_target:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_get_repair_crew))
						return
					end
					if not comms_source:takeReputationPoints(hire_cost) then
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					else
						comms_source:setRepairCrewCount(comms_source:getRepairCrewCount() + 1)
						comms_target.comms_data.available_repair_crew = comms_target.comms_data.available_repair_crew - 1
						if comms_target.comms_data.available_repair_crew <= 0 then
							comms_target.comms_data.new_repair_crew_delay = getScenarioTime() + random(200,500)
						end
						local repair_crew_hired = {
							"Repair crew member hired",
							"Repair crew member recruited",
							string.format("%s has a new repair crew member",comms_source:getCallSign()),
							string.format("Your new repair crew member boards %s and heads down to damage control",comms_source:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(repair_crew_hired))
						comms_target.comms_data.crew_available_delay_reason = nil
					end
					addCommsReply(_("Back to station communication"), commsStation)
					--[[
					if hire_crew_caller_back == nil or getScenarioTime() > hire_crew_caller_back + comms_fudge then
						addCommsReply(string.format("Back to %s",comms_source.repairCrewCoolantReturn.name),comms_source.repairCrewCoolantReturn.identifier)
						hire_crew_caller_back = getScenarioTime()
					end
					if hire_crew_interactive_back == nil or getScenarioTime() > hire_crew_interactive_back + comms_fudge then
						addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
						hire_crew_interactive_back = getScenarioTime()
					end
					if hire_crew_comms_back == nil or getScenarioTime() > hire_crew_comms_back + comms_fudge then
						addCommsReply(_("Back to station communication"), commsStation)
						hire_crew_comms_back = getScenarioTime()
					end
					--]]
				end)
				comms_target.comms_data.crew_available_delay = getScenarioTime() + random(90,300)
			else
				local delay_reason = {
					_("trade-comms","A possible repair recruit is awaiting final certification. They should be available in "),
					_("trade-comms","There's one repair crew candidate completing their license application. They should be available in "),
					_("trade-comms","One repair crew should be getting here from their medical checkout in "),
				}
				if comms_target.comms_data.crew_available_delay_reason == nil then
					comms_target.comms_data.crew_available_delay_reason = delay_reason[math.random(1,#delay_reason)]
				end
				local delay_seconds = math.floor(comms_target.comms_data.crew_available_delay - getScenarioTime())
				setCommsMessage(string.format(_("trade-comms","%s %i seconds"),comms_target.comms_data.crew_available_delay_reason,delay_seconds))
			end
			addCommsReply(_("Back to station communication"), commsStation)
			--[[
			if recruit_crew_caller_back == nil or getScenarioTime() > recruit_crew_caller_back + comms_fudge then
				addCommsReply(string.format("Back to %s",comms_source.repairCrewCoolantReturn.name),comms_source.repairCrewCoolantReturn.identifier)
				recruit_crew_caller_back = getScenarioTime()
			end
			if recruit_crew_interactive_back == nil or getScenarioTime() > recruit_crew_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				recruit_crew_interactive_back = getScenarioTime()
			end
			if recruit_crew_comms_back == nil or getScenarioTime() > recruit_crew_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				recruit_crew_comms_back = getScenarioTime()
			end
			--]]
		end)
	end
	return presented_option
end
function getCoolantFromStation(relationship)
	local presented_option = false
	if comms_target.comms_data.coolant_inventory == nil then
		comms_target.comms_data.coolant_inventory = math.random(0,5)*2
		comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66 = math.random(30,60)
		comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66 = math.random(45,90)
		comms_target.comms_data.coolant_inventory_excess = math.random(15,30)
		comms_target.comms_data.coolant_inventory_under_66 = math.random(15,30)
		print(comms_target:getCallSign(),"coolant inventory:",comms_target.comms_data.coolant_inventory)
	end
	if comms_source.initialCoolant ~= nil and comms_target.comms_data.coolant_inventory > 0 then
		presented_option = true
		local get_coolant_prompts = {
			"Purchase coolant",
			"Get more coolant",
			string.format("Get coolant from %s",comms_target:getCallSign()),
			string.format("Ask for more coolant from %s",comms_target:getCallSign()),
		}
		addCommsReply(tableSelectRandom(get_coolant_prompts),function()
			if comms_target.comms_data.coolant_inventory_delay == nil or getScenarioTime() > comms_target.comms_data.coolant_inventory_delay then
				local coolant_cost = 0
				if comms_source:isFriendly(comms_target) then
					coolant_cost = comms_target.comms_data.coolant_inventory_cost_friendly_needy_over_66
				else
					coolant_cost = comms_target.comms_data.coolant_inventory_cost_neutral_needy_over_66
				end
				if comms_target.comms_data.friendlyness <= 66 then
					coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_under_66
				end
				if comms_source:getMaxCoolant() >= comms_source.initialCoolant then
					coolant_cost = coolant_cost + comms_target.comms_data.coolant_inventory_excess
				end
				local coolant_banter = {
					"So you want to cool off even more, eh?",
					"Ship getting too hot for you?",
					string.format("What makes %s so hot that you need more coolant?",comms_source:getCallSign()),
					string.format("Is %s experiencing drought conditions?",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(coolant_banter))
				local purchase_coolant_prompts = {
					string.format("Purchase coolant for %i reputation",coolant_cost),
					string.format("Get additional coolant for %i reputation",coolant_cost),
					string.format("Purchase coolant from %s (%i reputation)",comms_target:getCallSign(),coolant_cost),
					string.format("Get coolant from %s for %i reputation",comms_target:getCallSign(),coolant_cost),
				}
				addCommsReply(tableSelectRandom(purchase_coolant_prompts),function()
					if not comms_source:isDocked(comms_target) then
						local stay_docked_to_get_coolant = {
							"You need to stay docked for that action.",
							"You need to stay docked to get coolant.",
							string.format("You must stay docked long enough for your coolant to be loaded on to %s",comms_source:getCallSign()),
							string.format("You undocked before the coolant you wanted could be loaded from %s",comms_target:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_get_coolant))
						return
					end
					if not comms_source:takeReputationPoints(coolant_cost) then
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					else
						comms_source:setMaxCoolant(comms_source:getMaxCoolant() + 2)
						comms_target.comms_data.coolant_inventory = comms_target.comms_data.coolant_inventory - 2
						local got_coolant_confirmation = {
							"Additional coolant purchased",
							"You got more coolant",
							string.format("%s has loaded additional coolant onto %s",comms_target:getCallSign(),comms_source:getCallSign()),
							string.format("%s has provided you with some additional coolant",comms_target:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(got_coolant_confirmation))
						comms_target.comms_data.coolant_delay_reason = nil
					end
					if purchase_coolant_caller_back == nil or getScenarioTime() > purchase_coolant_caller_back + comms_fudge then
						addCommsReply(string.format("Back to %s",comms_source.repairCrewCoolantReturn.name),comms_source.repairCrewCoolantReturn.identifier)
						purchase_coolant_caller_back = getScenarioTime()
					end
					if purchase_coolant_interactive_back == nil or getScenarioTime() > purchase_coolant_interactive_back + comms_fudge then
						addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
						purchase_coolant_interactive_back = getScenarioTime()
					end
					if purchase_coolant_comms_back == nil or getScenarioTime() > purchase_coolant_comms_back + comms_fudge then
						addCommsReply(_("Back to station communication"), commsStation)
						purchase_coolant_comms_back = getScenarioTime()
					end
				end)
				comms_target.comms_data.coolant_inventory_delay = getScenarioTime() + random(90,300)
			else
				local coolant_delay_reason = {
					_("trade-comms","We are in the process of making more coolant. It should be available in "),
					_("trade-comms","More coolant should be available in "),
					_("trade-comms","We can get more coolant. Check back in "),
				}
				if comms_target.comms_data.coolant_delay_reason == nil then
					comms_target.comms_data.coolant_delay_reason = tableSelectRandom(coolant_delay_reason)
				end
				local delay_seconds = math.floor(comms_target.comms_data.coolant_inventory_delay - getScenarioTime())
				setCommsMessage(string.format(_("trade-comms","%s %i seconds"),comms_target.comms_data.coolant_delay_reason,delay_seconds))
			end
			if request_coolant_caller_back == nil or getScenarioTime() > request_coolant_caller_back + comms_fudge then
				addCommsReply(string.format("Back to %s",comms_source.repairCrewCoolantReturn.name),comms_source.repairCrewCoolantReturn.identifier)
				request_coolant_caller_back = getScenarioTime()
			end
			if request_coolant_interactive_back == nil or getScenarioTime() > request_coolant_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				request_coolant_interactive_back = getScenarioTime()
			end
			if request_coolant_comms_back == nil or getScenarioTime() > request_coolant_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				request_coolant_comms_back = getScenarioTime()
			end
		end)
	end
	return presented_option
end
function getReplacementFighterFromStation(relationship)
	local presented_option = false
	if #comms_source.carrier_ship_inventory > 0 then
		local ship_capacity = 0
		local ship_inventory = 0
		local replacement_templates = {}
		for i,carrier_ship in ipairs(comms_source.carrier_ship_inventory) do
			if carrier_ship.state == "deployed" then
				if carrier_ship.ship ~= nil and carrier_ship.ship:isValid() then
					ship_inventory = ship_inventory + 1
				else
					table.insert(replacement_templates,carrier_ship.template)
				end
				ship_capacity = ship_capacity + 1
			else
				ship_capacity = ship_capacity + 1
				ship_inventory = ship_inventory + 1
			end
		end
		if ship_capacity > ship_inventory then
			presented_option = true
			addCommsReply("Replace fighter",function()
				setCommsMessage("Feature under construction. Talk to GM")
				if comms_target.replacement_fighters == nil then
					comms_target.replacement_fighters = {}
					for i,template in ipairs(replacement_templates) do
						table.insert(comms_target.replacement_fighters,{template = template, quantity = math.random(1,3), cost = math.floor(playerShipStats[template].strength * random(3,5))})
					end
					local template_pool = {}
					for template,details in pairs(comms_source.carrier_ship_types) do
						if details.carry then
							local in_replacement_list = false
							for i,replacement in ipairs(comms_target.replacement_fighters) do
								if replacement.template == template then
									in_replacement_list = true
									break
								end
							end
							if not in_replacement_list then
								table.insert(template_pool,template)
							end
						end
					end
					if random(1,100) < 63 then
						local selected_template = tableRemoveRandom(template_pool)
						table.insert(comms_target.replacement_fighters,{template = selected_template, quantity = math.random(1,3), cost = math.floor(playerShipStats[selected_template].strength * random(3,5))})
						if random(1,100) < 21 then
							selected_template = tableRemoveRandom(template_pool)
							table.insert(comms_target.replacement_fighters,{template = selected_template, quantity = math.random(1,3), cost = math.floor(playerShipStats[selected_template].strength * random(3,5))})
						end
					end
				end
				print("replacement fighters at",comms_target:getCallSign())
				for i,replacement in ipairs(comms_target.replacement_fighters) do
					print(replacement.template,"quantity:",replacement.quantity,"cost:",replacement.cost)
				end
				local fighter_available_count = 0
				local unique_templates_available = 0
				for i,replacement in ipairs(comms_target.replacement_fighters) do
					if replacement.quantity > 0 then
						unique_templates_available = unique_templates_available + 1
						fighter_available_count = fighter_available_count + replacement.quantity
						addCommsReply(string.format("%s %i reputation",replacement.template,replacement.cost),function()
							if comms_source:takeReputationPoints(replacement.cost) then
								for i,carrier_ship in ipairs(comms_source.carrier_ship_inventory) do
									if carrier_ship.state == "deployed" then
										if carrier_ship.ship == nil or not carrier_ship.ship:isValid() then
											comms_source.carrier_ship_inventory[i] = comms_source.carrier_ship_inventory[#comms_source.carrier_ship_inventory]
											comms_source.carrier_ship_inventory[#comms_source.carrier_ship_inventory] = nil
											break
										end
									end
								end
								local ship = comms_source.carrier_ship_types[replacement.template]
								local ship_name = tableRemoveRandom(carrier_ship_names[replacement.template])
								if ship_name == nil then
									local class_pool = {}
									for ship_type_name,ship_type_details in pairs(p.carrier_ship_types) do
										if ship.class == ship_type_details.class then
											if #carrier_ship_names[ship_type_name] > 0 then
												table.insert(class_pool,ship_type_name)
											end
										end
									end
									local selected_template = tableRemoveRandom(class_pool)
									ship_name = tableRemoveRandom(carrier_ship_names[selected_template])
								end
								table.insert(comms_source.carrier_ship_inventory,{
									class = ship.class, 
									template = ship.name, 
									name = ship_name, 
									state = "aboard", 
									launch_button = string.format("launch_%s",ship_name),
									launch_time = carrier_class_launch_time[ship.class],
								})
								setCommsMessage(string.format("%s is part of your fighter inventory",ship_name))
							else
								setCommsMessage("Insufficient reputation")
							end
						end)
					end
				end
				setCommsMessage(string.format("%i fighters available, %i different types",fighter_available_count,unique_templates_available))
				if request_fighter_interactive_back == nil or getScenarioTime() > request_fighter_interactive_back + comms_fudge then
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					request_fighter_interactive_back = getScenarioTime()
				end
				if request_fighter_comms_back == nil or getScenarioTime() > request_fighter_comms_back + comms_fudge then
					addCommsReply(_("Back to station communication"), commsStation)
					request_fighter_comms_back = getScenarioTime()
				end
			end)
		end
	end
	return presented_option
end
function repairShip()
	local repair_type_prompt = {
		_("station-comms","What kind of repairs do you need?"),
		_("station-comms","What kind of repairs can we help you with?"),
		_("station-comms","We might be able to help. Let us know what you need."),
	}
	setCommsMessage(tableSelectRandom(repair_type_prompt))
	local options_presented_count = 0
	--	secondary system repair
	local secondary_system = {
		{prompt = _("stationServices-comms","Repair probe launch system (%s Rep)"),	capable = true,	station_avail = comms_target.comms_data.probe_launch_repair,	cost = comms_target.comms_data.service_cost.probe_launch_repair,	ship_avail = comms_source:getCanLaunchProbe(),		enable = "setCanLaunchProbe",	response = _("stationServices-comms", "Your probe launch system has been repaired.")},
		{prompt = _("stationServices-comms","Repair hacking system (%s Rep)"),		capable = true,	station_avail = comms_target.comms_data.hack_repair,			cost = comms_target.comms_data.service_cost.hack_repair,			ship_avail = comms_source:getCanHack(),				enable = "setCanHack",			response = _("stationServices-comms", "Your hacking system has been repaired.")},
		{prompt = _("stationServices-comms","Repair scanning system (%s Rep)"),		capable = true,	station_avail = comms_target.comms_data.scan_repair,			cost = comms_target.comms_data.service_cost.scan_repair,			ship_avail = comms_source:getCanScan(),				enable = "setCanScan",			response = _("stationServices-comms", "Your scanners have been repaired.")},
		{prompt = _("stationServices-comms","Repair combat maneuver (%s Rep)"),		capable = true,	station_avail = comms_target.comms_data.combat_maneuver_repair,	cost = comms_target.comms_data.service_cost.combat_maneuver_repair,	ship_avail = comms_source:getCanCombatManeuver(),	enable = "setCanCombatManeuver",response = _("stationServices-comms", "Your combat maneuver has been repaired.")},
		{prompt = _("stationServices-comms","Repair self destruct system (%s Rep)"),capable = true,	station_avail = comms_target.comms_data.self_destruct_repair,	cost = comms_target.comms_data.service_cost.self_destruct_repair,	ship_avail = comms_source:getCanSelfDestruct(),		enable = "setCanSelfDestruct",	response = _("stationServices-comms", "Your self destruct system has been repaired.")},
	}
	for i,sec in ipairs(secondary_system) do
		print(string.format(sec.prompt,sec.cost),sec.station_avail,sec.cost,sec.ship_avail,sec.response)
	end
	local offer_repair = false
	for i,secondary in ipairs(secondary_system) do
		if secondary.station_avail and not secondary.ship_avail and secondary.capable then
			offer_repair = true
			break
		end
	end
	if offer_repair then
		options_presented_count = options_presented_count + 1
		local repair_secondary_prompts = {
			"Repair secondary ship system",
			"Make repairs to secondary ship system",
			"Fix secondary ship system",
			"Request repairs to secondary ship system",
		}
		addCommsReply(tableSelectRandom(repair_secondary_prompts),function()
			local which_secondary_system = {
				"What system would you like repaired?",
				"What system needs fixing?",
				"Please identify the secondary system that is in need of repair",
				string.format("Poor, poor %s. What part of her is hurting now?",comms_source:getCallSign()),
			}
			setCommsMessage(tableSelectRandom(which_secondary_system))
			local secondary_options_presented_count = 0
			for i,secondary in ipairs(secondary_system) do
				if not secondary.ship_avail then
					if secondary.capable then
						secondary_options_presented_count = secondary_options_presented_count + 1
						addCommsReply(string.format(secondary.prompt,secondary.cost),function()
							setCommsMessage("uhhh")
							if not comms_source:isDocked(comms_target) then
								local stay_docked_to_get_repaired = {
									"You need to stay docked for that action.",
									"You need to stay docked to get repairs.",
									string.format("You must stay docked long enough for repairs to %s to be completed.",comms_source:getCallSign()),
									string.format("You undocked before %s could complete the repairs you wanted.",comms_target:getCallSign()),
								}
								setCommsMessage(tableSelectRandom(stay_docked_to_get_repaired))
								return
							end
							if comms_source:takeReputationPoints(secondary.cost) then
								if secondary.enable == "setCanLaunchProbe" then
									comms_source:setCanLaunchProbe(true)
								elseif secondary.enable == "setCanHack" then
									comms_source:setCanHack(true)
								elseif secondary.enable == "setCanScan" then
									comms_source:setCanScan(true)
								elseif secondary.enable == "setCanCombatManeuver" then
									comms_source:setCanCombatManeuver(true)
								elseif secondary.enable == "setCanSelfDestruct" then
									comms_source:setCanSelfDestruct(true)
								end
								setCommsMessage(secondary.response)
							else
								local insufficient_rep_responses = {
									"Insufficient reputation",
									"Not enough reputation",
									"You need more reputation",
									string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
									"You don't have enough reputation",
								}
								setCommsMessage(tableSelectRandom(insufficient_rep_responses))
							end
							addCommsReply(_("Back"), commsStation)
						end)
					end
				end
			end
		end)
	end
	--	primary system repair
	local system_repair_list = {}
	offer_repair = false
	if comms_target.comms_data.system_repair ~= nil then
		for i, system in ipairs(system_list) do
			if comms_source:hasSystem(system) then
				if comms_source:getSystemHealthMax(system) < 1 then
					if comms_target.comms_data.system_repair[system].avail then
						if comms_target.comms_data.system_repair[system].cost > 0 then
							if comms_target.player_system_repair_service == nil then
								offer_repair = true
								table.insert(system_repair_list,system)
							else
								if comms_target.player_system_repair_service[comms_source] == nil then
									offer_repair = true
									table.insert(system_repair_list,system)
								else
									if comms_target.player_system_repair_service[comms_source][system] == nil then
										offer_repair = true
										table.insert(system_repair_list,system)
									end
								end
							end
						end
					end
				end
			end
		end
	else
		print(comms_target:getCallSign(),"system_repair is nil in repairShip()")
	end
	if offer_repair then
		options_presented_count = options_presented_count + 1
		local primary_repair_prompt = {
			"Repair primary ship system",
			"Make repairs to primary ship system",
			string.format("Fix primary system on %s",comms_source:getCallSign()),
			"Fix primary ship system",
		}
		addCommsReply(tableSelectRandom(primary_repair_prompt),function()
			local what_primary_system = {
				"What system would you like repaired?",
				"What system is in need of repair?",
				string.format("What severe wounds on %s can %s help heal?",comms_source:getCallSign(),comms_target:getCallSign()),
				string.format("What primary ship system can %s work on to bring %s back into good working order?",comms_target:getCallSign(),comms_source:getCallSign()),
			}
			setCommsMessage(what_primary_system[math.random(1,#what_primary_system)])
			for index, system in ipairs(system_repair_list) do
				addCommsReply(string.format(_("stationServices-comms","Repair %s max health up to %.1f%% (%i rep)"),pretty_system[system],comms_target.comms_data.system_repair[system].max*100,comms_target.comms_data.system_repair[system].cost), function()
					if comms_source:takeReputationPoints(comms_target.comms_data.system_repair[system].cost) then
						if comms_target.player_system_repair_service == nil then
							comms_target.player_system_repair_service = {}
						end
						if comms_target.player_system_repair_service[comms_source] == nil then
							comms_target.player_system_repair_service[comms_source] = {}
						end
						comms_target.player_system_repair_service[comms_source][system] = true
						local working_on_system = {
							string.format("We'll start working on your %s maximum health right away.",pretty_system[system]),
							string.format("We will put %s repair technicians to work on your %s maximum health immediately.",comms_target:getCallSign(),pretty_system[system]),
							string.format("%s has put repair technicians to work on %s's %s maximum health.",comms_target:getCallSign(),comms_source:getCallSign(),pretty_system[system]),
							string.format("We put our most qualified repair technicians to work on your %s maximum health.",pretty_system[system]),
						}
						setCommsMessage(working_on_system[math.random(1,#working_on_system)])
					else
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						setCommsMessage(insufficient_rep_responses[math.random(1,#insufficient_rep_responses)])
					end
					addCommsReply(_("Back"), commsStation)
				end)
			end
		end)
	end
	if options_presented_count == 0 then
		local no_applicable_repair_service = {
			"No applicable repair service available",
			string.format("%s has no repair service that %s can use",comms_target:getCallSign(),comms_source:getCallSign()),
			"There's no repair service here that applies to your ship",
			string.format("There's nothing on %s that %s can repair",comms_source:getCallSign(),comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(no_applicable_repair_service))
	end
	if repair_ship_interactive_back == nil or getScenarioTime() > repair_ship_interactive_back + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		repair_ship_interactive_back = getScenarioTime()
	end
	if repair_ship_comms_back == nil or getScenarioTime() > repair_ship_comms_back + comms_fudge then
		addCommsReply("Back to station communication",commsStation)
		repair_ship_comms_back = getScenarioTime()
	end
end
function enhanceShip()
	comms_source.repairCrewCoolantReturn = {identifier=enhanceShip,name="enhance ship"}
	local enhance_type_prompt = {
		_("station-comms","What kind of enhancements are you interested in?"),
		_("station-comms","Which of these enhancements might you interested in?"),
		_("station-comms","Which kind of enhancement do you crave?"),
		_("station-comms","What enhancement type do you want?"),
	}
	setCommsMessage(tableSelectRandom(enhance_type_prompt))
	local presented_option = false
	if comms_source:isFriendly(comms_target) then
		presented_option = getRepairCrewFromStation("friendly") or presented_option
		presented_option = getCoolantFromStation("friendly") or presented_option
	else
		presented_option = getRepairCrewFromStation("neutral") or presented_option
		presented_option = getCoolantFromStation("neutral") or presented_option
	end
	presented_option = minorUpgrades() or presented_option
	presented_option = overchargeShipSystems() or presented_option
	if comms_target.comms_data.sensor_boost ~= nil then
		if comms_target.comms_data.sensor_boost.cost > 0 then
			boostSensorsWhileDocked()
			presented_option = true
		end
	end
	if comms_source.security_morale < 1 then
		if #security_morale_boosters > 0 then
			if comms_target.security_training == nil then
				comms_target.security_training = (random(1,100) < 77)
			end
			if comms_target.security_training then
				increaseSecurityMorale()
				presented_option = true
			end
		end
	end
	if comms_target.comms_data.fast_probes ~= nil or comms_target.comms_data.remote_warp_jammer ~= nil or comms_target.comms_data.sensor_boost_probes ~= nil or comms_target.comms_data.mine_probes ~= nil then
		if (comms_target.comms_data.fast_probes ~= nil and comms_target.comms_data.fast_probes.quantity > 0) or 
		   (comms_target.comms_data.remote_warp_jammer ~= nil and comms_target.comms_data.remote_warp_jammer.quantity > 0) or
		   (comms_target.comms_data.sensor_boost_probes ~= nil and comms_target.comms_data.sensor_boost_probes.quantity > 0) or
		   (comms_target.comms_data.mine_probes ~= nil and comms_target.comms_data.mine_probes.quantity > 0) then
		   		getSpecialtyProbes()
		   		presented_option = true
		end
	end
	if not presented_option then
		local no_applicable_enhancements = {
			"No ship enhancements available",
			string.format("%s has no ship enhancements available for %s",comms_target:getCallSign(),comms_source:getCallSign()),
			string.format("%s cannot benefit from any ship enhancement on %s",comms_source:getCallSign(),comms_target:getCallSign()),
			string.format("No ship enhancements available for %s on %s",comms_source:getCallSign(),comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(no_applicable_enhancements))
	end
	if interactive_docked_station_enhance_back == nil or getScenarioTime() > interactive_docked_station_enhance_back + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		interactive_docked_station_enhance_back = getScenarioTime()
	end
	if interactive_docked_station_enhance_comms_back == nil or getScenarioTime() > interactive_docked_station_enhance_comms_back + comms_fudge then
		addCommsReply(_("Back to station communication"), commsStation)
		interactive_docked_station_enhance_comms_back = getScenarioTime()
	end
end
function presentProximityScanner()
	local proximity_scanner_prompt = {
		"Spare portable automatic proximity scanner",
		"Detachable automatic proximity scanner",
		"Off the shelf automatic proximity scanner",
		"After market automatic proximity scanner",
	}
	addCommsReply(tableSelectRandom(proximity_scanner_prompt),function()
		local proximity_scanner_explained = {
			string.format("We've got this portable automatic proximity scanner here. They are very popular. It automatically performs a simple scan on ships in range (%iU). Would you like to have this installed?",comms_target.proximity_scanner_range),
			string.format("We have an automatic proximity scanner that we are not using. These things are pretty popular right now. When a ship gets in range (%iU), it automatically and instantly performs a simple scan on the ship. Would you like for us to install it on %s?",comms_target.proximity_scanner_range,comms_source:getCallSign()),
			string.format("Available for a limited time, we have the ever popular automatic proximity scanner. Install this baby and ships are instantly and automatically simple scanned when they get in range (%iU). Do you want it installed?",comms_target.proximity_scanner_range),
			string.format("The %s quartermaster tells me that there's a spare automatic proximity scanner without a ship designated for installation. These automated proximity scanners are very popular. They instantly and automatically scan ships that are in range (%iU). Would you like it installed on %s?",comms_target:getCallSign(),comms_target.proximity_scanner_range,comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(proximity_scanner_explained))
		local price_per_range_unit = 25
		local install_proximity_scanner = {
			string.format("We'll take it (%i reputation)",comms_target.proximity_scanner_range * price_per_range_unit),
			string.format("Install it, please (%i reputation)",comms_target.proximity_scanner_range * price_per_range_unit),
			string.format("It's perfect! Install it (%i reputation)",comms_target.proximity_scanner_range * price_per_range_unit),
			string.format("We could use that. Please install it (%i reputation)",comms_target.proximity_scanner_range * price_per_range_unit),
		}
		addCommsReply(tableSelectRandom(install_proximity_scanner),function()
			if comms_source:takeReputationPoints(comms_target.proximity_scanner_range * price_per_range_unit) then
				local temp_prox_scan = comms_source.prox_scan
				comms_source.prox_scan = comms_target.proximity_scanner_range
				if temp_prox_scan ~= nil and temp_prox_scan > 0 then
					comms_target.proximity_scanner_range = temp_prox_scan
				else
					comms_target.proximity_scanner = false
					comms_target.proximity_scanner_range = nil
				end
				local proximity_scanner_installed_confirmation = {
					"Installed",
					string.format("%s has installed the automatic proximity scanner",comms_target:getCallSign()),
					"It's installed",
					string.format("%s now has an automatic proximity scanner",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(proximity_scanner_installed_confirmation))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if minor_max_health_gift_enhance_back == nil or getScenarioTime() > minor_max_health_gift_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_max_health_gift_enhance_back = getScenarioTime()
			end
			if minor_max_health_gift_interactive_back == nil or getScenarioTime() > minor_max_health_gift_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_max_health_gift_interactive_back = getScenarioTime()
			end
			if minor_max_health_gift_comms_back == nil or getScenarioTime() > minor_max_health_gift_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_max_health_gift_comms_back = getScenarioTime()
			end
		end)
		if minor_max_health_enhance_back == nil or getScenarioTime() > minor_max_health_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_max_health_enhance_back = getScenarioTime()
		end
		if minor_max_health_interactive_back == nil or getScenarioTime() > minor_max_health_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_max_health_interactive_back = getScenarioTime()
		end
		if minor_max_health_comms_back == nil or getScenarioTime() > minor_max_health_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_max_health_comms_back = getScenarioTime()
		end
	end)
end
function presentMaxHealthWidgets()
	local max_health_widget_prompts = {
		"Spare portable max health diagnostic",
		"Detachable max health diagnostic",
		"Off the shelf max health diagnostic",
		"After market max health diagnostic",
	}
	addCommsReply(tableSelectRandom(max_health_widget_prompts),function()
		local max_health_diagnostic_explained = {
			"There's a portable max health diagnostic here that we are not using. Engineers use these to keep close watch on severely damaged systems. Would you like to get this for your engineer?",
			"We've got a max health diagnostic unit here that we are not using. Engineers use these things to keep a close eye on systems that have been severely damaged. Do you think your engineer might want this?",
			"We've got an unused max health diagnostic. It's used by engineers to monitor severely damaged systems. Do you want to get this for your engineer?",
			"We have a spare max health diagnostic unit. Your engineer can use it to monitor severely damaged systems. Interested?",
		}
		setCommsMessage(tableSelectRandom(max_health_diagnostic_explained))
		local get_max_health_diagnostic_prompt = {
			"Yes, that's a great gift (5 reputation)",
			"Yes! Our engineer would love that (5 reputation)",
			"We'll take it (5 reputation)",
			"Please install it (5 reputation)",
		}
		addCommsReply(tableSelectRandom(get_max_health_diagnostic_prompt),function()
			if comms_source:takeReputationPoints(5) then
				comms_source.max_health_widgets = true
				comms_target.max_health_widgets = false
				local max_health_installed_confirmation = {
					"Installed",
					string.format("%s has installed the max health diagnostic unit",comms_target:getCallSign()),
					"It's installed",
					string.format("%s now has a max health diagnostic unit",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(max_health_installed_confirmation))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if minor_max_health_gift_enhance_back == nil or getScenarioTime() > minor_max_health_gift_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_max_health_gift_enhance_back = getScenarioTime()
			end
			if minor_max_health_gift_interactive_back == nil or getScenarioTime() > minor_max_health_gift_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_max_health_gift_interactive_back = getScenarioTime()
			end
			if minor_max_health_gift_comms_back == nil or getScenarioTime() > minor_max_health_gift_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_max_health_gift_comms_back = getScenarioTime()
			end
		end)
		if minor_max_health_enhance_back == nil or getScenarioTime() > minor_max_health_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_max_health_enhance_back = getScenarioTime()
		end
		if minor_max_health_interactive_back == nil or getScenarioTime() > minor_max_health_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_max_health_interactive_back = getScenarioTime()
		end
		if minor_max_health_comms_back == nil or getScenarioTime() > minor_max_health_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_max_health_comms_back = getScenarioTime()
		end
	end)
end
function presentShieldBanner()
	local shield_diagnostic_prompts = {
		"Spare portable shield diagnostic",
		"Detachable shield diagnostic",
		"Off the shelf shield diagnostic",
		"After market shield diagnostic",
	}
	addCommsReply(tableSelectRandom(shield_diagnostic_prompts),function()
		local shield_diagnostic_explained = {
			"We've got a spare portable shield diagnostic if you're interested. Engineers use these to get raw data on shield status. Why? well, sometimes they prefer the raw numbers over the normal percentages that appear. Would you like to get this for your engineer?",
			"We have a shield diagnostic unit without a home. Engineers that prefer raw numbers over the standard percentage values like this tool. Would you like to get this for your engineer?",
			string.format("There's a shield diagnostic unit here that could be installed on %s. Some engineers like the raw numbers it provides better than the standard percentage values. Do you want it installed for your engineer?",comms_source:getCallSign()),
			"We've got a shield diagnostic unit without a designated ship installation slot. What does it do? Well, it provides a readout in raw numbers for the state of the shields rather than the typical percentage value. Some engineers prefer the raw numbers. Do you think your engineer might want this tool?",
		}
		setCommsMessage(tableSelectRandom(shield_diagnostic_explained))
		local install_shield_diagnostic_confirmation_prompt = {
			"Yes, that's a perfect gift (5 reputation)",
			"Yes! Our engineer would love that (5 reputation)",
			"We'll take it (5 reputation)",
			"Please install it (5 reputation)",
		}
		addCommsReply(tableSelectRandom(install_shield_diagnostic_confirmation_prompt),function()
			if comms_source:takeReputationPoints(5) then
				comms_source.shield_banner = true
				comms_target.shield_banner = false
				local shield_diagnostic_installed_confirmation = {
					"Installed",
					string.format("%s has installed the shield diagnostic unit",comms_target:getCallSign()),
					"It's installed",
					string.format("%s now has a shield diagnostic unit",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(shield_diagnostic_installed_confirmation))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if minor_shield_gift_enhance_back == nil or getScenarioTime() > minor_shield_gift_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_shield_gift_enhance_back = getScenarioTime()
			end
			if minor_shield_gift_interactive_back == nil or getScenarioTime() > minor_shield_gift_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_shield_gift_interactive_back = getScenarioTime()
			end
			if minor_shield_gift_comms_back == nil or getScenarioTime() > minor_shield_gift_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_shield_gift_comms_back = getScenarioTime()
			end
		end)
		if minor_shield_enhance_back == nil or getScenarioTime() > minor_shield_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_shield_enhance_back = getScenarioTime()
		end
		if minor_shield_interactive_back == nil or getScenarioTime() > minor_shield_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_shield_interactive_back = getScenarioTime()
		end
		if minor_shield_comms_back == nil or getScenarioTime() > minor_shield_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_shield_comms_back = getScenarioTime()
		end
	end)
end
function presentBalanceShield()
	local balance_shield_prompts = {
		"Balance shield",
		"Shield energy transfer",
		"Shield balancer",
		"Balance shield mechanism",
	}
	addCommsReply(tableSelectRandom(balance_shield_prompts),function()
		local balance_shield_explained = {
			"We have a shield balancer you might want. You can move energy from one shield to the other. Each transfer costs 5 percent energy from your batteries. It takes a few seconds to reset the mechanism. You can balance the energy between shields or focus the energy on the front or rear shield, whichever is weaker.",
			"Would you like a shield balancer? It lets you transfer energy front to rear or vice versa. A transfer costs 5% of your battery energy. It takes a few seconds between each energy transfer for the balancer to be ready for another transfer. You can balance the energy or focus on the front or rear shield.",
			"We've got shield balancer that lets you move energy from the front to the rear or the rear to the front. A transfer takes 5% power. The balancer takes a few seconds to reset. You can balance the shields or put the power to the front or the rear, whichever is weaker.",
			string.format("Could %s use a shield balancer? It lets you move energy between shield arcs. Each move takes 5%% power. You can balance the shield power between front and rear or you can focus power on the front or rear, whichever shield is weaker.",comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(balance_shield_explained))
		local install_shield_balancer_confirm_prompt = {
			"Yes, that's a great gift (10 reputation)",
			"Yes! Our weapons officer would love that (10 reputation)",
			"We'll take it (10 reputation)",
			"Please install the shield balancer (10 reputation)",
		}
		addCommsReply(tableSelectRandom(install_shield_balancer_confirm_prompt),function()
			if comms_source:takeReputationPoints(10) then
				playerShipStats[comms_source:getTypeName()].balance_shield = true
				local balance_shield_installed_confirm = {
					"Installed",
					"It's installed",
					string.format("%s has installed the shield balancer",comms_target:getCallSign()),
					string.format("%s now has a shield balancer",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(balance_shield_installed_confirm))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			addCommsReply("Back to enhance ship",enhanceShip)
			addCommsReply(_("Back to station communication"), commsStation)
		end)
		addCommsReply("Back to enhance ship",enhanceShip)
		addCommsReply(_("Back to station communication"), commsStation)
	end)
end
function presentTriggerMissile()
	local trigger_missile_prompts = {
		"Trigger in flight missile",
		"Detonate missile in flight",
		"Early missile detonation",
		"Set off missile in flight",
	}
	addCommsReply(tableSelectRandom(trigger_missile_prompts),function()
		local trigger_missile_explained = {
			"We have a system that allows certain splash missiles to be detonated before they hit a target or before they reach the end of their fuel. This allows the weapons officer to cover their target in the missile's area of effect even if the target is trying to evade the missile. Interested?",
			"Would you like an early trigger system? It allows the weapons officer to detonate some splash missiles before they hit a target or run out of fuel so that they catch a target in the missile splash area.",
			"Interested in a splash missile trigger? This sytem lets the weapons officer set off certain missiles while they are in flight, thus catching targets before they evade the missile intended for them.",
			string.format("Would you like %s to install a system to allow weapons to trigger certain missiles while in flight before they hit or before they reach the end of their fuel? Your weapons officer could use this to catch targets trying to evade splash missiles.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(trigger_missile_explained))
		local trigger_missile_detail_prompts = {
			"What kind of missiles and what ranges?",
			"What missile types and what ranges?",
			"At what range would this work and on what missiles?",
			"What type of missiles and at what range?",
		}
		addCommsReply(tableSelectRandom(trigger_missile_detail_prompts),function()
			local trigger_missile_types = {
				"The technology works on Nukes or EMPs between 3 and 4 units away or between 5 and 6 units away, depending on the model. We have the following available for 20 reputation:",
				"It works on EMPs or Nukes. The range is either 3 - 4 units or 4 - 5 units depending on what you get. For 20 reputation, we have the following:",
				"We've got the following for 20 reputation. They work on either Nukes or EMPs at a range of 3 to 4 units or 4 - 5 units based on what you install.",
				"This tech effects EMPs or Nukes. The range is 3 - 4 units or 4 - 5 units. We have the following devices available for 20 reputation:",
			}
			setCommsMessage(tableSelectRandom(trigger_missile_types))
			for i,flavor in ipairs(comms_target.trigger_missile) do
				local flavor_prompts = {
					["E3"] = "EMP range 3u to 4u",
					["E4"] = "EMP range 4u to 5U",
					["N3"] = "Nuke range 3u to 4u",
					["N4"] = "Nuke range 4u to 5u",
				}
				addCommsReply(flavor_prompts[flavor],function()
					offerMissileTrigger(flavor)
				end)
			end
		end)
	end)
--	{missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	}
--	["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	},
end
function offerMissileTrigger(flavor)
	if comms_source:takeReputationPoints(20) then
		if comms_source.trigger_missile == nil then
			comms_source.trigger_missile = {}
		end
		local installed_or_notify_presence = ""
		if flavor == "E3" then
			if comms_source.trigger_missile["E3"] == nil then
				comms_source.trigger_missile["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	}
			else
				installed_or_notify_presence = "You already have this"
				comms_source:addReputationPoints(20)
			end
		elseif flavor == "E4" then
			if comms_source.trigger_missile["E4"] == nil then
				comms_source.trigger_missile["E4"] = {missile = "EMPMissile",	short = 4000, long = 5000,	button_label = "Trigger EMP 4-5u",	order = 2,	}
			else
				installed_or_notify_presence = "You already have this"
				comms_source:addReputationPoints(20)
			end
		elseif flavor == "N3" then
			if comms_source.trigger_missile["N3"] == nil then
				comms_source.trigger_missile["N3"] = {missile = "Nuke",		short = 3000, long = 4000,	button_label = "Trigger Nuke 3-4u",	order = 3,	}
			else
				installed_or_notify_presence = "You already have this"
				comms_source:addReputationPoints(20)
			end
		elseif flavor == "N4" then
			if comms_source.trigger_missile["N4"] == nil then
				comms_source.trigger_missile["N4"] = {missile = "Nuke",		short = 4000, long = 5000,	button_label = "Trigger Nuke 4-5u",	order = 4,	}
			else
				installed_or_notify_presence = "You already have this"
				comms_source:addReputationPoints(20)
			end
		end
		local missile_trigger_installed_confirmation = {
			"Installed",
			string.format("%s has installed the missile trigger system",comms_target:getCallSign()),
			"It's installed",
			string.format("%s now has a missile trigger system",comms_source:getCallSign()),
		}
		if installed_or_notify_presence == "" then
			installed_or_notify_presence = tableSelectRandom(missile_trigger_installed_confirmation)
		end
		setCommsMessage(installed_or_notify_presence)
	else
		local insufficient_rep_responses = {
			"Insufficient reputation",
			"Not enough reputation",
			"You need more reputation",
			string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
			"You don't have enough reputation",
		}
		setCommsMessage(tableSelectRandom(insufficient_rep_responses))
	end
	addCommsReply("Back to enhance ship",enhanceShip)
	addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
	addCommsReply(_("Back to station communication"), commsStation)
end
function presentPatrolProbe()
	local patrol_probe_prompts = {
		"Patrol probe",
		"Circling probe",
		"Lookout probe",
		"Probe on patrol",
	}
	addCommsReply(tableSelectRandom(patrol_probe_prompts),function()
		local patrol_probe_explained = {
			"We've got a patrol probe programmer if you're interested. This reprograms your probe, when selected, so that instead of stopping at the normal target destination, it redirects to another point equidistant from your ship. This keeps the probe orbiting in linear fashion around your ship. Interested?",
			"We can set you up with a patrol probe programmer. It will reprogram the selected probe to go from point to point around your ship instead of stopping at the normal designated destination. This helps keep watch on an area around your ship. Would you like a patrol probe programmer?",
			string.format("The techs here on %s can put in a patrol probe programmer. This turns a probe into a watch-bot that goes around your ship until it runs out of energy instead of just stopping at the target. The radius is determined by how far out you direct the probe initially. Want it?",comms_target:getCallSign()),
			string.format("Want a patrol probe programmer for %s? It lets you tell the probe to keep up a watchful perimeter around your ship instead of just stopping at the original destination. This lets you keep an automatic watch on an area around your ship. Interested?",comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(patrol_probe_explained))
		local install_patrol_probe_confirm_prompt = {
			string.format("That would be great! (%s reputation)",comms_target.patrol_probe * 10),
			string.format("We'll take it (%s reputation)",comms_target.patrol_probe * 10),
			string.format("Install the patrol probe programmer (%s reputation)",comms_target.patrol_probe * 10),
			string.format("We could use that (%s reputation)",comms_target.patrol_probe * 10),
		}
		addCommsReply(tableSelectRandom(install_patrol_probe_confirm_prompt),function()
			if comms_source:takeReputationPoints(comms_target.patrol_probe * 10) then
				comms_source.patrol_probe = comms_target.patrol_probe
				comms_source.patrol_probe_state = "Off"
				comms_source.patrol_probe_button = "patrol_probe_button"
				comms_source:addCustomButton("Relay",comms_source.patrol_probe_button,"Patrol Probe Off",function()
					string.format("")
					togglePatrolProbeState(comms_source)
				end,10)
				comms_source.patrol_probe_button_ops = "patrol_probe_button_ops"
				comms_source:addCustomButton("Operations",comms_source.patrol_probe_button_ops,"Patrol Probe Off",function()
					string.format("")
					togglePatrolProbeState(comms_source)
				end,10)
				local patrol_probe_installed_confirm_response = {
					"Installed",
					"Patrol probe installed",
					string.format("%s installed the patrol probe",comms_target:getCallSign()),
					string.format("%s now has patrol probe capability",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(patrol_probe_installed_confirm_response))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			addCommsReply("Back to enhance ship",enhanceShip)
			addCommsReply(_("Back to station communication"), commsStation)
		end)
		addCommsReply("Back to enhance ship",enhanceShip)
		addCommsReply(_("Back to station communication"), commsStation)
	end)
end	
function presentLongRangeSensorUpgrade()
	local long_range_sensor_prompts = {
		"Increase long range sensor range",
		"Raise long range sensor range",
		"Improve long range sensor range",
		"Make long range sensors reach further",
	}
	addCommsReply(tableSelectRandom(long_range_sensor_prompts),function()
		long_range_sensor_upgrade_explained = {
			"We've got new components we can install that can increase the range of your long range sensors. Your science officer could get information from farther away. Interested?",
			"Would you like to increase the range of your long range sensors? We can install improvements to your sensor array. Your science officer would be able to see things farther away.",
			"We can tweak your long range sensors to increase their reach. Your science officer could then see things that are farther away. Would you like us to make that improvement?",
			string.format("%s technicians have developed a method to increase the range of a ship's long range sensors. This would help your science officer see and scan things farther away. Interested in getting the improvement?",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(long_range_sensor_upgrade_explained))
		local install_long_range_sensor_upgrade_confirm_prompt = {
			"We could use the increased range (10 reputation)",
			"We'll take it (10 reputation)",
			"Increase our sensor range (10 reputation)",
			"Yes, a great gift for Science (10 reputation)",
		}
		addCommsReply(tableSelectRandom(install_long_range_sensor_upgrade_confirm_prompt),function()
			if comms_source:takeReputationPoints(10) then
				if comms_source.normal_long_range_radar == nil then
					comms_source.normal_long_range_radar = comms_source:getLongRangeRadarRange()
				end
				comms_source.normal_long_range_radar = comms_source.normal_long_range_radar + 5000
				comms_source:setLongRangeRadarRange(comms_source:getLongRangeRadarRange() + 5000)
				table.insert(comms_target.long_range_sensor_upgrade_recipients,comms_source)
				local long_range_sensor_upgrade_installed_confirm_response = {
					"Installed",
					"Long range sensor upgrade installed",
					string.format("%s installed the long range sensor upgrade",comms_target:getCallSign()),
					string.format("%s now has increased long range sensor range",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(long_range_sensor_upgrade_installed_confirm_response))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			addCommsReply("Back to enhance ship",enhanceShip)
			addCommsReply(_("Back to station communication"), commsStation)
		end)
		addCommsReply("Back to enhance ship",enhanceShip)
		addCommsReply(_("Back to station communication"), commsStation)
	end)
end
function presentHullBanner()
	local hull_diagnostic_prompts = {
		"Spare portable hull diagnostic",
		"Detachable hull diagnostic",
		"Off the shelf hull diagnostic",
		"After market hull diagnostic",
	}
	addCommsReply(tableSelectRandom(hull_diagnostic_prompts),function()
		local hull_diagnostic_explained = {
			"We've got a spare portable hull diagnostic if you're interested. Engineers use these to get raw data on hull status. Why? well, sometimes they prefer the raw numbers over the normal percentages that appear. Would you like to get this for your engineer?",
			"We have a hull diagnostic unit without a home. Engineers that prefer raw hull status numbers over the standard percentage values like this tool. Would you like to get this for your engineer?",
			string.format("There's a hull diagnostic unit here that could be installed on %s. Some engineers like the raw numbers it provides better than the standard percentage values. Do you want it installed for your engineer?",comms_source:getCallSign()),
			"We've got a hull diagnostic unit without a designated ship installation slot. What does it do? Well, it provides a readout in raw numbers for the state of the hull rather than the typical percentage value. Some engineers prefer the raw numbers. Do you think your engineer might want this tool?",
		}
		setCommsMessage(tableSelectRandom(hull_diagnostic_explained))
		local install_hull_diagnostic_confirmation_prompt = {
			"Yes, that's a perfect gift (5 reputation)",
			"Yes! Our engineer would love that (5 reputation)",
			"We'll take it (5 reputation)",
			"Please install it (5 reputation)",
		}
		addCommsReply(tableSelectRandom(install_hull_diagnostic_confirmation_prompt),function()
			if comms_source:takeReputationPoints(5) then
				comms_source.hull_banner = true
				comms_target.hull_banner = false
				local hull_diagnostic_installed_confirmation = {
					"Installed",
					string.format("%s has installed the hull diagnostic unit",comms_target:getCallSign()),
					"It's installed",
					string.format("%s now has a hull diagnostic unit",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(hull_diagnostic_installed_confirmation))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if minor_hull_enhance_gift_back == nil or getScenarioTime() > minor_hull_enhance_gift_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_hull_enhance_gift_back = getScenarioTime()
			end
			if minor_hull_interactive_gift_back == nil or getScenarioTime() > minor_hull_interactive_gift_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_hull_interactive_gift_back = getScenarioTime()
			end
			if minor_hull_comms_gift_back == nil or getScenarioTime() > minor_hull_comms_gift_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_hull_comms_gift_back = getScenarioTime()
			end
		end)
		if minor_hull_enhance_back == nil or getScenarioTime() > minor_hull_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_hull_enhance_back = getScenarioTime()
		end
		if minor_hull_interactive_back == nil or getScenarioTime() > minor_hull_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_hull_interactive_back = getScenarioTime()
		end
		if minor_hull_comms_back == nil or getScenarioTime() > minor_hull_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_hull_comms_back = getScenarioTime()
		end
	end)
end
function presentWaypointDistanceCalculator()
	local waypoint_distance_calc_prompts = {
		"Spare waypoint distance calculator",
		"Detachable waypoint distance calculator",
		"Off the shelf waypoint distance calculator",
		"After market waypoint distance calculator",
	}
	addCommsReply(tableSelectRandom(waypoint_distance_calc_prompts),function()
		local waypoint_distance_calc_explained = {
			"We've got a spare portable waypoint distance calculator if you're interested. Helm or Tactical officers use this to get hyper accurate distance calculations for waypoints placed by Relay or Operations. Would you like to get this for helm/tactical?",
			"We have an unused waypoint distance calculator. Your helm or tactical officer could use this to get hyper-accurate distance calculations for any waypoints placed by your relay or operations officer. Would you like this installed for helm/tactical?",
			"There's a waypoint distance calculator here that could use a home. It's a device used by helm or tactical to calculat hyper accurate distances for waypoints. Interested?",
			string.format("We have a waypoint distance calculator begging to be installed on %s. Helm or Tactical use it for extremely accurate distance calculations on waypoints placed by Relay or Operations. Would this be useful for you?",comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(waypoint_distance_calc_explained))
		local install_waypoint_distance_calc_confirmation_prompt = {
			"Yes, that's a perfect gift (5 reputation)",
			"We'll take it (5 reputation)",
			"Please install it (5 reputation)",
		}
		if comms_source:hasPlayerAtPosition("Helms") then
			if comms_source:hasPlayerAtPosition("Tactical") then
				table.insert(install_waypoint_distance_calc_confirmation_prompt,"Yes! Helm/Tactical would love that (5 reputation)")
			else
				table.insert(install_waypoint_distance_calc_confirmation_prompt,"Yes! Helm would love that (5 reputation)")
			end
		elseif comms_source:hasPlayerAtPosition("Tactical") then
			table.insert(install_waypoint_distance_calc_confirmation_prompt,"Yes! Tactical would love that (5 reputation)")
		end
		addCommsReply(tableSelectRandom(install_waypoint_distance_calc_confirmation_prompt),function()
			if comms_source:takeReputationPoints(5) then
				comms_source.way_dist = true
				comms_target.way_dist = false
				local waypoint_distance_calc_installed_confirmation = {
					"Installed",
					string.format("%s has installed the waypoint distance calculator",comms_target:getCallSign()),
					"It's installed",
					string.format("%s now has a waypoint distance calculator",comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(waypoint_distance_calc_installed_confirmation))
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if minor_calculator_enhance_gift_back == nil or getScenarioTime() > minor_calculator_enhance_gift_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_calculator_enhance_gift_back = getScenarioTime()
			end
			if minor_calculator_interactive_gift_back == nil or getScenarioTime() > minor_calculator_interactive_gift_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_calculator_interactive_gift_back = getScenarioTime()
			end
			if minor_calculator_comms_gift_back == nil or getScenarioTime() > minor_calculator_comms_gift_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_calculator_comms_gift_back = getScenarioTime()
			end
		end)
		if minor_calculator_enhance_back == nil or getScenarioTime() > minor_calculator_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_calculator_enhance_back = getScenarioTime()
		end
		if minor_calculator_interactive_back == nil or getScenarioTime() > minor_calculator_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_calculator_interactive_back = getScenarioTime()
		end
		if minor_calculator_comms_back == nil or getScenarioTime() > minor_calculator_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_calculator_comms_back = getScenarioTime()
		end
	end)
end
function presentBoostSensorRangeWithPower()
	local boost_sensors_with_power_prompts = {
		"Sensor power boost",
		"Funnel power to sensors",
		"Power boost to sensors",
		"Use energy to increase sensor range",
	}
	addCommsReply(tableSelectRandom(boost_sensors_with_power_prompts),function()
		local explain_power_sensor_boost = {
			"We've got a device that can draw power from your batteries into the sensors in order to increase sensor range. It's a way for Science and Engineering to work together to temporarily give Science better situational awareness. The device draws a significant amount of power when it's enabled, but it can be enabled and disabled according to the situation. The device has three boost levels to add to current sensor range: level 1 = interval, level 2 = interval X 2, level 3 = interval X 3. The higher the level the more power used. Would you like this device installed?",
			"There is a sensor boosting device here that draws power from the batteries to increase sensor range. Engineering controls whether it is on or off and how strong it is. Science gets a better sensor range while it is enabled. It draws lots of power while enabled, so Engineering should monitor energy use carefully. The device has three boost levels to add to current sensor range: level 1 = interval, level 2 = interval X 2, level 3 = interval X 3. The higher the level the more power used. Interested in installing it?",
			"We can install a device that uses ship batteries to increase sensor range. Engineering activates the device, sets a level and then Science takes advantage of the increased range. If you install it, be careful since it uses a large amount of power. The device has three boost levels to add to current sensor range: level 1 = interval, level 2 = interval X 2, level 3 = interval X 3. The higher the level the more power used. Interested?",
			"We've got a sensor range booster available. It siphons a large amount of power out of the batteries into the sensors to increase sensor range. Engineering activates it, sets the level and deactivates it so that Science can take advantage of the longer sensor range. The sensor range booster has three boost levels to add to current sensor range: level 1 = interval, level 2 = interval X 2, level 3 = interval X 3. The higher the level the more power used. Is this something you are interested in having installed?",
		}
		setCommsMessage(tableSelectRandom(explain_power_sensor_boost))
		for i,sensor_booster in ipairs(comms_target.installable_sensor_boost_ranges) do
			addCommsReply(string.format("Range interval:%sU Reputation:%s",sensor_booster.interval,sensor_booster.cost),function()
				if comms_source:takeReputationPoints(sensor_booster.cost) then
					comms_source.power_sensor_interval = sensor_booster.interval
					comms_target.installable_sensor_boost_ranges[i] = comms_target.installable_sensor_boost_ranges[#comms_target.installable_sensor_boost_ranges]
					comms_target.installable_sensor_boost_ranges[#comms_target.installable_sensor_boost_ranges] = nil
					if #comms_target.installable_sensor_boost_ranges == 0 then
						comms_target.installable_sensor_boost = false
					end
					local sensor_booster_installed_confirmation = {
						"Installed",
						string.format("%s has installed the sensor booster device",comms_target:getCallSign()),
						"It's installed",
						string.format("%s now has a powered sensor booster",comms_source:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(sensor_booster_installed_confirmation))
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
				end
				if minor_boost_sensor_gift_enhance_back == nil or getScenarioTime() > minor_boost_sensor_gift_enhance_back + comms_fudge then
					addCommsReply("Back to enhance ship",enhanceShip)
					minor_boost_sensor_gift_enhance_back = getScenarioTime()
				end
				if minor_boost_sensor_gift_interactive_back == nil or getScenarioTime() > minor_boost_sensor_gift_interactive_back + comms_fudge then
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					minor_boost_sensor_gift_interactive_back = getScenarioTime()
				end
				if minor_boost_sensor_gift_comms_back == nil or getScenarioTime() > minor_boost_sensor_gift_comms_back + comms_fudge then
					addCommsReply(_("Back to station communication"), commsStation)
					minor_boost_sensor_gift_comms_back = getScenarioTime()
				end
			end)
		end
		if minor_boost_sensor_gift_enhance_back == nil or getScenarioTime() > minor_boost_sensor_gift_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_boost_sensor_gift_enhance_back = getScenarioTime()
		end
		if minor_boost_sensor_gift_interactive_back == nil or getScenarioTime() > minor_boost_sensor_gift_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_boost_sensor_gift_interactive_back = getScenarioTime()
		end
		if minor_boost_sensor_gift_comms_back == nil or getScenarioTime() > minor_boost_sensor_gift_comms_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_boost_sensor_gift_comms_back = getScenarioTime()
		end
	end)
end
function presentReturnMaxHealthWidgets()
	local chunk_max_health_prompt = {
		"Give portable max health diagnostic to repair technicians",
		string.format("Donate max health diagnostic unit to %s",comms_target:getCallSign()),
		"Remove max health diagnostic unit. Give it to station",
		string.format("Transfer max health diagnostic unit from %s to station %s",comms_source:getCallSign(),comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(chunk_max_health_prompt),function()
		local max_health_donation_confirmed = {
			string.format("%s thanks you and says they will put it to good use.",comms_target:getCallSign()),
			string.format("Max health diagnostic unit uninstalled from %s. The technicians at %s say, 'Thanks %s. There are a number of other ships that have been asking for this.'",comms_source:getCallSign(),comms_target:getCallSign(),comms_source:getCallSign()),
			string.format("%s thanks you for the donation of the max health diagnostic unit",comms_target:getCallSign()),
			string.format("The max health diagnostic unit has been transferred from your ship to the parts inventory on station %s. They express their gratitude for your donation.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(max_health_donation_confirmed))
		comms_source.max_health_widgets = false
		comms_target.max_health_widgets = true
		comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(3,9))
		if minor_max_health_enhance_return_back == nil or getScenarioTime() > minor_max_health_enhance_return_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_max_health_enhance_return_back = getScenarioTime()
		end
		if minor_max_health_interactive_return_back == nil or getScenarioTime() > minor_max_health_interactive_return_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_max_health_interactive_return_back = getScenarioTime()
		end
		if minor_max_health_comms_return_back == nil or getScenarioTime() > minor_max_health_comms_return_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_max_health_comms_return_back = getScenarioTime()
		end
	end)
end
function presentReturnShieldBanner()
	local remove_shield_diagnostic_prompt = {
		"Give portable shield diagnostic to repair technicians",
		string.format("Donate shield diagnostic unit to %s",comms_target:getCallSign()),
		"Remove shield diagnostic unit. Give it to station",
		string.format("Transfer shield diagnostic unit from %s to station %s",comms_source:getCallSign(),comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(remove_shield_diagnostic_prompt),function()
		local shield_diagnostic_donation_confirmed = {
			string.format("%s thanks you and says they will put it to good use.",comms_target:getCallSign()),
			string.format("Shield diagnostic unit uninstalled from %s. The technicians at %s say, 'Thanks %s. There are a number of other ships that have been asking for this.'",comms_source:getCallSign(),comms_target:getCallSign(),comms_source:getCallSign()),
			string.format("%s thanks you for the donation of the shield diagnostic unit",comms_target:getCallSign()),
			string.format("The shield diagnostic unit has been transferred from your ship to the parts inventory on station %s. They express their gratitude for your donation.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(shield_diagnostic_donation_confirmed))
		comms_source.shield_banner = false
		comms_target.shield_banner = true
		comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(3,9))
		if minor_shield_enhance_return_back == nil or getScenarioTime() > minor_shield_enhance_return_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_shield_enhance_return_back = getScenarioTime()
		end
		if minor_shield_interactive_return_back == nil or getScenarioTime() > minor_shield_interactive_return_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_shield_interactive_return_back = getScenarioTime()
		end
		if minor_shield_comms_return_back == nil or getScenarioTime() > minor_shield_comms_return_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_shield_comms_return_back = getScenarioTime()
		end
	end)
end
function presentReturnHullBanner()
	local remove_hull_diagnostic_prompt = {
		"Give portable hull diagnostic to repair technicians",
		string.format("Donate hull diagnostic unit to %s",comms_target:getCallSign()),
		"Remove hull diagnostic unit. Give it to station",
		string.format("Transfer hull diagnostic unit from %s to station %s",comms_source:getCallSign(),comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(remove_hull_diagnostic_prompt),function()
		local hull_diagnostic_donation_confirmed = {
			string.format("%s thanks you and says they will put it to good use.",comms_target:getCallSign()),
			string.format("Hull diagnostic unit uninstalled from %s. The technicians at %s say, 'Thanks %s. There are a number of other ships that have been asking for this.'",comms_source:getCallSign(),comms_target:getCallSign(),comms_source:getCallSign()),
			string.format("%s thanks you for the donation of the hull diagnostic unit",comms_target:getCallSign()),
			string.format("The hull diagnostic unit has been transferred from your ship to the parts inventory on station %s. They express their gratitude for your donation.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(hull_diagnostic_donation_confirmed))
		comms_source.hull_banner = false
		comms_target.hull_banner = true
		comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(3,9))
		if minor_hull_enhance_return_back == nil or getScenarioTime() > minor_hull_enhance_return_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_hull_enhance_return_back = getScenarioTime()
		end
		if minor_hull_interactive_return_back == nil or getScenarioTime() > minor_hull_interactive_return_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_hull_interactive_return_back = getScenarioTime()
		end
		if minor_hull_comms_return_back == nil or getScenarioTime() > minor_hull_comms_return_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_hull_comms_return_back = getScenarioTime()
		end
	end)
end
function presentReturnWaypointDistanceCalculator()
	local remove_waypoint_dist_calc_prompt = {
		"Give waypoint distance calculator to repair technicians",
		string.format("Donate waypoint distance calculator to %s",comms_target:getCallSign()),
		"Remove waypoint distance calculator. Give it to station",
		string.format("Transfer waypoint distance calculator from %s to station %s",comms_source:getCallSign(),comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(remove_waypoint_dist_calc_prompt),function()
		local waypoint_distance_calculator_explained = {
			"Not every ship in the fleet has a portable waypoint distance calculator. If you were to give us yours, we could install it on another ship if they wanted it. Would you like to give us your waypoint distance calculator?",
			"If you were to donate your waypoint distance calculator, we could install it on another ship in the fleet. Not every ship has one, you know. Do you want to give us yours?",
			"The waypoint distance calculator is not standard equipment on every ship in the fleet. Giving us yours allows us to install it on another ship. Would you like to donate yours? It's for a worthy cause.",
			"Consider that not every ship has a waypoint distance calculator. We could give another ship in the fleet one if you were to give us yours. What about it?",
		}
		setCommsMessage(tableSelectRandom(waypoint_distance_calculator_explained))
		local confirm_waypoint_dist_donation_prompt = {
			"Yes, we like to help the fleet (add 5 rep)",
			"Yes, we'll donate ours (add 5 rep)",
			"Ok, we will give you ours (add 5 rep)",
			"We'll help the fleet and give you ours (add 5 rep)",
		}
		addCommsReply(tableSelectRandom(confirm_waypoint_dist_donation_prompt),function()
			comms_source:addReputationPoints(5)
			comms_source.way_dist = false
			comms_target.way_dist = true
			comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(3,9))
			if comms_source.way_distance_button_hlm ~= nil then
				comms_source:removeCustom(comms_source.way_distance_button_hlm)
				comms_source:removeCustom(comms_source.way_distance_button_tac)
				comms_source.way_distance_button_hlm = nil
				comms_source.way_distance_button_tac = nil
			end
			local confirm_uninstalled_waypoint_dist_calc = {
				"Thanks. I'll be sure to give this to the next fleet member that asks.",
				"You have done the fleet an appreciated service. We'll be sure the waypoint distance calculator gets put to good use.",
				string.format("The %s will go down in our records as a generous ship. We'll make sure another fleet member gets good use from your waypoint distance calculator",comms_source:getCallSign()),
				"Your contribution is greatly appreciated. This waypoint distance calculator will make some helm officer very happy",
			}
			setCommsMessage(tableSelectRandom(confirm_uninstalled_waypoint_dist_calc))
			if minor_calculator_enhance_sell_back == nil or getScenarioTime() > minor_calculator_enhance_sell_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_calculator_enhance_sell_back = getScenarioTime()
			end
			if minor_calculator_interactive_sell_back == nil or getScenarioTime() > minor_calculator_interactive_sell_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_calculator_interactive_sell_back = getScenarioTime()
			end
			if minor_calculator_comms_sell_back == nil or getScenarioTime() > minor_calculator_comms_sell_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_calculator_comms_sell_back = getScenarioTime()
			end
		end)
		if minor_calculator_enhance_return_back == nil or getScenarioTime() > minor_calculator_enhance_return_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			minor_calculator_enhance_return_back = getScenarioTime()
		end
		if minor_calculator_interactive_return_back == nil or getScenarioTime() > minor_calculator_interactive_return_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			minor_calculator_interactive_return_back = getScenarioTime()
		end
		if minor_calculator_comms_return_back == nil or getScenarioTime() > minor_calculator_comms_return_back + comms_fudge then
			addCommsReply(_("Back to station communication"), commsStation)
			minor_calculator_comms_return_back = getScenarioTime()
		end
	end)
end
function minorUpgrades()
	--	set minor upgrade present or not at station if not yet set
	if comms_target.long_range_sensor_upgrade == nil then
		if random(1,100) < 37 then
			comms_target.long_range_sensor_upgrade = true
			comms_target.long_range_sensor_upgrade_recipients = {}
		else
			comms_target.long_range_sensor_upgrade = false
		end
	end
	if comms_target.patrol_probe == nil then
		if random(1,100) < 45 then
			comms_target.patrol_probe = math.random(1,4)
		else
			comms_target.patrol_probe = -1
		end
	end	
	if comms_target.trigger_missile == nil then
		comms_target.trigger_missile = {}
		if random(1,100) < 50 then	
			local trigger_flavors = {"E3","E4","N3","N4"}
			local trigger_flavor = tableRemoveRandom(trigger_flavors)
			table.insert(comms_target.trigger_missile,trigger_flavor)
			if random(1,100) < 40 then
				trigger_flavor = tableRemoveRandom(trigger_flavors)
				table.insert(comms_target.trigger_missile,trigger_flavor)
				if random(1,100) < 30 then
					trigger_flavor = tableRemoveRandom(trigger_flavors)
					table.insert(comms_target.trigger_missile,trigger_flavor)
					if random(1,100) < 20 then
						table.insert(comms_target.trigger_missile,trigger_flavors[1])
					end
				end
			end
		end
	end
	if comms_target.balance_shield == nil then
		if random(1,100) < 40 then
			comms_target.balance_shield = true
		else
			comms_target.balance_shield = false
		end
	end
	if comms_target.proximity_scanner == nil then
		if random(1,100) < 55 then
			comms_target.proximity_scanner = true
			comms_target.proximity_scanner_range = math.random(1,5)
		else
			comms_target.proximity_scanner = false
		end
	end
	if comms_target.max_health_widgets == nil then
		if random(1,100) < 50 then
			comms_target.max_health_widgets = true
		else
			comms_target.max_health_widgets = false
		end
	end
	if comms_target.shield_banner == nil then
		if random(1,100) < (60 - difficulty*5) then
			comms_target.shield_banner = true
		else
			comms_target.shield_banner = false
		end
	end
	if comms_target.hull_banner == nil then
		if random(1,100) < 50 then
			comms_target.hull_banner = true
		else
			comms_target.hull_banner = false
		end
	end
	if comms_target.way_dist == nil then
		if random(1,100) < 50 then
			comms_target.way_dist = true
		else
			comms_target.way_dist = false
		end
	end
	if comms_target.installable_sensor_boost == nil then
		if random(1,100) < 32 then
			comms_target.installable_sensor_boost = true
			comms_target.installable_sensor_boost_ranges = {}
			local sensor_boost_ranges_pool = {}
			for i=5,9,.5 do
				table.insert(sensor_boost_ranges_pool,{interval = i,cost=math.random(3,6)*2*i})
			end
			for i=1,3 do
				table.insert(comms_target.installable_sensor_boost_ranges,tableRemoveRandom(sensor_boost_ranges_pool))
			end
		else
			comms_target.installable_sensor_boost = false
		end
	end
	--	set minor upgrade available list based on presence at station, presence on ship and relationship
	local minor_upgrade_choices = {}
	local player_ship_template = comms_source:getTypeName()
	if #comms_target.trigger_missile > 0 then
		local new_flavor = false
		if comms_source.trigger_missile ~= nil then
			for i,trigger_flavor in ipairs(comms_target.trigger_missile) do
				if comms_source.trigger_missile[trigger_flavor] == nil then
					new_flavor = true
					break
				end
			end
		else
			new_flavor = true
		end
		if new_flavor then
			table.insert(minor_upgrade_choices,presentTriggerMissile)
		end
	end
	if comms_target.patrol_probe > 0 and comms_source.patrol_probe < comms_target.patrol_probe then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 25 then
				table.insert(minor_upgrade_choices,presentPatrolProbe)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 30 then
				table.insert(minor_upgrade_choices,presentPatrolProbe)
			end
		end
	end
	if comms_target.long_range_sensor_upgrade then
		local upgrade_available = true
		for i,p in ipairs(comms_target.long_range_sensor_upgrade_recipients) do
			if p == comms_source then
				upgrade_available = false
				break
			end
		end
		if upgrade_available then
			if comms_target:isFriendly(comms_source) then
				if comms_target.comms_data.friendlyness > 50 then
					table.insert(minor_upgrade_choices,presentLongRangeSensorUpgrade)
				end
			elseif not comms_target:isEnemy(comms_source) then
				if comms_target.comms_data.friendlyness > 30 then
					table.insert(minor_upgrade_choices,presentLongRangeSensorUpgrade)
				end
			end
		end
	end
	if comms_target.balance_shield and playerShipStats[player_ship_template] ~= nil and not playerShipStats[player_ship_template].balance_shield then
		if comms_source:getShieldCount() == 2 then
			if comms_target:isFriendly(comms_source) then
				if comms_target.comms_data.friendlyness > 25 then
					table.insert(minor_upgrade_choices,presentBalanceShield)
				end
			elseif not comms_target:isEnemy(comms_source) then
				if comms_target.comms_data.friendlyness > 35 then
					table.insert(minor_upgrade_choices,presentBalanceShield)
				end
			end
		end
	end
	if comms_target.installable_sensor_boost and (comms_source.power_sensor_interval == nil or comms_source.power_sensor_interval == 0) then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 30 then
				table.insert(minor_upgrade_choices,presentBoostSensorRangeWithPower)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 40 then
				table.insert(minor_upgrade_choices,presentBoostSensorRangeWithPower)
			end
		end
	end
	if comms_target.proximity_scanner and (comms_source.prox_scan == nil or comms_source.prox_scan < comms_target.proximity_scanner_range) then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 50 then
				table.insert(minor_upgrade_choices,presentProximityScanner)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 15 then
				table.insert(minor_upgrade_choices,presentProximityScanner)
			end
		end
	end
	if comms_target.max_health_widgets and not comms_source.max_health_widgets then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 25 then
				table.insert(minor_upgrade_choices,presentMaxHealthWidgets)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 45 then
				table.insert(minor_upgrade_choices,presentMaxHealthWidgets)
			end
		end
	end
	if comms_target.shield_banner and not comms_source.shield_banner then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 20 then
				table.insert(minor_upgrade_choices,presentShieldBanner)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 50 then
				table.insert(minor_upgrade_choices,presentShieldBanner)
			end
		end
	end
	if comms_target.hull_banner and not comms_source.hull_banner then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 30 then
				table.insert(minor_upgrade_choices,presentHullBanner)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 60 then
				table.insert(minor_upgrade_choices,presentHullBanner)
			end
		end
	end
	if comms_target.way_dist and not comms_source.way_dist then
		if comms_target:isFriendly(comms_source) then
			if comms_target.comms_data.friendlyness > 10 then
				table.insert(minor_upgrade_choices,presentWaypointDistanceCalculator)
			end
		elseif not comms_target:isEnemy(comms_source) then
			if comms_target.comms_data.friendlyness > 20 then
				table.insert(minor_upgrade_choices,presentWaypointDistanceCalculator)
			end
		end
	end
	--	set minor upgrade returns available list
	local return_minor_upgrade_choices = {}
	if not comms_target.max_health_widgets and comms_source.max_health_widgets ~= nil and comms_source.max_health_widgets then
		table.insert(return_minor_upgrade_choices,presentReturnMaxHealthWidgets)
	end
	if not comms_target.shield_banner and comms_source.shield_banner ~= nil and comms_source.shield_banner then
		table.insert(return_minor_upgrade_choices,presentReturnShieldBanner)
	end
	if not comms_target.hull_banner and comms_source.hull_banner ~= nil and comms_source.hull_banner then
		table.insert(return_minor_upgrade_choices,presentReturnHullBanner)
	end
	if not comms_target.way_dist and comms_source.way_dist ~= nil and comms_source.way_dist then
		table.insert(return_minor_upgrade_choices,presentReturnWaypointDistanceCalculator)
	end
	local presented_option = false
	if #minor_upgrade_choices + #return_minor_upgrade_choices > 0 then
		presented_option = true
		local minor_upgrade_prompt = {
			"Minor upgrade",
			"Get a minor upgrade",
			string.format("Minor upgrade for %s",comms_source:getCallSign()),
			string.format("Check minor upgrades on %s",comms_target:getCallSign()),
		}
		addCommsReply(tableSelectRandom(minor_upgrade_prompt),function()
			local minor_upgrades_available = {
				"Which of these are you interested in?",
				"What minor upgrades might you be interested in?",
				"Do any of these minor upgrades interest you?",
				string.format("Here are some minor upgrades available here on %s. Let me know if any of these seem interesting.",comms_target:getCallSign()),
			}
			setCommsMessage(tableRemoveRandom(minor_upgrades_available))
			string.format("")
			local upgrades_presented_count = 0
			for i=1,3 do
				local present_upgrade = tableRemoveRandom(minor_upgrade_choices)
				if present_upgrade ~= nil then
					present_upgrade()
					upgrades_presented_count = upgrades_presented_count + 1
				end
			end
			if upgrades_presented_count < 3 then
				--give back options
				local presentation_slots_remaining = 3 - upgrades_presented_count
				for i=1,presentation_slots_remaining do
					local present_return_upgrade = tableRemoveRandom(return_minor_upgrade_choices)
					if present_return_upgrade ~= nil then
						present_return_upgrade()
					end
				end
			end
			if minor_enhance_back == nil or getScenarioTime() > minor_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				minor_enhance_back = getScenarioTime()
			end
			if minor_interactive_back == nil or getScenarioTime() > minor_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				minor_interactive_back = getScenarioTime()
			end
			if minor_comms_back == nil or getScenarioTime() > minor_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				minor_comms_back = getScenarioTime()
			end
		end)
	end
	return presented_option
end
function overchargeShipSystems()
	local overcharge_available = false
	local jump_overcharge_available = false
	local front_shield_overcharge_available = false
	local rear_shield_overcharge_available = false
	local max_charge = comms_source.max_jump_range
	if max_charge == nil then
		max_charge = 50000
	end
	if comms_target.comms_data.jump_overcharge and comms_source:hasJumpDrive() then
		if comms_source:getJumpDriveCharge() >= max_charge then
			if comms_target:isFriendly(comms_source) then
				if comms_target.comms_data.friendlyness > 20 then
					overcharge_available = true
					jump_overcharge_available = true
				end
			elseif not comms_target:isEnemy(comms_source) then
				if comms_target.comms_data.friendlyness > 33 then
					overcharge_available = true
					jump_overcharge_available = true
				end
			end
		end
	end
	if comms_target.comms_data.shield_overcharge and comms_source:getShieldCount() > 0 then
		if comms_source:getShieldLevel(0) == comms_source:getShieldMax(0) then
			if comms_target:isFriendly(comms_source) then
				if comms_target.comms_data.friendlyness > 25 then
					overcharge_available = true
					front_shield_overcharge_available = true
				end
			elseif not comms_target:isEnemy(comms_source) then
				if comms_target.comms_data.friendlyness > 40 then
					overcharge_available = true
					front_shield_overcharge_available = true
				end
			end
		end
		if comms_source:getShieldCount() > 1 and comms_source:getShieldLevel(1) == comms_source:getShieldMax(1) then
			if comms_target:isFriendly(comms_source) then
				if comms_target.comms_data.friendlyness > 30 then
					overcharge_available = true
					rear_shield_overcharge_available = true
				end
			elseif not comms_target:isEnemy(comms_source) then
				if comms_target.comms_data.friendlyness > 50 then
					overcharge_available = true
					rear_shield_overcharge_available = true
				end
			end
		end
	end
	local option_presented = false
	if overcharge_available then
		option_presented = true
		local overcharge_system_prompt = {
			"Overcharge system",
			"Overcharge a system",
			string.format("Overcharge a system on %s",comms_source:getCallSign()),
			"Inject extra power into a ship system",
		}
		addCommsReply(tableSelectRandom(overcharge_system_prompt),function()
			local overcharge_what_system = {
				"What shall we overcharge for you?",
				"What system shall we overcharge for you",
				"Into what system shall we inject additional power?",
				"What system do you want overcharged?",
			}
			setCommsMessage(tableSelectRandom(overcharge_what_system))
			if jump_overcharge_available then
				local overcharge_cost = 10
				if comms_target.comms_data.friendlyness > 66 then
					overcharge_cost = 5
				end
				local overcharge_jump_prompt = {
					string.format("Overcharge Jump Drive (%i rep)",overcharge_cost),
					string.format("Overcharge the jump drive (%i rep)",overcharge_cost),
					string.format("Put extra power in the jump drive (%i rep)",overcharge_cost),
					string.format("Jump drive (%i reputation)",overcharge_cost),
				}
				addCommsReply(tableSelectRandom(overcharge_jump_prompt),function()
					if comms_source:takeReputationPoints(overcharge_cost) then
						comms_source:setJumpDriveCharge(comms_source:getJumpDriveCharge() + max_charge)
						local jump_drive_overcharged = {
							string.format("Your jump drive has been overcharged to %ik",math.floor(comms_source:getJumpDriveCharge()/1000)),
							string.format("%s's jump drive has been overcharged to %ik",comms_source:getCallSign(),math.floor(comms_source:getJumpDriveCharge()/1000)),
							string.format("We have overcharged your jump drive to %ik",math.floor(comms_source:getJumpDriveCharge()/1000)),
							string.format("%s's jump drive now has total charge of %ik",comms_source:getCallSign(),math.floor(comms_source:getJumpDriveCharge()/1000)),
						}
						setCommsMessage(tableSelectRandom(jump_drive_overcharged))
					else
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						setCommsMessage(tableSelectRandom(insufficient_rep_responses))
					end
					if overcharge_jump_enhance_back == nil or getScenarioTime() > overcharge_jump_enhance_back + comms_fudge then
						addCommsReply("Back to enhance ship",enhanceShip)
						overcharge_jump_enhance_back = getScenarioTime()
					end
					if overcharge_jump_interactive_back == nil or getScenarioTime() > overcharge_jump_interactive_back + comms_fudge then
						addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
						overcharge_jump_interactive_back = getScenarioTime()
					end
					if overcharge_jump_comms_back == nil or getScenarioTime() > overcharge_jump_comms_back + comms_fudge then
						addCommsReply(_("Back to station communication"), commsStation)
						overcharge_jump_comms_back = getScenarioTime()
					end
				end)
			end
			if front_shield_overcharge_available then
				local base_front_shield_overcharge_cost = 10
				if comms_target:isFriendly(comms_source) then
					if comms_target.comms_data.friendlyness > 80 then
						base_front_shield_overcharge_cost = 5
					elseif comms_target.comms_data.friendlyness > 70 then
						base_front_shield_overcharge_cost = 7
					end
				elseif not comms_target:isEnemy(comms_source) then
					if comms_target.comms_data.friendlyness > 90 then
						base_front_shield_overcharge_cost = 5
					elseif comms_target.comms_data.friendlyness > 75 then
						base_front_shield_overcharge_cost = 7
					end
				end
				if comms_source:getReputationPoints() > 2*base_front_shield_overcharge_cost then
					local front_shield_overcharge_range_prompt = {
						string.format("Overcharge front shield (%i to %i rep)",base_front_shield_overcharge_cost,base_front_shield_overcharge_cost*4),
						string.format("Front shield overcharge (%i to %i rep)",base_front_shield_overcharge_cost,base_front_shield_overcharge_cost*4),
						string.format("Use %i to %i rep to overcharge front shield",base_front_shield_overcharge_cost,base_front_shield_overcharge_cost*4),
						string.format("Overcharge front shield rep: min:%i, max:%i",base_front_shield_overcharge_cost,base_front_shield_overcharge_cost*4),
					}
					addCommsReply(tableSelectRandom(front_shield_overcharge_range_prompt),function()
						local overcharge_size_options = {
							"How much of an overcharge would you like on your front shields?",
							"How much overcharging should we do on your front shields?",
							"How much of an overcharge do you want added to your front shields?",
							"How much power should we inject into your front shields to overcharge them?",
						}
						setCommsMessage(tableSelectRandom(overcharge_size_options))
						for i=1,4 do
							if i*base_front_shield_overcharge_cost <= comms_source:getReputationPoints() then
								local overcharge_amount_prompts = {
									string.format("%i%% overcharge (%i rep)",i*5,i*base_front_shield_overcharge_cost),
									string.format("%i%% overcharge (%i reputation",i*5,i*base_front_shield_overcharge_cost),
									string.format("%i%% overcharge for %i reputation",i*5,i*base_front_shield_overcharge_cost),
									string.format("Power up to %i%% more (%i rep)",i*5,i*base_front_shield_overcharge_cost),
								}
								addCommsReply(tableSelectRandom(overcharge_amount_prompts),function()
									if comms_source:takeReputationPoints(i*base_front_shield_overcharge_cost) then
										if comms_source:getShieldCount() == 1 then
											comms_source:setShields(comms_source:getShieldMax(0)*(1 + i*5/100))
										else
											comms_source:setShields(comms_source:getShieldMax(0)*(1 + i*5/100),comms_source:getShieldLevel(1))
										end
										local overcharge_front_shield_confirmation = {
											"Your front shield has been overcharged",
											"Overcharge applied to front shield",
											string.format("%s's front shield has now been overcharged",comms_source:getCallSign()),
											"Front shield overcharged as requested",
										}
										setCommsMessage(tableSelectRandom(overcharge_front_shield_confirmation))
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
									end
									if overcharge_front_shield_enhance_back == nil then
										overcharge_front_shield_enhance_back = {}
									end
									if overcharge_front_shield_enhance_back[i] == nil or getScenarioTime() > overcharge_front_shield_enhance_back[i] + comms_fudge then
										addCommsReply("Back to enhance ship",enhanceShip)
										overcharge_front_shield_enhance_back[i] = getScenarioTime()
									end
									if overcharge_front_shield_interactive_back == nil then
										overcharge_front_shield_interactive_back = {}
									end
									if overcharge_front_shield_interactive_back[i] == nil or getScenarioTime() > overcharge_front_shield_interactive_back[i] + comms_fudge then
										addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
										overcharge_front_shield_interactive_back[i] = getScenarioTime()
									end
									if overcharge_front_shield_comms_back == nil then
										overcharge_front_shield_comms_back = {}
									end
									if overcharge_front_shield_comms_back[i] == nil or getScenarioTime() > overcharge_front_shield_comms_back[i] + comms_fudge then
										addCommsReply(_("Back to station communication"), commsStation)
										overcharge_front_shield_comms_back[i] = getScenarioTime()
									end
								end)
							end
						end
					end)
				else
					local front_shield_overcharge_single_prompt = {
						string.format("Overcharge front shield (%i rep)",base_front_shield_overcharge_cost),
						string.format("Front shield overcharge (%i rep)",base_front_shield_overcharge_cost),
						string.format("Use %i rep to overcharge front shield",base_front_shield_overcharge_cost),
						string.format("Overcharge front shield rep: %i",base_front_shield_overcharge_cost),
					}
					addCommsReply(tableSelectRandom(front_shield_overcharge_single_prompt),function()
						if comms_source:takeReputationPoints(base_front_shield_overcharge_cost) then
							if comms_source:getShieldCount() == 1 then
								comms_source:setShields(comms_source:getShieldMax(0)*1.05)
							else
								comms_source:setShields(comms_source:getShieldMax(0)*1.05,comms_source:getShieldLevel(1))
							end
							local overcharge_front_shield_confirmation = {
								"Your front shield has been overcharged",
								"Overcharge applied to front shield",
								string.format("%s's front shield has now been overcharged",comms_source:getCallSign()),
								"Front shield overcharged as requested",
							}
							setCommsMessage(tableSelectRandom(overcharge_front_shield_confirmation))
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
						end
						if overcharge_front_shield_enhance_back == nil then
							overcharge_front_shield_enhance_back = {}
						end
						if overcharge_front_shield_enhance_back[1] == nil or getScenarioTime() > overcharge_front_shield_enhance_back[1] + comms_fudge then
							addCommsReply("Back to enhance ship",enhanceShip)
							overcharge_front_shield_enhance_back[1] = getScenarioTime()
						end
						if overcharge_front_shield_interactive_back == nil then
							overcharge_front_shield_interactive_back = {}
						end
						if overcharge_front_shield_interactive_back[1] == nil or getScenarioTime() > overcharge_front_shield_interactive_back[1] + comms_fudge then
							addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
							overcharge_front_shield_interactive_back[1] = getScenarioTime()
						end
						if overcharge_front_shield_comms_back == nil then
							overcharge_front_shield_comms_back = {}
						end
						if overcharge_front_shield_comms_back[1] == nil or getScenarioTime() > overcharge_front_shield_comms_back[1] + comms_fudge then
							addCommsReply(_("Back to station communication"), commsStation)
							overcharge_front_shield_comms_back[1] = getScenarioTime()
						end
					end)
				end
			end
			if rear_shield_overcharge_available then
				local base_rear_shield_overcharge_cost = 10
				if comms_target:isFriendly(comms_source) then
					if comms_target.comms_data.friendlyness > 80 then
						base_rear_shield_overcharge_cost = 5
					elseif comms_target.comms_data.friendlyness > 70 then
						base_rear_shield_overcharge_cost = 7
					end
				elseif not comms_target:isEnemy(comms_source) then
					if comms_target.comms_data.friendlyness > 90 then
						base_rear_shield_overcharge_cost = 5
					elseif comms_target.comms_data.friendlyness > 75 then
						base_rear_shield_overcharge_cost = 7
					end
				end
				if comms_source:getReputationPoints() > 2*base_rear_shield_overcharge_cost then
					local rear_shield_overcharge_range_prompt = {
						string.format("Overcharge rear shield (%i to %i rep)",base_rear_shield_overcharge_cost,base_rear_shield_overcharge_cost*4),
						string.format("Rear shield overcharge (%i to %i rep)",base_rear_shield_overcharge_cost,base_rear_shield_overcharge_cost*4),
						string.format("Use %i to %i rep to overcharge rear shield",base_rear_shield_overcharge_cost,base_rear_shield_overcharge_cost*4),
						string.format("Overcharge rear shield rep: min:%i, max:%i",base_rear_shield_overcharge_cost,base_rear_shield_overcharge_cost*4),
					}
					addCommsReply(tableSelectRandom(rear_shield_overcharge_range_prompt),function()
						local overcharge_rear_size_options = {
							"How much of an overcharge would you like on your rear shields?",
							"How much overcharging should we do on your rear shields?",
							"How much of an overcharge do you want added to your rear shields?",
							"How much power should we inject into your rear shields to overcharge them?",
						}
						setCommsMessage(tableSelectRandom(overcharge_rear_size_options))
						for i=1,4 do
							if i*base_rear_shield_overcharge_cost <= comms_source:getReputationPoints() then
								local overcharge_rear_amount_prompts = {
									string.format("%i%% overcharge (%i rep)",i*5,i*base_rear_shield_overcharge_cost),
									string.format("%i%% overcharge (%i reputation",i*5,i*base_rear_shield_overcharge_cost),
									string.format("%i%% overcharge for %i reputation",i*5,i*base_rear_shield_overcharge_cost),
									string.format("Power up to %i%% more (%i rep)",i*5,i*base_rear_shield_overcharge_cost),
								}
								addCommsReply(tableSelectRandom(overcharge_rear_amount_prompts),function()
									if comms_source:takeReputationPoints(i*base_rear_shield_overcharge_cost) then
										comms_source:setShields(comms_source:getShieldLevel(0),comms_source:getShieldMax(1)*(1 + i*5/100))
										local overcharge_rear_shield_confirmation = {
											"Your rear shield has been overcharged",
											"Overcharge applied to rear shield",
											string.format("%s's rear shield has now been overcharged",comms_source:getCallSign()),
											"Rear shield overcharged as requested",
										}
										setCommsMessage(tableSelectRandom(overcharge_rear_shield_confirmation))
									else
										local insufficient_rep_responses = {
											"Insufficient reputation",
											"Not enough reputation",
											"You need more reputation",
											string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
											"You don't have enough reputation",
										}
										setCommsMessage(tableSelectRandom(insufficient_rep_responses))
									end
									if overcharge_rear_shield_enhance_back == nil then
										overcharge_rear_shield_enhance_back = {}
									end
									if overcharge_rear_shield_enhance_back[i] == nil or getScenarioTime() > overcharge_rear_shield_enhance_back[i] + comms_fudge then
										addCommsReply("Back to enhance ship",enhanceShip)
										overcharge_rear_shield_enhance_back[i] = getScenarioTime()
									end
									if overcharge_rear_shield_interactive_back == nil then
										overcharge_rear_shield_interactive_back = {}
									end
									if overcharge_rear_shield_interactive_back[i] == nil or getScenarioTime() > overcharge_rear_shield_interactive_back[i] + comms_fudge then
										addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
										overcharge_rear_shield_interactive_back[i] = getScenarioTime()
									end
									if overcharge_rear_shield_comms_back == nil then
										overcharge_rear_shield_comms_back = {}
									end
									if overcharge_rear_shield_comms_back[i] == nil or getScenarioTime() > overcharge_rear_shield_comms_back[i] + comms_fudge then
										addCommsReply(_("Back to station communication"), commsStation)
										overcharge_rear_shield_comms_back[i] = getScenarioTime()
									end
								end)
							end
						end
					end)
				else
					local rear_shield_overcharge_single_prompt = {
						string.format("Overcharge rear shield (%i rep)",base_rear_shield_overcharge_cost),
						string.format("Rear shield overcharge (%i rep)",base_rear_shield_overcharge_cost),
						string.format("Use %i rep to overcharge rear shield",base_rear_shield_overcharge_cost),
						string.format("Overcharge rear shield rep: %i",base_rear_shield_overcharge_cost),
					}
					addCommsReply(tableSelectRandom(rear_shield_overcharge_single_prompt),function()
						if comms_source:takeReputationPoints(base_rear_shield_overcharge_cost) then
							comms_source:setShields(comms_source:getShieldLevel(0),comms_source:getShieldMax(1)*1.05)
							local overcharge_rear_shield_confirmation = {
								"Your rear shield has been overcharged",
								"Overcharge applied to rear shield",
								string.format("%s's rear shield has now been overcharged",comms_source:getCallSign()),
								"Rear shield overcharged as requested",
							}
							setCommsMessage(tableSelectRandom(overcharge_rear_shield_confirmation))
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
						end
						if overcharge_rear_shield_enhance_back == nil then
							overcharge_rear_shield_enhance_back = {}
						end
						if overcharge_rear_shield_enhance_back[1] == nil or getScenarioTime() > overcharge_rear_shield_enhance_back[1] + comms_fudge then
							addCommsReply("Back to enhance ship",enhanceShip)
							overcharge_rear_shield_enhance_back[1] = getScenarioTime()
						end
						if overcharge_rear_shield_interactive_back == nil then
							overcharge_rear_shield_interactive_back = {}
						end
						if overcharge_rear_shield_interactive_back[1] == nil or getScenarioTime() > overcharge_rear_shield_interactive_back[1] + comms_fudge then
							addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
							overcharge_rear_shield_interactive_back[1] = getScenarioTime()
						end
						if overcharge_rear_shield_comms_back == nil then
							overcharge_rear_shield_comms_back = {}
						end
						if overcharge_rear_shield_comms_back[1] == nil or getScenarioTime() > overcharge_rear_shield_comms_back[1] + comms_fudge then
							addCommsReply(_("Back to station communication"), commsStation)
							overcharge_rear_shield_comms_back[1] = getScenarioTime()
						end
					end)
				end
			end
			if overcharge_enhance_back == nil or getScenarioTime() > overcharge_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				overcharge_enhance_back = getScenarioTime()
			end
			if overcharge_interactive_back == nil or getScenarioTime() > overcharge_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				overcharge_interactive_back = getScenarioTime()
			end
			if overcharge_comms_back == nil or getScenarioTime() > overcharge_comms_back + comms_fudge then
				addCommsReply(_("Back to station communication"), commsStation)
				overcharge_comms_back = getScenarioTime()
			end
		end)
	end
	return option_presented
end
function boostSensorsWhileDocked()
	local temporary_station_sensor_boost_prompt = {
		string.format("Augment scan range with station sensors while docked (%i rep)",comms_target.comms_data.sensor_boost.cost),
		string.format("Increase sensor range via station sensors while docked (%i rep)",comms_target.comms_data.sensor_boost.cost),
		string.format("Tie in to station sensors to boost range while docked (%i rep)",comms_target.comms_data.sensor_boost.cost),
		string.format("Connect to station sensors in docking bay to boost range (%i rep)",comms_target.comms_data.sensor_boost.cost),
	}
	addCommsReply(tableSelectRandom(temporary_station_sensor_boost_prompt),function()
		if comms_source:takeReputationPoints(comms_target.comms_data.sensor_boost.cost) then
			if comms_source.normal_long_range_radar == nil then
				comms_source.normal_long_range_radar = comms_source:getLongRangeRadarRange()
			end
			comms_source.station_sensor_boost = comms_target.comms_data.sensor_boost.value
			local confirm_sensor_boost = {
				string.format("Sensors increased by %i units",math.floor(comms_target.comms_data.sensor_boost.value/1000)),
				string.format("Sensor range increased by %i units",math.floor(comms_target.comms_data.sensor_boost.value/1000)),
				string.format("In conjunction with %s's sensors, our sensor range has been increased by %i units",comms_target:getCallSign(),math.floor(comms_target.comms_data.sensor_boost.value/1000)),
				string.format("%s's and %s's sensors in tandem have increased our sensor range by %i units",comms_source:getCallSign(),comms_target:getCallSign(),math.floor(comms_target.comms_data.sensor_boost.value/1000)),
			}
			setCommsMessage(tableSelectRandom(confirm_sensor_boost))
		else
			local insufficient_rep_responses = {
				"Insufficient reputation",
				"Not enough reputation",
				"You need more reputation",
				string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
				"You don't have enough reputation",
			}
			setCommsMessage(tableSelectRandom(insufficient_rep_responses))
		end
		if boost_sensors_enhance_back == nil or getScenarioTime() > boost_sensors_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			boost_sensors_enhance_back = getScenarioTime()
		end
		if boost_sensors_interactive_back == nil or getScenarioTime() > boost_sensors_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			boost_sensors_interactive_back = getScenarioTime()
		end
		if boost_sensors_comms_back == nil or getScenarioTime() > boost_sensors_comms_back + comms_fudge then
			addCommsReply("Back to station communication", commsStation)
			boost_sensors_comms_back = getScenarioTime()
		end
	end)
end
function increaseSecurityMorale()
	local select_training_prompt = {
		"Select a morale boosting security training course",
		"Choose a security training course to boost morale",
		"Which morale boosting training course would you like?",
		"What morale boosting security training course do you want?",
	}
	addCommsReply(tableSelectRandom(select_training_prompt),function()
		local security_morale_training_explained = {
			"We have access to some training courses for your security officers. They are designed to boost their morale as well as give them some training. Pick one to be downloaded for 5 reputation into your simulation systems if you're interested.",
			"We have a small library of training courses designed for security officers. They should boost their morale in addition to providing some training. Which one would you like to download into your simulation systems for 5 reputation?",
			"Would you like one of our training course? We've got some that are designed for security personnel. They are intended to boost morale as well as increase competence. We could transmit one to your simulation system for 5 reputation.",
			string.format("There are several security officer training courses in %s's library. They're designed to boost morale and competence. Pick one for 5 reputation to run in your simulation systems if you like.",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(security_morale_training_explained))
		for i,title in ipairs(security_morale_boosters) do
			addCommsReply(title,function()
				if comms_source:takeReputationPoints(5) then
					local got_the_training_module = {
						string.format("'%s' has been downloaded. Your security officers are already taking advantage of it",title),
						string.format("%s has transmitted '%s' to your simulation systems. Our reading show that some of your security team is already using it",comms_target:getCallSign(),title),
						string.format("%s's simulation systems have downloaded '%s.' At least one of your security officers has already started running it.",comms_source:getCallSign(),title),
						string.format("'%s' has been downloaded to your simulation systems as requested. Your security officers immediately started running it.",title),
					}
					setCommsMessage(tableSelectRandom(got_the_training_module))
					security_morale_boosters[i] = security_morale_boosters[#security_morale_boosters]
					security_morale_boosters[#security_morale_boosters] = nil
					comms_source.security_morale = 1
				else
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					setCommsMessage(tableSelectRandom(insufficient_rep_responses))
				end
				if security_boost_enhance_back == nil then
					security_boost_enhance_back = {}
				end
				if security_boost_enhance_back[i] == nil or getScenarioTime() > security_boost_enhance_back[i] + comms_fudge then
					addCommsReply("Back to enhance ship",enhanceShip)
					security_boost_enhance_back[i] = getScenarioTime()
				end
				if security_boost_interactive_back == nil then
					security_boost_interactive_back = {}
				end
				if security_boost_interactive_back[i] == nil or getScenarioTime() > security_boost_interactive_back[i] + comms_fudge then
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					security_boost_interactive_back[i] = getScenarioTime()
				end
				if security_boost_comms_back == nil then
					security_boost_comms_back = {}
				end
				if security_boost_comms_back[i] == nil or getScenarioTime() > security_boost_comms_back[i] + comms_fudge then
					addCommsReply("Back to station communication", commsStation)
					security_boost_comms_back[i] = getScenarioTime()
				end
			end)
		end
		if security_training_enhance_back == nil or getScenarioTime() > security_training_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			security_training_enhance_back = getScenarioTime()
		end
		if security_training_interactive_back == nil or getScenarioTime() > security_training_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			security_training_interactive_back = getScenarioTime()
		end
		if security_training_comms_back == nil or getScenarioTime() > security_training_comms_back + comms_fudge then
			addCommsReply("Back to station communication", commsStation)
			security_training_comms_back = getScenarioTime()
		end
	end)
end
function getSpecialtyProbes()
	local get_specialty_probes_prompt = {
		"Get specialty probes",
		"Get some specialty probe kits",
		"Obtain specialty probes",
		string.format("Get specialty probes from %s",comms_target:getCallSign()),
	}
	addCommsReply(tableSelectRandom(get_specialty_probes_prompt),function()
		local specialty_probes = {}
		if comms_target.comms_data.fast_probes ~= nil and comms_target.comms_data.fast_probes.quantity > 0 then
			specialty_probes["fast_probes"] = {
				quantity = comms_target.comms_data.fast_probes.quantity,			
				singular_desc = "One batch of %s type probes",				
				plural_desc = "%i batches of %s type probes",			
				name = comms_target.comms_data.fast_probes.name,			
				cost = comms_target.comms_data.fast_probes.cost,
				increment = 5,
				prompt = "Purchase five %s type probes for %i reputation",
				response = "Five %s type probes have been added",
			}
		end
		if comms_target.comms_data.remote_warp_jammer ~= nil and comms_target.comms_data.remote_warp_jammer.quantity > 0 then
			specialty_probes["remote_warp_jammer"] = {
				quantity = comms_target.comms_data.remote_warp_jammer.quantity,	
				singular_desc = "One remote warp jammer kit of type %s",	
				plural_desc = "%i remote warp jammer kits of type %s",	
				name = comms_target.comms_data.remote_warp_jammer.name,		
				cost = comms_target.comms_data.remote_warp_jammer.cost,		
				increment = 1,
				prompt = "Purchase %s type probe for %i reputation",
				response = "A %s type probe has been added",
			}
		end
		if comms_target.comms_data.sensor_boost_probes ~= nil and comms_target.comms_data.sensor_boost_probes.quantity > 0 then
			specialty_probes["sensor_boost_probes"] = {
				quantity = comms_target.comms_data.sensor_boost_probes.quantity,	
				singular_desc = "One sensor boost probe of type %s",		
				plural_desc = "%i sensor boost probes of type %s",		
				name = comms_target.comms_data.sensor_boost_probes.name,	
				cost = comms_target.comms_data.sensor_boost_probes.cost,	
				increment = 1,
				prompt = "Purchase %s type probe for %s reputation",
				response = "A %s type probe has been added",
			}
		end
		if comms_target.comms_data.mine_probes ~= nil and comms_target.comms_data.mine_probes.quantity > 0 then
			specialty_probes["mine_probes"] = {
				quantity = comms_target.comms_data.mine_probes.quantity,			
				singular_desc = "One mine probe of type %s",				
				plural_desc = "%i mine probes of type %s",				
				name = comms_target.comms_data.mine_probes.name,			
				cost = comms_target.comms_data.mine_probes.cost,			
				increment = 1,
				prompt = "Purchase %s type probe for %s reputation",
				response = "A %s type probe has been added",
			}
		end
		local quantity_message = ""
		local desc = ""
		for specialty_probe,sp in pairs(specialty_probes) do
			if sp.quantity ~= nil and sp.quantity > 0 then
				if sp.quantity > 1 then
					desc = string.format(sp.plural_desc,sp.quantity,sp.name)
				else
					desc = string.format(sp.singular_desc,sp.name)
				end
				if quantity_message == "" then
					quantity_message = string.format("We've got the following specialty probes available:\n    %s",desc)
				else
					quantity_message = string.format("%s\n    %s",quantity_message,desc)
				end
				addCommsReply(string.format(sp.prompt,sp.name,sp.cost),function()
					if sp == "mine_probes" and comms_source:getWeaponStorageMax("Mine") < comms_target.comms_data.mine_probes.mines_required then
						setCommsMessage(string.format("This mine probe kit requires %i mines. Your ship specification maxes out at %i mines. Upgrade your ship to store more mines and come back.",comms_target.comms_data.mine_probes.mines_required,comms_source:getWeaponStorageMax("Mine")))
					else
						if comms_source:takeReputationPoints(sp.cost) then
							comms_target.comms_data[specialty_probe].quantity = comms_target.comms_data[specialty_probe].quantity - 1
							if comms_source.probe_type_list == nil then
								comms_source.probe_type_list = {}
								table.insert(comms_source.probe_type_list,{name = "standard", count = -1})
							end
							local matching_index = 0
							for probe_type_index, probe_type_item in ipairs(comms_source.probe_type_list) do
								if probe_type_item.name == sp.name then
									matching_index = probe_type_index
									break
								end
							end
							if matching_index > 0 then
								comms_source.probe_type_list[matching_index].count = comms_source.probe_type_list[matching_index].count + sp.increment
							else
								--	add variants for different probe types
								if specialty_probe == "remote_warp_jammer" then
									table.insert(comms_source.probe_type_list,{name = sp.name, count = sp.increment, speed = comms_target.comms_data.remote_warp_jammer.speed, warp_jam_range = comms_target.comms_data.remote_warp_jammer.warp_jam_range})
								elseif specialty_probe == "sensor_boost_probes" then
									table.insert(comms_source.probe_type_list,{name = sp.name, count = sp.increment, speed = comms_target.comms_data.sensor_boost_probes.speed, boost = comms_target.comms_data.sensor_boost_probes.boost, range = comms_target.comms_data.sensor_boost_probes.range})
								elseif specialty_probe == "mine_probes" then
									table.insert(comms_source.probe_type_list,{name = sp.name, count = sp.increment, speed = comms_target.comms_data.mine_probes.speed, mine_fetus = comms_target.comms_data.mine_probes.mine_fetus, mines_required = comms_target.comms_data.mine_probes.mines_required})
								else	--fast probes
									table.insert(comms_source.probe_type_list,{name = sp.name, count = sp.increment, speed = comms_target.comms_data.fast_probes.speed})
								end
							end
							setCommsMessage(string.format(sp.response,sp.name))
							if comms_source.probe_type == nil then
								comms_source.probe_type = "standard"
							end
							if comms_source.probe_type_button == nil then
								comms_source.probe_type_button = "probe_type_button"
								comms_source:addCustomButton("Relay",comms_source.probe_type_button,"Probes: standard",function()
									string.format("")
									cycleProbeType(comms_source)
								end,10)
							end
							if comms_source.probe_type_button_ops == nil then
								comms_source.probe_type_button_ops = "probe_type_button_ops"
								comms_source:addCustomButton("Operations",comms_source.probe_type_button_ops,"Probes: standard",function()
									string.format("")
									cycleProbeType(comms_source)
								end,10)
							end
						else
							local insufficient_rep_responses = {
								"Insufficient reputation",
								"Not enough reputation",
								"You need more reputation",
								string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
								"You don't have enough reputation",
							}
							setCommsMessage(tableSelectRandom(insufficient_rep_responses))
						end
					end
					addCommsReply("Back to enhance ship",enhanceShip)
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					addCommsReply("Back to station communication", commsStation)
				end)
			end
		end
		setCommsMessage(quantity_message)
		addCommsReply("What exactly are specialty probes?",function()
			local kit_description = "Specialty probes are kits that you use in conjunction with your normal probes."
			if comms_target.comms_data.fast_probes ~= nil and comms_target.comms_data.fast_probes.quantity > 0 then
				kit_description = string.format("%s The %s kits come in batches of 5. You attach a kit to one of the probes you launch. The probe then travels at %.1f units per minute to reach its destination. Normal probes travel at 60 units per minute.",kit_description,comms_target.comms_data.fast_probes.name,comms_target.comms_data.fast_probes.speed*60/1000)
			end
			if comms_target.comms_data.remote_warp_jammer ~= nil and comms_target.comms_data.remote_warp_jammer.quantity > 0 then
				kit_description = string.format("%s The %s kits are purchased singly. When attached, the probe travels at %.1f units per minute to reach its destination. Once the probe arrives, it drops a warp jammer with a jamming radius of %i units.",kit_description,comms_target.comms_data.remote_warp_jammer.name,comms_target.comms_data.remote_warp_jammer.speed*60/1000,math.floor(comms_target.comms_data.remote_warp_jammer.warp_jam_range/1000))
			end
			if comms_target.comms_data.sensor_boost_probes ~= nil and comms_target.comms_data.sensor_boost_probes.quantity > 0 then
				kit_description = string.format("%s The %s kits are purchased individually. When attached, the probe enhances sensors by %i units if within %i units. The sensor boost gradually decreases until there is no boost at %i units distance from the probe.",kit_description,comms_target.comms_data.sensor_boost_probes.name,comms_target.comms_data.sensor_boost_probes.boost,comms_target.comms_data.sensor_boost_probes.range/2,comms_target.comms_data.sensor_boost_probes.range)
			end
			if comms_target.comms_data.mine_probes ~= nil and comms_target.comms_data.mine_probes.quantity > 0 then
				kit_description = string.format("%s The %s kits are purchased individually. When attached along with a mine or mines from supply, the probe carries the mine(s) inert to the probe destination. Once it reaches its destination, it enters a 5 second preparation phase. After that, it enters a stealth mode for 5 - 15 seconds. After the stealth mode, it primes the mine(s).",kit_description,comms_target.comms_data.mine_probes.name)
			end
			kit_description = string.format("%s You don't actually get additional probes, rather, you enhance the probes you already have.",kit_description)
			setCommsMessage(kit_description)
			if specialty_probes_explain_enhance_back == nil or getScenarioTime() > specialty_probes_explain_enhance_back + comms_fudge then
				addCommsReply("Back to enhance ship",enhanceShip)
				specialty_probes_explain_enhance_back = getScenarioTime()
			end
			if specialty_probes_explain_interactive_back == nil or getScenarioTime() > specialty_probes_explain_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				specialty_probes_explain_interactive_back = getScenarioTime()
			end
			if specialty_probes_explain_comms_back == nil or getScenarioTime() > specialty_probes_explain_comms_back + comms_fudge then
				addCommsReply("Back to station communication", commsStation)
				specialty_probes_explain_comms_back = getScenarioTime()
			end
		end)
		if specialty_probes_enhance_back == nil or getScenarioTime() > specialty_probes_enhance_back + comms_fudge then
			addCommsReply("Back to enhance ship",enhanceShip)
			specialty_probes_enhance_back = getScenarioTime()
		end
		if specialty_probes_interactive_back == nil or getScenarioTime() > specialty_probes_interactive_back + comms_fudge then
			addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
			specialty_probes_interactive_back = getScenarioTime()
		end
		if specialty_probes_comms_back == nil or getScenarioTime() > specialty_probes_comms_back + comms_fudge then
			addCommsReply("Back to station communication", commsStation)
			specialty_probes_comms_back = getScenarioTime()
		end
	end)
end
function unloadEscapePods(cost)
	if cost == nil then
		local unload_escape_pod_prompt = {
			"Unload retrieved escape pods",
			string.format("Offload the escape pods currently on %s",comms_source:getCallSign()),
			string.format("Release the scape pods into %s's care",comms_target:getCallSign()),
			string.format("Unload the escape pods that %s retrieved earlier",comms_source:getCallSign()),
		}
		addCommsReply(tableSelectRandom(unload_escape_pod_prompt),function()
			local pods_aboard = comms_source.max_pods - comms_source.pods
			comms_source.pods = comms_source.max_pods
			if pods_aboard > 1 then
				local plural_escape_pod_response = {
					string.format("Escape pods unloaded and placed in the care of station %s. %s may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
					string.format("%s is now taking care of the escape pods retrieved by %s. With the space freed up, we may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
					string.format("[%s docking bay supervisor]\n'All escape pods unloaded, %s. We'll take care of them from here.'\nUnloading those escape pods frees us up to pick up as many as %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
					string.format("%s has secured all of %s's escape pods. %i open escape pod slots now available.",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
				}
				setCommsMessage(tableSelectRandom(plural_escape_pod_response))
			else
				if comms_source.max_pods > 1 then
					local single_unload_plural_available_pods = {
						string.format("Escape pod unloaded into the care of %s. %s may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("%s is now taking care of the escape pod retrieved by %s. With the space freed up, we may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("[%s docking bay supervisor]\n'Your escape pod has been unloaded, %s. We'll take care of it from here.'\nUnloading those escape pods frees us up to pick up as many as %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("%s has secured the escape pod from %s. %i open escape pod slots are now available",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
					}
					setCommsMessage(tableSelectRandom(single_unload_plural_available_pods))
				else
					local single_unload_and_available_pods = {
						string.format("Escape pod unloaded and placed in the care of station %s. %s may now retrieve one escape pod",comms_target:getCallSign(),comms_source:getCallSign()),
						string.format("%s is now taking care of the escape pod retrieved by %s. We may now retrieve another escape pod.",comms_target:getCallSign(),comms_source:getCallSign()),
						string.format("[%s docking bay supervisor]\n'We unloaded your escape pod, %s. We'll take care of it from here.'\nWe may now retrieve another escape pod.",comms_target:getCallSign(),comms_source:getCallSign()),
						string.format("%s has secured the escape pod from %s. You may retrieve another escape pod if you wish.",comms_target:getCallSign(),comms_source:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(single_unload_and_available_pods))
				end
			end
			if free_pod_unload_interactive_back == nil or getScenarioTime() > free_pod_unload_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				free_pod_unload_interactive_back = getScenarioTime()
			end
			if free_pod_unload_comms_back == nil or getScenarioTime() > free_pod_unload_comms_back + comms_fudge then
				addCommsReply("Back to station communication",commsStation)
				free_pod_unload_comms_back = getScenarioTime()
			end
		end)
	else
		local unload_pods_at_cost_prompt = {
			string.format("Unload retrieved escape pods (%i rep per pod)",cost),
			string.format("Unload pods to %s (%i rep per pod)",comms_target:getCallSign(),cost),
			string.format("Unload escape pods (%i reputation per pod)",cost),
			string.format("Unload retrieved escape pods (%i reputation)",cost*(comms_source.max_pods - comms_source.pods)),
		}
		addCommsReply(tableSelectRandom(unload_pods_at_cost_prompt),function()
			if comms_source:takeReputationPoints(cost*(comms_source.max_pods - comms_source.pods)) then
				local pods_aboard = comms_source.max_pods - comms_source.pods
				comms_source.pods = comms_source.max_pods
				if pods_aboard > 1 then
					local plural_escape_pod_response = {
						string.format("Escape pods unloaded and placed in the care of station %s. %s may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("%s is now taking care of the escape pods retrieved by %s. With the space freed up, we may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("[%s docking bay supervisor]\n'All escape pods unloaded, %s. We'll take care of them from here.'\nUnloading those escape pods frees us up to pick up as many as %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						string.format("%s has secured all of %s's escape pods. %i open escape pod slots now available.",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
					}
					setCommsMessage(tableSelectRandom(plural_escape_pod_response))
				else
					if comms_source.max_pods > 1 then
						local single_unload_plural_available_pods = {
							string.format("Escape pod unloaded into the care of %s. %s may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
							string.format("%s is now taking care of the escape pod retrieved by %s. With the space freed up, we may now retrieve up to %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
							string.format("[%s docking bay supervisor]\n'Your escape pod has been unloaded, %s. We'll take care of it from here.'\nUnloading those escape pods frees us up to pick up as many as %i escape pods",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
							string.format("%s has secured the escape pod from %s. %i open escape pod slots are now available",comms_target:getCallSign(),comms_source:getCallSign(),comms_source.pods),
						}
						setCommsMessage(tableSelectRandom(single_unload_plural_available_pods))
					else
						local single_unload_and_available_pods = {
							string.format("Escape pod unloaded and placed in the care of station %s. %s may now retrieve one escape pod",comms_target:getCallSign(),comms_source:getCallSign()),
							string.format("%s is now taking care of the escape pod retrieved by %s. We may now retrieve another escape pod.",comms_target:getCallSign(),comms_source:getCallSign()),
							string.format("[%s docking bay supervisor]\n'We unloaded your escape pod, %s. We'll take care of it from here.'\nWe may now retrieve another escape pod.",comms_target:getCallSign(),comms_source:getCallSign()),
							string.format("%s has secured the escape pod from %s. You may retrieve another escape pod if you wish.",comms_target:getCallSign(),comms_source:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(single_unload_and_available_pods))
					end
				end
			else
				local insufficient_rep_responses = {
					"Insufficient reputation",
					"Not enough reputation",
					"You need more reputation",
					string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
					"You don't have enough reputation",
				}
				setCommsMessage(tableSelectRandom(insufficient_rep_responses))
			end
			if pod_unload_interactive_back == nil or getScenarioTime() > pod_unload_interactive_back + comms_fudge then
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				pod_unload_interactive_back = getScenarioTime()
			end
			if pod_unload_comms_back == nil or getScenarioTime() > pod_unload_comms_back + comms_fudge then
				addCommsReply("Back to station communication",commsStation)
				pod_unload_comms_back = getScenarioTime()
			end
		end)
	end
end
function goodsCommerce()
	local commerce_available = false
	local station_sells = false
	local station_buys = false
	local station_trades = false
	local player_has_goods = false
	local goods_for_sale = ""
	local will_buy_goods = ""
	local trade_goods = ""
	local player_goods = ""
	if comms_target.comms_data.goods ~= nil then
		for good, good_data in pairs(comms_target.comms_data.goods) do
			if good_data.quantity ~= nil and good_data.quantity > 0 then
				station_sells = true
				commerce_available = true
				if goods_for_sale == "" then
					goods_for_sale = good_desc[good]
				else
					goods_for_sale = string.format("%s, %s",goods_for_sale,good_desc[good])
				end
			end
		end
	end
	if comms_target.comms_data.buy ~= nil then
		commerce_available = true
		station_buys = true
		for good, price in pairs(comms_target.comms_data.buy) do
			if will_buy_goods == "" then
				will_buy_goods = good_desc[good]
			else
				will_buy_goods = string.format("%s, %s",will_buy_goods,good_desc[good])
			end
		end
	end
	if comms_target.comms_data.trade ~= nil then
		if station_sells then
			for good,trade_bool in pairs(comms_target.comms_data.trade) do
				if trade_bool then
					station_trades = true
					if trade_goods == "" then
						trade_goods = good_desc[good]
					else
						trade_goods = string.format("%s, %s",trade_goods,good_desc[good])
					end
				end
			end
		end
	end
	if comms_source.goods ~= nil then
		for good, good_quantity in pairs(comms_source.goods) do
			if good_quantity > 0 then
				player_has_goods = true
				commerce_available = true
				if player_goods == "" then
					player_goods = good_desc[good]
				else
					player_goods = string.format("%s, %s",player_goods,good_desc[good])
				end
			end
		end
	end
	if commerce_available then
		local commerce_out = ""
		if station_sells then
			commerce_out = string.format(_("trade-comms","%s sells %s."),comms_target:getCallSign(),goods_for_sale)
			if commerce_buy == nil or getScenarioTime() > commerce_buy + comms_fudge then
				local buy_goods_prompts = {
					"Buy goods",
					"Purchase goods",
					string.format("Buy goods from %s",comms_target:getCallSign()),
					string.format("Purchase goods from %s",comms_target:getCallSign()),
				}
				addCommsReply(tableSelectRandom(buy_goods_prompts),buyGoodsFromStation)
				commerce_buy = getScenarioTime()
			end
		end
		if station_buys then
			if commerce_out == "" then
				commerce_out = string.format(_("trade-comms","%s buys %s."),comms_target:getCallSign(),will_buy_goods)
			else
				commerce_out = string.format(_("trade-comms","%s\n%s buys %s."),commerce_out,comms_target:getCallSign(),will_buy_goods)
			end
			local buy_match = false
			if player_has_goods then
				for buy_good, price in pairs(comms_target.comms_data.buy) do
					for good, good_quantity in pairs(comms_source.goods) do
						if good == buy_good then
							buy_match = true
							break
						end
					end
				end
			end
			if buy_match then
				if commerce_sell == nil or getScenarioTime() > commerce_sell + comms_fudge then
					local sell_goods_prompts = {
						"Sell goods",
						"Sell goods for reputation",
						string.format("Sell goods to %s",comms_target:getCallSign()),
						string.format("Sell goods to %s for reputation",comms_target:getCallSign()),
					}
					addCommsReply(tableSelectRandom(sell_goods_prompts),sellGoodsToStation)
					commerce_sell = getScenarioTime()
				end
			end
		end
		if station_trades then
			if commerce_out == "" then
				commerce_out = string.format(_("trade-comms","%s trades %s for %s."),comms_target:getCallSign(),goods_for_sale,trade_goods)
			else
				commerce_out = string.format(_("trade-comms","%s\n%s trades %s for %s."),commerce_out,comms_target:getCallSign(),goods_for_sale,trade_goods)
			end
			local trade_match = false
			if player_has_goods then
				for trade_good,trade_bool in pairs(comms_target.comms_data.trade) do
					for good, good_quantity in pairs(comms_source.goods) do
						if good == trade_good then
							trade_match = true
							break
						end
					end
				end 
			end
			if trade_match then
				if commerce_trade == nil or getScenarioTime() > commerce_trade + comms_fudge then
					local trade_goods_prompts = {
						"Trade goods",
						"Exchange goods",
						"Barter goods",
						string.format("Trade goods with %s",comms_target:getCallSign()),
					}
					addCommsReply(tableSelectRandom(trade_goods_prompts),tradeGoodsWithStation)
					commerce_trade = getScenarioTime()
				end
			end
		end
		if player_has_goods then
			if commerce_out == "" then
				commerce_out = string.format(_("trade-comms","%s has %s aboard."),comms_source:getCallSign(),player_goods)
			else
				commerce_out = string.format(_("trade-comms","%s\n%s has %s aboard."),commerce_out,comms_source:getCallSign(),player_goods)
			end
			if commerce_jettison == nil or getScenarioTime() > commerce_jettison + comms_fudge then
				local jettison_goods_prompts = {
					"Jettison goods",
					"Throw goods out the airlock",
					"Dispose of goods",
					"Destroy goods",
				}
				addCommsReply(tableSelectRandom(jettison_goods_prompts),jettisonGoodsFromShip)
				commerce_jettison = getScenarioTime()
			end
			if commerce_donate == nil or getScenarioTime() > commerce_donate + comms_fudge then
				local donate_goods_prompts = {
					"Give goods to station",
					"Donate goods to station",
					string.format("Give goods to %s",comms_target:getCallSign()),
					string.format("Donate goods to %s",comms_target:getCallSign()),
				}
				addCommsReply(tableSelectRandom(donate_goods_prompts),giveGoodsToStation)
				commerce_donate = getScenarioTime()
			end
		end
		local commerce_options_for_goods = {
			string.format("%s\nWhich of these actions related to goods do you wish to take?",commerce_out),
			string.format("%s\nWhich of these goods related actions do you want to take?",commerce_out),
			string.format("%s\nSelect a goods related action",commerce_out),
			string.format("%s\nIn terms of goods, what would you like to do?",commerce_out),
		}
		setCommsMessage(tableSelectRandom(commerce_options_for_goods))
	else
		local no_commerce_options = {
			"No commercial options available",
			"Commerce options not available",
			string.format("No commercial options available at %s",comms_target:getCallSign()),
			string.format("%s has no available commercial options",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(no_commerce_options))
	end
	if commerce_interactive_back == nil or getScenarioTime() > commerce_interactive_back + comms_fudge then
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		commerce_interactive_back = getScenarioTime()
	end
	if commerce_comms_back == nil or getScenarioTime() > commerce_comms_back + comms_fudge then
		addCommsReply("Back to station communication",commsStation)
		commerce_comms_back = getScenarioTime()
	end
end
function tradeGoodsWithStation()
	local trade_goods_prompt = {
		_("trade-comms","Which one of these goods would you like to trade?"),
		_("trade-comms","Which one would you like to trade?"),
		_("trade-comms","Make an offer."),
		_("trade-comms","What do you want to trade?"),
	}
	setCommsMessage(tableSelectRandom(trade_goods_prompt))
	if comms_target.comms_data.trade ~= nil then
		for trade_good, trade_bool in pairs(comms_target.comms_data.trade) do
			if comms_source.goods ~= nil then
				if comms_source.goods[trade_good] ~= nil then
					if comms_source.goods[trade_good] > 0 then
						for good, good_data in pairs(comms_target.comms_data.goods) do
							if good_data.quantity > 0 then
								addCommsReply(string.format(_("trade-comms","Trade %s for %s"),good_desc[trade_good],good_desc[good]),function()
									if not comms_source:isDocked(comms_target) then
										local stay_docked_to_trade = {
											"You need to stay docked for that action.",
											"You need to stay docked to trade.",
											string.format("You must stay docked long enough for a trade between %s and %s to be completed.",comms_source:getCallSign(),comms_target:getCallSign()),
											string.format("You undocked before %s could complete the trade you wanted.",comms_target:getCallSign()),
										}
										setCommsMessage(tableSelectRandom(stay_docked_to_trade))
										return
									end
									if good_data.quantity < 1 then
										local insufficient_station_inventory = {
											"Insufficient station inventory",
											"Not enough inventory on the station",
											string.format("%s does not have enough inventory",comms_target:getCallSign()),
											string.format("Not enough inventory on %s",comms_target:getCallSign()),
										}
										setCommsMessage(tableSelectRandom(insufficient_station_inventory))
									else
										good_data.quantity = good_data.quantity - 1
										if comms_source.goods[good] == nil then
											comms_source.goods[good] = 0
										end
										comms_source.goods[good] = comms_source.goods[good] + 1
										comms_source.goods[trade_good] = comms_source.goods[trade_good] - 1
										local trade_confirmation = {
											string.format("Traded a %s for a %s",good_desc[trade_good],good_desc[good]),
											string.format("You traded one %s for one %s",good_desc[trade_good],good_desc[good]),
											string.format("%s agreed to trade a %s for a %s",comms_target:getCallSign(),good_desc[trade_good],good_desc[good]),
											string.format("You successfully traded a %s for a %s",good_desc[trade_good],good_desc[good]),
										}
										setCommsMessage(tableSelectRandom(trade_confirmation))
										comms_target.comms_data.friendlyness = math.min(100,comms_target.comms_data.friendlyness + random(2,5))
									end
									addCommsReply(_("trade-comms","Back to trade options"), tradeGoodsWithStation)
									addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
									addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
									addCommsReply(_("Back to station communication"), commsStation)
								end)
							end
						end
					end
				end
			end
		end
	end
end
function sellGoodsToStation()
	local sell_goods_prompt = {
		_("trade-comms","Which one of these goods would you like to sell?"),
		_("trade-comms","Which one would you like to sell?"),
		_("trade-comms","You may choose from these to sell."),
		_("trade-comms","What do you want to sell?"),
	}
	setCommsMessage(tableSelectRandom(sell_goods_prompt))
	local good_match_count = 0
	if comms_target.comms_data.buy ~= nil then
		for good, price in pairs(comms_target.comms_data.buy) do
			if comms_source.goods[good] ~= nil and comms_source.goods[good] > 0 then
				good_match_count = good_match_count + 1
				local sell_a_good_prompt = {
					string.format("Sell one %s for %i reputation",good_desc[good],price),
					string.format("Sell a %s for %i reputation",good_desc[good],price),
					string.format("Sell %s and get %i reputation",good_desc[good],price),
					string.format("For %s reputation, sell a %s",price,good_desc[good]),
				}
				addCommsReply(tableSelectRandom(sell_a_good_prompt), function()
					if not comms_source:isDocked(comms_target) then
						local stay_docked_to_sell = {
							"You need to stay docked for that action.",
							"You need to stay docked to sell.",
							string.format("You must stay docked long enough for a sale between %s and %s to be completed.",comms_source:getCallSign(),comms_target:getCallSign()),
							string.format("You undocked before %s could complete the sale you requested.",comms_target:getCallSign()),
						}
						setCommsMessage(tableSelectRandom(stay_docked_to_sell))
						return
					end
					local good_type_label = {
						string.format("Type: %s",good_desc[good]),
						string.format("Type of good: %s",good_desc[good]),
						string.format("Good type: %s",good_desc[good]),
						string.format("Kind of good: %s",good_desc[good]),
					}
					local reputation_price_of_good = {
						string.format("Reputation price: %i",price),
						string.format("Price in reputation points: %i",price),
						string.format("Reputation sale price: %i",price),
						string.format("Priced at %i reputation",price),
					}
					local sale_results = {
						"One sold",
						"You sold one",
						string.format("You sold one to %s",comms_target:getCallSign()),
						string.format("%s bought one from you",comms_target:getCallSign()),
					}
					setCommsMessage(string.format("%s, %s\n%s",tableSelectRandom(good_type_label),tableSelectRandom(reputation_price_of_good),tableSelectRandom(sale_results)))
					comms_source.goods[good] = comms_source.goods[good] - 1
					comms_source:addReputationPoints(price)
					comms_source.cargo = comms_source.cargo + 1
					addCommsReply(_("trade-comms","Back to sell to station options"),sellGoodsToStation)
					addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					addCommsReply(_("trade-comms","Back to station communication"), commsStation)
				end)
			end
		end
	else
		local no_goods_to_buy = {
			"This station is no longer in the market to buy goods",
			string.format("%s is no longer in the market to buy goods",comms_target:getCallSign()),
			string.format("%s has left the goods buying market",comms_target:getCallSign()),
			string.format("%s no longer wants to buy any goods",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(no_goods_to_buy))
	end
	if good_match_count == 0 then
		local no_matching_sellable_goods = {
			"You no longer have anything the station is interested in.",
			string.format("You have nothing %s is interested in.",comms_target:getCallSign()),
			string.format("%s is not interested in any goods you have.",comms_target:getCallSign()),
			string.format("[%s purchasing agent]\n'Sorry, %s. You have nothing that interests us.'\nYou hear the sound of a ledger book closing just before the mic cuts off.",comms_target:getCallSign(),comms_source:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(no_matching_sellable_goods))
	end
	addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
	addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
	addCommsReply(_("Back to station communication"), commsStation)
end
function buyGoodsFromStation()
	local buy_goods_prompt = {
		_("trade-comms","Which one of these goods would you like to buy?"),
		_("trade-comms","Which one would you like to buy?"),
		_("trade-comms","You can choose to buy one of these."),
		_("trade-comms","What do you want to buy?"),
	}
	setCommsMessage(tableSelectRandom(buy_goods_prompt))
	if comms_target.comms_data.goods ~= nil then
		for good, good_data in pairs(comms_target.comms_data.goods) do
			local buy_goods_at_price_prompts = {
				string.format("Buy one %s for %i reputation",good_desc[good],good_data["cost"]),
				string.format("Buy a %s for %i reputation",good_desc[good],good_data["cost"]),
				string.format("Buy %s from %s for %i rep",good_desc[good],comms_target:getCallSign(),good_data["cost"]),
				string.format("Purchase %s for %i reputation",good_desc[good],good_data["cost"]),
			}
			addCommsReply(tableSelectRandom(buy_goods_at_price_prompts), function()
				if not comms_source:isDocked(comms_target) then
					local stay_docked_to_buy = {
						"You need to stay docked for that action.",
						"You need to stay docked to buy.",
						string.format("You must stay docked long enough for a sale between %s and %s to be completed.",comms_target:getCallSign(),comms_source:getCallSign()),
						string.format("You undocked before %s could complete the sale you requested.",comms_target:getCallSign()),
					}
					setCommsMessage(tableSelectRandom(stay_docked_to_buy))
					return
				end
				local good_type_label = {
					string.format("Type: %s",good_desc[good]),
					string.format("Type of good: %s",good_desc[good]),
					string.format("Good type: %s",good_desc[good]),
					string.format("Kind of good: %s",good_desc[good]),
				}
				local reputation_price_of_good = {
					string.format("Reputation price: %i",good_data["cost"]),
					string.format("Price in reputation points: %i",good_data["cost"]),
					string.format("Reputation sale price: %i",good_data["cost"]),
					string.format("Priced at %i reputation",good_data["cost"]),
				}
				local quantity_of_good = {
					string.format("Quantity: %s",good_data["quantity"]),
					string.format("How much inventory: %s",good_data["quantity"]),
					string.format("%s's quantity: %s",comms_target:getCallSign(),good_data["quantity"]),
					string.format("Quantity on hand: %s",good_data["quantity"]),
				}
				local purchase_results = {
					"One bought",
					"You bought one",
					string.format("You purchased one from %s",comms_target:getCallSign()),
					string.format("%s sold one to you",comms_target:getCallSign()),
				}
				local goodTransactionMessage = string.format("%s\n%s\n%s",tableSelectRandom(good_type_label),tableSelectRandom(reputation_price_of_good),tableSelectRandom(quantity_of_good))
				if comms_source.cargo < 1 then
					local insufficient_cargo_space_addendum = {
						"Insufficient cargo space for purchase",
						"You don't have enough room in your cargo hold",
						string.format("Insufficient room in %s's cargo hold",comms_source:getCallSign()),
						string.format("%s does not have enough available cargo space",comms_source:getCallSign()),
					}
					goodTransactionMessage = string.format("%s\n%s",goodTransactionMessage,tableSelectRandom(insufficient_cargo_space_addendum))
				elseif good_data["cost"] > math.floor(comms_source:getReputationPoints()) then
					local insufficient_rep_responses = {
						"Insufficient reputation",
						"Not enough reputation",
						"You need more reputation",
						string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
						"You don't have enough reputation",
					}
					goodTransactionMessage = string.format("%s\n%s",goodTransactionMessage,tableSelectRandom(insufficient_rep_responses))
				elseif good_data["quantity"] < 1 then
					local insufficient_station_inventory = {
						"Insufficient station inventory",
						"Not enough inventory on the station",
						string.format("%s does not have enough inventory",comms_target:getCallSign()),
						string.format("Not enough inventory on %s",comms_target:getCallSign()),
					}
					goodTransactionMessage = string.format("%s\n%s",goodTransactionMessage,tableSelectRandom(insufficient_station_inventory))
				else
					if comms_source:takeReputationPoints(good_data["cost"]) then
						comms_source.cargo = comms_source.cargo - 1
						good_data["quantity"] = good_data["quantity"] - 1
						if comms_source.goods == nil then
							comms_source.goods = {}
						end
						if comms_source.goods[good] == nil then
							comms_source.goods[good] = 0
						end
						comms_source.goods[good] = comms_source.goods[good] + 1
						goodTransactionMessage = string.format("%s\n%s",goodTransactionMessage,tableSelectRandom(purchase_results))
					else
						local insufficient_rep_responses = {
							"Insufficient reputation",
							"Not enough reputation",
							"You need more reputation",
							string.format("You need more than %i reputation",math.floor(comms_source:getReputationPoints())),
							"You don't have enough reputation",
						}
						goodTransactionMessage = string.format("%s\n%s",goodTransactionMessage,tableSelectRandom(insufficient_rep_responses))
					end
				end
				setCommsMessage(goodTransactionMessage)
				addCommsReply(_("trade-comms","Back to buy goods from station options"),buyGoodsFromStation)
				addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				addCommsReply(_("Back to station communication"), commsStation)
			end)
		end
	else
		local insufficient_station_inventory = {
			"Insufficient station inventory",
			"Not enough inventory on the station",
			string.format("%s does not have enough inventory",comms_target:getCallSign()),
			string.format("Not enough inventory on %s",comms_target:getCallSign()),
		}
		setCommsMessage(tableSelectRandom(insufficient_station_inventory))
	end
	addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
	addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
	addCommsReply(_("Back to station communication"), commsStation)
end
function jettisonGoodsFromShip()
	local jettison_prompt = {
		_("trade-comms","What should be jettisoned?"),
		_("trade-comms","You pick it and out the airlock it will go."),
		_("trade-comms","What do you want to chunk out the airlock?"),
		_("trade-comms","What shall we toss out the airlock?"),
	}
	setCommsMessage(tableSelectRandom(jettison_prompt))
	local goods_to_toss_count = 0
	for good, good_quantity in pairs(comms_source.goods) do
		if good_quantity > 0 then
			goods_to_toss_count = goods_to_toss_count + 1
			addCommsReply(good_desc[good], function()
				comms_source.goods[good] = comms_source.goods[good] - 1
				comms_source.cargo = comms_source.cargo + 1
				local jettisoned_confirmed = {
					string.format("One %s jettisoned",good_desc[good]),
					string.format("One %s has been destroyed",good_desc[good]),
					string.format("One %s has been tossed out of the airlock",good_desc[good]),
					string.format("One %s has been placed in the arms of the vacuum of space",good_desc[good]),
				}
				setCommsMessage(tableSelectRandom(jettisoned_confirmed))
				addCommsReply(_("trade-comms","Back to jettison goods"),jettisonGoodsFromShip)
				addCommsReply(_("Back to commercial options"), goodsCommerce)
				addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
				addCommsReply(_("Back to station communication"), commsStation)
			end)
		end
	end
	if goods_to_toss_count == 0 then
		local nothing_to_jettison = {
			"No more goods to toss",
			"You've got nothing left to jettison",
			"Your cargo hold is empty so there's nothing else to get rid of",
			"No more goods to jettison",
		}
		setCommsMessage(tableSelectRandom(nothing_to_jettison))
		addCommsReply(_("Back to commercial options"), goodsCommerce)
		addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
		addCommsReply(_("Back to station communication"), commsStation)
	end
	addCommsReply(_("trade-comms","Back to commercial options"),goodsCommerce)
	addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
	addCommsReply(_("Back to station communication"), commsStation)
end
function jumpCorridor()
	local jump_corridor_list = {
		["Icarus"] = 	{station = stationIcarus,	region = "Icarus (F5)",		spawn_x = 0,		spawn_y = 0,		has_spawned = icarus_color,												spawn_terrain =	createIcarusColor,	despawn_terrain = removeIcarusColor,	},
		["Kentar"] = 	{station = stationKentar,	region = "Kentar (R17)",	spawn_x = 250000,	spawn_y = 250000,	has_spawned = kentar_color,												spawn_terrain = createKentarColor,	despawn_terrain = removeKentarColor,	},
		["Astron"] = 	{station = stationAstron,	region = "Astron (U33)",	spawn_x = 460500,	spawn_y = 320500,	has_spawned = astron_color,												spawn_terrain = ghostNebulaSector,	despawn_terrain = removeAstronColor,	},
		["Lafrina"] =	{station = stationLafrina,	region = "Lafrina (T-8)",	spawn_x = -237666,	spawn_y = 296975,	has_spawned = universe:hasRegionSpawned(universe.available_regions[5]),	spawn_terrain = lafrinaSector,		despawn_terrain = removeLafrinaColor,	},
		["Teresh"] =	{station = stationTeresh,	region = "Teresh (K44)",	spawn_x = 800001,	spawn_y = 120001,	has_spawned = teresh_color,												spawn_terrain = tereshSector,		despawn_terrain = removeTereshColor,	},
		["Bask"] =		{station = stationBask,		region = "Bask (R56)",		spawn_x = 1027800,	spawn_y = 251000,	has_spawned = bask_color,												spawn_terrain = baskSector,			despawn_terrain = removeBaskColor,		},
	}
	local skeleton_docked = false
	for name, jc_item in pairs(jump_corridor_list) do
		if comms_target == jc_item.station then
			skeleton_docked = true
			break
		end
	end
	if skeleton_docked then
		local all_docked = true
		for i,p in ipairs(getActivePlayerShips()) do
			if not p:isDocked(comms_target) then
				all_docked = false
				break
			end
		end
		if all_docked then
			origin_jc_item = nil
			for name, jc_item in pairs(jump_corridor_list) do
				if string.find(name,comms_target:getCallSign()) then
					origin_jc_item = jc_item
					break
				end
			end
			local take_jump_corridor_prompts = {
				"Take jump corridor to another station",
				"Activate jump corridor to another station",
				"Go to another station via the jump corridor",
				"Use jump corridor to go to another station",
			}
			addCommsReply(tableSelectRandom(take_jump_corridor_prompts),function()
				local choose_jump_station = {
					"What station would you like to take the jump corridor to?",
					"Select a station as the jump corridor destination",
					"Select jump corridor destination station",
					string.format("[%s jump corridor operator]\n'What is your station destination, %s?'\nThe jump corridor operator sounds like a bright and happy sentient being.",comms_target:getCallSign(),comms_source:getCallSign()),
				}
				setCommsMessage(tableSelectRandom(choose_jump_station))
				for name, jc_item in pairs(jump_corridor_list) do
					if comms_target ~= jc_item.station then
						addCommsReply(string.format("Take jump corridor to %s",jc_item.station:getCallSign()),function()
							playerSpawnX = jc_item.spawn_x
							playerSpawnY = jc_item.spawn_y
							for i,p in ipairs(getActivePlayerShips()) do
								p:commandUndock()
								p:setPosition(playerSpawnX,playerSpawnY)
								p:commandImpulse(0)
							end
							local jt = comms_target:getObjectsInRange(5000)
							jump_train = {}
							if #jt > 0 then
								for index, ship in ipairs(jt) do
									if ship:isValid() and isObjectType(ship,"CpuShip") and ship:isDocked(comms_target) then
										ship:orderDefendTarget(getPlayerShip(-1))
	--									ship:orderFlyFormation(getPlayerShip(-1),fleetPosDelta1x[index+1]*500,fleetPosDelta1y[index+1]*500)
										ship.jump_corridor_x = playerSpawnX+fleetPosDelta1x[index+1]*500
										ship.jump_corridor_y = playerSpawnY+fleetPosDelta1y[index+1]*500
										ship:setPosition(playerSpawnX+fleetPosDelta1x[index+1]*500,playerSpawnY+fleetPosDelta1y[index+1]*500)
										table.insert(jump_train,ship)
									end
								end
							end
							startRegion = jc_item.region
							if not jc_item.has_spawned then
								jc_item.spawn_terrain()
							end
							if origin_jc_item ~= nil then
								origin_jc_item.despawn_terrain()
							end
							local jump_journey_complete = {
								string.format("Transferred to %s",jc_item.station:getCallSign()),
								string.format("The jump corridor has transferred you to %s",jc_item.station:getCallSign()),
								string.format("[Automated message]\n'You have arrived at %s. Thank you for using the flagship product of Jump Corridors R Us. We know you have a choice when traveling. We appreciate your business.'",jc_item.station:getCallSign()),
								string.format("The jump corridor drops you at %s",jc_item.station:getCallSign()),
							}
							setCommsMessage(tableSelectRandom(jump_journey_complete))
						end)
					end
				end
				if jump_interactive_back == nil or getScenarioTime() > jump_interactive_back + comms_fudge then
					addCommsReply("Back to interactive relay officer",interactiveDockedStationCommsMeat)
					jump_interactive_back = getScenarioTime()
				end
				if jump_comms_back == nil or getScenarioTime() > jump_comms_back + comms_fudge then
					addCommsReply("Back to station communication",commsStation)
					jump_comms_back = getScenarioTime()
				end
			end)
		end
	end
end
function isAllowedTo(state)
    if state == "friend" and comms_source:isFriendly(comms_target) then
        return true
    end
    if state == "neutral" and not comms_source:isEnemy(comms_target) then
        return true
    end
    return false
end
function getWeaponCost(weapon)
	if comms_target.comms_data.weapon_cost == nil then
		print("comms data weapons cost is nil. Station:",comms_target:getCallSign(),"randomizing values")
		comms_target.comms_data.weapon_cost = {
			Homing = math.random(1,4),
			HVLI = math.random(1,3),
			Mine = math.random(2,5),
			Nuke = math.random(12,18),
			EMP = math.random(7,13),
		}
		local multiplier = comms_target.comms_data.reputation_cost_multipliers[getFriendStatus()]
		return math.ceil(comms_target.comms_data.weapon_cost[weapon] * multiplier)
	else
		if comms_target.comms_data.weapon_cost[weapon] == nil then
			print("comms data weapon cost for weapon",weapon,"is nil. Station:",comms_target:getCallSign(),"randomizing value")
			comms_target.comms_data.weapon_cost[weapon] = math.random(12,18)
			local multiplier = comms_target.comms_data.reputation_cost_multipliers[getFriendStatus()]
			return math.ceil(comms_target.comms_data.weapon_cost[weapon] * multiplier)
		else
			return math.ceil(comms_target.comms_data.weapon_cost[weapon] * comms_target.comms_data.reputation_cost_multipliers[getFriendStatus()])
		end
	end
end
function getServiceCost(service)
	if comms_target.comms_data.service_cost == nil then
		print("comms data service cost is nil. Station:",comms_target:getCallSign())
		return 9999
	elseif comms_target.comms_data.service_cost[service] == nil then
		print("comms data service cost for service",service,"is nil. Station:",comms_target:getCallSign())
		return 9999
	else
		return math.ceil(comms_target.comms_data.service_cost[service])
	end
end
function getFriendStatus()
    if comms_source:isFriendly(comms_target) then
        return "friend"
    else
        return "neutral"
    end
end
function playerShipCargoInventory(p)
	local out = string.format("%s Current cargo:",p:getCallSign())
	local goodCount = 0
	if p.goods ~= nil then
		for good, goodQuantity in pairs(p.goods) do
			goodCount = goodCount + 1
			out = string.format("%s\n     %s: %i",out,good,goodQuantity)
		end
	end
	if goodCount < 1 then
		out = string.format("%s\n     Empty",out)
	end
	out = string.format("%s\nAvailable space: %i",out,p.cargo)
	out = string.format("%s\nEscape pods: %i   Available pod slots: %i",out,p.max_pods - p.pods,p.pods)
	return out
end
function levelCoolant(p)
	if p:isValid() then
		local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
		local installed_systems = {}
		for _, system in ipairs(system_list) do
			if p:hasSystem(system) then
				table.insert(installed_systems,system)
			end
		end
		local level_coolant = p:getMaxCoolant()/#installed_systems
		for _, system in ipairs(installed_systems) do
			p:setSystemCoolant(system,level_coolant)
			p:commandSetSystemCoolantRequest(system,level_coolant)
		end
	end
end
---------------------------------------------------
--	Dynamic functions linked to update function  --
---------------------------------------------------
function resetPreviousSystemHealth(p)
	if healthDiagnostic then print("reset previous system health") end
	if p == nil then
		p = comms_source
		if healthDiagnostic then print("set p to comms source") end
	end
	if healthDiagnostic then print("reset shield") end
	local currentShield = 0
	if p:getShieldCount() > 1 then
		currentShield = (p:getSystemHealth("frontshield") + p:getSystemHealth("rearshield"))/2
	else
		currentShield = p:getSystemHealth("frontshield")
	end
	p.prevShield = currentShield
	if healthDiagnostic then print("reset reactor") end
	p.prevReactor = p:getSystemHealth("reactor")
	if healthDiagnostic then print("reset maneuver") end
	p.prevManeuver = p:getSystemHealth("maneuver")
	if healthDiagnostic then print("reset impulse") end
	p.prevImpulse = p:getSystemHealth("impulse")
	if healthDiagnostic then print("reset beam") end
	if p:getBeamWeaponRange(0) > 0 then
		if p.healthyBeam == nil then
			p.healthyBeam = 1.0
			p.prevBeam = 1.0
		end
		p.prevBeam = p:getSystemHealth("beamweapons")
	end
	if healthDiagnostic then print("reset missile") end
	if p:getWeaponTubeCount() > 0 then
		if p.healthyMissile == nil then
			p.healthyMissile = 1.0
			p.prevMissile = 1.0
		end
		p.prevMissile = p:getSystemHealth("missilesystem")
	end
	if healthDiagnostic then print("reset warp") end
	if p:hasWarpDrive() then
		if p.healthyWarp == nil then
			p.healthyWarp = 1.0
			p.prevWarp = 1.0
		end
		p.prevWarp = p:getSystemHealth("warp")
	end
	if healthDiagnostic then print("reset jump") end
	if p:hasJumpDrive() then
		if p.healthyJump == nil then
			p.healthyJump = 1.0
			p.prevJump = 1.0
		end
		p.prevJump = p:getSystemHealth("jumpdrive")
	end
	if healthDiagnostic then print("end of reset previous system health function") end
end
--	Tractor functions (called from update loop
function removeTractorObjectButtons(p)
	if p.tractor_next_target_button ~= nil then
		p:removeCustom(p.tractor_next_target_button)
		p.tractor_next_target_button = nil
	end
	if p.tractor_next_target_button_plus ~= nil then
		p:removeCustom(p.tractor_next_target_button_plus)
		p.tractor_next_target_button_plus = nil
	end
	if p.tractor_target_button ~= nil then
		p:removeCustom(p.tractor_target_button)
		p.tractor_target_button = nil
	end
	if p.tractor_target_button_plus ~= nil then
		p:removeCustom(p.tractor_target_button_plus)
		p.tractor_target_button_plus = nil
	end
	if p.tractor_lock_button ~= nil then
		p:removeCustom(p.tractor_lock_button)
		p.tractor_lock_button = nil
	end
	if p.tractor_lock_button_plus ~= nil then
		p:removeCustom(p.tractor_lock_button_plus)
		p.tractor_lock_button_plus = nil
	end
end
function addTractorObjectButtons(p,tractor_objects)
	local cpx, cpy = p:getPosition()
	local tpx, tpy = p.tractor_target:getPosition()
	if p.tractor_lock_button == nil then
		if p:hasPlayerAtPosition("Engineering") then
			p.tractor_lock_button = "tractor_lock_button"
			p:addCustomButton("Engineering",p.tractor_lock_button,"Lock on Tractor",function()
				local cpx, cpy = p:getPosition()
				local tpx, tpy = p.tractor_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 15 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local tractor_object_distance = distance(cpx,cpy,tpx,tpy)
				if tractor_object_distance < 1000 then
					p.tractor_target_lock = true
					p.tractor_vector_x = tpx - cpx
					p.tractor_vector_y = tpy - cpy
					local locked_message = "locked_message"
					p:addCustomMessage("Engineering",locked_message,"Tractor locked on target")
				else
					local lock_fail_message = "lock_fail_message"
					p:addCustomMessage("Engineering",lock_fail_message,string.format("Tractor lock failed\nObject distance is %.4fU\nMaximum range of tractor is 1U",tractor_object_distance/1000))
					p.tractor_target = nil
				end
				removeTractorObjectButtons(p)
			end,13)
		end
	end
	if p.tractor_lock_button_plus == nil then
		if p:hasPlayerAtPosition("Engineering+") then
			p.tractor_lock_button_plus = "tractor_lock_button_plus"
			p:addCustomButton("Engineering+",p.tractor_lock_button_plus,"Lock on Tractor",function()
				local cpx, cpy = p:getPosition()
				local tpx, tpy = p.tractor_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 16 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local tractor_object_distance = distance(cpx,cpy,tpx,tpy)
				if tractor_object_distance < 1000 then
					p.tractor_target_lock = true
					p.tractor_vector_x = tpx - cpx
					p.tractor_vector_y = tpy - cpy
					local locked_message_plus = "locked_message_plus"
					p:addCustomMessage("Engineering+",locked_message_plus,"Tractor locked on target")
				else
					local lock_fail_message_plus = "lock_fail_message_plus"
					p:addCustomMessage("Engineering+",lock_fail_message_plus,string.format("Tractor lock failed\nObject distance is %.4fU\nMaximum range of tractor is 1U",tractor_object_distance/1000))
					p.tractor_target = nil
				end
				removeTractorObjectButtons(p)
			end,13)
		end
	end
	if p.tractor_target_button == nil then
		if p:hasPlayerAtPosition("Engineering") then
			p.tractor_target_button = "tractor_target_button"
			local label_type = ""
			if isObjectType(p.tractor_target,"CpuShip") or isObjectType(p.tractor_target,"PlayerSpaceship") then
				label_type = p.tractor_target:getCallSign()
			elseif isObjectType(p.tractor_target,"VisualAsteroid") then
				label_type = "Asteroid"
			end
			p:addCustomButton("Engineering",p.tractor_target_button,string.format("Target %s",label_type),function()
				string.format("")	--necessary to have global reference for Serious Proton engine
				tpx, tpy = p.tractor_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 17 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local target_distance = distance(cpx, cpy, tpx, tpy)/1000
				local theta = math.atan(tpy - cpy,tpx - cpx)
				if theta < 0 then
					theta = theta + 6.2831853071795865
				end
				local angle = theta * 57.2957795130823209
				angle = angle + 90
				if angle > 360 then
					angle = angle - 360
				end
				local target_description = "target_description"
				p:addCustomMessage("Engineering",target_description,string.format("Distance: %.1fU\nBearing: %.1f",target_distance,angle))
			end,14)
		end
	end
	if p.tractor_target_button_plus == nil then
		if p:hasPlayerAtPosition("Engineering+") then
			p.tractor_target_button_plus = "tractor_target_button_plus"
			local label_type = ""
			if isObjectType(p.tractor_target,"CpuShip") or isObjectType(p.tractor_target,"PlayerSpaceship") then
				label_type = p.tractor_target:getCallSign()
			elseif isObjectType(p.tractor_target,"VisualAsteroid") then
				label_type = "Asteroid"
			end
			p:addCustomButton("Engineering+",p.tractor_target_button_plus,string.format("Target %s",label_type),function()
				string.format("")	--necessary to have global reference for Serious Proton engine
				tpx, tpy = p.tractor_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 17 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local target_distance = distance(cpx, cpy, tpx, tpy)/1000
				local theta = math.atan(tpy - cpy,tpx - cpx)
				if theta < 0 then
					theta = theta + 6.2831853071795865
				end
				local angle = theta * 57.2957795130823209
				angle = angle + 90
				if angle > 360 then
					angle = angle - 360
				end
				local target_description_plus = "target_description_plus"
				p:addCustomMessage("Engineering+",target_description_plus,string.format("Distance: %.1fU\nBearing: %.1f",target_distance,angle))
			end,14)
		end
	end
	if #tractor_objects > 1 then
		if p.tractor_next_target_button == nil then
			if p:hasPlayerAtPosition("Engineering") then
				p.tractor_next_target_button = "tractor_next_target_button"
				p:addCustomButton("Engineering",p.tractor_next_target_button,"Other tractor target",function()
					local nearby_objects = p:getObjectsInRange(1000)
					local tractor_objects = {}
					if nearby_objects ~= nil and #nearby_objects > 1 then
						for _, obj in ipairs(nearby_objects) do
							if p ~= obj then
								local valid_tractor_types = {"Asteroid","CpuShip","Artifact","PlayerSpaceship","WarpJammer","Mine","ScanProbe","VisualAsteroid"}
								for i,vtt in ipairs(valid_tractor_types) do
									if isObjectType(obj,vtt) then
										table.insert(tractor_objects,obj)
										break
									end
								end
							end
						end		--end of nearby object list loop
						if #tractor_objects > 0 then
							--print(string.format("%i tractorable objects under 1 unit away",#tractor_objects))
							if p.tractor_target ~= nil and p.tractor_target:isValid() then
								local target_in_list = false
								local matching_index = 0
								for i=1,#tractor_objects do
									if tractor_objects[i] == p.tractor_target then
										target_in_list = true
										matching_index = i
										break
									end
								end		--end of check for the current target in list loop
								if target_in_list then
									if #tractor_objects > 1 then
										if #tractor_objects > 2 then
											local new_index = matching_index
											repeat
												new_index = math.random(1,#tractor_objects)
											until(new_index ~= matching_index)
											p.tractor_target = tractor_objects[new_index]
										else
											if matching_index == 1 then
												p.tractor_target = tractor_objects[2]
											else
												p.tractor_target = tractor_objects[1]
											end
										end
										removeTractorObjectButtons(p)
										addTractorObjectButtons(p,tractor_objects)
									end
								else
									p.tractor_target = tractor_objects[1]
									removeTractorObjectButtons(p)
									addTractorObjectButtons(p,tractor_objects)
								end
							else
								p.tractor_target = tractor_objects[1]
								addTractorObjectButtons(p,tractor_objects)
							end
						else	--no nearby tractorable objects
							if p.tractor_target ~= nil then
								removeTractorObjectButtons(p)
								p.tractor_target = nil
							end
						end
					else	--no nearby objects
						if p.tractor_target ~= nil then
							removeTractorObjectButtons(p)
							p.tractor_target = nil
						end
					end
				end,15)
			end
		end
		if p.tractor_next_target_button_plus == nil then
			if p:hasPlayerAtPosition("Engineering+") then
				p.tractor_next_target_button_plus = "tractor_next_target_button_plus"
				p:addCustomButton("Engineering+",p.tractor_next_target_button_plus,"Other tractor target",function()
					local nearby_objects = p:getObjectsInRange(1000)
					local tractor_objects = {}
					if nearby_objects ~= nil and #nearby_objects > 1 then
						for _, obj in ipairs(nearby_objects) do
							if p ~= obj then
								local valid_tractor_types = {"Asteroid","CpuShip","Artifact","PlayerSpaceship","WarpJammer","Mine","ScanProbe","VisualAsteroid"}
								for i,vtt in ipairs(valid_tractor_types) do
									if isObjectType(obj,vtt) then
										table.insert(tractor_objects,obj)
										break
									end
								end
							end
						end		--end of nearby object list loop
						if #tractor_objects > 0 then
							--print(string.format("%i tractorable objects under 1 unit away",#tractor_objects))
							if p.tractor_target ~= nil and p.tractor_target:isValid() then
								local target_in_list = false
								local matching_index = 0
								for i=1,#tractor_objects do
									if tractor_objects[i] == p.tractor_target then
										target_in_list = true
										matching_index = i
										break
									end
								end		--end of check for the current target in list loop
								if target_in_list then
									if #tractor_objects > 1 then
										if #tractor_objects > 2 then
											local new_index = matching_index
											repeat
												new_index = math.random(1,#tractor_objects)
											until(new_index ~= matching_index)
											p.tractor_target = tractor_objects[new_index]
										else
											if matching_index == 1 then
												p.tractor_target = tractor_objects[2]
											else
												p.tractor_target = tractor_objects[1]
											end
										end
										removeTractorObjectButtons(p)
										addTractorObjectButtons(p,tractor_objects)
									end
								else
									p.tractor_target = tractor_objects[1]
									removeTractorObjectButtons(p)
									addTractorObjectButtons(p,tractor_objects)
								end
							else
								p.tractor_target = tractor_objects[1]
								addTractorObjectButtons(p,tractor_objects)
							end
						else	--no nearby tractorable objects
							if p.tractor_target ~= nil then
								removeTractorObjectButtons(p)
								p.tractor_target = nil
							end
						end
					else	--no nearby objects
						if p.tractor_target ~= nil then
							removeTractorObjectButtons(p)
							p.tractor_target = nil
						end
					end
				end,15)
			end
		end
	else
		if p.tractor_next_target_button ~= nil then
			p:removeCustom(p.tractor_next_target_button)
			p.tractor_next_target_button = nil
		end
		if p.tractor_next_target_button_plus ~= nil then
			p:removeCustom(p.tractor_next_target_button_plus)
			p.tractor_next_target_button_plus = nil
		end
	end
end
-- Mining functions (called from update loop)
function removeMiningButtons(p)
	if p.mining_next_target_button ~= nil then
		p:removeCustom(p.mining_next_target_button)
		p.mining_next_target_button = nil
	end
	if p.mining_next_target_button_ops ~= nil then
		p:removeCustom(p.mining_next_target_button_ops)
		p.mining_next_target_button_ops = nil
	end
	if p.mining_target_button ~= nil then
		p:removeCustom(p.mining_target_button)
		p.mining_target_button = nil
	end
	if p.mining_target_button_ops ~= nil then
		p:removeCustom(p.mining_target_button_ops)
		p.mining_target_button_ops = nil
	end
	if p.mining_lock_button ~= nil then
		p:removeCustom(p.mining_lock_button)
		p.mining_lock_button = nil
	end
	if p.mining_lock_button_ops ~= nil then
		p:removeCustom(p.mining_lock_button_ops)
		p.mining_lock_button_ops = nil
	end
end
function addMiningButtons(p,mining_objects)
	local cpx, cpy = p:getPosition()
	local tpx, tpy = p.mining_target:getPosition()
	if p.mining_lock_button == nil then
		if p:hasPlayerAtPosition("Science") then
			p.mining_lock_button = "mining_lock_button"
			p:addCustomButton("Science",p.mining_lock_button,"Lock for Mining",function()
				local cpx, cpy = p:getPosition()
				local tpx, tpy = p.mining_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 18 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local asteroid_distance = distance(cpx,cpy,tpx,tpy)
				if asteroid_distance < 1000 then
					p.mining_target_lock = true
					local mining_locked_message = "mining_locked_message"
					p:addCustomMessage("Science",mining_locked_message,"Mining target locked\nWeapons may trigger the mining beam")
				else
					local mining_lock_fail_message = "mining_lock_fail_message"
					p:addCustomMessage("Science",mining_lock_fail_message,string.format("Mining target lock failed\nAsteroid distance is %.4fU\nMaximum range for mining is 1U",asteroid_distance/1000))
					p.mining_target = nil
				end
				removeMiningButtons(p)
			end,20)
		end
	end
	if p.mining_lock_button_ops == nil then
		if p:hasPlayerAtPosition("Operations") then
			p.mining_lock_button_ops = "mining_lock_button_ops"
			p:addCustomButton("Operations",p.mining_lock_button_ops,"Lock for Mining",function()
				local cpx, cpy = p:getPosition()
				local tpx, tpy = p.mining_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 19 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local asteroid_distance = distance(cpx,cpy,tpx,tpy)
				if asteroid_distance < 1000 then
					p.mining_target_lock = true
					local mining_locked_message_ops = "mining_locked_message_ops"
					p:addCustomMessage("Operations",mining_locked_message_ops,"Mining target locked\nWeapons may trigger the mining beam")
				else
					local mining_lock_fail_message_ops = "mining_lock_fail_message_ops"
					p:addCustomMessage("Operations",mining_lock_fail_message_ops,string.format("Mining target lock failed\nAsteroid distance is %.4fU\nMaximum range for mining is 1U",asteroid_distance/1000))
					p.mining_target = nil
				end
				removeMiningButtons(p)
			end,20)
		end
	end
	if p.mining_target_button == nil then
		if p:hasPlayerAtPosition("Science") then
			p.mining_target_button = "mining_target_button"
			p:addCustomButton("Science",p.mining_target_button,"Target Asteroid",function()
				string.format("")	--necessary to have global reference for Serious Proton engine
				tpx, tpy = p.mining_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 20 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local target_distance = distance(cpx, cpy, tpx, tpy)/1000
				local theta = math.atan(tpy - cpy,tpx - cpx)
				if theta < 0 then
					theta = theta + 6.2831853071795865
				end
				local angle = theta * 57.2957795130823209
				angle = angle + 90
				if angle > 360 then
					angle = angle - 360
				end
				if p.mining_target.trace_minerals == nil then
					p.mining_target.trace_minerals = {}
					for i=1,#mineralGoods do
						if random(1,100) < 26 then
							table.insert(p.mining_target.trace_minerals,mineralGoods[i])
						end
					end
				end
				local minerals = ""
				for i=1,#p.mining_target.trace_minerals do
					if minerals == "" then
						minerals = minerals .. p.mining_target.trace_minerals[i]
					else
						minerals = minerals .. ", " .. p.mining_target.trace_minerals[i]
					end
				end
				if minerals == "" then
					minerals = "none"
				end
				local target_description = "target_description"
				p:addCustomMessage("Science",target_description,string.format("Distance: %.1fU\nBearing: %.1f\nMineral traces detected: %s",target_distance,angle,minerals))
			end,21)
		end
	end
	if p.mining_target_button_ops == nil then
		if p:hasPlayerAtPosition("Operations") then
			p.mining_target_button_ops = "mining_target_button_ops"
			p:addCustomButton("Operations",p.mining_target_button_ops,"Target Asteroid",function()
				string.format("")	--necessary to have global reference for Serious Proton engine
				tpx, tpy = p.mining_target:getPosition()
				if distance_diagnostic then
					print("distance_diagnostic 21 cpx:",cpx,"cpy:",cpy,"tpx:",tpx,"tpy:",tpx)
				end		
				local target_distance = distance(cpx, cpy, tpx, tpy)/1000
				local theta = math.atan(tpy - cpy,tpx - cpx)
				if theta < 0 then
					theta = theta + 6.2831853071795865
				end
				local angle = theta * 57.2957795130823209
				angle = angle + 90
				if angle > 360 then
					angle = angle - 360
				end
				if p.mining_target.trace_minerals == nil then
					p.mining_target.trace_minerals = {}
					for i=1,#mineralGoods do
						if random(1,100) < 26 then
							table.insert(p.mining_target.trace_minerals,mineralGoods[i])
						end
					end
				end
				local minerals = ""
				for i=1,#p.mining_target.trace_minerals do
					if minerals == "" then
						minerals = minerals .. p.mining_target.trace_minerals[i]
					else
						minerals = minerals .. ", " .. p.mining_target.trace_minerals[i]
					end
				end
				if minerals == "" then
					minerals = "none"
				end
				local target_description_ops = "target_description_ops"
				p:addCustomMessage("Operations",target_description_ops,string.format("Distance: %.1fU\nBearing: %.1f\nMineral traces detected: %s",target_distance,angle,minerals))
			end,21)
		end
	end
	if #mining_objects > 1 then
		if p.mining_next_target_button == nil then
			if p:hasPlayerAtPosition("Science") then
				p.mining_next_target_button = "mining_next_target_button"
				p:addCustomButton("Science",p.mining_next_target_button,"Other mining target",function()
					local nearby_objects = p:getObjectsInRange(1000)
					local mining_objects = {}
					if nearby_objects ~= nil and #nearby_objects > 1 then
						for _, obj in ipairs(nearby_objects) do
							if p ~= obj then
								if isObjectType(obj,"Asteroid") or isObjectType(obj,"VisualAsteroid") then
									table.insert(mining_objects,obj)
								end
							end
						end		--end of nearby object list loop
						if #mining_objects > 0 then
							--print(string.format("%i tractorable objects under 1 unit away",#tractor_objects))
							if p.mining_target ~= nil and p.mining_target:isValid() then
								local target_in_list = false
								local matching_index = 0
								for i=1,#mining_objects do
									if mining_objects[i] == p.mining_target then
										target_in_list = true
										matching_index = i
										break
									end
								end		--end of check for the current target in list loop
								if target_in_list then
									if #mining_objects > 1 then
										if #mining_objects > 2 then
											local new_index = matching_index
											repeat
												new_index = math.random(1,#mining_objects)
											until(new_index ~= matching_index)
											p.mining_target = mining_objects[new_index]
										else
											if matching_index == 1 then
												p.mining_target = mining_objects[2]
											else
												p.mining_target = mining_objects[1]
											end
										end
										removeMiningButtons(p)
										addMiningButtons(p,mining_objects)
									end
								else
									p.mining_target = mining_objects[1]
									removeMiningButtons(p)
									addMiningButtons(p,mining_objects)
								end
							else
								p.mining_target = mining_objects[1]
								addMiningButtons(p,mining_objects)
							end
						else	--no nearby tractorable objects
							if p.mining_target ~= nil then
								removeMiningButtons(p)
								p.mining_target = nil
							end
						end
					else	--no nearby objects
						if p.mining_target ~= nil then
							removeMiningButtons(p)
							p.mining_target = nil
						end
					end
				end,22)
			end
		end		
		if p.mining_next_target_button_ops == nil then
			if p:hasPlayerAtPosition("Operations") then
				p.mining_next_target_button_ops = "mining_next_target_button_ops"
				p:addCustomButton("Operations",p.mining_next_target_button_ops,"Other mining target",function()
					local nearby_objects = p:getObjectsInRange(1000)
					local mining_objects = {}
					if nearby_objects ~= nil and #nearby_objects > 1 then
						for _, obj in ipairs(nearby_objects) do
							if p ~= obj then
								if isObjectType(obj,"Asteroid") or isObjectType(obj,"VisualAsteroid") then
									table.insert(mining_objects,obj)
								end
							end
						end		--end of nearby object list loop
						if #mining_objects > 0 then
							--print(string.format("%i tractorable objects under 1 unit away",#tractor_objects))
							if p.mining_target ~= nil and p.mining_target:isValid() then
								local target_in_list = false
								local matching_index = 0
								for i=1,#mining_objects do
									if mining_objects[i] == p.mining_target then
										target_in_list = true
										matching_index = i
										break
									end
								end		--end of check for the current target in list loop
								if target_in_list then
									if #mining_objects > 1 then
										if #mining_objects > 2 then
											local new_index = matching_index
											repeat
												new_index = math.random(1,#mining_objects)
											until(new_index ~= matching_index)
											p.mining_target = mining_objects[new_index]
										else
											if matching_index == 1 then
												p.mining_target = mining_objects[2]
											else
												p.mining_target = mining_objects[1]
											end
										end
										removeMiningButtons(p)
										addMiningButtons(p,mining_objects)
									end
								else
									p.mining_target = mining_objects[1]
									removeMiningButtons(p)
									addMiningButtons(p,mining_objects)
								end
							else
								p.mining_target = mining_objects[1]
								addMiningButtons(p,mining_objects)
							end
						else	--no nearby tractorable objects
							if p.mining_target ~= nil then
								removeMiningButtons(p)
								p.mining_target = nil
							end
						end
					else	--no nearby objects
						if p.mining_target ~= nil then
							removeMiningButtons(p)
							p.mining_target = nil
						end
					end
				end,22)
			end
		end
	else
		if p.mining_next_target_button ~= nil then
			p:removeCustom(p.mining_next_target_button)
			p.mining_next_target_button = nil
		end
		if p.mining_next_target_button_ops ~= nil then
			p:removeCustom(p.mining_next_target_button_ops)
			p.mining_next_target_button_ops = nil
		end
	end
end
function movingObjects(delta)
	if icarus_mobile_nebula_1 ~= nil and icarus_mobile_nebula_1:isValid() then
		local neb_x, neb_y = icarus_mobile_nebula_1:getPosition()
		if neb_x < -10000 then
			neb_x = -10000
		    icarus_mobile_nebula_1.increment = random(0,10)
			if neb_y > 110000 then
				--icarus_mobile_nebula_1.angle = random(1,89)
				icarus_mobile_nebula_1.angle = random(271,359)
			else
				--icarus_mobile_nebula_1.angle = random(91,179)
				icarus_mobile_nebula_1.angle = random(1,89)
			end
		end
		if neb_x > 80000 then
			neb_x = 80000
		    icarus_mobile_nebula_1.increment = random(0,10)
			if neb_y > 110000 then
				--icarus_mobile_nebula_1.angle = random(271,359)
				icarus_mobile_nebula_1.angle = random(181,269)
			else
				--icarus_mobile_nebula_1.angle = random(181,269)
				icarus_mobile_nebula_1.angle = random(91,179)
			end
		end
		if neb_y < 80000 then
			neb_y = 80000
		    icarus_mobile_nebula_1.increment = random(0,10)
			if neb_x > 45000 then
				--icarus_mobile_nebula_1.angle = random(181,269)
				icarus_mobile_nebula_1.angle = random(91,179)
			else
				--icarus_mobile_nebula_1.angle = random(91,179)
				icarus_mobile_nebula_1.angle = random(1,89)
			end
		end
		if neb_y > 140000 then
			neb_y = 140000
		    icarus_mobile_nebula_1.increment = random(0,10)
			if neb_x > 45000 then
				--icarus_mobile_nebula_1.angle = random(271,359)
				icarus_mobile_nebula_1.angle = random(181,269)
			else
				--icarus_mobile_nebula_1.angle = random(1,89)
				icarus_mobile_nebula_1.angle = random(271,359)
			end
		end
		local dx, dy = vectorFromAngle(icarus_mobile_nebula_1.angle,icarus_mobile_nebula_1.increment)
		icarus_mobile_nebula_1:setPosition(neb_x+dx,neb_y+dy)
		local nr = icarus_mobile_nebula_1:getRotation()
		nr = nr + .01
		if nr > 360 then 
			nr = nr - 360
		end
		icarus_mobile_nebula_1:setRotation(nr)
	end
	if kentar_mobile_nebula_1 ~= nil and kentar_mobile_nebula_1:isValid() then
		if kentar_mobile_nebula_1.lower_black_hole then
			--print(string.format("Lower start angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
			kentar_mobile_nebula_1.angle = kentar_mobile_nebula_1.angle + kentar_mobile_nebula_1.increment
			if kentar_mobile_nebula_1.angle > 360 then
				kentar_mobile_nebula_1.angle = kentar_mobile_nebula_1.angle - 360
			end
			--print(string.format("Lower mod 1 angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
			if kentar_mobile_nebula_1.ready then
				if kentar_mobile_nebula_1.angle >= 315 then
					--switch
					kentar_mobile_nebula_1.lower_black_hole = false
					kentar_mobile_nebula_1.angle = 135 - (kentar_mobile_nebula_1.angle - 315)
					kentar_mobile_nebula_1.center_x = 290000
					kentar_mobile_nebula_1.center_y = 210000
					kentar_mobile_nebula_1.ready = false
				end
			else
				if kentar_mobile_nebula_1.angle < 315 then
					kentar_mobile_nebula_1.ready = true
				end
			end
			--print(string.format("Lower mod 2 angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
		else
			--print(string.format("Upper start angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
			kentar_mobile_nebula_1.angle = kentar_mobile_nebula_1.angle - kentar_mobile_nebula_1.increment
			if kentar_mobile_nebula_1.angle < 0 then
				kentar_mobile_nebula_1.angle = kentar_mobile_nebula_1.angle + 360
			end
			--print(string.format("Upper mod 1 angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
			if kentar_mobile_nebula_1.ready then
				if kentar_mobile_nebula_1.angle <= 135 then
					--switch
					kentar_mobile_nebula_1.lower_black_hole = true
					kentar_mobile_nebula_1.angle = 315 + (135 - kentar_mobile_nebula_1.angle)
					kentar_mobile_nebula_1.center_x = 210000
					kentar_mobile_nebula_1.center_y = 290000
					kentar_mobile_nebula_1.ready = false
				end
			else
				if kentar_mobile_nebula_1.angle > 135 then
					kentar_mobile_nebula_1.ready = true
				end
			end
			--print(string.format("Upper mod 2 angle: %f, ready: %s",kentar_mobile_nebula_1.angle,tostring(kentar_mobile_nebula_1.ready)))
		end
		local px,py = vectorFromAngle(kentar_mobile_nebula_1.angle,kentar_mobile_nebula_1.mobile_neb_dist)
		kentar_mobile_nebula_1:setPosition(kentar_mobile_nebula_1.center_x+px,kentar_mobile_nebula_1.center_y+py)
	end
	if rotate_station ~= nil and #rotate_station > 0 then
		for i=1,#rotate_station do
			local current_station = rotate_station[i]
			if current_station ~= nil and current_station:isValid() then
				current_station:setRotation(current_station:getRotation()+.1)
				if current_station:getRotation() >= 360 then
					current_station:setRotation(0)
				end
			end
		end
	end
end
function triggerEpjam(p)
	string.format("")
	p:commandSetShieldFrequency(math.random(0,20))	
	local tube_size = {"small","medium","large"}
	EMPMissile():setPosition(p:getPosition()):setLifetime(0):setMissileSize(tube_size[p.epjam])
	p.epjam_recharge = getScenarioTime() + 60
	p:removeCustom(p.epjam_button_wea)
	p:removeCustom(p.epjam_button_tac)
end
--------------------------
--	External functions  --
--------------------------
function activePlayerShips()
	local return_list = ""
	local players = getActivePlayerShips()
	for pidx, ship in ipairs(players) do
		if ship ~= nil and ship:isValid() then
			return_list = return_list .. ship:getCallSign()
		end
		return_list = return_list .. "\n"
	end
	return return_list
end
-------------------------
--	Testing functions  --
-------------------------
function runAllTests()
	extraMath:runTests()
	updateSystem:create():_test()
end
--	Probe functions
function togglePatrolProbeState(p)
	if p.patrol_probe_state == "Off" then
		p.patrol_probe_state = "On"
	else
		p.patrol_probe_state = "Off"
	end
	if p.patrol_probe_button ~= nil then
		p:removeCustom(p.patrol_probe_button)
	else
		p.patrol_probe_button = "patrol_probe_button"
	end
	p:addCustomButton("Relay",p.patrol_probe_button,string.format("Patrol Probe %s",p.patrol_probe_state),function()
		string.format("")
		togglePatrolProbeState(p)
	end,10)
	if p.patrol_probe_button_ops ~= nil then
		p:removeCustom(p.patrol_probe_button_ops)
	else
		p.patrol_probe_button_ops = "patrol_probe_button_ops"
	end
	p:removeCustom(p.patrol_probe_button_ops)
	p:addCustomButton("Operations",p.patrol_probe_button_ops,string.format("Patrol Probe %s",p.patrol_probe_state),function()
		string.format("")
		togglePatrolProbeState(p)
	end,10)
end
function patrolProbeDone(self)
	string.format("")
	local p = self:getOwner()
	if p ~= nil and p:isValid() then
		if p.patrol_probe_count > 0 then
			p.patrol_probe_count = p.patrol_probe_count - 1
		end
	end
end
function patrolProbe(self)
	string.format("")
	local p = self:getOwner()
	if p ~= nil and p:isValid() then
		local probe_x, probe_y = self:getPosition()
		local player_x, player_y = p:getPosition()
		local angle = angleFromVectorNorth(probe_x, probe_y, player_x, player_y)
		local angle = (angle + 60) % 360
		if self.patrol_distance == nil then
			if distance_diagnostic then
				print("distance_diagnostic 22 self:",self,"p:",p)
			end		
			self.patrol_distance = distance(self,p)
		end
		local npp_x, npp_y = vectorFromAngleNorth(angle,self.patrol_distance)
		local px, py = p:getPosition()
		self:setTarget(px + npp_x, py + npp_y)
	else
		self:onArrival(nil)
	end
end
function cycleProbeType(p,probe_type)
	if p.probe_type ~= nil then
		if specialty_probe_diagnostic then
			print("Cycle Probe Type: player probe type is not nil:",p.probe_type)
		end
		local type_cycled = false
		if probe_type ~= nil then
			if specialty_probe_diagnostic then
				print("Cycle Probe Type: passed probe type is not nil:",probe_type)
			end
			if p.probe_type ~= probe_type then
				type_cycled = true
				p.probe_type = probe_type
				if specialty_probe_diagnostic then
					print("Cycle Probe Type: player probe type set to passed probe type")
				end
			end
		else
			if specialty_probe_diagnostic then
				print("Cycle Probe Type: passed probe type is nil")
			end
			if p.probe_type_list == nil then
				p.probe_type_list = {}
				table.insert(p.probe_type_list,{name = "standard", count = -1})
			end
			local matching_index = 0
			for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
				if specialty_probe_diagnostic then
					print("Cycle Probe Type: processing type list, type:",probe_type_item.name,"index:",probe_type_index,"count:",probe_type_item.count)
				end
				if probe_type_item.name == p.probe_type then
					if specialty_probe_diagnostic then
						print("Cycle Probe Type: list item matches player probe type")
					end
					matching_index = probe_type_index
					break
				end
			end
			if matching_index > 0 then
				matching_index = matching_index + 1
				if matching_index > #p.probe_type_list then
					matching_index = 1
				end
				if specialty_probe_diagnostic then
					print("Cycle Probe Type: updated matching index:",matching_index)
				end
				if p.probe_type ~= p.probe_type_list[matching_index].name then
					p.probe_type = p.probe_type_list[matching_index].name
					type_cycled = true
					if specialty_probe_diagnostic then
						print("Cycle Probe Type: updated type did not match player probe type. Set to match and indicate cycled:",p.probe_type)
					end
				end
				if p.probe_type_list[matching_index].count == 0 then
					if specialty_probe_diagnostic then
						print("Cycle Probe Type: matched type count is zero. Cycle again")
					end
					cycleProbeType(p)
				end
			else
				if p.probe_type ~= "standard" then
					if specialty_probe_diagnostic then
						print("Cycle Probe Type: No match. Player probe type not standard, set to standard and indicate cycled")
					end
					p.probe_type = "standard"
					type_cycled = true
				end
			end
		end
		if type_cycled then
			if specialty_probe_diagnostic then
				print("Cycle Probe Type: remove button when cycled")
			end
			if p.probe_type_button ~= nil then
				p:removeCustom(p.probe_type_button)
				p.probe_type_button = nil
			end
			if p.probe_type_button_ops ~= nil then
				p:removeCustom(p.probe_type_button_ops)
				p.probe_type_button_ops = nil
			end
		end
		if specialty_probe_diagnostic then
			print("Cycle Probe Type: check to update button, list:",p.probe_type_list,"list count:",#p.probe_type_list)
		end
		refreshSpecialProbeButton(p)
	end
end	
function refreshSpecialProbeButton(p)
	if p.probe_type_list ~= nil and #p.probe_type_list > 1 then
		local non_standard_probes = 0
		for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
			if specialty_probe_diagnostic then
				print("Cycle Probe Type: processing type list 2nd time, type:",probe_type_item.name,"index:",probe_type_index,"count:",probe_type_item.count)
			end
			if probe_type_item.name ~= "standard" then
				non_standard_probes = non_standard_probes + probe_type_item.count
			end
		end
		if specialty_probe_diagnostic then
			print("Cycle Probe Type: non standard probes found:",non_standard_probes)
		end
		if non_standard_probes > 0 then
			local button_label = string.format("Probes: %s",p.probe_type)
			if specialty_probe_diagnostic then
				print("Cycle Probe Type: set base label:",button_label)
			end
			if p.probe_type ~= "standard" then
				local probe_quantity = 0
				for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
					if probe_type_item.name == p.probe_type then
						if probe_type_item.count ~= nil then
							probe_quantity = math.min(probe_type_item.count,p:getScanProbeCount())
						end
					end
				end
				button_label = string.format("%s (%i)",button_label,probe_quantity)
				if specialty_probe_diagnostic then
					print("Cycle Probe Type: modified specialty label:",button_label)
				end
			end
			p.probe_type_button = "probe_type_button"
			p:addCustomButton("Relay",p.probe_type_button,button_label,function()
				string.format("")
				cycleProbeType(p)
			end,10)
			if specialty_probe_diagnostic then
				print("p.probe_type_button:",p.probe_type_button,"button_label:",button_label)
			end
			p.probe_type_button_ops = "probe_type_button_ops"
			p:addCustomButton("Operations",p.probe_type_button_ops,button_label,function()
				string.format("")
				cycleProbeType(p)
			end,10)
		end
	end
end	
function probeWarpJammer(self,x,y)
	WarpJammer():setPosition(x,y):setRange(self.warp_jam_range):setFaction(self:getFaction())
	self:onArrival(nil)
end
function probeObservatory(self,x,y)
	local ox, oy = vectorFromAngle(random(0,360),500)
	ox = ox + x
	oy = oy + y
	local obs = SpaceStation():setPosition(ox,oy):setTemplate("Small Station")
	obs:setShortRangeRadarRange(self.range):setShieldsMax(self.shield)
	obs:setHullMax(self.hull):setRepairDocked(false):setSharesEnergyWithDocked(false)
	obs:setRestocksMissilesDocked(false)
	if named_observatory_number == nil then
		named_observatory_number = 0
	end
	named_observatory_number = named_observatory_number + math.random(1,4)
	obs:setCallSign(string.format("SO%s",named_observatory_number))
	obs:setDescription(string.format("Sensor Observatory %s",named_observatory_number))
	obs:setFaction(self:getFaction())
	obs:setCommsFunction(commsSensorObservatory)
	self:onArrival(nil)
end
------------------------
--	Update functions  --
------------------------
function update(delta)
	if updateDiagnostic then print("update: top of update function") end
	--generic sandbox items
	if timer_started then
		if timer_value == nil then
			timer_value = delta + timer_start_length*60
		end
		timer_value = timer_value - (delta * timer_scale)
	end
	local warning_message = nil
	local warning_station = nil
	if automated_station_danger_warning and regionStations ~= nil then
		for station_index=1,#regionStations do
			local current_station = regionStations[station_index]
			if current_station ~= nil and current_station:isValid() then
				if current_station.proximity_warning == nil then
					for _, obj in ipairs(current_station:getObjectsInRange(station_sensor_range)) do
						if obj ~= nil and obj:isValid() then
							if obj:isEnemy(current_station) then
								local detected_enemy_ship = false
								if isObjectType(obj,"CpuShip") then
									detected_enemy_ship = true
								end
								if detected_enemy_ship then
									local s_x, s_y = current_station:getPosition()
									local e_x, e_y = obj:getPosition()
									local enemy_bearing = math.floor(angleFromVectorNorth(e_x, e_y, s_x, s_y))
									warning_station = current_station
									warning_message = string.format("[%s in %s] We detect one or more enemies nearby bearing %i",current_station:getCallSign(),current_station:getSectorName(),enemy_bearing)
									if warning_includes_ship_type then
										warning_message = string.format("%s. At least one is of type %s",warning_message,obj:getTypeName())
									end
									current_station.proximity_warning = warning_message
									current_station.proximity_warning_timer = delta + 300
									break
								end
							end
						end
					end
					if warning_station ~= nil then
						break
					end
				else
					current_station.proximity_warning_timer = current_station.proximity_warning_timer - delta
					if current_station.proximity_warning_timer < 0 then
						current_station.proximity_warning = nil
					end
				end
				if warning_station == nil then
					if current_station.shield_damage_warning == nil then
						for i=1,current_station:getShieldCount() do
							if current_station:getShieldLevel(i-1) < current_station:getShieldMax(i-1) then
								warning_station = current_station
								warning_message = string.format("[%s in %s] Our shields have taken damage",current_station:getCallSign(),current_station:getSectorName())
								current_station.shield_damage_warning = warning_message
								current_station.shield_damage_warning_timer = delta + 300
								break
							end
						end
						if warning_station ~= nil then
							break
						end
					else
						current_station.shield_damage_warning_timer = current_station.shield_damage_warning_timer - delta
						if current_station.shield_damage_warning_timer < 0 then
							current_station.shield_damage_warning = nil
						end
					end
				end
				if warning_station == nil then
					if current_station.severe_shield_warning == nil then
						local current_station_shield_count = current_station:getShieldCount()
						for i=1,current_station_shield_count do
							if current_station:getShieldLevel(i-1) < current_station:getShieldMax(i-1)*.1 then
								warning_station = current_station
								if current_station_shield_count == 1 then
									warning_message = string.format("[%s in %s] Our shields are nearly gone",current_station:getCallSign(),current_station:getSectorName())
								else
									warning_message = string.format("[%s in %s] One or more of our shields are nearly gone",current_station:getCallSign(),current_station:getSectorName())
								end
								current_station.severe_shield_warning = warning_message
								current_station.severe_shield_warning_timer = delta + 300
								break
							end
						end
						if warning_station ~= nil then
							break
						end
					else
						current_station.severe_shield_warning_timer = current_station.severe_shield_warning_timer - delta
						if current_station.severe_shield_warning_timer < 0 then
							current_station.severe_shield_warning = nil
						end
					end
				end
				if warning_station == nil then
					if current_station.hull_warning == nil then
						if current_station:getHull() < current_station:getHullMax() then
							warning_station = current_station
							warning_message = string.format("[%s in %s] Our hull has been damaged",current_station:getCallSign(),current_station:getSectorName())
							current_station.hull_warning = warning_message
							break
						end
					end
				end
				if warning_station == nil then
					if current_station.severe_hull_warning == nil then
						if current_station:getHull() < current_station:getHullMax()*.1 then
							warning_station = current_station
							warning_message = string.format("[%s in %s] We are on the brink of destruction",current_station:getCallSign(),current_station:getSectorName())
							current_station.severe_hull_warning = warning_message
						end
					end
				end
			end
		end
	end
	local ship_warning_message = nil
	local warning_ship = nil
	if automated_station_danger_warning and region_ships ~= nil then
		for ship_index=1,#region_ships do
			local current_ship = region_ships[ship_index]
			if current_ship ~= nil and current_ship:isValid() then
				if current_ship.proximity_warning == nil then
					for _, obj in ipairs(current_ship:getObjectsInRange(station_sensor_range)) do
						if obj ~= nil and obj:isValid() then
							if obj:isEnemy(current_ship) then
								local detected_enemy_ship = false
								if isObjectType(obj,"CpuShip") then
									detected_enemy_ship = true
								end
								if detected_enemy_ship then
									warning_ship = current_ship
									ship_warning_message = string.format("[%s in %s] We detect one or more enemies nearby",current_ship:getCallSign(),current_ship:getSectorName())
									if warning_includes_ship_type then
										ship_warning_message = string.format("%s. At least one is of type %s",ship_warning_message,obj:getTypeName())
									end
									current_ship.proximity_warning = ship_warning_message
									current_ship.proximity_warning_timer = delta + 300
									break
								end
							end
						end
					end
					if warning_ship ~= nil then
						break
					end
				else
					current_ship.proximity_warning_timer = current_ship.proximity_warning_timer - delta
					if current_ship.proximity_warning_timer < 0 then
						current_ship.proximity_warning = nil
					end
				end
			end
		end
	end
	if updateDiagnostic then print("update: universe update") end
	update_system:update(delta)
	local players = getActivePlayerShips()
	for pidx, p in ipairs(players) do
		if p ~= nil and p:isValid() then
			if updateDiagnostic then print("update: valid player: adjust spawn point") end
			-- if the template has been update pull data from the soft template
			-- even if templates arent changed this can happen during inital creation
			-- as setTemplate will invoke the callback with the template before being
			-- overwritten by the soft template
			if p.score_settings_source ~= p:getTypeName() then
				updatePlayerSoftTemplate(p)
			end
			local player_name = p:getCallSign()
			local player_faction = p:getFaction()
			if warning_station ~= nil and not warning_station:isEnemy(p) then
				p:addToShipLog(warning_message,"Red")
			end
			if warning_ship ~= nil and not warning_ship:isEnemy(p) then
				p:addToShipLog(ship_warning_message,"Red")
			end
			p:wrappedAddCustomInfo("name_tag_positions","name_tag",string.format("%s %s in %s",player_faction,player_name,p:getSectorName()))
			if p.tube_size ~= nil then
				local tube_size_banner = string.format("%s tubes: %s",p:getCallSign(),p.tube_size)
				if #p.tube_size == 1 then
					tube_size_banner = string.format("%s tube: %s",p:getCallSign(),p.tube_size)
				end
				p:wrappedAddCustomInfo("Weapons","tube_sizes",tube_size_banner)
			end
			updatePlayerPodTelemetryButton(p)
			if updateDiagnostic then print("update: valid player: inventory button") end
			updatePlayerInventoryButton(p,player_name)
			if updateDiagnostic then print("update: valid player: rendezvous point message") end
			if #rendezvousPoints > 0 then
				updatePlayerRendezvousPoints(p)
			end
			if updateDiagnostic then print("update: valid player: mortal repair crew") end
			if getScenarioTime() > healthCheckTimer then	--check to see if any crew perish due to excessive damage
				updatePlayerDamageConsequences(p)
			end	--health check branch
			updatePlayerDamageControl(p)
			if p.expedite_dock ~= nil then
				expeditedDockingService(p)
			end
			updatePlayerTimerWidgets(p)
			if p.normal_long_range_radar == nil then
				p.normal_long_range_radar = p:getLongRangeRadarRange()
			end
			if regionStations ~= nil then
				updatePlayerLongRangeSensors(delta,p)
			end
			local vx, vy = p:getVelocity()
			local player_velocity = math.sqrt((math.abs(vx)*math.abs(vx))+(math.abs(vy)*math.abs(vy)))
			local nearby_objects = p:getObjectsInRange(1000)
			if p.tractor then
				updatePlayerTractor(p,player_velocity,nearby_objects)
			end		--end of tractor checks
			if p.mining and p.cargo > 0 then
				updatePlayerMiningCargo(delta,p,player_velocity,nearby_objects)
			end
			if p.carrier_ship_inventory ~= nil then
				updatePlayerCarrierSpaceGroup(delta,p)
			end
			if p.patrol_probe > 0 then
				updatePlayerPatrolProbes(p)
			end
			if p.probe_type ~= nil then
--				if probe_type_refresh_timer == nil then
--					probe_type_refresh_timer = getScenarioTime() + 15
--				end
--				if probe_type_refresh_timer < getScenarioTime() then
--					refreshSpecialProbeButton(p)
--					probe_type_refresh_timer = getScenarioTime() + 15
--				end
				if p.probe_type ~= "standard" then
					updatePlayerSpecialtyProbes(p)
				end
			end
			if p.turbo_torp then
				updatePlayerTurboTorpedo(delta,p)
			end
			if p.prox_scan ~= nil and p.prox_scan > 0 then
				updatePlayerProximityScan(p)
			end
			if planet_magnasol_star ~= nil then
				updatePlayerMagnasolHeat(delta,p)
				updatePlayerMagnasolLevelCoolant(p)
			end
			if p.epjam_recharge ~= nil then
				catchEpjamMissile(p)
			end
			if p.beam_damage_switch then
				updatePlayerBeamDamageSwitch(p)
			end
			updatePlayerSystemHealthRepair(delta,p)
			updatePlayerInNebula(delta,p)
			updatePlayerJumpOverchargeBanner(p)
			updatePlayerHackedButton(p)
			updatePlayerShieldBanner(p)
			updatePlayerHullBanner(p)
			updatePlayerLockBanners(p)
			boarderResult(p)
			updatePlayerWaypointDistanceButton(p)
			improvedStationService(p)
			updatePlayerMaxHealthWidgets(p)
			updateWaypointSharingButtons(p)
			updatePlayerMissileTriggerButtons(p)
			updatePlayerBalanceShield(p)
			if updateDiagnostic then print("update: end of player loop") end
		end	--player loop
	end
	if updateDiagnostic then print("update: outside player loop") end
	if planet_colburn ~= nil and planet_colburn:isValid() then
		updateMagnasol(delta)
	end
	updateCarrierDeployedFighter(delta)
	if getScenarioTime() > healthCheckTimer then
		healthCheckTimer = getScenarioTime() + healthCheckTimerInterval
	end
	for index, ship in ipairs(spiky_spin_ships) do
		local current_clock = getScenarioTime()
		if current_clock > ship.spiky_spin_active then
			if ship:getRotationMaxSpeed() ~= ship.spiky_spin_normal then
				ship:setRotationMaxSpeed(ship.spiky_spin_normal)
			end
		end
		if current_clock > ship.spiky_spin_cooling then
			ship.spiky_spin_active = nil
			ship.spiky_spin_cooling = nil
			table.remove(spiky_spin_ships,index)
			break
		end
	end
	for index, ship in pairs(impulse_boost_ships) do
		local current_clock = getScenarioTime()
		if current_clock > ship.boost_impulse_active then
			if ship:getImpulseMaxSpeed() ~= ship.boost_impulse_normal then
				ship:setImpulseMaxSpeed(ship.boost_impulse_normal)
			end
		end
		if current_clock > ship.boost_impulse_cooling then
			ship.boost_impulse_active = nil
			ship.boosk_impulse_cooling = nil
			table.remove(impulse_boost_ships,index)
			break
		end
	end
	for index, ship in ipairs(cyber_attack_ships) do
		if ship ~= nil and ship:isValid() then
			if ship.cyber_attack_timer == nil then
				local obj_list = ship:getObjectsInRange(20000)
				local player_victims = {}
				local cpu_ship_victims = {}
				for i,obj in ipairs(obj_list) do
					if isObjectType(obj,"PlayerSpaceship") then
						if obj:isEnemy(ship) then
							table.insert(player_victims,obj)
						end
					elseif isObjectType(obj,"CpuShip") then
						if obj:isEnemy(ship) then
							table.insert(cpu_ship_victims,obj)
						end
					end
				end
				if #player_victims > 0 then
					if random(1,100) <= ship.cyber_attack_factor then
						local player_ship = player_victims[math.random(1,#player_victims)]
						local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
						if not player_ship:hasWarpDrive() then
							table.remove(system_list,6)
							if not player_ship:hasJumpDrive() then
								table.remove(system_list,6)
							end
						elseif not player_ship:hasJumpDrive() then
							table.remove(system_list,7)
						end
						selected_system = system_list[math.random(1,#system_list)]
						player_ship:setSystemHackedLevel(selected_system,math.min(player_ship:getSystemHackedLevel(selected_system) + .5,1))
					end
					ship.cyber_attack_timer = getScenarioTime() + ship.cyber_attack_interval
				elseif #cpu_ship_victims > 0 then
					if random(1,100) <= ship.cyber_attack_factor then
						local cpu_ship = cpu_ship_victims[math.random(1,#cpu_ship_victims)]
						local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
						if not cpu_ship:hasWarpDrive() then
							table.remove(system_list,6)
							if not cpu_ship:hasJumpDrive() then
								table.remove(system_list,6)
							end
						elseif not cpu_ship:hasJumpDrive() then
							table.remove(system_list,7)
						end
						selected_system = system_list[math.random(1,#system_list)]
						cpu_ship:setSystemHackedLevel(selected_system,math.min(cpu_ship:getSystemHackedLevel(selected_system) + .5,1))
					end
					ship.cyber_attack_timer = getScenarioTime() + ship.cyber_attack_interval
				end
			elseif getScenarioTime() > ship.cyber_attack_timer then
				ship.cyber_attack_timer = nil
			end
		else
			table.remove(cyber_attack_ships,index)
			break
		end
	end
	for index, ship in pairs(pdc_ships) do
		if ship ~= nil and ship:isValid() then
			local template_name = ship:getTypeName()
			if template_name == nil then
				print("template name for item in pdc ship list cannot be determined")
			end
			local base_distance = shipTemplateDistance[template_name]
			if base_distance == nil then
				print(string.format("Cannot determine the ship size based on the template name. Check the shipTemplateDistance table for template %s",template_name))
			else
				local obj_list = ship:getObjectsInRange(base_distance + 500)
				for _, obj in ipairs(obj_list) do
					if isObjectType(obj,"HomingMissile","MovingMissile") or isObjectType(obj,"HVLI","MovingMissile") or isObjectType(obj,"Nuke","MovingMissile") or isObjectType(obj,"EMPMissile","MovingMissile") then
						if obj:getOwner() ~= ship then
							if obj.pdc_cycle == nil then
								local adjusted_factor = ship.pdc_factor * ship:getSystemHealth("beamweapons")
								obj.pdc_success = (random(1,100) <= adjusted_factor)
								obj.pdc_cycle = {}
								local attempts = math.random(1,8)
								local trigger_time = getScenarioTime()
								local interval = 1/attempts
								for i=1,attempts do
									obj.pdc_cycle[i] = {time = trigger_time, done = false, len = interval*.75}
									trigger_time = trigger_time + interval
								end
							end
							local current_time = getScenarioTime()
							local completed_shots = true
							for _, shot in ipairs(obj.pdc_cycle) do
								if not shot.done then
									if current_time >= shot.time then
										BeamEffect():setSource(ship,0,0,0):setTarget(obj,0,0):setBeamFireSoundPower(2):setRing(false):setDuration(shot.len)
										shot.done = true
									end
									completed_shots = false
								end
							end
							if completed_shots and obj.pdc_success then
								local exp_x, exp_y = obj:getPosition()
								ExplosionEffect():setPosition(exp_x,exp_y):setSize(40):setOnRadar(true)
								obj:destroy()
							end
						end
					end
				end
			end
		else
			table.remove(pdc_ships,index)
			break
		end
	end
	if plotRevert ~= nil then
		plotRevert(delta)
	end
	if plotMobile ~= nil then
		plotMobile(delta)
	end
	if plotPulse ~= nil then
		plotPulse(delta)
	end
	if jump_train ~= nil then
		updateJumpTrain()
	end
	if #immobile_stations > 0 then
		updateImmobileStations()
	end
	if skeletal_commerce then
		skeletal_commerce_timer = skeletal_commerce_timer - delta
		if skeletal_commerce_timer < 0 then
			updateCommerce(skeletal_commerce_assets)
			skeletal_commerce_timer = commerce_timer_interval
		end
	end
	if icarus_commerce then
		icarus_commerce_timer = icarus_commerce_timer - delta
		if icarus_commerce_timer < 0 then
			updateCommerce(icarus_commerce_assets,stationIcarus)
			icarus_commerce_timer = commerce_timer_interval
		end
	end
	if kentar_commerce then
		kentar_commerce_timer = kentar_commerce_timer - delta
		if kentar_commerce_timer < 0 then
			updateCommerce(kentar_commerce_assets,stationKentar)
			kentar_commerce_timer = commerce_timer_interval
		end
	end
	if teresh_commerce then
		teresh_commerce_timer = teresh_commerce_timer - delta
		if teresh_commerce_timer < 0 then
			updateCommerce(teresh_commerce_assets,stationTeresh)
			teresh_commerce_timer = commerce_timer_interval
		end
	end
	if lafrina_commerce then
		lafrina_commerce_timer = lafrina_commerce_timer - delta
		if lafrina_commerce_timer < 0 then
			updateCommerce(lafrina_commerce_assets,stationLafrina)
			lafrina_commerce_timer = commerce_timer_interval
		end
	end
	if bask_commerce then
		bask_commerce_timer = bask_commerce_timer - delta
		if bask_commerce_timer < 0 then
			updateCommerce(bask_commerce_assets,stationBask)
			bask_commerce_timer = commerce_timer_interval
		end
	end
	if staunch_commerce then
		staunch_commerce_timer = staunch_commerce_timer - delta
		if staunch_commerce_timer < 0 then
			updateCommerce(staunch_commerce_assets,stationStaunch)
			staunch_commerce_timer = commerce_timer_interval
		end
	end
	if glikton_commerce then
		if glikton_commerce_timer == nil then
			glikton_commerce_timer = getScenarioTime() + commerce_timer_interval
		end
		if getScenarioTime() > glikton_commerce_timer then
			glikton_commerce_timer = nil
			updateCommerce(glikton_commerce_assets,stationGlikton)
		end
	end
	updateProbeLabor()
	updateShowMineBlob()
	expeditedDockingServices()
	if staunch_phenomenon ~= nil then
		updateStaunch(delta)
	end
	if escape_pod_floaters ~= nil then
		podFloat()
	end
	cleanUpDropPoints()
--	cleanUpPodPrepButtons()
	if updateDiagnostic then print("update: end of update function") end
end
function improvedStationService(p)
	if p.instant_energy ~= nil then
		if #p.instant_energy > 0 then
			for i,station in ipairs(p.instant_energy) do
				if station:isValid() then
					if p:isDocked(station) then
						p:setEnergyLevel(p:getEnergyLevelMax())
					end
				else
					p.instant_energy[i] = p.instant_energy[#p.instant_energy]
					p.instant_energy[#p.instant_energy] = nil
					break
				end
			end
		else
			p.instant_energy = nil
		end
	end
	if p.instant_hull ~= nil then
		if #p.instant_hull > 0 then
			for i,station in ipairs(p.instant_hull) do
				if station:isValid() then
					if p:isDocked(station) then
						p:setHull(p:getHullMax())
					end
				else
					p.instant_hull[i] = p.instant_hull[#p.instant_hull]
					p.instant_hull[#p.instant_hull] = nil
					break
				end
			end
		else
			p.instant_hull = nil
		end
	end
	if p.instant_probes ~= nil then
		if #p.instant_probes > 0 then
			for i,station in ipairs(p.instant_probes) do
				if station:isValid() then
					if p:isDocked(station) then
						p:setScanProbeCount(p:getMaxScanProbeCount())
					end
				else
					p.instant_probes[i] = p.instant_probes[#p.instant_probes]
					p.instant_probes[#p.instant_probes] = nil
				end
			end
		else
			p.instant_probes = nil
		end
	end
end
function updatePlayerPodTelemetryButton(p)
	local pod_count = 0
	for pod_name, pod in pairs(escapePodList) do
		if pod ~= nil and pod:isValid() then
			pod_count = pod_count + 1
		end
	end
	if pod_count > 0 then
		if p:hasPlayerAtPosition("Relay") then
			if p.pod_telemetry == nil then
				p.pod_telemetry = "pod_telemetry"
				p:addCustomButton("Relay",p.pod_telemetry,"Pod Telemetry",function()
					string.format("")	--global context for serious proton
					showPodTelemetry(p)
				end,19)
			end
		end
		if p:hasPlayerAtPosition("Operations") then
			if p.pod_telemetry_ops == nil then
				p.pod_telemetry_ops = "pod_telemetry_ops"
				p:addCustomButton("Operations",p.pod_telemetry_ops,"Pod Telemetry",function()
					string.format("")	--global context for serious proton
					showPodTelemetry(p)
				end,19)
			end
		end
	else
		if p.pod_telemetry ~= nil then
			p:removeCustom("Relay",p.pod_telemetry)
			p.pod_telemetry = nil
		end
		if p.pod_telemetry_ops ~= nil then
			p:removeCustom("Operations",p.pod_telemetry_ops)
			p.pod_telemetry_ops = nil
		end
	end
end
function updatePlayerInventoryButton(p,player_name)
	local goodCount = 0
	if p.goods ~= nil then
		for good, goodQuantity in pairs(p.goods) do
			goodCount = goodCount + 1
		end
	end
	if goodCount > 0 or p.pods < p.max_pods then		--add inventory button when cargo or pods acquired
		p:addCustomButton("Relay",string.format("inventory_button_relay_%s",player_name),"Inventory",function() 
			string.format("")
			local out = playerShipCargoInventory(p) 
			p:addCustomMessage("Relay","inventory_message",out)
		end,23)
		p:addCustomButton("Operations",string.format("inventory_button_ops_%s",player_name),"Inventory", function()
			string.format("")
			local out = playerShipCargoInventory(p) 
			p:addCustomMessage("Operations","inventory_message",out)
		end,23)
	end
end
function updatePlayerHackedButton(p)
	local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
	local hacked_count = 0
	for i,system in ipairs(system_list) do
		if p:getSystemHackedLevel(system) > 0 then
			hacked_count = hacked_count + 1
		end
	end
	if hacked_count > 0 then
		p.hacked_button_rel = "hacked_button_rel"
		p:addCustomButton("Relay",p.hacked_button_rel,string.format("Hacked %i",hacked_count),function()
			string.format("")
			hackedReport(p,"Relay")
		end,25)
		p.hacked_button_ops = "hacked_button_ops"
		p:addCustomButton("Operations",p.hacked_button_ops,string.format("Hacked %i",hacked_count),function()
			string.format("")
			hackedReport(p,"Operations")
		end,25)
	else
		if p.hacked_button_ops ~= nil then
			p:removeCustom(p.hacked_button_ops)
			p.hacked_button_ops = nil
		end
		if p.hacked_button_rel ~= nil then
			p:removeCustom(p.hacked_button_rel)
			p.hacked_button_rel = nil
		end
	end
end
function hackedReport(p,console)
	local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
	local hacked_count = 0
	local out = ""
	for i,system in ipairs(system_list) do
		local level = p:getSystemHackedLevel(system)
		if level > 0 then
			hacked_count = hacked_count + 1
			out = string.format("%s\n    %s: %.1f%%",out,system,level*100)
		end
	end
	if hacked_count > 0 then
		if hacked_count > 1 then
			out = string.format("%i hacked systems:%s",hacked_count,out)
		else
			out = string.format("One hacked system:%s",out)
		end
	else
		out = "No hacked systems"
	end
	p.hacked_report_message = "hacked_report_message"
	p:addCustomMessage(console,p.hacked_report_message,out)
end
function updatePlayerRendezvousPoints(p)
	for _,rp in pairs(rendezvousPoints) do	--send rendezvous point message when applicable
		if rp.message == nil then
			rp.message = "sent"
			if p.rpMessage == nil then
				p.rpMessage = {}
			end
			local rpCallSign = rp:getCallSign()
			if rpCallSign ~= nil then
				if p.rpMessage[rpCallSign] == nil then
					p:addToShipLog(string.format("Coordinates for %s saved and ready for Engineering and Helm to transport",rpCallSign),"Green")
					p.rpMessage[rpCallSign] = "sent"
				end
			end
		end
	end
end
function updatePlayerDamageConsequences(p)
	if p:getRepairCrewCount() > 0 then
		local fatalityChance = 0
		local currentShield = 0
		if p:getShieldCount() > 1 then
			currentShield = (p:getSystemHealth("frontshield") + p:getSystemHealth("rearshield"))/2
		else
			currentShield = p:getSystemHealth("frontshield")
		end
		fatalityChance = fatalityChance + (p.prevShield - currentShield)
		p.prevShield = currentShield
		local currentReactor = p:getSystemHealth("reactor")
		fatalityChance = fatalityChance + (p.prevReactor - currentReactor)
		p.prevReactor = currentReactor
		local currentManeuver = p:getSystemHealth("maneuver")
		fatalityChance = fatalityChance + (p.prevManeuver - currentManeuver)
		p.prevManeuver = currentManeuver
		local currentImpulse = p:getSystemHealth("impulse")
		fatalityChance = fatalityChance + (p.prevImpulse - currentImpulse)
		p.prevImpulse = currentImpulse
		if p:getBeamWeaponRange(0) > 0 then
			if p.healthyBeam == nil then
				p.healthyBeam = 1.0
				p.prevBeam = 1.0
			end
			local currentBeam = p:getSystemHealth("beamweapons")
			fatalityChance = fatalityChance + (p.prevBeam - currentBeam)
			p.prevBeam = currentBeam
		end
		if p:getWeaponTubeCount() > 0 then
			if p.healthyMissile == nil then
				p.healthyMissile = 1.0
				p.prevMissile = 1.0
			end
			local currentMissile = p:getSystemHealth("missilesystem")
			fatalityChance = fatalityChance + (p.prevMissile - currentMissile)
			p.prevMissile = currentMissile
		end
		if p:hasWarpDrive() then
			if p.healthyWarp == nil then
				p.healthyWarp = 1.0
				p.prevWarp = 1.0
			end
			local currentWarp = p:getSystemHealth("warp")
			fatalityChance = fatalityChance + (p.prevWarp - currentWarp)
			p.prevWarp = currentWarp
		end
		if p:hasJumpDrive() then
			if p.healthyJump == nil then
				p.healthyJump = 1.0
				p.prevJump = 1.0
			end
			local currentJump = p:getSystemHealth("jumpdrive")
			fatalityChance = fatalityChance + (p.prevJump - currentJump)
			p.prevJump = currentJump
		end
		if p:getRepairCrewCount() == 1 then
			fatalityChance = fatalityChance/2	-- increase survival chances of last repair crew standing
		end
		if fatalityChance > 0 then
			if math.random() < (fatalityChance) then
				if p.initialCoolant == nil then
					p:setRepairCrewCount(p:getRepairCrewCount() - 1)
					p:wrappedAddCustomMessage("Engineering","repairCrewFatality","One of your repair crew has perished")
				else
					local consequence = 0
					local upper_consequence = 2
					local consequence_list = {}
					if p:getCanLaunchProbe() then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"probe")
					end
					if p:getCanHack() then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"hack")
					end
					if p:getCanScan() then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"scan")
					end
					if p:getCanCombatManeuver() then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"combat_maneuver")
					end
					if p:getCanSelfDestruct() then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"self_destruct")
					end
					if p:getWeaponTubeCount() > 0 then
						upper_consequence = upper_consequence + 1
						table.insert(consequence_list,"tube_time")
					end
					local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
					for _, system in ipairs(system_list) do
						if p:hasSystem(system) then
							if p:getSystemHealth(system) < p:getSystemHealthMax(system) then
								upper_consequence = upper_consequence + 1
								table.insert(consequence_list,system)
							end
						end
					end
					consequence = math.random(1,upper_consequence)
					if consequence == 1 then
						p:setRepairCrewCount(p:getRepairCrewCount() - 1)
						p:wrappedAddCustomMessage("Engineering","repairCrewFatality","One of your repair crew has perished")
					elseif consequence == 2 then
						local current_coolant = p:getMaxCoolant()
						local lost_coolant = 0
						if current_coolant >= 10 then
							lost_coolant = current_coolant*random(.25,.5)	--lose between 25 and 50 percent
						else
							lost_coolant = current_coolant*random(.15,.35)	--lose between 15 and 35 percent
						end
						p:setMaxCoolant(current_coolant - lost_coolant)
						if p.reclaimable_coolant == nil then
							p.reclaimable_coolant = 0
						end
						p.reclaimable_coolant = math.min(20,p.reclaimable_coolant + lost_coolant*random(.8,1))
						p:wrappedAddCustomMessage("Engineering","coolantLoss","Damage has caused a loss of coolant")
					else
						local named_consequence = consequence_list[consequence-2]
						if named_consequence == "probe" then
							p:setCanLaunchProbe(false)
							p:wrappedAddCustomMessage("Engineering","probe_launch_damage_message","The probe launch system has been damaged")
						elseif named_consequence == "hack" then
							p:setCanHack(false)
							p:wrappedAddCustomMessage("Engineering","hack_damage_message","The hacking system has been damaged")
						elseif named_consequence == "scan" then
							p:setCanScan(false)
							p:wrappedAddCustomMessage("Engineering","scan_damage_message","The scanners have been damaged")
						elseif named_consequence == "combat_maneuver" then
							p:setCanCombatManeuver(false)
							p:wrappedAddCustomMessage("Engineering","combat_maneuver_damage_message","Combat maneuver has been damaged")
						elseif named_consequence == "self_destruct" then
							p:setCanSelfDestruct(false)
							p:wrappedAddCustomMessage("Engineering","self_destruct_damage_message","Self destruct system has been damaged")
						elseif named_consequence == "tube_time" then
							local tube_count = p:getWeaponTubeCount()
							local tube_index = 0
							if p.normal_tube_load_time == nil then
								p.normal_tube_load_time = {}
								repeat
									p.normal_tube_load_time[tube_index] = p:getTubeLoadTime(tube_index)
									tube_index = tube_index + 1
								until(tube_index >= tube_count)
								tube_index = 0
							end
							repeat
								p:setTubeLoadTime(tube_index,p:getTubeLoadTime(tube_index) + 2)
								tube_index = tube_index + 1
							until(tube_index >= tube_count)
							p:wrappedAddCustomMessage("Engineering","tube_slow_down_message","Tube damage has caused tube load time to increase")
						else
							local found_system = false
							for _, system in ipairs(system_list) do
								if system == named_consequence then
									found_system = true
									break
								end
							end
							if not found_system then
								named_consequence = "reactor"
							end
							p:setSystemHealthMax(named_consequence,(p:getSystemHealthMax(named_consequence) - p:getSystemHealth(named_consequence))/2)
							p:wrappedAddCustomMessage("Engineering","severe_damage",string.format("Severe damage to %s",named_consequence))
						end
					end	--coolant loss branch
				end	--could lose coolant branch
			end	--bad consequences of damage branch
		end	--possible chance of bad consequences branch
	else	--no repair crew left
		if random(1,100) <= 4 then
			p:setRepairCrewCount(1)
			if p:hasPlayerAtPosition("Engineering") then
				local repairCrewRecovery = "repairCrewRecovery"
				p:addCustomMessage("Engineering",repairCrewRecovery,"Medical team has revived one of your repair crew")
			end
			if p:hasPlayerAtPosition("Engineering+") then
				local repairCrewRecoveryPlus = "repairCrewRecoveryPlus"
				p:addCustomMessage("Engineering+",repairCrewRecoveryPlus,"Medical team has revived one of your repair crew")
			end
			resetPreviousSystemHealth(p)
		end	--medical science triumph branch
	end	--no repair crew left
	if p.initialCoolant ~= nil then
		current_coolant = p:getMaxCoolant()
		if current_coolant < 20 then
			if random(1,100) <= 4 then
				local reclaimed_coolant = 0
				if p.reclaimable_coolant ~= nil and p.reclaimable_coolant > 0 then
					reclaimed_coolant = p.reclaimable_coolant*random(.1,.5)	--get back 10 to 50 percent of reclaimable coolant
					p:setMaxCoolant(math.min(20,current_coolant + reclaimed_coolant))
					p.reclaimable_coolant = p.reclaimable_coolant - reclaimed_coolant
				end
				local noticable_reclaimed_coolant = math.floor(reclaimed_coolant)
				if noticable_reclaimed_coolant > 0 then
					if p:hasPlayerAtPosition("Engineering") then
						local coolant_recovery = "coolant_recovery"
						p:addCustomMessage("Engineering",coolant_recovery,"Automated systems have recovered some coolant")
					end
					if p:hasPlayerAtPosition("Engineering+") then
						local coolant_recovery_plus = "coolant_recovery_plus"
						p:addCustomMessage("Engineering+",coolant_recovery_plus,"Automated systems have recovered some coolant")
					end
				end
				resetPreviousSystemHealth(p)
			end
		end
	end
end
function updatePlayerDamageControl(p)
	local secondary_systems_optimal = true
	if not p:getCanLaunchProbe() then
		secondary_systems_optimal = false
	end
	if secondary_systems_optimal and not p:getCanHack() then
		secondary_systems_optimal = false
	end
	if secondary_systems_optimal and not p:getCanScan() then
		secondary_systems_optimal = false
	end
	if secondary_systems_optimal and not p:getCanCombatManeuver() then
		secondary_systems_optimal = false
	end
	if secondary_systems_optimal and not p:getCanSelfDestruct() then
		secondary_systems_optimal = false
	end
	if secondary_systems_optimal then
		local tube_count = p:getWeaponTubeCount()
		if tube_count > 0 and p.normal_tube_load_time ~= nil then
			local tube_index = 0
			repeat
				if p.normal_tube_load_time[tube_index] ~= p:getTubeLoadTime(tube_index) then
					secondary_systems_optimal = false
					break
				end
				tube_index = tube_index + 1
			until(tube_index >= tube_count)
		end
	end
	if secondary_systems_optimal then
		if p.damage_report ~= nil then
			p:removeCustom(p.damage_report)
			p.damage_report = nil
		end
		if p.damage_report_plus ~= nil then
			p:removeCustom(p.damage_report_plus)
			p.damage_report_plus = nil
		end
	else
		if p:hasPlayerAtPosition("Engineering") then
			p.damage_report = "damage_report"
			p:addCustomButton("Engineering",p.damage_report,"Damage Report",function()
				local dmg_msg = "In addition to the primary systems constantly monitored in engineering, the following secondary systems have also been damaged requiring docking repair facilities:"
				if not p:getCanLaunchProbe() then
					dmg_msg = dmg_msg .. "\nProbe launch system"
				end
				if not p:getCanHack() then
					dmg_msg = dmg_msg .. "\nHacking system"
				end
				if not p:getCanScan() then
					dmg_msg = dmg_msg .. "\nScanning system"
				end
				if not p:getCanCombatManeuver() then
					dmg_msg = dmg_msg .. "\nCombat maneuvering system"
				end
				if not p:getCanSelfDestruct() then
					dmg_msg = dmg_msg .. "\nSelf destruct system"
				end
				local tube_count = p:getWeaponTubeCount()
				if tube_count > 0 then
					if tube_count > 0 and p.normal_tube_load_time ~= nil then
						local tube_index = 0
						repeat
							if p.normal_tube_load_time[tube_index] ~= p:getTubeLoadTime(tube_index) then
								dmg_msg = dmg_msg .. "\nWeapon tube load time degraded"
								break
							end
							tube_index = tube_index + 1
						until(tube_index >= tube_count)
					end
				end
				p.dmg_msg = "dmg_msg"
				p:addCustomMessage("Engineering",p.dmg_msg,dmg_msg)
			end,20)
		end
		if p:hasPlayerAtPosition("Engineering+") then
			p.damage_report_plus = "damage_report_plus"
			p:addCustomButton("Engineering+",p.damage_report_plus,"Damage Report",function()
				local dmg_msg = "In addition to the primary systems constantly monitored in engineering, the following secondary systems have also been damaged requiring docking repair facilities:"
				if not p:getCanLaunchProbe() then
					dmg_msg = dmg_msg .. "\nProbe launch system"
				end
				if not p:getCanHack() then
					dmg_msg = dmg_msg .. "\nHacking system"
				end
				if not p:getCanScan() then
					dmg_msg = dmg_msg .. "\nScanning system"
				end
				if not p:getCanCombatManeuver() then
					dmg_msg = dmg_msg .. "\nCombat maneuvering system"
				end
				if not p:getCanSelfDestruct() then
					dmg_msg = dmg_msg .. "\nSelf destruct system"
				end
				local tube_count = p:getWeaponTubeCount()
				if tube_count > 0 then
					if tube_count > 0 and p.normal_tube_load_time ~= nil then
						local tube_index = 0
						repeat
							if p.normal_tube_load_time[tube_index] ~= p:getTubeLoadTime(tube_index) then
								dmg_msg = dmg_msg .. "\nWeapon tube load time degraded"
								break
							end
							tube_index = tube_index + 1
						until(tube_index >= tube_count)
					end
				end
				p.dmg_msg = "dmg_msg"
				p:addCustomMessage("Engineering+",p.dmg_msg,dmg_msg)
			end,20)
		end
	end
	local system_list = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
	local docked_station = p:getDockedWith()
	local compromised_systems = {}
	for _, system in ipairs(system_list) do
		local health_max = p:getSystemHealthMax(system)
		if health_max < 1 then
			local station_max = nil
			if docked_station ~= nil then
				if docked_station:isValid() then
					if docked_station.comms_data ~= nil then
						if docked_station.comms_data.system_repair ~= nil then
							local station_system = docked_station.comms_data.system_repair[system]
							if station_system.avail then
								station_max = station_system.max
							end
						else
							print(docked_station:getCallSign(),"system_repair is nil in updatePlayerDamageControl(p)")
						end
					end
				end
			end
			table.insert(compromised_systems,{system=system,max=health_max,station_max=station_max})
		end
	end
	if #compromised_systems > 0 then
		max_health_msg = ""
		local has_compromised_system = false
		for index, system in ipairs(compromised_systems) do
			if p:hasSystem(system.system) then
				has_compromised_system = true
				max_health_msg = string.format("%s\n%.1f%% %s",max_health_msg,system.max*100,pretty_system[system.system])
				if system.station_max ~= nil then
					max_health_msg = string.format("%s, %s can repair max health to %.1f%%",max_health_msg,docked_station:getCallSign(),system.station_max*100)
				end
			end
		end
		if has_compromised_system then
			max_health_msg = string.format("Maximum health of severely damaged systems repairable in the field by your repair crew:%s",max_health_msg)
			p.max_health_eng = "max_health_eng"
			p:addCustomButton("Engineering",p.max_health_eng,"Max Health",function()
				p.max_health_msg_eng = "max_health_msg_eng"
				p:addCustomMessage("Engineering",p.max_health_msg_eng,max_health_msg)
			end,21)
			p.max_health_plus = "max_health_plus"
			p:addCustomButton("Engineering+",p.max_health_plus,"Max Health",function()
				p.max_health_msg_plus = "max_health_msg_plus"
				p:addCustomMessage("Engineering+",p.max_health_msg_plus,max_health_msg)
			end,21)
		else
			if p.max_health_eng ~= nil then
				p:removeCustom(p.max_health_eng)
				p.max_health_eng = nil
			end
			if p.max_health_plus ~= nil then
				p:removeCustom(p.max_health_plus)
				p.max_health_plus = nil
			end
		end
	else
		if p.max_health_eng ~= nil then
			p:removeCustom(p.max_health_eng)
			p.max_health_eng = nil
		end
		if p.max_health_plus ~= nil then
			p:removeCustom(p.max_health_plus)
			p.max_health_plus = nil
		end
	end
end
function updatePlayerSystemHealthRepair(delta,p)
	local docked_station = p:getDockedWith()
	local system_repair_list = {}
	if docked_station == nil then
		local nearby_objects = p:getObjectsInRange(5000)
		for i,obj in ipairs(nearby_objects) do
			if isObjectType(obj,"CpuShip") then
				if obj:getTypeName() == "Service Jonque" then
					if obj.comms_data == nil then
						return
					else
						if obj.comms_data.system_repair == nil then
							return
						end
					end
					for system, repair in pairs(obj.comms_data.system_repair) do
						if p:hasSystem(system) then
							local current_system_health_max = p:getSystemHealthMax(system)
							if  current_system_health_max < 1 then
								if current_system_health_max < repair.max then
									if repair.cost > 0 then
										if obj.player_system_repair_service ~= nil then
											if obj.player_system_repair_service[p] ~= nil then
												if obj.player_system_repair_service[p][system] ~= nil then
													table.insert(system_repair_list,{system=system,current_max=current_system_health_max,max=repair.max})
												end
											end
										end
									else
										table.insert(system_repair_list,{system=system,current_max=current_system_health_max,max=repair.max})
									end
								end
							end
						end
					end
					if #system_repair_list > 0 then
						selected_system = system_repair_list[math.random(1,#system_repair_list)]
						p:setSystemHealthMax(selected_system.system,math.min((selected_system.current_max + (delta/60)),selected_system.max))
					end
				end
			end
		end
		return
	else
		if docked_station:isValid() then
			if docked_station.comms_data == nil then
				return
			else
				if docked_station.comms_data.system_repair == nil then
					return
				end
			end
		else
			return
		end
	end
--	print("player:",p:getCallSign(),"station docked:",docked_station:getCallSign())
	system_repair_list = {}
	for system, repair in pairs(docked_station.comms_data.system_repair) do
		if repair.avail then
			if p:hasSystem(system) then
				local current_system_health_max = p:getSystemHealthMax(system)
--				print("system:",system,"current max health:",current_system_health_max,"repair max:",repair.max)
				if current_system_health_max < 1 then
					if current_system_health_max < repair.max then
						if repair.cost > 0 then
							if docked_station.player_system_repair_service ~= nil then
								if docked_station.player_system_repair_service[p] ~= nil then
									if docked_station.player_system_repair_service[p][system] ~= nil then
										table.insert(system_repair_list,{system=system,current_max=current_system_health_max,max=repair.max})
									end
								end
							end
						else
							table.insert(system_repair_list,{system=system,current_max=current_system_health_max,max=repair.max})
						end
					end
				end
			end
		end
	end
	if #system_repair_list > 0 then
		selected_system = system_repair_list[math.random(1,#system_repair_list)]
		p:setSystemHealthMax(selected_system.system,math.min((selected_system.current_max + (delta/30)),selected_system.max))
	end
end
function updatePlayerExpediteDock(delta,p)
	if p.expedite_dock_timer == nil then
		p.expedite_dock_timer = p.expedite_dock_timer_max + delta
	end
	p.expedite_dock_timer = p.expedite_dock_timer - delta
	if p.expedite_dock_timer < 0 then
		if p.expedite_dock_timer < -1 then
			if p.expedite_dock_timer_info ~= nil then
				p:removeCustom(p.expedite_dock_timer_info)
				p.expedite_dock_timer_info = nil
			end
			if p.expedite_dock_timer_info_ops ~= nil then
				p:removeCustom(p.expedite_dock_timer_info_ops)
				p.expedite_dock_timer_info_ops = nil
			end
--						p:addToShipLog(string.format("Docking crew of station %s returned to their normal duties",p.expedite_doc_station:getCallSign()),"Yellow")
			p:addToShipLog("Docking crew of station returned to their normal duties","Yellow")
			p.expedite_dock = nil
			p.expedite_timer = nil
			p.expedite_dock_station = nil
			p.preorder_hvli = nil
			p.preorder_homing = nil
			p.preorder_emp = nil
			p.preorder_nuke = nil
			p.preorder_repair_crew = nil
			p.preorder_coolant = nil
		else
			if p:hasPlayerAtPosition("Relay") then
				p.expedite_dock_timer_info = "expedite_dock_timer_info"
				p:addCustomInfo("Relay",p.expedite_dock_timer_info,"Fast Dock Expired",2)					
			end
			if p:hasPlayerAtPosition("Operations") then
				p.expedite_dock_timer_info_ops = "expedite_dock_timer_info_ops"
				p:addCustomInfo("Operations",p.expedite_dock_timer_info_ops,"Fast Dock Expired",2)						
			end
		end
	else	--timer not expired
		local expedite_dock_timer_status = "Fast Dock"
		local expedite_dock_timer_minutes = math.floor(p.expedite_dock_timer / 60)
		local expedite_dock_timer_seconds = math.floor(p.expedite_dock_timer % 60)
		if expedite_dock_timer_minutes <= 0 then
			expedite_dock_timer_status = string.format("%s %i",expedite_dock_timer_status,expedite_dock_timer_seconds)
		else
			expedite_dock_timer_status = string.format("%s %i:%.2i",expedite_dock_timer_status,expedite_dock_timer_minutes,expedite_dock_timer_seconds)
		end
		if p:hasPlayerAtPosition("Relay") then
			p.expedite_dock_timer_info = "expedite_dock_timer_info"
			p:addCustomInfo("Relay",p.expedite_dock_timer_info,expedite_dock_timer_status,2)
		end
		if p:hasPlayerAtPosition("Operations") then
			p.expedite_dock_timer_info_ops = "expedite_dock_timer_info_ops"
			p:addCustomInfo("Operations",p.expedite_dock_timer_info_ops,expedite_dock_timer_status,2)
		end					
	end
	if p.expedite_dock_station ~= nil and p.expedite_dock_station:isValid() then
		if p:isDocked(p.expedite_dock_station) then
			p:setEnergy(p:getMaxEnergy())
			p:setScanProbeCount(p:getMaxScanProbeCount())
			if p.preorder_hvli ~= nil then
				local new_amount = math.min(p:getWeaponStorage("HVLI") + p.preorder_hvli,p:getWeaponStorageMax("HVLI"))
				p:setWeaponStorage("HVLI",new_amount)
			end
			if p.preorder_homing ~= nil then
				new_amount = math.min(p:getWeaponStorage("Homing") + p.preorder_homing,p:getWeaponStorageMax("Homing"))
				p:setWeaponStorage("Homing",new_amount)
			end
			if p.preorder_mine ~= nil then
				new_amount = math.min(p:getWeaponStorage("Mine") + p.preorder_mine,p:getWeaponStorageMax("Mine"))
				p:setWeaponStorage("Mine",new_amount)
			end
			if p.preorder_emp ~= nil then
				new_amount = math.min(p:getWeaponStorage("EMP") + p.preorder_emp,p:getWeaponStorageMax("EMP"))
				p:setWeaponStorage("EMP",new_amount)
			end
			if p.preorder_nuke ~= nil then
				new_amount = math.min(p:getWeaponStorage("Nuke") + p.preorder_nuke,p:getWeaponStorageMax("Nuke"))
				p:setWeaponStorage("Nuke",new_amount)
			end
			if p.preorder_repair_crew ~= nil then
				p:setRepairCrewCount(p:getRepairCrewCount() + 1)
				resetPreviousSystemHealth(p)
			end
			if p.preorder_coolant ~= nil then
				p:setMaxCoolant(p:getMaxCoolant() + 2)
			end
			if p.expedite_dock_timer_info ~= nil then
				p:removeCustom(p.expedite_dock_timer_info)
				p.expedite_dock_timer_info = nil
			end
			if p.expedite_dock_timer_info_ops ~= nil then
				p:removeCustom(p.expedite_dock_timer_info_ops)
				p.expedite_dock_timer_info_ops = nil
			end
			p:addToShipLog(string.format("Docking crew at station %s completed replenishment as requested",p.expedite_dock_station:getCallSign()),"Yellow")
			p.expedite_dock = nil
			p.expedite_timer = nil
			p.expedite_dock_station = nil
			p.preorder_hvli = nil
			p.preorder_homing = nil
			p.preorder_emp = nil
			p.preorder_nuke = nil
			p.preorder_repair_crew = nil
			p.preorder_coolant = nil
		end
	end
end
function expeditedDockingService(p)
	local function removeTimer(p)
		if p.expedite_dock_time_msg_hlm ~= nil then
			p:removeCustom(p.expedite_dock_time_msg_hlm)
			p.expedite_dock_time_msg_hlm = nil
		end
		if p.expedite_dock_time_msg_tac ~= nil then
			p:removeCustom(p.expedite_dock_time_msg_tac)
			p.expedite_dock_time_msg_tac = nil
		end
		p.expedite_dock = nil
	end
	if p.expedite_dock ~= nil then
		if p.expedite_dock.expire ~= nil then
			if getScenarioTime() > p.expedite_dock.expire then
				removeTimer(p)
			else
				if p.expedite_dock.station ~= nil then
					if p.expedite_dock.station:isValid() then
						if p:isDocked(p.expedite_dock.station) then
							for service,val in pairs(p.expedite_dock) do
								if service == "energy" then
									p:setEnergyLevel(p:getEnergyLevelMax())
								elseif service == "hull" then
									p:setHull(p:getHullMax())
								elseif service == "probes" then
									p:setScanProbeCount(p:getScanProbeCount())
								elseif service == "nuke" then
									p:setWeaponStorage("Nuke",p:getWeaponStorage("Nuke") + val)
								elseif service == "homing" then
									p:setWeaponStorage("Homing",p:getWeaponStorage("Homing") + val)
								elseif service == "mine" then
									p:setWeaponStorage("Mine",p:getWeaponStorage("Mine") + val)
								elseif service == "emp" then
									p:setWeaponStorage("EMP",p:getWeaponStorage("EMP") + val)
								elseif service == "hvli" then
									p:setWeaponStorage("HVLI",p:getWeaponStorage("HVLI") + val)
								elseif service == "repair_crew" then
									p:setRepairCrewCount(p:getRepairCrewCount() + 1)
									p.expedite_dock.station.comms_data.available_repair_crew = p.expedite_dock.station.comms_data.available_repair_crew - 1
								elseif service == "coolant" then
									p:setMaxCoolant(p:getMaxCoolant() + 2)
									p.expedite_dock.station.comms_data.coolant_inventory = p.expedite_dock.station.comms_data.coolant_inventory - 2
								end
							end
							removeTimer(p)
							p:addToShipLog(_("shipLog","Expedited docking services complete."),"Yellow")
						else
							local expedite_dock_timer = p.expedite_dock.expire - getScenarioTime()
							if expedite_dock_timer > 60 then
								local minutes = expedite_dock_timer / 60
								local seconds = expedite_dock_timer % 60
								expedite_dock_timer = string.format("%i:%.2i",math.floor(minutes),math.floor(seconds))
							else
								expedite_dock_timer = string.format("0:%.2i",math.floor(expedite_dock_timer))
							end
							local expedite_dock_banner = string.format(_("tabHelm","Dock@%s %s"),p.expedite_dock.station:getCallSign(),expedite_dock_timer)
							p.expedite_dock_time_msg_hlm = "expedite_dock_time_msg_hlm"
							p:addCustomInfo("Helms",p.expedite_dock_time_msg_hlm,expedite_dock_banner,50)
							p.expedite_dock_time_msg_tac = "expedite_dock_time_msg_tac"
							p:addCustomInfo("Tactical",p.expedite_dock_time_msg_tac,expedite_dock_banner,50)
						end
					else
						removeTimer(p)
					end
				else
					removeTimer(p)
				end
			end
		else
			removeTimer(p)
		end
	else
		removeTimer(p)
	end
end
-- note I think this is bugged re removing stations while the timer is running
function updatePlayerTimerWidgets(p)
	if timer_started then
		if timer_value < 0 then	--timer expired
			if timer_value < -1 then	--timer expired condition expired
				p:wrappedRemoveCustom("timer")
				timer_started = false
				timer_value = nil
				timer_gm_message = nil
			else	--timer expired (less than 0 but not less than -1)
				local final_status = timer_purpose .. " Expired"
				if timer_gm_message == nil then
					timer_gm_message = "sent"
					addGMMessage(final_status)
				end
				if timer_display_helm then
					p:wrappedAddCustomInfo("Helms","timer",final_status)
				end
				if timer_display_weapons then
					p:wrappedAddCustomInfo("Weapons","timer",final_status)
				end
				if timer_display_engineer then
					p:wrappedAddCustomInfo("Engineering","timer",final_status)
				end
				if timer_display_science then
					p:wrappedAddCustomInfo("Science","timer",final_status)
				end
				if timer_display_relay then
					p:wrappedAddCustomInfo("Relay","timer",final_status)
				end	--relay timer display final status
			end	--end of timer value less than -1 checks
		else	--time has not yet expired
			local timer_status = timer_purpose
			if timer_type == "time" then
				local timer_minutes = math.floor(timer_value / 60)
				local timer_seconds = math.floor(timer_value % 60)
				if timer_minutes <= 0 then
					timer_status = string.format("%s %i",timer_status,timer_seconds)
				else
					timer_status = string.format("%s %i:%.2i",timer_status,timer_minutes,timer_seconds)
				end
			else
				timer_status = string.format("%s %.0f%%",timer_status,(timer_value*100)/(timer_start_length*60))
			end
			if timer_display_helm then
				p:wrappedAddCustomInfo("Helms","timer",timer_status)
			end
			if timer_display_weapons then
				p:wrappedAddCustomInfo("Weapons","timer",timer_status)
			end
			if timer_display_engineer then
				p:wrappedAddCustomInfo("Engineering","timer",timer_status)
			end
			if timer_display_science then
				p:wrappedAddCustomInfo("Science","timer",timer_status)
			end
			if timer_display_relay then
				p:wrappedAddCustomInfo("Relay","timer",timer_status)
			end	--end relay timer display
		end	--end of timer started boolean checks
	else	--timer started boolean is false
		p:wrappedRemoveCustom("timer")
		timer_value = nil
		timer_gm_message = nil
	end	--end of timer started boolean checks
end
function updatePlayerHullBanner(p)
	if p.hull_banner then
		local hull_status = string.format("Hull:%.1f/%i",p:getHull(),p:getHullMax())
		p.hull_banner_eng = "hull_banner_eng"
		p:addCustomInfo("Engineering",p.hull_banner_eng,hull_status,8)
		p.hull_banner_epl = "hull_banner_epl"
		p:addCustomInfo("Engineering+",p.hull_banner_epl,hull_status,8)
	else
		if p.hull_banner_eng ~= nil then
			p:removeCustom(p.hull_banner_eng)
			p.hull_banner_eng = nil
		end
		if p.hull_banner_epl ~= nil then
			p:removeCustom(p.hull_banner_epl)
			p.hull_banner_epl = nil
		end
	end
end
function updatePlayerShieldBanner(p)
	if p.shield_banner then
		local shield_status = ""
		if p:getShieldCount() > 1 then
			shield_status = string.format("F:%.1f/%i R:%.1f/%i",p:getShieldLevel(0),p:getShieldMax(0),p:getShieldLevel(1),p:getShieldMax(1))
		elseif p:getShieldCount() == 1 then
			shield_status = string.format("Shield:%.1f/%i",p:getShieldLevel(0),p:getShieldMax(0))
		end
		if shield_status ~= "" then
			p.shield_banner_eng = "shield_banner_eng"
			p:addCustomInfo("Engineering",p.shield_banner_eng,shield_status,7)
			p.shield_banner_epl = "shield_banner_epl"
			p:addCustomInfo("Engineering+",p.shield_banner_epl,shield_status,7)
		else
			if p.shield_banner_eng ~= nil then
				p:removeCustom(p.shield_banner_eng)
				p.shield_banner_eng = nil
			end
			if p.shield_banner_epl ~= nil then
				p:removeCustom(p.shield_banner_epl)
				p.shield_banner_epl = nil
			end
		end
	else
		if p.shield_banner_eng ~= nil then
			p:removeCustom(p.shield_banner_eng)
			p.shield_banner_eng = nil
		end
		if p.shield_banner_epl ~= nil then
			p:removeCustom(p.shield_banner_epl)
			p.shield_banner_epl = nil
		end		
	end
end
function updatePlayerWaypointDistanceButton(p)
	if p:getWaypointCount() > 0 then
		if p.way_distance_button_hlm == nil then
			if p.way_dist then
				p.way_distance_button_hlm = "way_distance_button_hlm"
				p:addCustomButton("Helms",p.way_distance_button_hlm,"Waypoint Distance",function()
					string.format("")
					waypointDistance(p,"Helms")
				end,15)
				p.way_distance_button_tac = "way_distance_button_tac"
				p:addCustomButton("Tactical",p.way_distance_button_tac,"Waypoint Distance",function()
					string.format("")
					waypointDistance(p,"Tactical")
				end,15)
			end
		end
	else
		if p.way_distance_button_hlm ~= nil then
			p:removeCustom(p.way_distance_button_hlm)
			p:removeCustom(p.way_distance_button_tac)
			p.way_distance_button_hlm = nil
			p.way_distance_button_tac = nil
		end
	end
end
function waypointDistance(p,console)
	if p:getWaypointCount() > 0 then
		local seq = "Waypoint distance sequence report:"
		local node = "Waypoint distance node report:"
		local prev_x = nil
		local prev_y = nil
		for i=1,p:getWaypointCount() do
			local wx, wy = p:getWaypoint(i)
			local px, py = p:getPosition()
			if prev_x == nil then
				seq = string.format("%s\n    From current to waypoint %i: %.1f Units",seq,i,distance(px,py,wx,wy)/1000)
			else
				seq = string.format("%s\n    From waypoint %i to waypoint %i: %.1f Units",seq,i-1,i,distance(prev_x,prev_y,wx,wy)/1000)
			end
			node = string.format("%s\n    To waypoint %i: %.1f Units",node,i,distance(px,py,wx,wy)/1000)
			prev_x = wx
			prev_y = wy
		end
		p.waypoint_distance_msg = string.format("waypoint_distance_message_%s",console)
		p:addCustomMessage(console,p.waypoint_distance_msg,string.format("%s\n%s",node,seq))
	end
end
function updatePlayerMaxHealthWidgets(p)
	local function removeWidgets(p)
		if p.hide_max_health_button_eng ~= nil then
			p:removeCustom(p.hide_max_health_button_eng)
			p.hide_max_health_button_eng = nil
		end
		if p.hide_max_health_button_epl ~= nil then
			p:removeCustom(p.hide_max_health_button_epl)
			p.hide_max_health_button_epl = nil
		end
		if p.show_max_health_button_eng ~= nil then
			p:removeCustom(p.show_max_health_button_eng)
			p.show_max_health_button_eng = nil
		end
		if p.show_max_health_button_epl ~= nil then
			p:removeCustom(p.show_max_health_button_epl)
			p.show_max_health_button_epl = nil
		end
		if p.max_health_info_eng ~= nil then
			for i,banner in ipairs(p.max_health_info_eng) do
				p:removeCustom(banner)
			end
			p.max_health_info_eng = {}
		end
		if p.max_health_info_epl ~= nil then
			for i,banner in ipairs(p.max_health_info_epl) do
				p:removeCustom(banner)
			end
			p.max_health_info_epl = {}
		end
	end
	if p.max_health_widgets then
		local damaged_systems = {}
		if p.show_max_health_banners == nil then
			p.show_max_health_banners = false
		end
		for i,system in ipairs(system_list) do
			if p:hasSystem(system) then
				if p:getSystemHealthMax(system) < 1 then
					table.insert(damaged_systems,{name=system,max=p:getSystemHealthMax(system)})
				end
			end
		end
		if #damaged_systems > 0 then
			if p.show_max_health_banners then
				if p.hide_max_health_button_eng == nil then
					p.hide_max_health_button_eng = "hide_max_health_button_eng"
					p:addCustomButton("Engineering",p.hide_max_health_button_eng,_("buttonEngineer","Hide max health"),function()
						p:removeCustom(p.hide_max_health_button_eng)
						p.hide_max_health_button_eng = nil
						p.show_max_health_banners = false
						if p.max_health_info_eng ~= nil then
							for i,banner in ipairs(p.max_health_info_eng) do
								p:removeCustom(banner)
							end
							p.max_health_info_eng = {}
						end
					end,70)
				end
				if p.hide_max_health_button_epl == nil then
					p.hide_max_health_button_epl = "hide_max_health_button_epl"
					p:addCustomButton("Engineering+",p.hide_max_health_button_epl,_("buttonEngineer+","Hide max health"),function()
						p:removeCustom(p.hide_max_health_button_epl)
						p.hide_max_health_button_epl = nil
						p.show_max_health_banners = false
						if p.max_health_info_epl ~= nil then
							for i,banner in ipairs(p.max_health_info_epl) do
								p:removeCustom(banner)
							end
							p.max_health_info_epl = {}
						end
					end,70)
				end
				local max_out = ""
				if p.max_health_info_eng == nil then
					p.max_health_info_eng = {}
					p.max_health_info_epl = {}
				end
				local info_banner_count = 0
				for i,dmg in ipairs(damaged_systems) do
					if max_out == "" then
						max_out = string.format("%s:%i%%",pretty_short_system[dmg.name],math.floor(dmg.max*100))
					else
						max_out = string.format("%s %s:%i%%",max_out,pretty_short_system[dmg.name],math.floor(dmg.max*100))
						info_banner_count = info_banner_count + 1
						p.max_health_info_eng[info_banner_count] = string.format("max_health_info_eng_%i",info_banner_count)
						p:addCustomInfo("Engineering",p.max_health_info_eng[info_banner_count],max_out,70 + info_banner_count)
						p.max_health_info_epl[info_banner_count] = string.format("max_health_info_epl_%i",info_banner_count)
						p:addCustomInfo("Engineering+",p.max_health_info_epl[info_banner_count],max_out,70 + info_banner_count)
						max_out = ""
					end
				end
				if max_out ~= "" then
					info_banner_count = info_banner_count + 1
					p.max_health_info_eng[info_banner_count] = string.format("max_health_info_eng_%i",info_banner_count)
					p:addCustomInfo("Engineering",p.max_health_info_eng[info_banner_count],max_out,70 + info_banner_count)
					p.max_health_info_epl[info_banner_count] = string.format("max_health_info_epl_%i",info_banner_count)
					p:addCustomInfo("Engineering+",p.max_health_info_epl[info_banner_count],max_out,70 + info_banner_count)
				end
				if p.max_health_info_eng[info_banner_count + 1] ~= nil then
					p:removeCustom(p.max_health_info_eng[info_banner_count + 1])
					p.max_health_info_eng[info_banner_count + 1] = nil
					p:removeCustom(p.max_health_info_epl[info_banner_count + 1])
					p.max_health_info_epl[info_banner_count + 1] = nil
				end
			else
				if p.show_max_health_button_eng == nil then
					p.show_max_health_button_eng = "show_max_health_button_eng"
					p:addCustomButton("Engineering",p.show_max_health_button_eng,"Show max health",function()
						p:removeCustom(p.show_max_health_button_eng)
						p.show_max_health_button_eng = nil
						p.show_max_health_banners = true
					end,70)
				end
				if p.show_max_health_button_epl == nil then
					p.show_max_health_button_epl = "show_max_health_button_epl"
					p:addCustomButton("Engineering+",p.show_max_health_button_epl,"Show max health",function()
						p:removeCustom(p.show_max_health_button_epl)
						p.show_max_health_button_epl = nil
						p.show_max_health_banners = true
					end,70)
				end
			end
		else
			removeWidgets(p)
		end
	else
		removeWidgets(p)
	end
end
function powerSensorConfigButtons(p)
	p.power_sensor_state = "configure"
	updatePowerSensorButtons(p)
end
function powerSensorEnabledButtons(p)
	p.power_sensor_state = "enabled"
	updatePowerSensorButtons(p)
end
function powerSensorStandbyButtons(p)
	p.power_sensor_state = "standby"
	updatePowerSensorButtons(p)
end
function updatePowerSensorButtons(p)
	if p.power_sensor_button ~= nil then
		for console, button in pairs(p.power_sensor_button) do
			p:removeCustom(button)
		end
		p.power_sensor_button = nil
	end
	if p.power_sensor_state == "disabled" then
		--do nothing: initial loop removes buttons
	elseif p.power_sensor_state == "standby" then
		p.power_sensor_button = {}
		p:addCustomButton("Engineering","power_sensor_button_standby_eng","Boost Sensors",function()
			string.format("")
			powerSensorConfigButtons(p)
		end,30)
		p.power_sensor_button["Engineering"] = "power_sensor_button_standby_eng"
		p:addCustomButton("Engineering+","power_sensor_button_standby_plus","Boost Sensors",function()
			string.format("")
			powerSensorConfigButtons(p)
		end,30)
		p.power_sensor_button["Engineering+"] = "power_sensor_button_standby_plus"
	elseif p.power_sensor_state == "configure" then
		p.power_sensor_button = {}
		for i=1,3 do
			p:addCustomButton("Engineering",string.format("power_sensor_button_config_eng%i",i),string.format("Sensor Boost %i",i),function()
				string.format("")
				p.power_sensor_level = i
				powerSensorEnabledButtons(p)
			end,30 + i)
			p.power_sensor_button[string.format("Engineering %i",i)] = string.format("power_sensor_button_config_eng%i",i)
		end
		for i=1,3 do
			p:addCustomButton("Engineering+",string.format("power_sensor_button_config_plus%i",i),string.format("Sensor Boost %i",i),function()
				string.format("")
				p.power_sensor_level = i
				powerSensorEnabledButtons(p)
			end,30 + i)
			p.power_sensor_button[string.format("Engineering+ %i",i)] = string.format("power_sensor_button_config_plus%i",i)
		end
	elseif p.power_sensor_state == "enabled" then
		p.power_sensor_button = {}
		p:addCustomButton("Engineering","power_sensor_button_enabled_eng","Stop Sensor Boost",function()
			string.format("")
			powerSensorStandbyButtons(p)
		end,30)
		p.power_sensor_button["Engineering"] = "power_sensor_button_enabled_eng"
		p:addCustomButton("Engineering+","power_sensor_button_enabled_plus","Stop Sensor Boost",function()
			string.format("")
			powerSensorStandbyButtons(p)
		end,30)
		p.power_sensor_button["Engineering+"] = "power_sensor_button_enabled_plus"
	end
end
function updatePlayerBeamDamageSwitch(p)
	local function switchBeams(p,energy_type)
		if p:getTypeName() == "Ronco" then
			if energy_type == "energy" then
				p:setBeamWeaponDamageType(0,"energy")
				p:setBeamWeaponDamageType(1,"kinetic")
				p:setBeamWeaponDamageType(2,"kinetic")
				p:setBeamWeaponDamageType(3,"emp")
			elseif energy_type == "kinetic" then
				p:setBeamWeaponDamageType(0,"kinetic")
				p:setBeamWeaponDamageType(1,"emp")
				p:setBeamWeaponDamageType(2,"emp")
				p:setBeamWeaponDamageType(3,"energy")
			elseif energy_type == "emp" then
				p:setBeamWeaponDamageType(0,"emp")
				p:setBeamWeaponDamageType(1,"energy")
				p:setBeamWeaponDamageType(2,"energy")
				p:setBeamWeaponDamageType(3,"kinetic")
			end
		else
			local switch_cost = 100
			if p:getEnergy() > switch_cost then
				local switch_to = "energy"
				if energy_type == "energy" then
					switch_to = "kinetic"
				elseif energy_type == "kinetic" then
					switch_to = "emp"
				elseif energy_type == "emp" then
					switch_to = "energy"
				end
				for i=1,16 do
					p:setBeamWeaponDamageType(i-1,switch_to)
				end
				p:setEnergy(p:getEnergy() - switch_cost)
			else
				if p.no_beam_switch_energy == nil then
					p.no_beam_switch_energy = {
						["Weapons"] = "no_beam_switch_energy_wea",
						["Tactical"] = "no_beam_switch_energy_tac",
					}
					for console, msg_name in pairs(p.no_beam_switch_energy) do
						p:addCustomMessage(console,msg_name,string.format("Insufficient energy to switch beam damage type. Need at least %s",switch_cost))
					end
					p.no_beam_switch_energy_msg_time = getScenarioTime() + 10
				end
			end
		end
	end
	if p.no_beam_switch_energy ~= nil and p.no_beam_switch_energy_msg_time ~= nil then
		if getScenarioTime() > p.no_beam_switch_energy_msg_time then
			for console, msg_name in pairs(p.no_beam_switch_energy) do
				p:removeCustom(msg_name)
			end
			p.no_beam_switch_energy = nil
			p.no_beam_switch_energy = nil
		end
	end
	if p.beam_switch_state == nil then
		p.beam_switch_state = "energy"
	end
	if p.beam_switch_button == nil then
		p.beam_switch_button = {}
		p.beam_switch_button["Weapons"] = "beam_switch_button_wea"
		p.beam_switch_button["Tactical"] = "beam_switch_button_tac"
		for console, button in pairs(p.beam_switch_button) do
			if p.beam_switch_state == "energy" then
				p:addCustomButton(console,button,"Energy -> Kinetic",function()
					string.format("")
					switchBeams(p,"energy")
					for c,b in pairs(p.beam_switch_button) do
						p:removeCustom(b)
					end
					p.beam_switch_button = nil
					p.beam_switch_state = "kinetic"
				end,27)
			elseif p.beam_switch_state == "kinetic" then
				p:addCustomButton(console,button,"Kinetic -> EMP",function()
					string.format("")
					switchBeams(p,"kinetic")
					for c,b in pairs(p.beam_switch_button) do
						p:removeCustom(b)
					end
					p.beam_switch_button = nil
					p.beam_switch_state = "emp"
				end,27)
			elseif p.beam_switch_state == "emp" then
				p:addCustomButton(console,button,"EMP -> Energy",function()
					string.format("")
					switchBeams(p,"emp")
					for c,b in pairs(p.beam_switch_button) do
						p:removeCustom(b)
					end
					p.beam_switch_button = nil
					p.beam_switch_state = "energy"
				end,27)
			end
		end
	end
end
function updatePlayerJumpOverchargeBanner(p)
	if p:hasJumpDrive() then
		if p.max_jump_range == nil then
			p.max_jump_range = 50000
			p.min_jump_range = 5000
		end
		if p:getJumpDriveCharge() > p.max_jump_range then
			p.jump_overcharge_banner = string.format("Jump Overcharge: %ik",math.floor(p:getJumpDriveCharge()/1000))
			p.jump_overcharge_banner_hlm = "jump_overcharge_banner_hlm"
			p:addCustomInfo("Helms",p.jump_overcharge_banner_hlm,p.jump_overcharge_banner,6)
			p.jump_overcharge_banner_tac = "jump_overcharge_banner_tac"
			p:addCustomInfo("Tactical",p.jump_overcharge_banner_tac,p.jump_overcharge_banner,6)
		else
			if p.jump_overcharge_banner ~= nil then
				p:removeCustom(p.jump_overcharge_banner_hlm)
				p:removeCustom(p.jump_overcharge_banner_tac)
				p.jump_overcharge_banner = nil
			end
		end
	end
end
function updatePlayerMissileTriggerButtons(p)
	if p.trigger_missile == nil then
		return
	end
	local max_range = 0
	local interesting_missiles = {}		--initialize list of lists
	local find_missiles = {}			--initialize missile type list
	for trigger,blob in pairs(p.trigger_missile) do
		interesting_missiles[trigger] = {}	--initialize missile trigger type list (E3, E4, N3, N4)
		find_missiles[blob.missile] = true	--put missile type in find list
		if blob.long > max_range then
			max_range = blob.long			--set max range for getting nearby objects
		end
	end
--	["E3"] = {missile = "EMPMissile",	short = 3000, long = 4000,	button_label = "Trigger EMP 3-4u",	order = 1,	},
	local nearby_objects = p:getObjectsInRange(max_range)
	local px, py = p:getPosition()			--get player ship position coordinates
	for i,obj in ipairs(nearby_objects) do
		local is_splash = false
		if ECS then
			if isObjectType(obj,"Nuke","SplashMissile") or isObjectType(obj,"EMPMissile","SplashMissile") then
				is_splash = true
			end
		else
			if find_missiles[obj.typeName] then
				is_splash = true
			end
		end
		if is_splash and obj:getOwner() == p then	--object is missile owned by player
--		if is_splash then	--object is missile
			local mx, my = obj:getPosition()						--get missile position coordinates
			local m_dist = distance(px, py, mx, my)					--determine missile distance from player
			for trigger,blob in pairs(p.trigger_missile) do
				if m_dist < blob.long and m_dist > blob.short then			--in range
					if ECS then
						if isObjectType(obj,"Nuke","SplashMissile") and blob.missile == "Nuke" then
							table.insert(interesting_missiles[trigger],obj)		--add to proper list
						elseif isObjectType(obj,"EMPMissile","SplashMissile") and blob.missile == "EMPMissile" then
							table.insert(interesting_missiles[trigger],obj)		--add to proper list
						end
					else
						if obj.typeName == blob.missile then					--proper type
							table.insert(interesting_missiles[trigger],obj)		--add to proper list
						end
					end
				end
			end
		end
	end
	for trigger,list in pairs(interesting_missiles) do		--go through list of lists
		if #list > 0 then									--something in the list, add trigger buttons
			if p.trigger_missile_button_wea == nil then
				p.trigger_missile_button_wea = {}
			end
			p.trigger_missile_button_wea[trigger] = string.format("trigger_missile_button_wea_%s",trigger)
			p:addCustomButton("Weapons",p.trigger_missile_button_wea[trigger],p.trigger_missile[trigger].button_label,function()
				string.format("")
				for i,missile in ipairs(list) do
					missile:setLifetime(0)
				end
			end, 44 + p.trigger_missile[trigger].order)
			if p.trigger_missile_button_tac == nil then
				p.trigger_missile_button_tac = {}
			end
			p.trigger_missile_button_tac[trigger] = string.format("trigger_missile_button_tac_%s",trigger)
			p:addCustomButton("Tactical",p.trigger_missile_button_tac[trigger],p.trigger_missile[trigger].button_label,function()
				string.format("")
				for i,missile in ipairs(list) do
					missile:setLifetime(0)
				end
			end, 44 + p.trigger_missile[trigger].order)
		else	--nothing in the list, remove any related button
			if p.trigger_missile_button_wea ~= nil then
				if p.trigger_missile_button_wea[trigger] ~= nil then
					p:removeCustom(p.trigger_missile_button_wea[trigger])
				end
			end
			if p.trigger_missile_button_tac ~= nil then
				if p.trigger_missile_button_tac[trigger] ~= nil then
					p:removeCustom(p.trigger_missile_button_tac[trigger])
				end
			end
		end
	end
end
function updatePlayerLongRangeSensors(delta,p)
	local free_sensor_boost = false
	local sensor_boost_present = false
	local sensor_boost_amount = 0
	if p.station_sensor_boost == nil then
		for i=1,#regionStations do
			local sensor_station = regionStations[i]
			if sensor_station:isValid() and p:isDocked(sensor_station) then
				if sensor_station.comms_data.sensor_boost ~= nil then
					sensor_boost_present = true
					if sensor_station.comms_data.sensor_boost.cost < 1 then
						free_sensor_boost = true
						p.station_sensor_boost = sensor_station.comms_data.sensor_boost.value
						break
					end
					sensor_boost_amount = sensor_station.comms_data.sensor_boost.value
				end
			end
		end
	end
	local base_range = p.normal_long_range_radar
	if p.station_sensor_boost ~= nil then
		base_range = base_range + p.station_sensor_boost
	end
	if p:getDockedWith() == nil then
		base_range = p.normal_long_range_radar
		p.station_sensor_boost = nil
	end
	if p.power_sensor_interval > 0 and p:getEnergyLevel() > p:getEnergyLevelMax()*.05 then
		if p.power_sensor_state == nil then
			p.power_sensor_state = "disabled"
		end
		if p.power_sensor_state == "disabled" then
			p.power_sensor_state = "standby"
			updatePowerSensorButtons(p)
		elseif p.power_sensor_state == "enabled" then
			base_range = base_range + (1000 * p.power_sensor_interval * p.power_sensor_level)
			local power_decrement = delta*p.power_sensor_level*2
--			print("boost sensor power drain value:",power_decrement,"before energy:",p:getEnergyLevel())
			p:setEnergyLevel(p:getEnergyLevel() - power_decrement)
--			print("after:",p:getEnergyLevel())
		end
	else
		if p.power_sensor_state ~= nil then
			p.power_sensor_state = "disabled"
			updatePowerSensorButtons(p)
		end
	end
	local impact_range = math.max(base_range*sensor_impact,p:getShortRangeRadarRange())
	local sensor_jammer_impact = 0
	for jammer_name, sensor_jammer in pairs(sensor_jammer_list) do
		if sensor_jammer ~= nil and sensor_jammer:isValid() then
			if distance_diagnostic then
				print("distance_diagnostic 23 p:",p,"sensor_jammer:",sensor_jammer)
			end		
			local jammer_distance = distance(p,sensor_jammer)
			if jammer_distance < sensor_jammer.jam_range then
				if sensor_jammer.jam_impact_units then
					sensor_jammer_impact = math.max(sensor_jammer_impact,sensor_jammer.jam_impact*(1-(jammer_distance/sensor_jammer.jam_range)))
				else
					sensor_jammer_impact = math.max(sensor_jammer_impact,impact_range*sensor_jammer.jam_impact/100000*(1-(jammer_distance/sensor_jammer.jam_range)))
				end
			end
		else
			sensor_jammer_list[jammer_name] = nil
		end
	end
	impact_range = math.max(p:getShortRangeRadarRange(),impact_range - sensor_jammer_impact)
	local probe_scan_boost_impact = 0
	for boost_probe_index, boost_probe in ipairs(boost_probe_list) do
		if boost_probe ~= nil and boost_probe:isValid() then
			if specialty_probe_diagnostic then
				print("Processing specialty probe in list, index:",boost_probe_index,"player:",p:getCallSign())
			end
			if distance_diagnostic then
				print("distance_diagnostic 24 boost_probe:",boost_probe,"p:",p)
			end		
			local boost_probe_distance = distance(boost_probe,p)
			if boost_probe_distance < boost_probe.range*1000 then
				if boost_probe_distance < boost_probe.range*1000/2 then
					if specialty_probe_diagnostic then
						print("current probe scan impact:",probe_scan_boost_impact)
					end
					probe_scan_boost_impact = math.max(probe_scan_boost_impact,boost_probe.boost*1000)
				else
					local best_boost = boost_probe.boost*1000
					local adjusted_range = boost_probe.range*1000
					local half_adjusted_range = adjusted_range/2
					local raw_scan_gradient = boost_probe_distance/half_adjusted_range
					local scan_gradient = 2 - raw_scan_gradient
					if specialty_probe_diagnostic then
						print("boost:",boost_probe.boost,"distance:",boost_probe_distance,"range:",boost_probe.range)
						print("best boost:",best_boost,"adjusted range:",adjusted_range,"half adjusted range:",half_adjusted_range,"raw scan gradient:",raw_scan_gradient,"scan gradient:",scan_gradient)
						print("current probe scan impact:",probe_scan_boost_impact)
					end
					probe_scan_boost_impact = math.max(probe_scan_boost_impact,best_boost * scan_gradient)
				end
				if specialty_probe_diagnostic then
					print("In range. Range:",boost_probe.range*1000,"distance:",boost_probe_distance,"new probe scan impact:",probe_scan_boost_impact)
				end
			end
		else
			boost_probe_list[boost_probe_index] = boost_probe_list[#boost_probe_list]
			boost_probe_list[#boost_probe_list] = nil
			if specialty_probe_diagnostic then
				print("Specialty probe deleted from list. Index:",boost_probe_index)
			end
			break
		end
	end
	impact_range = math.max(p:getShortRangeRadarRange(),impact_range + probe_scan_boost_impact)
	p:setLongRangeRadarRange(impact_range)
end
function updatePlayerTractor(p,player_velocity,nearby_objects)
	local cpx, cpy = p:getPosition()
	if player_velocity < 1 then
		--print(string.format("%s velocity: %.1f slow enough to establish tractor",player_name,player_velocity))
		if p.tractor_target_lock then
			if p.tractor_target ~= nil and p.tractor_target:isValid() then
				p.tractor_target:setPosition(cpx+p.tractor_vector_x,cpy+p.tractor_vector_y)
				p:setEnergy(p:getEnergy() - p:getMaxEnergy()*tractor_drain)
				if random(1,100) < 27 then
					BeamEffect():setSource(p,0,0,0):setTarget(p.tractor_target,0,0):setDuration(1):setRing(false):setTexture(tractor_beam_string[math.random(1,#tractor_beam_string)]):setBeamFireSound(tractor_sound):setBeamFireSoundPower(tractor_sound_power + player_velocity/100)
				end
				if p.disengage_tractor_button == nil then
					p.disengage_tractor_button = "disengage_tractor_button"
					p:addCustomButton("Engineering",p.disengage_tractor_button,"Disengage Tractor",function()
						p.tractor_target_lock = false
						p:removeCustom(p.disengage_tractor_button)
						p:removeCustom(p.disengage_tractor_button_plus)
						p.disengage_tractor_button = nil
						p.disengage_tractor_button_plus = nil
					end,16)
				end
				if p.disengage_tractor_button_plus == nil then
					p.disengage_tractor_button_plus = "disengage_tractor_button_plus"
					p:addCustomButton("Engineering+",p.disengage_tractor_button_plus,"Disengage Tractor",function()
						p.tractor_target_lock = false
						p:removeCustom(p.disengage_tractor_button)
						p:removeCustom(p.disengage_tractor_button_plus)
						p.disengage_tractor_button = nil
						p.disengage_tractor_button_plus = nil
					end,16)
				end
			else
				p.tractor_target_lock = false
				p:removeCustom(p.disengage_tractor_button)
				p:removeCustom(p.disengage_tractor_button_plus)
				p.disengage_tractor_button = nil
				p.disengage_tractor_button_plus = nil
			end
		else	--tractor not locked on target
			local tractor_objects = {}
			if nearby_objects ~= nil and #nearby_objects > 1 then
				for _, obj in ipairs(nearby_objects) do
					if p ~= obj then
						local valid_tractor_types = {"Asteroid","CpuShip","Artifact","PlayerSpaceship","WarpJammer","Mine","ScanProbe","VisualAsteroid"}
						for i,vtt in ipairs(valid_tractor_types) do
							if isObjectType(obj,vtt) then
								table.insert(tractor_objects,obj)
								break
							end
						end
					end
				end		--end of nearby object list loop
				if #tractor_objects > 0 then
					--print(string.format("%i tractorable objects under 1 unit away",#tractor_objects))
					if p.tractor_target ~= nil and p.tractor_target:isValid() then
						local target_in_list = false
						for i=1,#tractor_objects do
							if tractor_objects[i] == p.tractor_target then
								target_in_list = true
								break
							end
						end		--end of check for the current target in list loop
						if not target_in_list then
							p.tractor_target = tractor_objects[1]
							removeTractorObjectButtons(p)
						end
					else
						p.tractor_target = tractor_objects[1]
					end
					addTractorObjectButtons(p,tractor_objects)
				else	--no nearby tractorable objects
					if p.tractor_target ~= nil then
						removeTractorObjectButtons(p)
						p.tractor_target = nil
					end
				end
			else	--no nearby objects
				if p.tractor_target ~= nil then
					removeTractorObjectButtons(p)
					p.tractor_target = nil
				end
			end
		end
	else	--not moving slowly enough to establish tractor
		removeTractorObjectButtons(p)
		--print(string.format("%s velocity: %.1f too fast to establish tractor",player_name,player_velocity))
		if player_velocity > 50 then
			--print(string.format("%s velocity: %.1f too fast to continue tractor",player_name,player_velocity))
			p.tractor_target_lock = false
			if p.disengage_tractor_button ~= nil then
				p:removeCustom(p.disengage_tractor_button)
				p.disengage_tractor_button = nil
			end
			if p.disengage_tractor_button_plus ~= nil then
				p:removeCustom(p.disengage_tractor_button_plus)
				p.disengage_tractor_button_plus = nil
			end
		else
			if p.tractor_target_lock then
				if p.tractor_target ~= nil and p.tractor_target:isValid() then
					p.tractor_target:setPosition(cpx+p.tractor_vector_x,cpy+p.tractor_vector_y)
					p:setEnergy(p:getEnergy() - p:getMaxEnergy()*tractor_drain)
					if random(1,100) < 27 then
						BeamEffect():setSource(p,0,0,0):setTarget(p.tractor_target,0,0):setDuration(1):setRing(false):setTexture(tractor_beam_string[math.random(1,#tractor_beam_string)]):setBeamFireSound(tractor_sound):setBeamFireSoundPower(tractor_sound_power + player_velocity/100)
					end
					if p.disengage_tractor_button == nil then
						p.disengage_tractor_button = "disengage_tractor_button"
						p:addCustomButton("Engineering",p.disengage_tractor_button,"Disengage Tractor",function()
							p.tractor_target_lock = false
							p:removeCustom(p.disengage_tractor_button)
							p.disengage_tractor_button = nil
						end,16)
					end
					if p.disengage_tractor_button_plus == nil then
						p.disengage_tractor_button_plus = "disengage_tractor_button_plus"
						p:addCustomButton("Engineering+",p.disengage_tractor_button_plus,"Disengage Tractor",function()
							p.tractor_target_lock = false
							p:removeCustom(p.disengage_tractor_button_plus)
							p.disengage_tractor_button_plus = nil
						end,16)
					end
				else	--invalid tractor target
					p.tractor_target_lock = false
					p:removeCustom(p.disengage_tractor_button)
					p:removeCustom(p.disengage_tractor_button_plus)
					p.disengage_tractor_button = nil
					p.disengage_tractor_button_plus = nil
				end
			end		--end of tractor lock processing				
		end		--end of player moving slow enough to tractor branch
	end		--end of speed checks for tractoring
end
function updatePlayerMiningCargo(delta,p,player_velocity,nearby_objects)
	if player_velocity < 10 then
		if p.mining_target_lock then
			if p.mining_target ~= nil and p.mining_target:isValid() then
				if p.mining_in_progress then
					p.mining_timer = p.mining_timer - delta
					if p.mining_timer < 0 then
						p.mining_in_progress = false
						if p.mining_timer_info ~= nil then
							p:removeCustom(p.mining_timer_info)
							p.mining_timer_info = nil
						end
						p.mining_target_lock = false
						p.mining_timer = nil
						if p.mining_target.trace_minerals ~= nil and #p.mining_target.trace_minerals > 0 then
							idx = math.random(1,#p.mining_target.trace_minerals)
							local good = p.mining_target.trace_minerals[idx]
							if p.goods == nil then
								p.goods = {}
							end
							if p.goods[good] == nil then
								p.goods[good] = 0
							end
							p.goods[good] = p.goods[good] + 1
							p.cargo = p.cargo - 1
							if p:hasPlayerAtPosition("Science") then
								local mined_mineral_message = "mined_mineral_message"
								p:addCustomMessage("Science",mined_mineral_message,string.format("Mining obtained %s which has been stored in the cargo hold",good))
							end
							if p:hasPlayerAtPosition("Operations") then
								local mined_mineral_message_ops = "mined_mineral_message_ops"
								p:addCustomMessage("Operations",mined_mineral_message_ops,string.format("Mining obtained %s which has been stored in the cargo hold",good))
							end
							table.remove(p.mining_target.trace_minerals, idx)
						else	--no minerals in asteroid
							if p:hasPlayerAtPosition("Science") then
								local mined_mineral_message = "mined_mineral_message"
								p:addCustomMessage("Science",mined_mineral_message,"mining failed to extract any minerals")
							end										
							if p:hasPlayerAtPosition("Operations") then
								local mined_mineral_message_ops = "mined_mineral_message_ops"
								p:addCustomMessage("Operations",mined_mineral_message_ops,"mining failed to extract any minerals")
							end										
						end
					else	--still mining, update timer display, energy and heat
						p:setEnergy(p:getEnergy() - p:getMaxEnergy()*mining_drain)
						p:setSystemHeat("beamweapons",p:getSystemHeat("beamweapons") + .0025)
						local mining_seconds = math.floor(p.mining_timer % 60)
						if random(1,100) < 38 then
							BeamEffect():setSource(p,0,0,0):setTarget(p.mining_target,0,0):setRing(false):setDuration(1):setTexture(mining_beam_string[math.random(1,#mining_beam_string)])
						end
						if p:hasPlayerAtPosition("Weapons") then
							p.mining_timer_info = "mining_timer_info"
							p:addCustomInfo("Weapons",p.mining_timer_info,string.format("Mining %i",mining_seconds),3)
						end
						if p:hasPlayerAtPosition("Tactical") then
							p.mining_timer_info_tac = "mining_timer_info_tac"
							p:addCustomInfo("Tactical",p.mining_timer_info_tac,string.format("Mining %i",mining_seconds),3)
						end
					end
				else	--mining not in progress
					if p.trigger_mine_beam_button == nil then
						if p:hasPlayerAtPosition("Weapons") then
							p.trigger_mine_beam_button = "trigger_mine_beam_button"
							p:addCustomButton("Weapons",p.trigger_mine_beam_button,"Start Mining",function()
								p.mining_in_progress = true
								p.mining_timer = delta + 5
								p:removeCustom(p.trigger_mine_beam_button)
								p.trigger_mine_beam_button = nil
							end,11)
						end
					end
					if p.trigger_mine_beam_button_tac == nil then
						if p:hasPlayerAtPosition("Tactical") then
							p.trigger_mine_beam_button_tac = "trigger_mine_beam_button_tac"
							p:addCustomButton("Tactical",p.trigger_mine_beam_button_tac,"Start Mining",function()
								p.mining_in_progress = true
								p.mining_timer = delta + 5
								p:removeCustom(p.trigger_mine_beam_button_tac)
								p.trigger_mine_beam_button_tac = nil
							end,11)
						end
					end
				end
			else	--no mining target or mining target invalid
				p.mining_target_lock = false
				if p.mining_timer_info ~= nil then
					p:removeCustom(p.mining_timer_info)
					p.mining_timer_info = nil
				end
				if p.mining_timer_info_tac ~= nil then
					p:removeCustom(p.mining_timer_info_tac)
					p.mining_timer_info_tac = nil
				end
			end
		else	--not locked
			local mining_objects = {}
			if nearby_objects ~= nil and #nearby_objects > 1 then
				for _, obj in ipairs(nearby_objects) do
					if p ~= obj then
						if isObjectType(obj,"Asteroid") or isObjectType(obj,"VisualAsteroid") then
							table.insert(mining_objects,obj)
						end
					end
				end		--end of nearby object list loop
				if #mining_objects > 0 then
					if p.mining_target ~= nil and p.mining_target:isValid() then
						local target_in_list = false
						for i=1,#mining_objects do
							if mining_objects[i] == p.mining_target then
								target_in_list = true
								break
							end
						end		--end of check for the current target in list loop
						if not target_in_list then
							p.mining_target = mining_objects[1]
							removeMiningButtons(p)
						end
					else
						p.mining_target = mining_objects[1]
					end
					addMiningButtons(p,mining_objects)
				else	--no mining objects
					if p.mining_target ~= nil then
						removeMiningButtons(p)
						p.mining_target = nil
					end
				end
			else	--no nearby objects
				if p.mining_target ~= nil then
					removeMiningButtons(p)
					p.mining_target = nil
				end
			end
		end
	else	--not moving slowly enough to mine
		removeMiningButtons(p)
		if p.mining_timer_info ~= nil then
			p:removeCustom(p.mining_timer_info)
			p.mining_timer_info = nil
		end
		if p.mining_timer_info_tac ~= nil then
			p:removeCustom(p.mining_timer_info_tac)
			p.mining_timer_info_tac = nil
		end
		if p.trigger_mine_beam_button then
			p:removeCustom(p.trigger_mine_beam_button)
			p.trigger_mine_beam_button = nil
		end
		if p.trigger_mine_beam_button_tac then
			p:removeCustom(p.trigger_mine_beam_button_tac)
			p.trigger_mine_beam_button_tac = nil
		end
		p.mining_target_lock = false
		p.mining_in_progress = false
		p.mining_timer = nil
	end
end
function launchFighterFromCarrier(p,carrier_ship)
	p.launch_start_message = string.format("Launch started for %s\nNext step: Engineering to charge launch systems",carrier_ship.name)
	p:addCustomMessage("Weapons",p.launch_start_message,p.launch_start_message)
	for i,next_carrier_ship in ipairs(p.carrier_ship_inventory) do
		p:removeCustom(string.format("%s_wea",next_carrier_ship.launch_button))
		p:removeCustom(string.format("%s_tac",next_carrier_ship.launch_button))
	end
	p.launch_bay = "loaded"
	carrier_ship.state = "charge"
end
function chargeCarrierShipLauncher(p,carrier_ship)
	if p:getEnergyLevel() > 50 then
		p.launch_timer = getScenarioTime() + carrier_ship.launch_time
		p:setEnergyLevel(p:getEnergyLevel() - 50)
		p.launch_charged_message = string.format("Launch systems charged.\nStanding by to launch %s in %i seconds.\nNext step: personnel to take fighter station(s) after fighter launched",carrier_ship.name,carrier_ship.launch_time)
		p:addCustomMessage("Engineering",p.launch_charged_message,p.launch_charged_message)
		p:addCustomMessage("Engineering+",p.launch_charged_message,p.launch_charged_message)
		p:removeCustom(string.format("%s_eng",p.charge_launch))
		p:removeCustom(string.format("%s_plus",p.charge_launch))
		carrier_ship.state = "gather"
	else
		p.insufficient_launch_charge_energy_message = "insufficient_launch_charge_energy_message"
		p:addCustomMessage("Engineering",p.insufficient_launch_charge_energy_message,"Insufficient energy to charge launch systems")
		p:addCustomMessage("Engineering+",p.insufficient_launch_charge_energy_message,"Insufficient energy to charge launch systems")
	end
end
function updatePlayerCarrierSpaceGroup(delta,p)
	if p.launch_bay == nil then
		p.launch_bay = "empty"
	elseif p.launch_bay == "empty" then
		for i,carrier_ship in ipairs(p.carrier_ship_inventory) do
			if carrier_ship.state == "aboard" then
				if carrier_ship.repair_timer == nil or getScenarioTime() > carrier_ship.repair_timer then
					p:removeCustom(string.format("%s_prep_eng",carrier_ship.launch_button))
					p:removeCustom(string.format("%s_prep_pls",carrier_ship.launch_button))
					p:addCustomButton("Weapons",string.format("%s_wea",carrier_ship.launch_button),string.format("Launch %s",carrier_ship.name),function()
						launchFighterFromCarrier(p,carrier_ship)
					end,12)
					p:addCustomButton("Tactical",string.format("%s_tac",carrier_ship.launch_button),string.format("Launch %s",carrier_ship.name),function()
						launchFighterFromCarrier(p,carrier_ship)
					end,12)					
				else
					local refit_time = math.floor(carrier_ship.repair_timer - getScenarioTime())
					p:addCustomInfo("Engineering",string.format("%s_prep_eng",carrier_ship.launch_button),string.format("Refit %s %s",carrier_ship.name,refit_time),12)
					p:addCustomInfo("Engineering+",string.format("%s_prep_pls",carrier_ship.launch_button),string.format("Refit %s %s",carrier_ship.name,refit_time),12)
				end
			end
		end
	elseif p.launch_bay == "loaded" then
		for i,carrier_ship in ipairs(p.carrier_ship_inventory) do
			if carrier_ship.state == "charge" then
				p.charge_launch = "charge_launch"
				p:addCustomButton("Engineering",string.format("%s_eng",p.charge_launch),"Charge launch sys",function()
					chargeCarrierShipLauncher(p,carrier_ship)
				end,17)
				p:addCustomButton("Engineering+",string.format("%s_plus",p.charge_launch),"Charge launch sys",function()
					chargeCarrierShipLauncher(p,carrier_ship)
				end,17)
			end
			if carrier_ship.state == "gather" then
				if getScenarioTime() > p.launch_timer then
					if p.launch_countdown ~= nil then
						p:removeCustom(string.format("%s_relay",p.launch_countdown))
						p:removeCustom(string.format("%s_ops",p.launch_countdown))
						p.launch_countdown = nil
					end
					local fx, fy = p:getPosition()
					local currrent_reputation = p:getReputationPoints()
					local valid_variables = true
					local fighter = nil
					if carrier_ship.template == nil then
						print("carrier_ship.template is nil on",p:getCallSign())
						valid_variables = false
					elseif carrier_ship_types[carrier_ship.template] == nil then
						print("carrier_ship.template:",carrier_ship.template,"carrier_ship_types[carrier_ship.template] is nil")
						valid_variables = false
					elseif carrier_ship_types[carrier_ship.template].create == nil then
						print("carrier_ship_types[carrier_ship.template].create is nil")
						valid_variables = false
					else
						fighter = carrier_ship_types[carrier_ship.template].create(carrier_ship.template)
						if fighter == nil then
							print("carrier_ship_types[carrier_ship.template].create(carrier_ship.template) did not yield an actual ship")
							valid_variables = false
						end				
					end
					if valid_variables then
						p:setReputationPoints(currrent_reputation)
	--					print("player heading:",p:getHeading(),"player rotation:",p:getRotation())
						fighter:setPosition(fx,fy):setCallSign(carrier_ship.name):setSystemPower("maneuver",0):commandSetSystemPowerRequest("maneuver",0):commandSetSystemPowerRequest("beamweapons",0):commandSetSystemPowerRequest("missilesystem",0):commandSetSystemPowerRequest("impulse",0)
						fighter:commandSetSystemPowerRequest("reactor",fighter:getShieldCount()*.2)
						if carrier_ship.ordnance_level ~= nil then
							for i,missile_type in ipairs(missile_types) do
								if carrier_ship.ordnance_level[missile_type] ~= nil then
									fighter:setWeaponStorage(missile_type,carrier_ship.ordnance_level[missile_type])
								end
							end
						end
						if carrier_ship.max_health ~= nil then
							for i,system in ipairs(system_list) do
								if carrier_ship.max_health[system] ~= nil then
									fighter:setSystemHealthMax(system,carrier_ship.max_health[system])
								end
							end
						end
						fighter:commandSetAutoRepair(true):setAutoCoolant(true)
						fighter:addCustomInfo("Engineering",string.format("%s_eng",carrier_ship.name),string.format("%s Auto-cool/repair On",carrier_ship.name),4)
						fighter:addCustomInfo("Engineering+",string.format("%s_plus",carrier_ship.name),string.format("%s Auto-cool/repair On",carrier_ship.name),4)
						fighter:setRotation(p:getRotation()):setHeading(p:getHeading())
						fighter:setJumpDrive(false):setWarpDrive(false)
						carrier_deployed_fighter[carrier_ship.name] = {carrier = p, fighter = fighter}
						fighter.retract_time = carrier_ship.launch_time
						carrier_ship.state = "deployed"
						carrier_ship.ship = fighter
						p:addToShipLog(string.format("Launch of %s complete",carrier_ship.name),"Green")
						p.launch_bay = "empty"
					end
				else
					p.launch_countdown = "launch_countdown"
					local launch_seconds = math.floor(p.launch_timer - getScenarioTime())
					p:addCustomInfo("Relay",string.format("%s_relay",p.launch_countdown),string.format("Launch: %i",launch_seconds),1)
					p:addCustomInfo("Operations",string.format("%s_ops",p.launch_countdown),string.format("Launch: %i",launch_seconds),1)
				end
			end
		end
	end
end
function catchEpjamMissile(p)
	if getScenarioTime() > p.epjam_recharge then
		p.epjam_button_wea = "epjam_button_wea"
		local epjam_size = {"S","M","L"}
		p:addCustomButton("Weapons",p.epjam_button_wea,string.format("Trigger %s EPJAM",epjam_size[p.epjam]),function()
			triggerEpjam(p)
		end,14)
		p.epjam_button_tac = "epjam_button_tac"
		p:addCustomButton("Tactical",p.epjam_button_tac,string.format("Trigger %s EPJAM",epjam_size[p.epjam]),function()
			triggerEpjam(p)
		end,14)
		p.epjam_recharge = nil
	end
end
function updatePlayerInNebula(delta,p)
	local inside_gain_coolant_nebula = false
	local inside_lose_beam_range_nebula = false
	local inside_gain_beam_range_nebula = false
	local gain_coolant_nebulae = {}
	local lose_beam_range_nebulae = {}
	local gain_beam_range_nebulae = {}
	local obj_list = p:getObjectsInRange(5100)
	if #anomalous_nebulae > 0 then 
		for i,obj in ipairs(obj_list) do
			if isObjectType(obj,"Nebula") then
				for j,neb in ipairs(anomalous_nebulae) do
--					print("check anomalous nebulae. Index:",j,"Nebula:",neb)
					if neb.name ~= nil and neb == obj then
						if distance(p,neb) <= 5000 then
--							print("Player inside:",p:getCallSign(),"Anomalous nebula index:",j,"name:",neb.name)
							if neb.name == "-C" then
								p:setMaxCoolant(p:getMaxCoolant()*neb.coolant_loss)
--								print("Lost coolant. Current:",p:getMaxCoolant())
								if p:getMaxCoolant() > 30 and random(1,100) <= 13 then
									local engine_choice = math.random(1,3)
									local adverse_effect = .995
									if engine_choice == 1 then
										p:setSystemHealth("impulse",p:getSystemHealth("impulse")*adverse_effect)
									elseif engine_choice == 2 then
										if p:hasWarpDrive() then
											p:setSystemHealth("warp",p:getSystemHealth("warp")*adverse_effect)
										end
									else
										if p:hasJumpDrive() then
											p:setSystemHealth("jumpdrive",p:getSystemHealth("jumpdrive")*adverse_effect)
										end
									end
								end
							end
							if neb.name == "+C" then
								inside_gain_coolant_nebula = true
								table.insert(gain_coolant_nebulae,neb)
							end
							if neb.name == "-BR" then
								inside_lose_beam_range_nebula = true
								table.insert(lose_beam_range_nebulae,neb)
							end
							if neb.name == "+BR" then
								inside_gain_beam_range_nebula = true
								table.insert(gain_beam_range_nebulae,neb)
							end
							if neb.name == "-SC" then
--								print("shield charge loss")
								if p:getShieldCount() > 0 then
									local charge_loss_cap = p:getShieldMax(0)*0.1
									local adjusted_shield = p:getShieldLevel(0)*neb.shield_loss
--									print("cap:",charge_loss_cap,"adjusted:",adjusted_shield)
									if adjusted_shield > charge_loss_cap then
										if p:getShieldCount() == 1 then
											p:setShields(adjusted_shield)
--											print("set single shield")
										else
											p:setShields(adjusted_shield,p:getShieldLevel(1))
--											print("set front shield")
										end
									end
									if p:getShieldCount() > 1 then
										charge_loss_cap = p:getShieldMax(1)*0.1
										adjusted_shield = p:getShieldLevel(1)*neb.shield_loss
--										print("Rear shield: cap:",charge_loss_cap,"adjusted:",adjusted_shield)
										if adjusted_shield > charge_loss_cap then
											p:setShields(p:getShieldLevel(0),adjusted_shield)
--											print("set rear shield")
										end
									end
								end
							end
							if neb.name == "+SC" then
								if p:getShieldCount() > 0 then
									local charge_gain_cap = p:getShieldMax(0)*1.25
									local adjusted_shield = p:getShieldLevel(0)*neb.shield_gain
									if adjusted_shield < charge_gain_cap then
										if p:getShieldCount() == 1 then
											p:setShields(adjusted_shield)
										else
											p:setShields(adjusted_shield,p:getShieldLevel(1))
										end
									end
									if p:getShieldCount() > 1 then
										charge_gain_cap = p:getShieldMax(1)*1.25
										adjusted_shield = p:getShieldLevel(1)*neb.shield_gain
										if adjusted_shield < charge_gain_cap then
											p:setShields(p:getShieldLevel(0),adjusted_shield)
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	if inside_gain_coolant_nebula then
		if p.get_coolant then
			if p.coolant_trigger then
				updateCoolantGivenPlayer(p,delta,gain_coolant_nebulae)
			end
		else
			if p:hasPlayerAtPosition("Engineering") then
				p.get_coolant_button = "get_coolant_button"
				p:addCustomButton("Engineering",p.get_coolant_button,"Get Coolant",function() 
					string.format("")
					getCoolantGivenPlayer(p) 
				end, 24)
				p.get_coolant = true
			end
			if p:hasPlayerAtPosition("Engineering+") then
				p.get_coolant_button_plus = "get_coolant_button_plus"
				p:addCustomButton("Engineering+",p.get_coolant_button_plus,"Get Coolant",function() 
					string.format("")
					getCoolantGivenPlayer(p) 
				end, 24)
				p.get_coolant = true
			end
		end
	else
		p.get_coolant = false
		p.coolant_trigger = false
		p.configure_coolant_timer = nil
		p.deploy_coolant_timer = nil
		if p:hasPlayerAtPosition("Engineering") then
			if p.get_coolant_button ~= nil then
				p:removeCustom(p.get_coolant_button)
				p.get_coolant_button = nil
			end
			if p.gather_coolant ~= nil then
				p:removeCustom(p.gather_coolant)
				p.gather_coolant = nil
			end
		end
		if p:hasPlayerAtPosition("Engineering+") then
			if p.get_coolant_button_plus ~= nil then
				p:removeCustom(p.get_coolant_button_plus)
				p.get_coolant_button_plus = nil
			end
			if p.gather_coolant_plus ~= nil then
				p:removeCustom(p.gather_coolant_plus)
				p.gather_coolant_plus = nil
			end
		end
	end
	local range_differential = 1
	if inside_lose_beam_range_nebula and inside_gain_beam_range_nebula then
--		print("inside lose and gain beam range nebulae")
		if p.normal_beam_range == nil then
			p.normal_beam_range = {}
			for i=0,15 do
				if p:getBeamWeaponRange(i) > 1 then
					p.normal_beam_range[i] = p:getBeamWeaponRange(i)
				end
			end
		end
		for i,neb in ipairs(lose_beam_range_nebulae) do
			if neb.beam_range_loss ~= nil then
				range_differential = math.min(range_differential,neb.beam_range_loss)
			end
		end
		for i=0,15 do
			local rng = p:getBeamWeaponRange(i)
			if rng > 1 then
				local arc = p:getBeamWeaponArc(i)
				local dir = p:getBeamWeaponDirection(i)
				local cyc = p:getBeamWeaponCycleTime(i)
				local dmg = p:getBeamWeaponDamage(i)
				p:setBeamWeapon(i,arc,dir,p.normal_beam_range[i]*range_differential,cyc,dmg)
			end
		end
		range_differential = 1
		for i,neb in ipairs(gain_beam_range_nebulae) do
			if neb.beam_range_gain ~= nil then
				range_differential = math.max(range_differential,neb.beam_range_gain)
			end
		end
		for i=0,15 do
			local rng = p:getBeamWeaponRange(i)
			if rng > 1 then
				local arc = p:getBeamWeaponArc(i)
				local dir = p:getBeamWeaponDirection(i)
				local cyc = p:getBeamWeaponCycleTime(i)
				local dmg = p:getBeamWeaponDamage(i)
				p:setBeamWeapon(i,arc,dir,rng*range_differential,cyc,dmg)
			end
		end
	elseif inside_lose_beam_range_nebula then
--		print("inside lose beam range nebula")
		if p.normal_beam_range == nil then
			p.normal_beam_range = {}
			for i=0,15 do
				if p:getBeamWeaponRange(i) > 1 then
					p.normal_beam_range[i] = p:getBeamWeaponRange(i)
				end
			end
		end
		for i,neb in ipairs(lose_beam_range_nebulae) do
			if neb.beam_range_loss ~= nil then
				range_differential = math.min(range_differential,neb.beam_range_loss)
			end
		end
		for i=0,15 do
			local rng = p:getBeamWeaponRange(i)
			if rng > 1 then
				local arc = p:getBeamWeaponArc(i)
				local dir = p:getBeamWeaponDirection(i)
				local cyc = p:getBeamWeaponCycleTime(i)
				local dmg = p:getBeamWeaponDamage(i)
--				print("range before adjustment:",rng,"normal range:",p.normal_beam_range[i],"differential:",range_differential)
				p:setBeamWeapon(i,arc,dir,p.normal_beam_range[i]*range_differential,cyc,dmg)
--				print("range after adjustment:",p:getBeamWeaponRange(i))
			end
		end
	elseif inside_gain_beam_range_nebula then
--		print("inside gain beam range nebula")
		if p.normal_beam_range == nil then
--			print("save normal beam range")
			p.normal_beam_range = {}
			for i=0,15 do
				if p:getBeamWeaponRange(i) > 1 then
					p.normal_beam_range[i] = p:getBeamWeaponRange(i)
				end
			end
		end
		for i,neb in ipairs(gain_beam_range_nebulae) do
			if neb.beam_range_gain ~= nil then
--				print("nebula has beam range gain value. neb beam range gain:",neb.beam_range_gain)
				range_differential = math.max(range_differential,neb.beam_range_gain)
--				print("Calculated range differential:",range_differential)
			end
		end
		for i=0,15 do
			local rng = p:getBeamWeaponRange(i)
			if rng > 1 then
				local arc = p:getBeamWeaponArc(i)
				local dir = p:getBeamWeaponDirection(i)
				local cyc = p:getBeamWeaponCycleTime(i)
				local dmg = p:getBeamWeaponDamage(i)
--				print("Index:",i,"Before: rng:",rng,"dir:",dir,"cyc:",cyc,"dmg:",dmg)
				p:setBeamWeapon(i,arc,dir,p.normal_beam_range[i]*range_differential,cyc,dmg)
--				print("After: rng:",rng,"dir:",dir,"cyc:",cyc,"dmg:",dmg)
			end
		end
	else
		if p.normal_beam_range ~= nil then
--			print("exit beam range nebulae")
			for i=0,15 do
				local rng = p:getBeamWeaponRange(i)
				if rng > 1 then
					local arc = p:getBeamWeaponArc(i)
					local dir = p:getBeamWeaponDirection(i)
					local cyc = p:getBeamWeaponCycleTime(i)
					local dmg = p:getBeamWeaponDamage(i)
					p:setBeamWeapon(i,arc,dir,p.normal_beam_range[i],cyc,dmg)
				end
			end
			p.normal_beam_range = nil
		end
	end
end
function updateCoolantGivenPlayer(p, delta, gain_coolant_nebulae)
	if p.configure_coolant_timer == nil then
		p.configure_coolant_timer = delta + 5
	end
	p.configure_coolant_timer = p.configure_coolant_timer - delta
	if p.configure_coolant_timer < 0 then
		if p.deploy_coolant_timer == nil then
			p.deploy_coolant_timer = delta + 5
		end
		p.deploy_coolant_timer = p.deploy_coolant_timer - delta
		if p.deploy_coolant_timer < 0 then
--			print("deploy coolan timer expired")
			gather_coolant_status = "Gathering Coolant"
			local player_coolant_gain = 0
--			print("outside gain coolan nebula loop")
--			print("gain coolant nebula count:",#gain_coolant_nebulae)
			for c,neb in ipairs(gain_coolant_nebulae) do
--				print("index:",c,"nebula:",neb)
--				print("nebula coolant gain:",neb.coolant_gain)
				player_coolant_gain = math.max(player_coolant_gain,neb.coolant_gain)
			end
--			print("adjusting coolant")
			p:setMaxCoolant(p:getMaxCoolant() + player_coolant_gain)
--			print("checking for excessive coolant effects")
			if p:getMaxCoolant() > 30 and random(1,100) <= 13 then
				local engine_choice = math.random(1,3)
				local adverse_effect = .995
				if engine_choice == 1 then
					p:setSystemHealth("impulse",p:getSystemHealth("impulse")*adverse_effect)
				elseif engine_choice == 2 then
					if p:hasWarpDrive() then
						p:setSystemHealth("warp",p:getSystemHealth("warp")*adverse_effect)
					end
				else
					if p:hasJumpDrive() then
						p:setSystemHealth("jumpdrive",p:getSystemHealth("jumpdrive")*adverse_effect)
					end
				end
			end
		else
			gather_coolant_status = string.format("Deploying Collectors %i",math.ceil(p.deploy_coolant_timer - delta))
		end
	else
		gather_coolant_status = string.format("Configuring Collectors %i",math.ceil(p.configure_coolant_timer - delta))
	end
	if p:hasPlayerAtPosition("Engineering") then
		p.gather_coolant = "gather_coolant"
		p:addCustomInfo("Engineering",p.gather_coolant,gather_coolant_status, 5)
	end
	if p:hasPlayerAtPosition("Engineering+") then
		p.gather_coolant_plus = "gather_coolant_plus"
		p:addCustomInfo("Engineering",p.gather_coolant_plus,gather_coolant_status, 5)
	end
end
function getCoolantGivenPlayer(p)
	if p:hasPlayerAtPosition("Engineering") then
		if p.get_coolant_button ~= nil then
			p:removeCustom(p.get_coolant_button)
			p.get_coolant_button = nil
		end
	end
	if p:hasPlayerAtPosition("Engineering+") then
		if p.get_coolant_button_plus ~= nil then
			p:removeCustom(p.get_coolant_button_plus)
			p.get_coolant_button_plus = nil
		end
	end
	p.coolant_trigger = true
end
function updatePlayerPatrolProbes(p)
	if p.patrol_probe > 5 then
		p.patrol_probe = 5
	end
	if p.patrol_probe_state == "On" then
		cycleProbeType(p,"standard")
		local object_list = p:getObjectsInRange(100)
		if object_list ~= nil then
			for _, obj in ipairs(object_list) do
				if obj ~= p then
					if isObjectType(obj,"ScanProbe") then
						if obj:getOwner() == p then
							if p.patrol_probe_count == nil then
								p.patrol_probe_count = 0
							end
							local max_patrol = math.floor((1 - p.patrol_probe/5) * p:getMaxScanProbeCount())
							if p.patrol_probe_count < max_patrol then
								if obj.patrol == nil then
									obj:setSpeed(p.patrol_probe*1000)
									obj.patrol = true
									obj:onArrival(patrolProbe)
									obj:onDestruction(patrolProbeDone)
									p.patrol_probe_count = p.patrol_probe_count + 1
								end
							else
								if p:hasPlayerAtPosition("Relay") then
									p:addCustomMessage("Relay","max_patrol_probes_reached",string.format("Reached maximum number of patrol probes: %i",max_patrol))
								end
								if p:hasPlayerAtPosition("Operations") then
									p:addCustomMessage("Operations","max_patrol_probes_reached_ops",string.format("Reached maximum number of patrol probes: %i",max_patrol))
								end
								togglePatrolProbeState(p)
							end
						end
					end
				end
			end
		end
	end
end
function updatePlayerSpecialtyProbes(p)
	local matching_index = 0
	for probe_type_index, probe_type_item in ipairs(p.probe_type_list) do
		if probe_type_item.name == p.probe_type and probe_type_item.count > 0 then
			matching_index = probe_type_index
			break
		end
	end
	if matching_index > 0 then
		local object_list = p:getObjectsInRange(100)
		if object_list ~= nil then
			for _, obj in ipairs(object_list) do
				if obj ~= p then
					if isObjectType(obj,"ScanProbe") then
						if obj:getOwner() == p then
							if obj.probe_speed == nil then
								obj.probe_speed = p.probe_type_list[matching_index].speed
								obj:setSpeed(obj.probe_speed)
								local mines_for_ldsm = false
--								print("probe speed:",obj.probe_speed)
								if string.find(p.probe_type_list[matching_index].name,"LDSM") then
									if p.probe_type_list[matching_index].mines_required <= p:getWeaponStorage("Mine") then
										p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count - 1
										p:setWeaponStorage("Mine",p:getWeaponStorage("Mine") - p.probe_type_list[matching_index].mines_required)
										mines_for_ldsm = true
									end
								else
									p.probe_type_list[matching_index].count = p.probe_type_list[matching_index].count - 1
								end
								if p.probe_type_list[matching_index].warp_jam_range ~= nil then
									obj.warp_jam_range = p.probe_type_list[matching_index].warp_jam_range
									obj:onArrival(probeWarpJammer)
								end
								if p.probe_type_list[matching_index].boost ~= nil then
									obj.boost = p.probe_type_list[matching_index].boost
									obj.range = p.probe_type_list[matching_index].range
									if specialty_probe_diagnostic then
										print("Found a boost probe for player",p:getCallSign(),"-",p.probe_type_list[matching_index].name,obj.boost,obj.range)
									end
									table.insert(boost_probe_list,obj)
								end
								if p.probe_type_list[matching_index].mine_fetus ~= nil then
									if mines_for_ldsm then
										obj.mine_fetus = p.probe_type_list[matching_index].mine_fetus
										obj:onArrival(probeLabor)
									end
								end
								if p.probe_type_list[matching_index].hull ~= nil then
									obj.range = p.probe_type_list[matching_index].range
									obj.shield = p.probe_type_list[matching_index].shield
									obj.hull = p.probe_type_list[matching_index].hull
									obj:onArrival(probeObservatory)
								end
								cycleProbeType(p,p.probe_type_list[matching_index].name)
							end
						end
					end
				end
			end
		end
	end
end
function probeLabor(self,x,y)
	table.insert(mine_labor_probe_list,{
		probe = self,
		x = x,
		y = y,
		mine_fetus = self.mine_fetus,
		stealth = getScenarioTime() + 5,
		birth = getScenarioTime() + 5 + (5*self.mine_fetus),
		hidden = false,
	})
end
function updateProbeLabor()
--	if mine_probe_diagnostic then 
--		print("In update probe labor function")
--	end
	if #mine_labor_probe_list > 0 then
--		if mine_probe_diagnostic then 
--			print("mine labor probe list has items in it:",#mine_labor_probe_list)
--		end
		for i=1,#mine_labor_probe_list do
			if mine_labor_probe_list[i].probe ~= nil and mine_labor_probe_list[i].probe:isValid() then
--				if mine_probe_diagnostic then 
--					print("probe is still present and valid. Stealth:",mine_labor_probe_list[i].stealth)
--				end
				if getScenarioTime() > mine_labor_probe_list[i].stealth then
					mine_labor_probe_list[i].probe:destroy()
					mine_labor_probe_list[i].hidden = true
				end
			else
				if mine_labor_probe_list[i].hidden then
					if getScenarioTime() > mine_labor_probe_list[i].birth then
						if mine_labor_probe_list[i].mine_fetus == 3 then
							local angle = random(0,360)
							local mx, my = vectorFromAngle(angle,400)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 72,400)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 144,400)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 216,400)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 288,400)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
						elseif mine_labor_probe_list[i].mine_fetus == 2 then
							local angle = random(0,360)
							local mx, my = vectorFromAngle(angle,200)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 120,200)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
							mx, my = vectorFromAngle(angle + 240,200)
							Mine():setPosition(mine_labor_probe_list[i].x + mx,mine_labor_probe_list[i].y + my)
						else	--must be 1
							Mine():setPosition(mine_labor_probe_list[i].x,mine_labor_probe_list[i].y)
						end
						mine_labor_probe_list[i] = mine_labor_probe_list[#mine_labor_probe_list]
						mine_labor_probe_list[#mine_labor_probe_list] = nil
						break
					end
				else
					mine_labor_probe_list[i] = mine_labor_probe_list[#mine_labor_probe_list]
					mine_labor_probe_list[#mine_labor_probe_list] = nil
					break
				end
			end
		end
	end
end
function updatePlayerTurboTorpedo(delta,p)
	if p.turbo_missile ~= nil then
		if p.turbo_missile:isValid() then
			if p.turbo_torp_factor == nil then
				p.turbo_torp_factor = 1
			end
			local tvx, tvy = p.turbo_missile:getVelocity()
			local mx, my = p.turbo_missile:getPosition()
			p.turbo_missile:setPosition(mx+tvx*delta*p.turbo_torp_factor,my+tvy*delta*p.turbo_torp_factor)
		else
			p.turbo_missile = nil
		end
	else
		if p.turbo_torp_active then
			local missile_list = p:getObjectsInRange(100)
			for _, obj in ipairs(missile_list) do
				if obj ~= p then
					local type_name = obj.typeName
					local heading = -1
					if obj:getHeading() ~= nil then
						heading = obj:getHeading()
					end
					local vx = 0
					local vy = 0
					if obj:getVelocity() ~= nil then
						vx, vy = obj:getVelocity()
					end
					if p.turbo_torpedo_type == nil then
						p.turbo_torpedo_type = {}
						table.insert(p.turbo_torpedo_type,"HomingMissile")
					end
--								local md = distance(p,obj)
--								print(type_name,heading,vx,vy,md)
					for _, ttt in ipairs(p.turbo_torpedo_type) do
						local missile_matches_turbo_type = false
						if ECS then
							if isObjectType(obj,"HomingMissile") then
								if ttt == "HomingMissile" then
									missile_matches_turbo_type = true
								end
							elseif isObjectType(obj,"EMPMissile") then
								if ttt == "EMPMissile" then
									missile_matches_turbo_type = true
								end
							end
						else
							if obj.typeName == ttt then
								missile_matches_turbo_type = true
							end
						end
						if type_name == ttt then
							if obj:getOwner() == p then
								p.turbo_missile = obj
								p.turbo_torp_active = false
								p.turbo_torp_timer = p.turbo_torp_charge_interval
								local applicable_missiles = ""
								for _, amt in ipairs(p.turbo_torpedo_type) do
									applicable_missiles = applicable_missiles .. "\n" .. amt
								end
								if p:hasPlayerAtPosition("Weapons") then
									p.turbo_timer_reset_message = "turbo_timer_reset_message"
									p:addCustomMessage("Weapons",p.turbo_timer_reset_message,string.format("Turbo Torpedo will become available again %i seconds after the %s expires.\nTurbo applies to the following missile types:%s",p.turbo_torp_charge_interval,type_name,applicable_missiles))
								end
								if p:hasPlayerAtPosition("Tactical") then
									p.turbo_timer_reset_message_tac = "turbo_timer_reset_message_tac"
									p:addCustomMessage("Weapons",p.turbo_timer_reset_message_tac,string.format("Turbo Torpedo will become available again %i seconds after the %s expires.\nTurbo applies to the following missile types:%s",p.turbo_torp_charge_interval,type_name,applicable_missiles))
								end
								break
							end
						end
					end
					if p.turbo_missile == obj then
						break
					end
				end
			end
		else
			if p.turbo_torp_timer < 0 then
				if p.turbo_torp_button == nil then
					if p:hasPlayerAtPosition("Weapons") then
						p.turbo_torp_button = "turbo_torp_button"
						p:addCustomButton("Weapons",p.turbo_torp_button,"Turbo Torpedo",function()
							p.turbo_torp_active = true
							p:removeCustom(p.turbo_torp_button)
							p.turbo_torp_button = nil
						end,13)
					end
				end
				if p.turbo_torp_button_tac == nil then
					if p:hasPlayerAtPosition("Tactical") then
						p.turbo_torp_button_tac = "turbo_torp_button_tac"
						p:addCustomButton("Tactical",p.turbo_torp_button_tac,"Turbo Torpedo",function()
							p.turbo_torp_active = true
							p:removeCustom(p.turbo_torp_button_tac)
							p.turbo_torp_button_tac = nil
						end,13)
					end
				end
			else
				p.turbo_torp_timer = p.turbo_torp_timer - delta
				if p.turbo_torp_button ~= nil then
					p:removeCustom(p.turbo_torp_button)
					p.turbo_torp_button = nil
				end
				if p.turbo_torp_button_tac ~= nil then
					p:removeCustom(p.turbo_torp_button_tac)
					p.turbo_torp_button_tac = nil
				end
			end
		end
	end
end
function updatePlayerProximityScan(p)
	local obj_list = p:getObjectsInRange(p.prox_scan*1000)
	if obj_list ~= nil and #obj_list > 0 then
		for _, obj in ipairs(obj_list) do
			if obj:isValid() and isObjectType(obj,"CpuShip") and not obj:isFullyScannedBy(p) then
				obj:setScanState("simplescan")
			end
		end
	end
end
function updateMagnasolCollision(delta)
	local planet_x, planet_y = planet_colburn:getPosition()
	local collision_list = getObjectsInRadius(planet_x, planet_y, colburn_radius + 2000)
	local obj_dist = 0
	local ship_distance = 0
	local obj_type_name = ""
	for _, obj in ipairs(collision_list) do
		if obj:isValid() then
			if distance_diagnostic then
				print("distance_diagnostic 25 obj:",obj,"planet_colburn:",planet_colburn)
			end		
			obj_dist = distance(obj,planet_colburn)
			if isObjectType(obj,"CpuShip") then
				obj_type_name = obj:getTypeName()
				if obj_type_name ~= nil then
					ship_distance = shipTemplateDistance[obj:getTypeName()]
					if ship_distance == nil then
						print("distance not retrieved from ship template for cpu ship:",obj:getCallSign(),"defaulting to ship distance 400")
						ship_distance = 400
					end
				else
					print("type name nil on cpu ship:",obj:getCallSign(),"defaulting to ship distance 400")
				end
				if obj_dist <= colburn_radius + ship_distance then
					obj:takeDamage(100,"kinetic",planet_x,planet_y)
				end
			end
			if isObjectType(obj,"PlayerSpaceship") then
				obj_type_name = obj:getTypeName()
				if obj_type_name ~= nil then
					ship_distance = playerShipStats[obj:getTypeName()].distance
					if ship_distance == nil then
						print("distance not retrieved from player ship stats for player ship:",obj:getCallSign(),"defaulting to ship distance 400")
						ship_distance = 400
					end
				else
					print("type name nil on player ship:",obj:getCallSign(),"defaulting to ship distance 400")
				end
				if obj_dist <= colburn_radius + ship_distance then
					obj:takeDamage(100,"kinetic",planet_x,planet_y)
				end
			end
		end
	end
	planet_x, planet_y = planet_morningstar_moon:getPosition()
	collision_list = getObjectsInRadius(planet_x, planet_y, morningstar_radius + 2000)
	for _, obj in ipairs(collision_list) do
		if obj:isValid() then
			if distance_diagnostic then
				print("distance_diagnostic 26 obj:",obj,"planet_morningstar_moon:",planet_morningstar_moon)
			end		
			obj_dist = distance(obj,planet_morningstar_moon)
			if isObjectType(obj,"CpuShip") then
				obj_type_name = obj:getTypeName()
				if obj_type_name ~= nil then
					ship_distance = shipTemplateDistance[obj:getTypeName()]
					if ship_distance == nil then
						print("When calculating distance to morningstar, could not get the distance for ship template:",obj:getTypeName(),"defaulting to 400")
						ship_distance = 400
					end
				else
					print("morningstar test: type name nil on cpu ship:",obj:getCallSign(),"defaulting to ship distance 400")
				end
				if obj_dist <= morningstar_radius + ship_distance then
					obj:takeDamage(100,"kinetic",planet_x,planet_y)
				end
			end
			if isObjectType(obj,"PlayerSpaceship") then
				obj_type_name = obj:getTypeName()
				if obj_type_name ~= nil then
					ship_distance = playerShipStats[obj:getTypeName()].distance
					if ship_distance == nil then
						print("distance not retrieved from player ship stats for player ship:",obj:getCallSign(),"defaulting to ship distance 400")
						ship_distance = 400
					end
				else
					print("type name nil on player ship:",obj:getCallSign(),"defaulting to ship distance 400")
				end
				if obj_dist <= morningstar_radius + ship_distance then
					obj:takeDamage(100,"kinetic",planet_x,planet_y)
				end
			end
		end
	end
	updateMagnasol = updateMagnasolColor
end
function updateMagnasolColor(delta)
	local magnasol_red_lo = .6
	local magnasol_red_hi = 1
	local magnasol_green_lo = .6
	local magnasol_green_hi = 1
	local magnasol_red = random(magnasol_red_lo,magnasol_red_hi)
	local magnasol_green = random(magnasol_green_lo,magnasol_green_hi)
	planet_magnasol_star:setPlanetAtmosphereColor(magnasol_red,magnasol_green,1)
	updateMagnasol = updateMagnasolNebula
end
function updateMagnasolNebula(delta)
	if bask_nebulae ~= nil and #bask_nebulae > 0 then
		for neb_index, neb in ipairs(bask_nebulae) do
			if neb:isValid() and not neb.fixed then
				neb.travel_distance = neb.travel_distance + (delta*random(10,90))	
				local tn_x, tn_y = vectorFromAngleNorth(neb.travel_angle,neb.travel_distance)
				neb:setPosition(magnasol_x + tn_x, magnasol_y + tn_y)
				if neb.travel_distance > 200000 then
					tn_x, tn_y = neb.origin:getPosition()
					neb:setPosition(tn_x,tn_y)
					neb.travel_angle = (neb.origin.start_angle + random(0,neb.arc)) % 360
					if distance_diagnostic then
						print("distance_diagnostic 27 neb:",neb,"magnasol_x:",magnasol_x,"magnasol_y:",magnasol_y)
					end		
					neb.travel_distance = distance(neb,magnasol_x,magnasol_y)
				end
			end
		end
	end
	updateMagnasol = updateMagnasolPatrols
end
function updateMagnasolPatrols(delta)
	for _, fleet in ipairs(bask_patrol_fleets) do
		if fleet ~= nil and fleet.ships ~= nil then
			local ship_deleted = false
			for index, ship in ipairs(fleet.ships) do
				if ship ~= nil then
					if not ship:isValid() then
						fleet.ships[index] = fleet.ships[#fleet.ships]
						fleet.ships[#fleet.ships] = nil
						ship_deleted = true
						break
					end
				else
					fleet.ships[index] = fleet.ships[#fleet.ships]
					fleet.ships[#fleet.ships] = nil
					ship_deleted = true
					break
				end
			end
			if not ship_deleted then
				if #fleet.ships == 0 then
					if fleet.regen == nil then
						fleet.regen = getScenarioTime() + 30
					else
						if fleet.regen < getScenarioTime() then
							fleet.ships = createBaskPatrol(fleet.name)
							fleet.regen = nil
						end
					end
				end
			end
		end
	end
	updateMagnasol = updateMagnasolCollision
end
function updateWaypointSharingButtons(p)
	if p:getWaypointCount() > 0 and p:isCommsChatOpenToPlayer() then
		for n=1,p:getWaypointCount() do
			local share_wp_button_rel = string.format("share_wp_button_rel_%s",n)
			p:addCustomButton("Relay",share_wp_button_rel,string.format("Share WP%s",n),function()
				local share_players = {}
				for i,p_chat in ipairs(getActivePlayerShips()) do
					if p ~= p_chat then
						if p_chat:isCommsChatOpenToPlayer() and p:isCommsChatOpenToPlayer() then
							if p_chat:getWaypointCount() < 9 then
								local share_wp_x, share_wp_y = p:getWaypoint(n)
								p_chat:commandAddWaypoint(share_wp_x,share_wp_y)
								table.insert(share_players,{p=p_chat,wp=p_chat:getWaypointCount()})
							end
						end
					end
				end
				local p_msg = string.format("You shared your waypoint %s with:",n)
				if #share_players > 0 then
					for i,share_player in ipairs(share_players) do
						p_msg = string.format("%s\n%s as waypoint %s",p_msg,share_player.p:getCallSign(),share_player.wp)
						share_player.p:addCustomMessage("Relay","shared_wp_msg_rel",string.format("%s shared their waypoint %s with you as waypoint %s",p:getCallSign(),n,share_player.wp))
						share_player.p:addCustomMessage("Operations","shared_wp_msg_ops",string.format("%s shared their waypoint %s with you as waypoint %s",p:getCallSign(),n,share_player.wp))
					end
				else
					p_msg = "Could not share waypoint"
				end
				p:addCustomMessage("Relay","share_wp_msg_rel",p_msg)
			end, 50 + n)
		end
	else
		for n=1,9 do
			local share_wp_button_rel = string.format("share_wp_button_rel_%s",n)
			p:removeCustom(share_wp_button_rel)
		end
	end
end
function updateStaunchPhenomenon(delta)
	for i,sp in ipairs(staunch_phenomenon) do
		if sp:isValid() and not isObjectType(sp,"Zone") then
			local sp_x, sp_y = sp:getPosition()
			if sp.up then
				sp_y = sp_y - sp.speed * delta
				if sp_y < spr_y - 100000 then
					sp:setPosition(sp_x,spr_y + 100000)
				else
					sp:setPosition(sp_x,sp_y)
				end
			else
				sp_y = sp_y + sp.speed * delta
				if sp_y > spr_y + 100000 then
					sp:setPosition(sp_x,spr_y - 100000)
				else
					sp:setPosition(sp_x,sp_y)
				end
			end
		end
	end
	for i,p in ipairs(getActivePlayerShips()) do
		if staunch_cheat_top_zone ~= nil then
			if staunch_cheat_top_zone:isInside(p) then
				local npx, npy = vectorFromAngle(random(0,360),random(2000,56000))
				npx = npx + gizen_x
				npy = npy + gizen_y
				p:setPosition(npx,npy)
			end
		end
		if staunch_cheat_bot_zone ~= nil then
			if staunch_cheat_bot_zone:isInside(p) then
				local npx, npy = vectorFromAngle(random(0,360),random(2000,56000))
				npx = npx + gizen_x
				npy = npy + gizen_y
				p:setPosition(npx,npy)
			end
		end
	end
	updateStaunch = updateStaunchPatrols
end
function updateStaunchPatrols(delta)
	for _, fleet in ipairs(staunch_patrol_fleets) do
		if fleet ~= nil and fleet.ships ~= nil then
			local ship_deleted = false
			for index, ship in ipairs(fleet.ships) do
				if ship ~= nil then
					if not ship:isValid() then
						fleet.ships[index] = fleet.ships[#fleet.ships]
						fleet.ships[#fleet.ships] = nil
						ship_deleted = true
						break
					end
				else
					fleet.ships[index] = fleet.ships[#fleet.ships]
					fleet.ships[#fleet.ships] = nil
					ship_deleted = true
					break
				end
			end
			if not ship_deleted then
				if #fleet.ships == 0 then
					if fleet.regen == nil then
						fleet.regen = getScenarioTime() + 30
					else
						if fleet.regen < getScenarioTime() then
							fleet.ships = createStaunchPatrol(fleet.name)
							fleet.regen = nil
						end
					end
				end
			end
		end
	end
	updateStaunch = updateStaunchExpeditions
end
function updateStaunchExpeditions(delta)
	if staunch_expedition_stations ~= nil then
		if #staunch_expedition_stations > 0 then
			local expedition_pool = {}
			local station_deleted = false
			for i,station in ipairs(staunch_expedition_stations) do
				if station:isValid() then
					if station.expedition == nil then
						table.insert(expedition_pool,station)
					else
						if #station.expedition > 0 then
							for j,ship in ipairs(station.expedition) do
								if not ship:isValid() then
									station.expedition[j] = station.expedition[#station.expedition]
									station.expedition[#station.expedition] = nil
									break
								end
							end
						else
							station.expedition = nil
							table.insert(expedition_pool,station)
						end
					end
				else
					staunch_expedition_stations[i] = staunch_expedition_stations[#staunch_expedition_stations]
					staunch_expedition_stations[#staunch_expedition_stations] = nil
					station_deleted = true
					break
				end
			end
			if not station_deleted then
				if #expedition_pool > 0 then
					if staunch_expedition_time == nil then
						staunch_expedition_time = getScenarioTime() + 5	--test: 5, final: 180 - 600
					end
					if getScenarioTime() > staunch_expedition_time then
						staunch_expedition_time = nil
						local station = tableRemoveRandom(expedition_pool)
						local enemy_station = nil
						local enemy_pool = {}
						for i,enemy_station in ipairs(expedition_pool) do
							if station:isEnemy(enemy_station) then
								table.insert(enemy_pool,enemy_station)
							end
						end
						if #enemy_pool > 0 then
							enemy_station = tableSelectRandom(enemy_pool)
						end
						if enemy_station ~= nil then
							station.expedition = {}
							local sx,sy = station:getPosition()
							local fleet = spawnNPCs(sx,sy,nil,station:getFaction(),"Idle","Random",nil,"unmodified","none",nil,nil,nil,nil,0)
							local tx, ty = enemy_station:getPosition()
							for i,ship in ipairs(fleet) do
								ship:orderFlyTowards(tx,ty)
								table.insert(station.expedition,ship)
							end
						end
					end
				end
			end
		end
	end
	updateStaunch = updateStaunchDefenders
end
function updateStaunchDefenders(delta)
	if staunch_defender_stations ~= nil then
		for i,station in ipairs(staunch_defender_stations) do
			if station:isValid() then
				if station.defenders == nil then
					if station.defend_check_time == nil then
						station.defend_check_time = getScenarioTime() + random(5,10)
					end
					if getScenarioTime() > station.defend_check_time then
						station.defend_check_time = nil
						local sx,sy = station:getPosition()
						local obj_list = getObjectsInRadius(sx,sy,8000)
						for j,obj in ipairs(obj_list) do
							if obj ~= station then
								if isObjectType(obj,"PlayerSpaceship") or isObjectType(obj,"CpuShip") then
									if obj:isEnemy(station) then
										station.defenders = {}
										local fleet = spawnNPCs(sx,sy,nil,station:getFaction(),"Idle","Random",nil,"unmodified","none",nil,nil,nil,nil,0)
										for k,ship in ipairs(fleet) do
											ship:orderDefendTarget(station)
											table.insert(station.defenders,ship)
										end
										break
									end
								end
							end
						end
					end
				else
					if #station.defenders > 0 then
						for j,ship in ipairs(station.defenders) do
							if not ship:isValid() then
								station.defenders[j] = station.defenders[#station.defenders]
								station.defenders[#station.defenders] = nil
								break
							end
						end
					else
						station.defenders = nil
					end
				end
			else
				staunch_defender_stations[i] = staunch_defender_stations[#staunch_defender_stations]
				staunch_defender_stations[#staunch_defender_stations] = nil
				break
			end
		end
	end
	updateStaunch = updateStaunchPhenomenon
end
function updatePlayerMagnasolLevelCoolant(p)
	if p:isValid() then
		if p.level_coolant == nil then
			p.level_coolant = true
			p.level_coolant_eng = "level_coolant_eng"
			p:addCustomButton("Engineering",p.level_coolant_eng,"Level Coolant",function()
				string.format("")
				levelCoolant(p)
			end, 26)
			p.level_coolant_plus = "level_coolant_plus"
			p:addCustomButton("Engineering+",p.level_coolant_plus,"Level Coolant",function()
				string.format("")
				levelCoolant(p)
			end, 26)
			p.level_coolant_power = "level_coolant_power"
			p:addCustomButton("PowerManagement",p.level_coolant_power,"Level Coolant",function()
				string.format("")
				levelCoolant(p)
			end, 26)
			local level_message = string.format("To: The Engineering Staff of %s\nFrom: Bask Construction Crew\nSubject: Level Coolant Notification and Warning\n\nWelcome to the Magnasol region. The technicians of Bask construction crew installed a level coolant function on your ship. Ships within 100 units of Magnasol experience additional heat generation in their systems due to the unusual nature of Magnasol. The closer %s approaches Magnasol, the more heat your systems will experience. The level coolant button takes all available coolant and spreads it out evenly among all systems. The technicians have taken the liberty of triggering this function on your behalf as a demonstration.\n\nThe best way to avoid the heat generation is to stay far away from Magnasol. Your shields reduce the heat generated. Once Bask is constructed, t will have parasol docking to protect ships while they are docked.\n\nEnjoy your tour of the Magnasol system.",p:getCallSign(),p:getCallSign())
			if stationBask ~= nil and stationBask:isValid() then
				level_message = string.format("To: The Engineering Staff of %s\nFrom: Station %s\nSubject: Level Coolant Notification and Warning\n\nWelcome to the Magnasol region. The technicians of station %s installed a level coolant function on your ship. Ships within 100 units of Magnasol experience additional heat generation in their systems due to the unusual nature of Magnasol. The closer %s approaches Magnasol, the more heat your systems will experience. The level coolant button takes all available coolant and spreads it out evenly among all systems. The %s technicians have taken the liberty of triggering this function on your behalf as a demonstration.\n\nThe best way to avoid the heat generation is to stay far away from Magnasol. Your shields reduce the heat generated. %s also has parasol docking to protect ships while they are docked.\n\nEnjoy your tour of the Magnasol system.",p:getCallSign(),stationBask:getCallSign(),stationBask:getCallSign(),p:getCallSign(),stationBask:getCallSign(),stationBask:getCallSign())
			end
			p.level_coolant_message_eng = "level_coolant_message_eng"
			p:addCustomMessage("Engineering",p.level_coolant_message_eng,level_message)
			p.level_coolant_message_plus = "level_coolant_message_plus"
			p:addCustomMessage("Engineering+",p.level_coolant_message_plus,level_message)
			p.level_coolant_message_power = "level_coolant_message_power"
			p:addCustomMessage("PowerManagement",p.level_coolant_message_power,level_message)
			levelCoolant(p)
		end
	end
end
function updatePlayerMagnasolHeat(delta,p)
	if p:isValid() then
		if stationBask ~= nil and stationBask:isValid() then
			if p:isDocked(stationBask) then
				return
			end
		end
		if planet_magnasol_star:isValid() then
			if distance_diagnostic then
				print("distance_diagnostic 28 planet_magnasol_star:",planet_magnasol_star,"p:",p)
			end		
			local magnasol_distance = distance(planet_magnasol_star,p)
			if magnasol_distance < 100000 then
				local base_heat = .05
				if p.coolant_additive ~= nil then
					if p.coolant_additive.expires > getScenarioTime() then
						base_heat = base_heat - (.01 * p.coolant_additive.effectiveness)
					end
				end
				local heat_impact = delta * (1 - (magnasol_distance/100000)) * base_heat
				if p:getShieldsActive() then
					heat_impact = heat_impact/2
				end
	--			local out = string.format("impact:%.5f",heat_impact)
				local system_heat_list = {
					["reactor"] = {before = p:getSystemHeat("reactor"), after = 0},
					["beamweapons"] = {before = p:getSystemHeat("beamweapons"), after = 0},
					["missilesystem"] = {before = p:getSystemHeat("missilesystem"), after = 0},
					["maneuver"] = {before = p:getSystemHeat("maneuver"), after = 0},
					["impulse"] = {before = p:getSystemHeat("impulse"), after = 0},
					["warp"] = {before = p:getSystemHeat("warp"), after = 0},
					["jumpdrive"] = {before = p:getSystemHeat("jumpdrive"), after = 0},
					["frontshield"] = {before = p:getSystemHeat("frontshield"), after = 0},
					["rearshield"] = {before = p:getSystemHeat("rearshield"), after = 0},				
				}
				for system, heat in pairs(system_heat_list) do
					if p:hasSystem(system) then
						p:setSystemHeat(system,heat.before + heat_impact)
	--					heat.after = p:getSystemHeat(system)
	--					out = string.format("%s, %s:%.5f-%.5f",out,system,heat.before,heat.after)
					end
				end
	--			print(out)
			end
		end
	end
end
--	carrier ship inventory description - attached to player ship carrier object
--	organized by integer
--	name:			ship call sign
--	template:		name of template used to create ship
--	ship:			ship object when created/deployed
--	state:			aboard		fighter aboard the carrier
--					charge		weapons clicked launch, waiting for engineer to charge launcher
--					gather		launcher charged, countdown to deployment
--					deployed	fighter created/deployed
--	launch_button:	string for button management on the carrier - launch_shipName
--	class:			class of ship (eg Starfighter, Frigate, Corvette, Dreadnought)
--	max_health:		table based on systems with a value for the max health of each system
--	max_ordnance:	table based on ordnance type with a value for the max of each ordnance type
--	ordnance_level:	table based on ordnance type with a value for the current level of each ordnance type
--	repair:			time when repairs are complete

--	carrier space group description
--	organized by fighter name
--	state:	values:	"aboard"	fighter is aboard the carrier
--					"charge"	weapons has clicked the launch button and the fighter is waiting for engineering to charge the launch system
--					"gather"	about to launch, gathering crew to board after deployment
--					"deployed"	fighter created adjacent to the carrier waiting for players to board
--	repair:	
function retractFighterIntoCarrier(fighter,carrier)
	for i=0,15 do
		fighter:setTubeLoadTime(i,0)
		fighter:commandUnloadTube(i)
	end
	if fighter.retraction_cycle_count == nil then
		fighter.retraction_cycle_count = 0
	end
end
function updateCarrierDeployedFighter(delta)
	for fighter_name, fighter_details in pairs(carrier_deployed_fighter) do
		local fighter = fighter_details.fighter
		if fighter ~= nil and fighter:isValid() then
			local carrier = fighter_details.carrier
			if carrier ~= nil and carrier:isValid() then
				local dock_banner = false
				local fighter_heading = fighter:getHeading()
				local carrier_heading = carrier:getHeading()
				if distance(fighter,carrier) < 1000 then
					if math.abs(fighter_heading - carrier_heading) < 10 then
						dock_banner = true
					elseif math.abs(fighter_heading - carrier_heading) > 350 then
						if fighter_heading > carrier_heading then
							carrier_heading = carrier_heading + 360
						elseif carrier_heading > fighter_heading then
							fighter_heading = fighter_heading + 360
						end
						if math.abs(fighter_heading - carrier_heading) < 10 then
							dock_banner = true
						end
					end
				end
				if dock_banner then
					if fighter.retraction_cycle_count ~= nil then
						if fighter.retraction_cycle_count < 5 then
							fighter.retraction_cycle_count = fighter.retraction_cycle_count + 1
						else
							local transfer_map = {}
							local consoles = {"Helms", "Weapons", "Engineering", "Science", "Relay", "Tactical", "Engineering+", "Operations", "Single", "DamageControl", "PowerManagement", "Database", "AltRelay", "CommsOnly", "ShipLog"}
							for _, console in ipairs(consoles) do
								if fighter:hasPlayerAtPosition(console) then
									table.insert(transfer_map,console)
								end
							end
							fighter:transferPlayersToShip(carrier)
							local repair_systems = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
							local repair_delay = 0
							local carrier_ship = nil
							for i,ship in ipairs(carrier.carrier_ship_inventory) do
								if fighter == ship.ship then
									carrier_ship = ship
								end
							end
							if carrier_ship.max_health == nil then
								carrier_ship.max_health = {}
							end
							for i,system in ipairs(repair_systems) do
								if fighter:getSystemHealthMax(system) == 1 then
									carrier_ship.max_health[system] = nil
								else
									carrier_ship.max_health[system] = fighter:getSystemHealthMax(system)
								end
								repair_delay = repair_delay + (1 - (fighter:getSystemHealth(system)/fighter:getSystemHealthMax(system)))*100
							end
							repair_delay = repair_delay + (1 - (fighter:getHull()/fighter:getHullMax()))*100
							local restock_gap = false
							for i,missile_type in ipairs(missile_types) do
								if fighter:getWeaponStorageMax(missile_type) > 0 then
									if carrier:getWeaponStorage(missile_type) < (fighter:getWeaponStorageMax(missile_type) - fighter:getWeaponStorage(missile_type)) then
										restock_gap = true
									end
								end
							end
							if restock_gap then
								if carrier_ship.ordnance_level == nil then
									carrier_ship.ordnance_level = {}
								end
								if carrier_ship.max_ordnance == nil then
									carrier_ship.max_ordnance = {}
								end
							else
								carrier_ship.ordnance_level = {}
								carrier_ship.max_ordnance = {}
							end
							for i,missile_type in ipairs(missile_types) do
								if fighter:getWeaponStorageMax(missile_type) > 0 then
									if restock_gap then
										carrier_ship.ordnance_level[missile_type] = fighter:getWeaponStorage(missile_type)
										carrier_ship.max_ordnance[missile_type] = fighter:getWeaponStorageMax(missile_type)
									else
										carrier:setWeaponStorage(missile_type,carrier:getWeaponStorage(missile_type) - (fighter:getWeaponStorageMax(missile_type) - fighter:getWeaponStorage(missile_type)))
									end
								end
							end
							fighter:destroy()
							carrier_ship.state = "aboard"
							carrier_ship.repair_timer = getScenarioTime() + math.max(30,repair_delay)
							carrier:addToShipLog(string.format("%s has been retrieved",carrier_ship.name),"Green")
							carrier_deployed_fighter[carrier_ship.name] = nil
							for _, console in ipairs(transfer_map) do
								carrier:addCustomMessage(console,string.format("%s_return_msg",console),string.format("Crew returning from %s should take the appropriate console on %s. Welcome back.",carrier_ship.name,carrier:getCallSign()))
							end
						end
					end
					if fighter ~= nil and fighter:isValid() then
						fighter.dock_banner = string.format("%s_dock_banner",fighter_name)
						local vx, vy = fighter:getVelocity()
						local fighter_velocity = math.sqrt((math.abs(vx)*math.abs(vx))+(math.abs(vy)*math.abs(vy)))
						vx, vy = carrier:getVelocity()
						local carrier_velocity = math.sqrt((math.abs(vx)*math.abs(vx))+(math.abs(vy)*math.abs(vy)))
						local dock_status = string.format("Match Bear:%.1f Vel:%.1f",fighter_heading - carrier_heading,fighter_velocity - carrier_velocity)
						if math.abs(fighter_heading - carrier_heading) < 1 then
							if math.abs(fighter_velocity - carrier_velocity) < 1 then
								if fighter.retract_timer == nil then
									fighter.retract_timer = getScenarioTime() + fighter.retract_time
								end
								if getScenarioTime() > fighter.retract_timer then
									dock_status = string.format("%s   0",dock_status)
									fighter.dock_with_carrier_button = "dock_with_carrier_button"
									fighter:addCustomButton("Helms",string.format("%s_helm",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
										retractFighterIntoCarrier(fighter,carrier)
									end,18)
									fighter:addCustomButton("Tactical",string.format("%s_tac",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
										retractFighterIntoCarrier(fighter,carrier)
									end,18)
									fighter:addCustomButton("Single",string.format("%s_one",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
										retractFighterIntoCarrier(fighter,carrier)
									end,18)
								else
									local display_time = getScenarioTime() - fighter.retract_timer
									dock_status = string.format("%s   %.1f",dock_status,display_time)
									if fighter.dock_with_carrier_button ~= nil then
										fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
										fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
										fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
										fighter.dock_with_carrier_button = nil
										fighter.retract_timer = nil
									end
								end
							else
								if fighter.dock_with_carrier_button ~= nil then
									fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
									fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
									fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
									fighter.dock_with_carrier_button = nil
									fighter.retract_timer = nil
								end
							end
						else
							if fighter.dock_with_carrier_button ~= nil then
								fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
								fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
								fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
								fighter.dock_with_carrier_button = nil
								fighter.retract_timer = nil
							end
						end
						fighter:addCustomInfo("Helms",string.format("%s_helm",fighter.dock_banner),dock_status,5)
						fighter:addCustomInfo("Tactical",string.format("%s_tac",fighter.dock_banner),dock_status,5)
					end
				else
					if fighter.dock_banner ~= nil then
						fighter:removeCustom(string.format("%s_helm",fighter.dock_banner))
						fighter:removeCustom(string.format("%s_tac",fighter.dock_banner))
						fighter.dock_banner = nil
					end
				end
			else
				local nearby_objects = fighter:getObjectsInRange(1000)
				local carriers = {}
				local fighter_type = fighter:getTypeName()
				for i,obj in ipairs(nearby_objects) do
					if isObjectType(obj,"PlayerSpaceship") then
--						print("Fighter",string.format("%s's",fighter_name),"carrier destroyed. Found player ship",obj:getCallSign(),"nearby")
						if obj.carrier ~= nil and obj.carrier then
--							print("Player ship is a carrier")
							if obj.carrier_ship_types ~= nil then
								if obj.carrier_ship_types[fighter_type] ~= nil then
--									print("Carrier has a list of supported fighter types")
									if obj.carrier_ship_types[fighter_type].carry then
--										print("Fighter type matches a supported type on carrier:",fighter_type)
										table.insert(carriers,obj)
									end
								end
							end
						end
					end
				end
				if #carriers > 0 then
--					print("Carrier list contains this many carriers:",#carriers)
					carrier = carriers[1]
					if #carriers > 1 then
						--pick the closest carrier
					end
					local dock_banner = false
					local fighter_heading = fighter:getHeading()
					local carrier_heading = carrier:getHeading()
					if math.abs(fighter_heading - carrier_heading) < 10 then
						dock_banner = true
					elseif math.abs(fighter_heading - carrier_heading) > 350 then
						if fighter_heading > carrier_heading then
							carrier_heading = carrier_heading + 360
						elseif carrier_heading > fighter_heading then
							fighter_heading = fighter_heading + 360
						end
						if math.abs(fighter_heading - carrier_heading) < 10 then
							dock_banner = true
						end
					end
					if dock_banner then
						if fighter.retraction_cycle_count ~= nil then
							if fighter.retraction_cycle_count < 5 then
								fighter.retraction_cycle_count = fighter.retraction_cycle_count + 1
							else
								local transfer_map = {}
								local consoles = {"Helms", "Weapons", "Engineering", "Science", "Relay", "Tactical", "Engineering+", "Operations", "Single", "DamageControl", "PowerManagement", "Database", "AltRelay", "CommsOnly", "ShipLog"}
								for _, console in ipairs(consoles) do
									if fighter:hasPlayerAtPosition(console) then
										table.insert(transfer_map,console)
									end
								end
								fighter:transferPlayersToShip(carrier)
								local repair_systems = {"reactor","beamweapons","missilesystem","maneuver","impulse","warp","jumpdrive","frontshield","rearshield"}
								local repair_delay = 0
								local carrier_ship = nil
								if carrier.carrier_ship_inventory == nil then
									carrier.carrier_ship_inventory = {}
								end
								for i,ship in ipairs(carrier.carrier_ship_inventory) do
									if fighter == ship.ship then
										carrier_ship = ship
									end
								end
								if carrier_ship == nil then
									--original carrier that deployed the fighter is gone
									--put fighter in this carrier's inventory
									local ship = carrier.carrier_ship_types[fighter_type]
									table.insert(carrier.carrier_ship_inventory,{
										class = ship.class,
										template = fighter_type,
										name = fighter:getCallSign(),
										state = "aboard",
										launch_button = string.format("launch_%s",fighter:getCallSign()),
										launch_time = carrier_class_launch_time[ship.class],
									})
									carrier_ship = carrier.carrier_ship_inventory[#carrier.carrier_ship_inventory]
								end
								if carrier_ship.max_health == nil then
									carrier_ship.max_health = {}
								end
								for i,system in ipairs(repair_systems) do
									if fighter:getSystemHealthMax(system) == 1 then
										carrier_ship.max_health[system] = nil
									else
										carrier_ship.max_health[system] = fighter:getSystemHealthMax(system)
									end
									repair_delay = repair_delay + (1 - (fighter:getSystemHealth(system)/fighter:getSystemHealthMax(system)))*100
								end
								repair_delay = repair_delay + (1 - (fighter:getHull()/fighter:getHullMax()))*100
								local restock_gap = false
								for i,missile_type in ipairs(missile_types) do
									if fighter:getWeaponStorageMax(missile_type) > 0 then
										if carrier:getWeaponStorage(missile_type) < (fighter:getWeaponStorageMax(missile_type) - fighter:getWeaponStorage(missile_type)) then
											restock_gap = true
										end
									end
								end
								if restock_gap then
									if carrier_ship.ordnance_level == nil then
										carrier_ship.ordnance_level = {}
									end
									if carrier_ship.max_ordnance == nil then
										carrier_ship.max_ordnance = {}
									end
								else
									carrier_ship.ordnance_level = {}
									carrier_ship.max_ordnance = {}
								end
								for i,missile_type in ipairs(missile_types) do
									if fighter:getWeaponStorageMax(missile_type) > 0 then
										if restock_gap then
											carrier_ship.ordnance_level[missile_type] = fighter:getWeaponStorage(missile_type)
											carrier_ship.max_ordnance[missile_type] = fighter:getWeaponStorageMax(missile_type)
										else
											carrier:setWeaponStorage(missile_type,carrier:getWeaponStorage(missile_type) - (fighter:getWeaponStorageMax(missile_type) - fighter:getWeaponStorage(missile_type)))
										end
									end
								end
								fighter:destroy()
								carrier_ship.state = "aboard"
								carrier_ship.repair_timer = getScenarioTime() + math.max(30,repair_delay)
								carrier:addToShipLog(string.format("%s has been retrieved",carrier_ship.name),"Green")
								carrier_deployed_fighter[carrier_ship.name] = nil
								for _, console in ipairs(transfer_map) do
									carrier:addCustomMessage(console,string.format("%s_return_msg",console),string.format("Crew returning from %s should take the appropriate console on %s. Welcome back.",carrier_ship.name,carrier:getCallSign()))
								end
							end
						end					
						if fighter ~= nil and fighter:isValid() then
							fighter.dock_banner = string.format("%s_dock_banner",fighter_name)
							local vx, vy = fighter:getVelocity()
							local fighter_velocity = math.sqrt((math.abs(vx)*math.abs(vx))+(math.abs(vy)*math.abs(vy)))
							vx, vy = carrier:getVelocity()
							local carrier_velocity = math.sqrt((math.abs(vx)*math.abs(vx))+(math.abs(vy)*math.abs(vy)))
							local dock_status = string.format("Match Bear:%.1f Vel:%.1f",fighter_heading - carrier_heading,fighter_velocity - carrier_velocity)
							if math.abs(fighter_heading - carrier_heading) < 1 then
								if math.abs(fighter_velocity - carrier_velocity) < 1 then
									if fighter.retract_timer == nil then
										fighter.retract_timer = getScenarioTime() + fighter.retract_time
									end
									if getScenarioTime() > fighter.retract_timer then
										dock_status = string.format("%s   0",dock_status)
										fighter.dock_with_carrier_button = "dock_with_carrier_button"
										fighter:addCustomButton("Helms",string.format("%s_helm",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
											retractFighterIntoCarrier(fighter,carrier)
										end,18)
										fighter:addCustomButton("Tactical",string.format("%s_tac",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
											retractFighterIntoCarrier(fighter,carrier)
										end,18)
										fighter:addCustomButton("Single",string.format("%s_one",fighter.dock_with_carrier_button),string.format("Dock with %s",carrier:getCallSign()),function()
											retractFighterIntoCarrier(fighter,carrier)
										end,18)
									else
										local display_time = getScenarioTime() - fighter.retract_timer
										dock_status = string.format("%s   %.1f",dock_status,display_time)
										if fighter.dock_with_carrier_button ~= nil then
											fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
											fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
											fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
											fighter.dock_with_carrier_button = nil
											fighter.retract_timer = nil
										end
									end
								else
									if fighter.dock_with_carrier_button ~= nil then
										fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
										fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
										fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
										fighter.dock_with_carrier_button = nil
										fighter.retract_timer = nil
									end
								end
							else
								if fighter.dock_with_carrier_button ~= nil then
									fighter:removeCustom(string.format("%s_helm",fighter.dock_with_carrier_button))
									fighter:removeCustom(string.format("%s_tac",fighter.dock_with_carrier_button))
									fighter:removeCustom(string.format("%s_one",fighter.dock_with_carrier_button))
									fighter.dock_with_carrier_button = nil
									fighter.retract_timer = nil
								end
							end
							fighter:addCustomInfo("Helms",string.format("%s_helm",fighter.dock_banner),dock_status,5)
							fighter:addCustomInfo("Tactical",string.format("%s_tac",fighter.dock_banner),dock_status,5)
						end
					else
						if fighter.dock_banner ~= nil then
							fighter:removeCustom(string.format("%s_helm",fighter.dock_banner))
							fighter:removeCustom(string.format("%s_tac",fighter.dock_banner))
							fighter.dock_banner = nil
						end
					end
				end
--				carrier_deployed_fighter[fighter_name] = nil
			end
		else
			carrier_deployed_fighter[fighter_name] = nil
		end
	end
end
function updatePlayerLockBanners(p)
	if p.lock_banners ~= nil and p.lock_banners then
		local range = p:getShortRangeRadarRange()
		local px, py = p:getPosition()
		local sensor_object_list = getObjectsInRadius(px, py, math.max(10000,range))
		local lock_list = {}
		local long_count = 0
		local short_count = 0
		local missile_count = 0
		for i,obj in ipairs(sensor_object_list) do
			if obj ~= p then
				if isObjectType(obj,"CpuShip") or isObjectType(obj,"PlayerSpaceship") or isObjectType(obj,"HomingMissile") or isObjectType(obj,"Nuke") or isObjectType(obj,"EMPMissile") then
					if obj:getTarget() == p then
						local dist = distance(p,obj)
						local ox, oy = obj:getPosition()
						table.insert(lock_list,{ship=obj,typ=obj_type,dist=dist,dir=angleFromVectorNorth(ox,oy,px,py)})
						if dist > range then
							long_count = long_count + 1
						else
							if isObjectType(obj,"HomingMissile","MovingMissile") or isObjectType(obj,"Nuke","MovingMissile") or isObjectType(obj,"EMPMissile","MovingMissile") then
								missile_count = missile_count + 1
							else
								short_count = short_count + 1
							end
						end
					end
				end
			end
		end
		if long_count > 0 then
			local sensor_lock_msg = "Sensor lock"
			if long_count < 2 then
				local lone_lock = nil
				for i,lock in ipairs(lock_list) do
					if lock.dist > range then
						lone_lock = lock
						break
					end
				end
				sensor_lock_msg = string.format("%s %s %.1fU",sensor_lock_msg,math.floor(lone_lock.dir),lone_lock.dist)
			end
			p.sensor_lock_msg_hlm = "sensor_lock_msg_hlm"
			p:addCustomInfo("Helms",p.sensor_lock_msg_hlm,sensor_lock_msg,8)
			p.sensor_lock_msg_tac = "sensor_lock_msg_tac"
			p:addCustomInfo("Tactical",p.sensor_lock_msg_tac,sensor_lock_msg,8)
		else
			if p.sensor_lock_msg_hlm ~= nil then
				p:removeCustom(p.sensor_lock_msg_hlm)
				p.sensor_lock_msg_hlm = nil
				p:removeCustom(p.sensor_lock_msg_tac)
				p.sensor_lock_msg_tac = nil
			end
		end
		if short_count > 0 then
			local weapon_lock_msg = "Weapon lock"
			if short_count < 2 then
				local lone_near_lock = nil
				for i,lock in ipairs(lock_list) do
					if lock.dist <= range and lock.typ ~= "HomingMissile" and lock.typ ~= "Nuke" and lock.typ ~= "EMPMissile" then
						lone_near_lock = lock
						break
					end
				end
				weapon_lock_msg = string.format("%s %s %s",weapon_lock_msg,math.floor(lone_near_lock.dir),lone_near_lock.ship:getCallSign())
			end
			p.weapon_lock_msg_hlm = "weapon_lock_msg_hlm"
			p:addCustomInfo("Helms",p.weapon_lock_msg_hlm,weapon_lock_msg,9)
			p.weapon_lock_msg_tac = "weapon_lock_msg_tac"
			p:addCustomInfo("Tactical",p.weapon_lock_msg_tac,weapon_lock_msg,9)
		else
			if p.weapon_lock_msg_hlm ~= nil then
				p:removeCustom(p.weapon_lock_msg_hlm)
				p.weapon_lock_msg_hlm = nil
				p:removeCustom(p.weapon_lock_msg_tac)
				p.weapon_lock_msg_tac = nil
			end
		end
		if missile_count > 0 then
			local missile_lock_msg = "Missile lock"
			if missile_count < 2 then
				local lone_missile = nil
				for i,lock in ipairs(lock_list) do
					if lock.dist <= range and (lock.typ == "HomingMissile" or lock.typ == "Nuke" or lock.typ == "EMPMissile") then
						lone_missile = lock
					end
				end
				missile_lock_msg = string.format("%s %s %.1fU",missile_lock_msg,math.floor(lone_missile.dir),lone_missile.dist)
			end
			p.missile_lock_msg_hlm = "missile_lock_msg_hlm"
			p:addCustomInfo("Helms",p.missile_lock_msg_hlm,missile_lock_msg,10)
			p.missile_lock_msg_tac = "missile_lock_msg_tac"
			p:addCustomInfo("Tactical",p.missile_lock_msg_tac,missile_lock_msg,10)
		else
			if p.missile_lock_msg_hlm ~= nil then
				p:removeCustom(p.missile_lock_msg_hlm)
				p.missile_lock_msg_hlm = nil
				p:removeCustom(p.missile_lock_msg_tac)
				p.missile_lock_msg_tac = nil
			end
		end
	else
		if p.missile_lock_msg_hlm ~= nil then
			p:removeCustom(p.missile_lock_msg_hlm)
			p.missile_lock_msg_hlm = nil
			p:removeCustom(p.missile_lock_msg_tac)
			p.missile_lock_msg_tac = nil
		end
		if p.weapon_lock_msg_hlm ~= nil then
			p:removeCustom(p.weapon_lock_msg_hlm)
			p.weapon_lock_msg_hlm = nil
			p:removeCustom(p.weapon_lock_msg_tac)
			p.weapon_lock_msg_tac = nil
		end
		if p.sensor_lock_msg_hlm ~= nil then
			p:removeCustom(p.sensor_lock_msg_hlm)
			p.sensor_lock_msg_hlm = nil
			p:removeCustom(p.sensor_lock_msg_tac)
			p.sensor_lock_msg_tac = nil
		end
	end
end
function updatePlayerBalanceShield(p)
	if playerShipStats[p:getTypeName()] ~= nil then
		local function removeBalanceShieldButtons(p)
			if p.balance_shield_button_wea ~= nil then
				p:removeCustom(p.balance_shield_button_wea)
				p.balance_shield_button_wea = nil
			end
			if p.balance_shield_button_tac ~= nil then
				p:removeCustom(p.balance_shield_button_tac)
				p.balance_shield_button_tac = nil
			end
			if p.balance_shield_focus_rear_button_wea ~= nil then
				p:removeCustom(p.balance_shield_focus_rear_button_wea)
				p.balance_shield_focus_rear_button_wea = nil
			end
			if p.balance_shield_focus_rear_button_tac ~= nil then
				p:removeCustom(p.balance_shield_focus_rear_button_tac)
				p.balance_shield_focus_rear_button_tac = nil
			end
			if p.balance_shield_focus_front_button_wea ~= nil then
				p:removeCustom(p.balance_shield_focus_front_button_wea)
				p.balance_shield_focus_front_button_wea = nil
			end
			if p.balance_shield_focus_front_button_tac ~= nil then
				p:removeCustom(p.balance_shield_focus_front_button_tac)
				p.balance_shield_focus_front_button_tac = nil
			end
		end
		if playerShipStats[p:getTypeName()].balance_shield then
			if p:getShieldCount() > 1 then
				if p:getShieldLevel(0) < p:getShieldMax(0) or p:getShieldLevel(1) < p:getShieldMax(1) then
					if p:getEnergy() > p:getMaxEnergy() * .1 then
						if p.balance_shield_cycle_interval == nil then
							p.balance_shield_cycle_interval = 10
						end
						if p:getShieldMax(0) == p:getShieldMax(1) then
							if p:getShieldLevel(0) ~= p:getShieldLevel(1) then
								if p.balance_shield_timer == nil then
									p.balance_shield_button_wea = "balance_shield_button_wea"
									p:addCustomButton("Weapons",p.balance_shield_button_wea,"Balance Shields",function()
										local average_shield = (p:getShieldLevel(0) + p:getShieldLevel(1)) / 2
										p:setShields(average_shield,average_shield)
										p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
										p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
										if p.balance_shield_focus_front_button_wea ~= nil then
											p:removeCustom(p.balance_shield_focus_front_button_wea)
											p.balance_shield_focus_front_button_wea = nil
										end
										if p.balance_shield_focus_front_button_tac ~= nil then
											p:removeCustom(p.balance_shield_focus_front_button_tac)
											p.balance_shield_focus_front_button_tac = nil
										end
										if p.balance_shield_focus_rear_button_wea ~= nil then
											p:removeCustom(p.balance_shield_focus_rear_button_wea)
											p.balance_shield_focus_rear_button_wea = nil
										end
										if p.balance_shield_focus_rear_button_tac ~= nil then
											p:removeCustom(p.balance_shield_focus_rear_button_tac)
											p.balance_shield_focus_rear_button_tac = nil
										end
										if p.balance_shield_button_wea ~= nil then
											p:removeCustom(p.balance_shield_button_wea)
											p.balance_shield_button_wea = nil
										end
										if p.balance_shield_button_tac ~= nil then
											p:removeCustom(p.balance_shield_button_tac)
											p.balance_shield_button_tac = nil
										end
									end, 49)
									p.balance_shield_button_tac = "balance_shield_button_tac"
									p:addCustomButton("Tactical",p.balance_shield_button_tac,"Balance Shields",function()
										local average_shield = (p:getShieldLevel(0) + p:getShieldLevel(1)) / 2
										p:setShields(average_shield,average_shield)
										p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
										p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
										if p.balance_shield_focus_front_button_wea ~= nil then
											p:removeCustom(p.balance_shield_focus_front_button_wea)
											p.balance_shield_focus_front_button_wea = nil
										end
										if p.balance_shield_focus_front_button_tac ~= nil then
											p:removeCustom(p.balance_shield_focus_front_button_tac)
											p.balance_shield_focus_front_button_tac = nil
										end
										if p.balance_shield_focus_rear_button_wea ~= nil then
											p:removeCustom(p.balance_shield_focus_rear_button_wea)
											p.balance_shield_focus_rear_button_wea = nil
										end
										if p.balance_shield_focus_rear_button_tac ~= nil then
											p:removeCustom(p.balance_shield_focus_rear_button_tac)
											p.balance_shield_focus_rear_button_tac = nil
										end
										if p.balance_shield_button_wea ~= nil then
											p:removeCustom(p.balance_shield_button_wea)
											p.balance_shield_button_wea = nil
										end
										if p.balance_shield_button_tac ~= nil then
											p:removeCustom(p.balance_shield_button_tac)
											p.balance_shield_button_tac = nil
										end
									end, 49)
								else
									if getScenarioTime() > p.balance_shield_timer then
										p.balance_shield_timer = nil
									end
								end
							end
						end
						local front_strength = p:getShieldLevel(0)/p:getShieldMax(0)
						local rear_strength = p:getShieldLevel(1)/p:getShieldMax(1)
						if front_strength > rear_strength then
							if p.balance_shield_timer == nil then
								p.balance_shield_focus_rear_button_wea = "balance_shield_focus_rear_button_wea"
								p:addCustomButton("Weapons",p.balance_shield_focus_rear_button_wea,"Focus Rear Shield",function()
									local need_transfer = p:getShieldMax(1) - p:getShieldLevel(1)
									local get_transfer = math.min(need_transfer,p:getShieldLevel(0))
									p:setShields(p:getShieldLevel(0) - get_transfer,p:getShieldLevel(1) + get_transfer)
									p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
									p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
								end, 50)
								p.balance_shield_focus_rear_button_tac = "balance_shield_focus_rear_button_tac"
								p:addCustomButton("Tactical",p.balance_shield_focus_rear_button_tac,"Focus Rear Shield",function()
									local need_transfer = p:getShieldMax(1) - p:getShieldLevel(1)
									local get_transfer = math.min(need_transfer,p:getShieldLevel(0))
									p:setShields(p:getShieldLevel(0) - get_transfer,p:getShieldLevel(1) + get_transfer)
									p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
									p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
								end, 50)
							else
								if getScenarioTime() > p.balance_shield_timer then
									p.balance_shield_timer = nil
								end
							end
							if p.balance_shield_focus_front_button_wea ~= nil then
								p:removeCustom(p.balance_shield_focus_front_button_wea)
								p.balance_shield_focus_front_button_wea = nil
							end
							if p.balance_shield_focus_front_button_tac ~= nil then
								p:removeCustom(p.balance_shield_focus_front_button_tac)
								p.balance_shield_focus_front_button_tac = nil
							end
						elseif rear_strength > front_strength then
							if p.balance_shield_timer == nil then
								p.balance_shield_focus_front_button_wea = "balance_shield_focus_front_button_wea"
								p:addCustomButton("Weapons",p.balance_shield_focus_front_button_wea,"Focus Front Shield",function()
									local need_transfer = p:getShieldMax(0) - p:getShieldLevel(0)
									local get_transfer = math.min(need_transfer,p:getShieldLevel(1))
									p:setShields(p:getShieldLevel(0) + get_transfer,p:getShieldLevel(1) - get_transfer)
									p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
									p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
								end, 50)
								p.balance_shield_focus_front_button_tac = "balance_shield_focus_front_button_tac"
								p:addCustomButton("Tactical",p.balance_shield_focus_front_button_tac,"Focus Front Shield",function()
									local need_transfer = p:getShieldMax(0) - p:getShieldLevel(0)
									local get_transfer = math.min(need_transfer,p:getShieldLevel(1))
									p:setShields(p:getShieldLevel(0) + get_transfer,p:getShieldLevel(1) - get_transfer)
									p:setEnergy(p:getEnergy() - p:getMaxEnergy() * .05)
									p.balance_shield_timer = getScenarioTime() + p.balance_shield_cycle_interval
								end, 50)
							else
								if getScenarioTime() > p.balance_shield_timer then
									p.balance_shield_timer = nil
								end
							end
							if p.balance_shield_focus_rear_button_wea ~= nil then
								p:removeCustom(p.balance_shield_focus_rear_button_wea)
								p.balance_shield_focus_rear_button_wea = nil
							end
							if p.balance_shield_focus_rear_button_tac ~= nil then
								p:removeCustom(p.balance_shield_focus_rear_button_tac)
								p.balance_shield_focus_rear_button_tac = nil
							end
						end
					else
						removeBalanceShieldButtons(p)
					end
				else
					removeBalanceShieldButtons(p)
				end
			else
				removeBalanceShieldButtons(p)
			end
		else
			removeBalanceShieldButtons(p)
		end
	end
end
function updateJumpTrain()
	if #jump_train > 0 then
		for index, ship in ipairs(jump_train) do
			local px, py = ship:getPosition()
			if math.abs(px - ship.jump_corridor_x) < 5000 and math.abs(py - ship.jump_corridor_y) < 5000 then
				ship.move_test_count = ship.move_test_count + 1
				if ship.move_test_count > 5 then
					ship.move_test_count = nil
					ship.jump_corridor_x = nil
					ship.jump_corridor_y = nil
					table.remove(jump_train,index)
					break
				end
			else
				ship.move_test_count = 0
				ship:setPosition(ship.jump_corridor_x,ship.jump_corridor_y)
			end
		end
	else
		jump_train = nil
	end
end
function expeditedDockingServices()
	if expedite_dock_players ~= nil then
		local function removeTimer(p)
			if p.expedite_dock_time_msg_hlm ~= nil then
				p:removeCustom(p.expedite_dock_time_msg_hlm)
				p.expedite_dock_time_msg_hlm = nil
			end
			if p.expedite_dock_time_msg_tac ~= nil then
				p:removeCustom(p.expedite_dock_time_msg_tac)
				p.expedite_dock_time_msg_tac = nil
			end
		end
		for p,rest in pairs(expedite_dock_players) do
			if p:isValid() then
				if p.expedite_dock ~= nil then
					if p.expedite_dock.expire ~= nil then
						if getScenarioTime() > p.expedite_dock.expire then
							p.expedite_dock = nil
							removeTimer(p)
							expedite_dock_players[p] = nil
						else
							if p.expedite_dock.station ~= nil then
								if p.expedite_dock.station:isValid() then
									if p:isDocked(p.expedite_dock.station) then
										for service,val in pairs(p.expedite_dock) do
											if service == "energy" then
												p:setEnergyLevel(p:getEnergyLevelMax())
											elseif service == "hull" then
												p:setHull(p:getHullMax())
											elseif service == "probes" then
												p:setScanProbeCount(p:getScanProbeCount())
											elseif service == "nuke" then
												p:setWeaponStorage("Nuke",p:getWeaponStorage("Nuke") + val)
											elseif service == "homing" then
												p:setWeaponStorage("Homing",p:getWeaponStorage("Homing") + val)
											elseif service == "mine" then
												p:setWeaponStorage("Mine",p:getWeaponStorage("Mine") + val)
											elseif service == "emp" then
												p:setWeaponStorage("EMP",p:getWeaponStorage("EMP") + val)
											elseif service == "hvli" then
												p:setWeaponStorage("HVLI",p:getWeaponStorage("HVLI") + val)
											elseif service == "repair_crew" then
												p:setRepairCrewCount(p:getRepairCrewCount() + 1)
												p.expedite_dock.station.comms_data.available_repair_crew = p.expedite_dock.station.comms_data.available_repair_crew - 1
											elseif service == "coolant" then
												p:setMaxCoolant(p:getMaxCoolant() + 2)
												p.expedite_dock.station.comms_data.coolant_inventory = p.expedite_dock.station.comms_data.coolant_inventory - 2
											end
										end
										removeTimer(p)
										expedite_dock_players[p] = nil
										p.expedite_dock = nil
										p:addToShipLog(_("shipLog","Expedited docking services complete."),"Yellow")
									else
										local expedite_dock_timer = p.expedite_dock.expire - getScenarioTime()
										if expedite_dock_timer > 60 then
											local minutes = expedite_dock_timer / 60
											local seconds = expedite_dock_timer % 60
											expedite_dock_timer = string.format("%i:%.2i",math.floor(minutes),math.floor(seconds))
										else
											expedite_dock_timer = string.format("0:%.2i",math.floor(expedite_dock_timer))
										end
										local expedite_dock_banner = string.format(_("tabHelm","Dock@%s %s"),p.expedite_dock.station:getCallSign(),expedite_dock_timer)
										p.expedite_dock_time_msg_hlm = "expedite_dock_time_msg_hlm"
										p:addCustomInfo("Helms",p.expedite_dock_time_msg_hlm,expedite_dock_banner,50)
										p.expedite_dock_time_msg_tac = "expedite_dock_time_msg_tac"
										p:addCustomInfo("Tactical",p.expedite_dock_time_msg_tac,expedite_dock_banner,50)
									end
								else
									removeTimer(p)
									expedite_dock_players[p] = nil
									p.expedite_dock = nil
								end
							else
								removeTimer(p)
								expedite_dock_players[p] = nil
								p.expedite_dock = nil
							end
						end
					else
						removeTimer(p)
						expedite_dock_players[p] = nil
					end
				else
					removeTimer(p)
					expedite_dock_players[p] = nil
				end
			end
		end
	end
end
function updateImmobileStations()
	for index, station in ipairs(immobile_stations) do
		if station ~= nil and station:isValid() then
			if station.immobile_x == nil then
				station.immobile_x, station.immobile_y = station:getPosition()
			end
			station:setPosition(station.immobile_x,station.immobile_y)
		else
			immobile_stations[index] = immobile_stations[#immobile_stations]
			immobile_stations[#immobile_stations] = nil
			break
		end
	end
end
function updateShowMineBlob()
	if selected_mine_blob ~= nil then
		if selected_mine_blob.show_clock ~= nil then
			if selected_mine_blob[1] ~= nil then
				if selected_mine_blob[1]:isValid() then
					local elapsed_time = getScenarioTime() - selected_mine_blob.show_clock
					local mx, my = selected_mine_blob[1]:getPosition()
					if elapsed_time < 1 then
			--			print("Elapsed time < 1:",elapsed_time)
						if selected_mine_blob.zone == nil then
							selected_mine_blob.zone = Zone():setPoints(mx + selected_mine_blob.radius, my, mx, my + selected_mine_blob.radius, mx - selected_mine_blob.radius, my, mx, my - selected_mine_blob.radius)
			--				print("created zone:",selected_mine_blob.zone)
						end
					elseif elapsed_time < 2 then
			--			print("Elapsed time < 2:",elapsed_time)
						if selected_mine_blob.zone ~= nil then
			--				print("zone exists:",selected_mine_blob.zone)
							selected_mine_blob.zone:destroy()
			--				print("zone destroyed:",selected_mine_blob.zone)
							selected_mine_blob.zone = nil
						end
					elseif elapsed_time < 3 then
			--			print("Elapsed time < 3:",elapsed_time)
						if selected_mine_blob.zone == nil then
							selected_mine_blob.zone = Zone():setPoints(mx + selected_mine_blob.radius, my, mx, my + selected_mine_blob.radius, mx - selected_mine_blob.radius, my, mx, my - selected_mine_blob.radius)
			--				print("created zone:",selected_mine_blob.zone)
						end
					elseif elapsed_time < 4 then
			--			print("Elapsed time < 4:",elapsed_time)
						if selected_mine_blob.zone ~= nil then
			--				print("zone exists:",selected_mine_blob.zone)
							selected_mine_blob.zone:destroy()
			--				print("zone destroyed:",selected_mine_blob.zone)
							selected_mine_blob.zone = nil
						end
					elseif elapsed_time < 5 then
			--			print("Elapsed time < 5:",elapsed_time)
						if selected_mine_blob.zone == nil then
							selected_mine_blob.zone = Zone():setPoints(mx + selected_mine_blob.radius, my, mx, my + selected_mine_blob.radius, mx - selected_mine_blob.radius, my, mx, my - selected_mine_blob.radius)
			--				print("created zone:",selected_mine_blob.zone)
						end
					elseif elapsed_time < 6 then
			--			print("Elapsed time < 5:",elapsed_time)
						if selected_mine_blob.zone ~= nil then
			--				print("zone exists:",selected_mine_blob.zone)
							selected_mine_blob.zone:destroy()
			--				print("zone destroyed:",selected_mine_blob.zone)
							selected_mine_blob.zone = nil
							selected_mine_blob.show_clock = nil
						end
					end
				else
					print("first mine in selected blob is not valid")
				end
			end
		end
	end
end
function updateCommerce(assets,region_station)
	local display_region_station = "none (skeletal)"
	if region_station ~= nil then
		display_region_station = region_station:getCallSign()
	end
--	print("commerce timer expired:",display_region_station,"Count of assets:",#assets)
	if assets ~= nil then
		if #assets > 0 then
			for index, ship in ipairs(assets) do
				if ship ~= nil and ship:isValid() and ship.commerce_escort == nil then
--					print("Checking ship (not an escort):",ship:getCallSign())
					local docked_object = ship:getDockedWith()
					if docked_object ~= nil then
--						print("    Docked")
						if ship.commerce_target == docked_object then
							if region_station == nil then
								skeletalDestination(ship)
							else
								regionCommerceDestination(ship,region_station)
							end
						elseif ship.commerce_origin ~= docked_object then
							if region_station == nil then
								skeletalDestination(ship)
							else
								regionCommerceDestination(ship,region_station)
							end
						end
						ship:orderDock(ship.commerce_target)
					else	--not docked
--						print("    Not Docked")
						if not string.find(ship:getOrder(),"Dock") then
							if ship.commerce_target == nil then
								if region_station == nil then
									skeletalDestination(ship)
								else
									regionCommerceDestination(ship,region_station)
								end
							else
								if not ship.commerce_target:isValid() then
									if region_station == nil then
										skeletalDestination(ship)
									else
										regionCommerceDestination(ship,region_station)
									end
								end
							end
							ship:orderDock(ship.commerce_target)
						end	--of not ordered to dock
					end	--of not docked else branch
				end	--of ship is not nil and valid branch
			end	--of skeletal commerce asset loop
		end	--of zero item check branch
	end	--not nil commercial asset list check branch
end
function onError(error, errorTraceback)
	local err = "script error : - \n" .. error .. "\n\ntraceback :-\n" .. errorTraceback
	print(err)
	addGMMessage(err)
end
errorHandling:wrapAllFunctions(onError)